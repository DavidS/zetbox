// <autogenerated/>

namespace Kistl.App.Base
{
    using System;
    using System.Collections.Generic;

    using Kistl.API;

    /// <summary>
    /// Metadefinition Object for ObjectClasses.
    /// </summary>
    public interface ObjectClass : Kistl.App.Base.DataType 
    {

        /// <summary>
        /// 
        /// </summary>

        ICollection<Kistl.App.Base.AccessControl> AccessControlList { get; }
        /// <summary>
        /// Pointer auf die Basisklasse
        /// </summary>
		Kistl.App.Base.ObjectClass BaseObjectClass {
			get;
			set;
		}
        /// <summary>
        /// 
        /// </summary>

        ICollection<Kistl.App.Base.InstanceConstraint> Constraints { get; }
        /// <summary>
        /// The default PresentableModel to use for this ObjectClass
        /// </summary>
		Kistl.App.GUI.PresentableModelDescriptor DefaultPresentableModelDescriptor {
			get;
			set;
		}
        /// <summary>
        /// Interfaces der Objektklasse
        /// </summary>

        ICollection<Kistl.App.Base.Interface> ImplementsInterfaces { get; }
        /// <summary>
        /// Class is abstract
        /// </summary>
		bool IsAbstract {
			get;
			set;
		}
        /// <summary>
        /// if true then all Instances appear in FozenContext.
        /// </summary>
		bool IsFrozenObject {
			get;
			set;
		}
        /// <summary>
        /// Setting this to true marks the instances of this class as &quot;simple.&quot; At first this will only mean that they'll be displayed inline.
        /// </summary>
		bool IsSimpleObject {
			get;
			set;
		}
        /// <summary>
        /// Liste der vererbten Klassen
        /// </summary>

        ICollection<Kistl.App.Base.ObjectClass> SubClasses { get; }
        /// <summary>
        /// Tabellenname in der Datenbank
        /// </summary>
		string TableName {
			get;
			set;
		}
        /// <summary>
        /// Creates, if needed, all default  Methods
        /// </summary>
		 void CreateDefaultMethods() ;
        /// <summary>
        /// Creates a new Method for this class
        /// </summary>
		 Kistl.App.Base.Method CreateMethod() ;
        /// <summary>
        /// Implements the "Create new Relation" use case
        /// </summary>
		 Kistl.App.Base.Relation CreateRelation() ;
        /// <summary>
        /// 
        /// </summary>
		 IList<Kistl.App.Base.Method> GetInheritedMethods() ;
        /// <summary>
        /// Implements all available interfaces as Properties and Methods
        /// </summary>
		 void ImplementInterfaces() ;
    }
}