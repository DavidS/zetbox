// <autogenerated/>

namespace Kistl.App.GUI
{
    using System;
    using System.Collections.Generic;

    using Kistl.API;

    /// <summary>
    /// 
    /// </summary>
    public interface ViewModelDescriptor : IDataObject, Kistl.App.Base.IExportable, Kistl.App.Base.IModuleMember 
    {

        /// <summary>
        /// The default ControlKind to use for displaying this Presentable readonly. Defaults to DefaultKind with editing disabled.
        /// </summary>
        Kistl.App.GUI.ControlKind DefaultDisplayKind {
            get;
            set;
        }

        /// <summary>
        /// The default ControlKind to use for this Presentable.
        /// </summary>
        Kistl.App.GUI.ControlKind DefaultEditorKind {
            get;
            set;
        }

        /// <summary>
        /// The default ControlKind to use for displaying this Presentable readonly in a GridCell. Defaults to DefaultDisplayKind.
        /// </summary>
        Kistl.App.GUI.ControlKind DefaultGridCellDisplayKind {
            get;
            set;
        }

        /// <summary>
        /// The default ControlKind for displaying this model in a GridCell in editing mode. Defaults to DefaultKind.
        /// </summary>
        Kistl.App.GUI.ControlKind DefaultGridCellEditorKind {
            get;
            set;
        }

        /// <summary>
        /// .The default ControlKind for displaying this model in a GridCell befor editing starts. Defaults to DefaultGridCellDisplayKind.
        /// </summary>
        Kistl.App.GUI.ControlKind DefaultGridCellPreEditorKind {
            get;
            set;
        }

        /// <summary>
        /// describe this ViewModel
        /// </summary>
        string Description {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>

        ICollection<Kistl.App.GUI.ControlKind> SecondaryControlKinds { get; }

        /// <summary>
        /// The described CLR class&amp;apos; reference
        /// </summary>
        Kistl.App.Base.TypeRef ViewModelRef {
            get;
            set;
        }
    }
}
