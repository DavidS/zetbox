// <autogenerated/>

namespace Kistl.App.Calendar
{
    using System;
    using System.Collections.Generic;

    using Kistl.API;

    /// <summary>
    /// Abstract base class for Calendar Rules describing recurrent working hours
    /// </summary>
    public interface CalendarRule : IDataObject, Kistl.App.Base.IChangedBy, Kistl.App.Base.IExportable, Kistl.App.Base.IModuleMember 
    {

        /// <summary>
        /// 
        /// </summary>
        Kistl.App.Calendar.Calendar Calendar {
            get;
            set;
        }

        /// <summary>
        /// True if the day is a working day, regardless of the working hours. E.g. Saturday is a working day (in Austria), but most people aktually don&apos;t work.
        /// </summary>
        bool IsWorkingDay {
            get;
            set;
        }

        /// <summary>
        /// The name of the Rule
        /// </summary>
        string Name {
            get;
            set;
        }

        /// <summary>
        /// Optional valid from date
        /// </summary>
        DateTime? ValidFrom {
            get;
            set;
        }

        /// <summary>
        /// Optional valid until date
        /// </summary>
        DateTime? ValidUntil {
            get;
            set;
        }

        /// <summary>
        /// The amount of working hours. 0 if it&apos;s a free day.
        /// </summary>
        decimal WorkingHours {
            get;
            set;
        }

        /// <summary>
        /// Checks if the Rule applies to the given date
        /// </summary>
        bool AppliesTo(System.DateTime date);
    }
}
