// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.Memory;

    /// <summary>
    /// A struct holding a OpenID
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("OpenID")]
    public class OpenIDMemoryImpl : CompoundObjectDefaultImpl, ICompoundObject, OpenID
    {
        private static readonly Guid _compoundObjectID = new Guid("7735329d-a002-4e58-8a5e-87378b0c8b27");
        public override Guid CompoundObjectID { get { return _compoundObjectID; } }

        [Obsolete]
        public OpenIDMemoryImpl()
            : base(null)
        {
        }

        public OpenIDMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        public OpenIDMemoryImpl(IPersistenceObject parent, string property) : this(null, parent, property) {} // TODO: pass parent's lazyCtx
        public OpenIDMemoryImpl(Func<IFrozenContext> lazyCtx, IPersistenceObject parent, string property)
            : base(lazyCtx)
        {
            AttachToObject(parent, property);
        }

        /// <summary>
        /// OpenID Provider
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Provider
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Provider;
                if (OnProvider_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnProvider_Getter(this, __e);
                    __result = _Provider = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Provider != value)
                {
                    var __oldValue = _Provider;
                    var __newValue = value;
                    if (OnProvider_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnProvider_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Provider", __oldValue, __newValue);
                    _Provider = __newValue;
                    NotifyPropertyChanged("Provider", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnProvider_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnProvider_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Provider");
                }
            }
        }
        private string _Provider;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.OpenID, string> OnProvider_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.OpenID, string> OnProvider_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.OpenID, string> OnProvider_PostSetter;

        /// <summary>
        /// The User ID part of the OpenID
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string UserID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _UserID;
                if (OnUserID_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnUserID_Getter(this, __e);
                    __result = _UserID = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_UserID != value)
                {
                    var __oldValue = _UserID;
                    var __newValue = value;
                    if (OnUserID_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnUserID_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("UserID", __oldValue, __newValue);
                    _UserID = __newValue;
                    NotifyPropertyChanged("UserID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnUserID_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnUserID_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("UserID");
                }
            }
        }
        private string _UserID;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.OpenID, string> OnUserID_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.OpenID, string> OnUserID_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.OpenID, string> OnUserID_PostSetter;

        public override Type GetImplementedInterface()
        {
            return typeof(OpenID);
        }

        public override void ApplyChangesFrom(ICompoundObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (OpenID)obj;
            var otherImpl = (OpenIDMemoryImpl)obj;
            var me = (OpenID)this;

            me.Provider = other.Provider;
            me.UserID = other.UserID;
        }
        #region Zetbox.Generator.Templates.CompoundObjects.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_OpenID")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_OpenID != null)
            {
                OnToString_OpenID(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<OpenID> OnToString_OpenID;

		[System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_OpenID")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
			var b = base.ObjectIsValid();
            e.IsValid = b.IsValid;
			e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_OpenID != null)
            {
                OnObjectIsValid_OpenID(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<OpenID> OnObjectIsValid_OpenID;

        #endregion // Zetbox.Generator.Templates.CompoundObjects.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._Provider);
            binStream.Write(this._UserID);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._Provider = binStream.ReadString();
            this._UserID = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            base.Export(xml, modules);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._Provider, xml, "Provider", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._UserID, xml, "UserID", "Zetbox.App.Base");
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            base.MergeImport(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|Provider":
                this._Provider = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|UserID":
                this._UserID = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

    }
}