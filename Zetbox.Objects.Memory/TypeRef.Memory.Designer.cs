// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.Memory;

    /// <summary>
    /// This class models a reference to a specific, concrete Type. Generic Types have all parameters filled.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("TypeRef")]
    public class TypeRefMemoryImpl : Zetbox.DalProvider.Memory.DataObjectMemoryImpl, TypeRef, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("87766ae2-89a4-4c37-ab25-583a710c55e5");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public TypeRefMemoryImpl()
            : base(null)
        {
        }

        public TypeRefMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// The assembly containing the referenced Type.
        /// </summary>
	        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Assembly
        // fkBackingName=_fk_Assembly; fkGuidBackingName=_fk_guid_Assembly;
        // referencedInterface=Zetbox.App.Base.Assembly; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Assembly Assembly
        {
            get { return AssemblyImpl; }
            set { AssemblyImpl = (Zetbox.App.Base.AssemblyMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_Assembly;

        private Guid? _fk_guid_Assembly = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Assembly> _triggerFetchAssemblyTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Assembly> TriggerFetchAssemblyAsync()
        {
            if (_triggerFetchAssemblyTask != null) return _triggerFetchAssemblyTask;

            if (_fk_Assembly.HasValue)
                _triggerFetchAssemblyTask = Context.FindAsync<Zetbox.App.Base.Assembly>(_fk_Assembly.Value);
            else
                _triggerFetchAssemblyTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Assembly>(null, () => null);

            _triggerFetchAssemblyTask.OnResult(t =>
            {
                if (OnAssembly_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Assembly>(t.Result);
                    OnAssembly_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchAssemblyTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.AssemblyMemoryImpl AssemblyImpl
        {
            get
            {
                var t = TriggerFetchAssemblyAsync();
                t.Wait();
                return (Zetbox.App.Base.AssemblyMemoryImpl)t.Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_Assembly == null) || (value != null && value.ID == _fk_Assembly))
				{
					SetInitializedProperty("Assembly");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = AssemblyImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Assembly", __oldValue, __newValue);

                if (OnAssembly_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Assembly>(__oldValue, __newValue);
                    OnAssembly_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.AssemblyMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_Assembly = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Assembly", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnAssembly_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Assembly>(__oldValue, __newValue);
                    OnAssembly_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Assembly
		public static event PropertyGetterHandler<Zetbox.App.Base.TypeRef, Zetbox.App.Base.Assembly> OnAssembly_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.TypeRef, Zetbox.App.Base.Assembly> OnAssembly_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.TypeRef, Zetbox.App.Base.Assembly> OnAssembly_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.TypeRef> OnAssembly_IsValid;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
	        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_ChangedBy;


        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> _triggerFetchChangedByTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> TriggerFetchChangedByAsync()
        {
            if (_triggerFetchChangedByTask != null) return _triggerFetchChangedByTask;

            if (_fk_ChangedBy.HasValue)
                _triggerFetchChangedByTask = Context.FindAsync<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                _triggerFetchChangedByTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(null, () => null);

            _triggerFetchChangedByTask.OnResult(t =>
            {
                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(t.Result);
                    OnChangedBy_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchChangedByTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.IdentityMemoryImpl ChangedByImpl
        {
            get
            {
                var t = TriggerFetchChangedByAsync();
                t.Wait();
                return (Zetbox.App.Base.IdentityMemoryImpl)t.Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_ChangedBy == null) || (value != null && value.ID == _fk_ChangedBy))
				{
					SetInitializedProperty("ChangedBy");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = ChangedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_ChangedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.Base.TypeRef, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.TypeRef, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.TypeRef, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.TypeRef> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("e6dcca07-a7f3-4ca7-9763-95e1124ffb25"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'TypeRef.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = _ChangedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ChangedOn");
				}
            }
        }
        private DateTime _ChangedOn;
        private bool _isChangedOnSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.TypeRef, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.TypeRef, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.TypeRef, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.TypeRef> OnChangedOn_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
	        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_CreatedBy;


        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> _triggerFetchCreatedByTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> TriggerFetchCreatedByAsync()
        {
            if (_triggerFetchCreatedByTask != null) return _triggerFetchCreatedByTask;

            if (_fk_CreatedBy.HasValue)
                _triggerFetchCreatedByTask = Context.FindAsync<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                _triggerFetchCreatedByTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(null, () => null);

            _triggerFetchCreatedByTask.OnResult(t =>
            {
                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(t.Result);
                    OnCreatedBy_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchCreatedByTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.IdentityMemoryImpl CreatedByImpl
        {
            get
            {
                var t = TriggerFetchCreatedByAsync();
                t.Wait();
                return (Zetbox.App.Base.IdentityMemoryImpl)t.Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_CreatedBy == null) || (value != null && value.ID == _fk_CreatedBy))
				{
					SetInitializedProperty("CreatedBy");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = CreatedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_CreatedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.Base.TypeRef, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.TypeRef, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.TypeRef, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.TypeRef> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("d769345e-341e-488d-90c3-821a8b35b4f7"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'TypeRef.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = _CreatedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("CreatedOn");
				}
            }
        }
        private DateTime _CreatedOn;
        private bool _isCreatedOnSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.TypeRef, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.TypeRef, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.TypeRef, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.TypeRef> OnCreatedOn_IsValid;

        /// <summary>
        /// If the TypeRef could not be found in the containing assembly this property is set to true, otherwise to null
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool? Deleted
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Deleted;
                if (OnDeleted_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnDeleted_Getter(this, __e);
                    __result = _Deleted = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Deleted != value)
                {
                    var __oldValue = _Deleted;
                    var __newValue = value;
                    if (OnDeleted_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnDeleted_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Deleted", __oldValue, __newValue);
                    _Deleted = __newValue;
                    NotifyPropertyChanged("Deleted", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDeleted_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnDeleted_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("Deleted");
				}
            }
        }
        private bool? _Deleted;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.TypeRef, bool?> OnDeleted_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.TypeRef, bool?> OnDeleted_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.TypeRef, bool?> OnDeleted_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.TypeRef> OnDeleted_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("48430be7-e17f-48ad-ac8b-7f9cb5341318"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'TypeRef.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = _ExportGuid = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }
        private Guid _ExportGuid;
        private bool _isExportGuidSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.TypeRef, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.TypeRef, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.TypeRef, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.TypeRef> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string FullName
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _FullName;
                if (OnFullName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnFullName_Getter(this, __e);
                    __result = _FullName = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_FullName != value)
                {
                    var __oldValue = _FullName;
                    var __newValue = value;
                    if (OnFullName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnFullName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("FullName", __oldValue, __newValue);
                    _FullName = __newValue;
                    NotifyPropertyChanged("FullName", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnFullName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnFullName_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("FullName");
				}
            }
        }
        private string _FullName;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.TypeRef, string> OnFullName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.TypeRef, string> OnFullName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.TypeRef, string> OnFullName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.TypeRef> OnFullName_IsValid;

        /// <summary>
        /// list of type arguments
        /// </summary>
        // collection entry list property
   		// Zetbox.Generator.Templates.Properties.CollectionEntryListProperty
		public IList<Zetbox.App.Base.TypeRef> GenericArguments
		{
			get
			{
				if (_GenericArguments == null)
				{
                    TriggerFetchGenericArgumentsAsync().Wait();
				}
				return (IList<Zetbox.App.Base.TypeRef>)_GenericArguments;
			}
		}
        
        Zetbox.API.Async.ZbTask _triggerFetchGenericArgumentsTask;
        public Zetbox.API.Async.ZbTask TriggerFetchGenericArgumentsAsync()
        {
            if (_triggerFetchGenericArgumentsTask != null) return _triggerFetchGenericArgumentsTask;
			if (!GenericArguments_was_eagerLoaded) _triggerFetchGenericArgumentsTask = Context.FetchRelationAsync<Zetbox.App.Base.TypeRef_hasGenericArguments_TypeRef_RelationEntryMemoryImpl>(new Guid("8b41ffa4-8ffa-4d96-b4e5-708188045c71"), RelationEndRole.A, this);
            else _triggerFetchGenericArgumentsTask = new Zetbox.API.Async.ZbTask(null, () => { });
			_triggerFetchGenericArgumentsTask.OnResult(r => 
            {
                _GenericArguments 
				= new ObservableBSideListWrapper<Zetbox.App.Base.TypeRef, Zetbox.App.Base.TypeRef, Zetbox.App.Base.TypeRef_hasGenericArguments_TypeRef_RelationEntryMemoryImpl, ICollection<Zetbox.App.Base.TypeRef_hasGenericArguments_TypeRef_RelationEntryMemoryImpl>>(
					this, 
					new RelationshipFilterASideCollection<Zetbox.App.Base.TypeRef_hasGenericArguments_TypeRef_RelationEntryMemoryImpl>(this.Context, this));
            });
            return _triggerFetchGenericArgumentsTask;
        }

		private ObservableBSideListWrapper<Zetbox.App.Base.TypeRef, Zetbox.App.Base.TypeRef, Zetbox.App.Base.TypeRef_hasGenericArguments_TypeRef_RelationEntryMemoryImpl, ICollection<Zetbox.App.Base.TypeRef_hasGenericArguments_TypeRef_RelationEntryMemoryImpl>> _GenericArguments;
		
		private bool GenericArguments_was_eagerLoaded = false;

        public static event PropertyIsValidHandler<Zetbox.App.Base.TypeRef> OnGenericArguments_IsValid;

        /// <summary>
        /// The TypeRef of the BaseClass of the referenced Type
        /// </summary>
	        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // fkBackingName=_fk_Parent; fkGuidBackingName=_fk_guid_Parent;
        // referencedInterface=Zetbox.App.Base.TypeRef; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.TypeRef Parent
        {
            get { return ParentImpl; }
            set { ParentImpl = (Zetbox.App.Base.TypeRefMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_Parent;

        private Guid? _fk_guid_Parent = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.Base.TypeRef> _triggerFetchParentTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.TypeRef> TriggerFetchParentAsync()
        {
            if (_triggerFetchParentTask != null) return _triggerFetchParentTask;

            if (_fk_Parent.HasValue)
                _triggerFetchParentTask = Context.FindAsync<Zetbox.App.Base.TypeRef>(_fk_Parent.Value);
            else
                _triggerFetchParentTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.TypeRef>(null, () => null);

            _triggerFetchParentTask.OnResult(t =>
            {
                if (OnParent_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.TypeRef>(t.Result);
                    OnParent_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchParentTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.TypeRefMemoryImpl ParentImpl
        {
            get
            {
                var t = TriggerFetchParentAsync();
                t.Wait();
                return (Zetbox.App.Base.TypeRefMemoryImpl)t.Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_Parent == null) || (value != null && value.ID == _fk_Parent))
				{
					SetInitializedProperty("Parent");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = ParentImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Parent", __oldValue, __newValue);

                if (OnParent_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.TypeRef>(__oldValue, __newValue);
                    OnParent_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.TypeRefMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_Parent = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Parent", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnParent_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.TypeRef>(__oldValue, __newValue);
                    OnParent_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
		public static event PropertyGetterHandler<Zetbox.App.Base.TypeRef, Zetbox.App.Base.TypeRef> OnParent_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.TypeRef, Zetbox.App.Base.TypeRef> OnParent_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.TypeRef, Zetbox.App.Base.TypeRef> OnParent_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.TypeRef> OnParent_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string ToStringCache
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ToStringCache;
                if (OnToStringCache_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnToStringCache_Getter(this, __e);
                    __result = _ToStringCache = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ToStringCache != value)
                {
                    var __oldValue = _ToStringCache;
                    var __newValue = value;
                    if (OnToStringCache_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnToStringCache_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ToStringCache", __oldValue, __newValue);
                    _ToStringCache = __newValue;
                    NotifyPropertyChanged("ToStringCache", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnToStringCache_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnToStringCache_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ToStringCache");
				}
            }
        }
        private string _ToStringCache;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.TypeRef, string> OnToStringCache_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.TypeRef, string> OnToStringCache_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.TypeRef, string> OnToStringCache_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.TypeRef> OnToStringCache_IsValid;

        /// <summary>
        /// get the referenced &lt;see cref=&quot;Type&quot;/&gt;
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnAsType_TypeRef")]
        public virtual System.Type AsType(bool throwOnError)
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnAsType_TypeRef != null)
            {
                OnAsType_TypeRef(this, e, throwOnError);
            }
            else
            {
                throw new NotImplementedException("No handler registered on TypeRef.AsType");
            }
            return e.Result;
        }
        public delegate void AsType_Handler<T>(T obj, MethodReturnEventArgs<System.Type> ret, bool throwOnError);
        public static event AsType_Handler<TypeRef> OnAsType_TypeRef;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<TypeRef> OnAsType_TypeRef_CanExec;

        [EventBasedMethod("OnAsType_TypeRef_CanExec")]
        public virtual bool AsTypeCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnAsType_TypeRef_CanExec != null)
				{
					OnAsType_TypeRef_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<TypeRef> OnAsType_TypeRef_CanExecReason;

        [EventBasedMethod("OnAsType_TypeRef_CanExecReason")]
        public virtual string AsTypeCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnAsType_TypeRef_CanExecReason != null)
				{
					OnAsType_TypeRef_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnToTypeName_TypeRef")]
        public virtual string ToTypeName()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnToTypeName_TypeRef != null)
            {
                OnToTypeName_TypeRef(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on TypeRef.ToTypeName");
            }
            return e.Result;
        }
        public delegate void ToTypeName_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event ToTypeName_Handler<TypeRef> OnToTypeName_TypeRef;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<TypeRef> OnToTypeName_TypeRef_CanExec;

        [EventBasedMethod("OnToTypeName_TypeRef_CanExec")]
        public virtual bool ToTypeNameCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnToTypeName_TypeRef_CanExec != null)
				{
					OnToTypeName_TypeRef_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<TypeRef> OnToTypeName_TypeRef_CanExecReason;

        [EventBasedMethod("OnToTypeName_TypeRef_CanExecReason")]
        public virtual string ToTypeNameCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnToTypeName_TypeRef_CanExecReason != null)
				{
					OnToTypeName_TypeRef_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Update the Parent property to the currently loaded assemblies&apos; state
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnUpdateParent_TypeRef")]
        public virtual void UpdateParent()
        {
            // base.UpdateParent();
            if (OnUpdateParent_TypeRef != null)
            {
                OnUpdateParent_TypeRef(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method TypeRef.UpdateParent");
            }
        }
        public delegate void UpdateParent_Handler<T>(T obj);
        public static event UpdateParent_Handler<TypeRef> OnUpdateParent_TypeRef;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<TypeRef> OnUpdateParent_TypeRef_CanExec;

        [EventBasedMethod("OnUpdateParent_TypeRef_CanExec")]
        public virtual bool UpdateParentCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnUpdateParent_TypeRef_CanExec != null)
				{
					OnUpdateParent_TypeRef_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<TypeRef> OnUpdateParent_TypeRef_CanExecReason;

        [EventBasedMethod("OnUpdateParent_TypeRef_CanExecReason")]
        public virtual string UpdateParentCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnUpdateParent_TypeRef_CanExecReason != null)
				{
					OnUpdateParent_TypeRef_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnUpdateToStringCache_TypeRef")]
        public virtual void UpdateToStringCache()
        {
            // base.UpdateToStringCache();
            if (OnUpdateToStringCache_TypeRef != null)
            {
                OnUpdateToStringCache_TypeRef(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method TypeRef.UpdateToStringCache");
            }
        }
        public delegate void UpdateToStringCache_Handler<T>(T obj);
        public static event UpdateToStringCache_Handler<TypeRef> OnUpdateToStringCache_TypeRef;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<TypeRef> OnUpdateToStringCache_TypeRef_CanExec;

        [EventBasedMethod("OnUpdateToStringCache_TypeRef_CanExec")]
        public virtual bool UpdateToStringCacheCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnUpdateToStringCache_TypeRef_CanExec != null)
				{
					OnUpdateToStringCache_TypeRef_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<TypeRef> OnUpdateToStringCache_TypeRef_CanExecReason;

        [EventBasedMethod("OnUpdateToStringCache_TypeRef_CanExecReason")]
        public virtual string UpdateToStringCacheCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnUpdateToStringCache_TypeRef_CanExecReason != null)
				{
					OnUpdateToStringCache_TypeRef_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(TypeRef);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (TypeRef)obj;
            var otherImpl = (TypeRefMemoryImpl)obj;
            var me = (TypeRef)this;

            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.Deleted = other.Deleted;
            me.ExportGuid = other.ExportGuid;
            me.FullName = other.FullName;
            me.ToStringCache = other.ToStringCache;
            this._fk_Assembly = otherImpl._fk_Assembly;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_Parent = otherImpl._fk_Parent;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "Assembly":
                    {
                        var __oldValue = _fk_Assembly;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("Assembly", __oldValue, __newValue);
                        _fk_Assembly = __newValue;
                        NotifyPropertyChanged("Assembly", __oldValue, __newValue);
                    }
                    break;
                case "ChangedBy":
                    {
                        var __oldValue = _fk_ChangedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        _fk_ChangedBy = __newValue;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = _fk_CreatedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        _fk_CreatedBy = __newValue;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                case "Parent":
                    {
                        var __oldValue = _fk_Parent;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("Parent", __oldValue, __newValue);
                        _fk_Parent = __newValue;
                        NotifyPropertyChanged("Parent", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "Assembly":
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "Deleted":
                case "ExportGuid":
                case "FullName":
                case "Parent":
                case "ToStringCache":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "GenericArguments":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_Assembly.HasValue)
                AssemblyImpl = (Zetbox.App.Base.AssemblyMemoryImpl)Context.FindPersistenceObject<Zetbox.App.Base.Assembly>(_fk_guid_Assembly.Value);
            else
            if (_fk_Assembly.HasValue)
                AssemblyImpl = (Zetbox.App.Base.AssemblyMemoryImpl)Context.Find<Zetbox.App.Base.Assembly>(_fk_Assembly.Value);
            else
                AssemblyImpl = null;

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;

            if (_fk_guid_Parent.HasValue)
                ParentImpl = (Zetbox.App.Base.TypeRefMemoryImpl)Context.FindPersistenceObject<Zetbox.App.Base.TypeRef>(_fk_guid_Parent.Value);
            else
            if (_fk_Parent.HasValue)
                ParentImpl = (Zetbox.App.Base.TypeRefMemoryImpl)Context.Find<Zetbox.App.Base.TypeRef>(_fk_Parent.Value);
            else
                ParentImpl = null;
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorMemoryImpl<TypeRef, Zetbox.App.Base.Assembly>(
                        lazyCtx,
                        new Guid("885bfa97-3d43-48bb-a0aa-1049298714ff"),
                        "Assembly",
                        null,
                        obj => obj.Assembly,
                        (obj, val) => obj.Assembly = val,
						obj => OnAssembly_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<TypeRef, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("eaca4d2e-f9e9-4328-92fc-20ba96f59933"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<TypeRef, DateTime>(
                        lazyCtx,
                        new Guid("e6dcca07-a7f3-4ca7-9763-95e1124ffb25"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<TypeRef, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("8e862e5e-bc66-479a-9482-edd3a3355db3"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<TypeRef, DateTime>(
                        lazyCtx,
                        new Guid("d769345e-341e-488d-90c3-821a8b35b4f7"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<TypeRef, bool?>(
                        lazyCtx,
                        new Guid("aa1a4c98-2ae0-45d9-a343-7db43ca6430e"),
                        "Deleted",
                        null,
                        obj => obj.Deleted,
                        (obj, val) => obj.Deleted = val,
						obj => OnDeleted_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<TypeRef, Guid>(
                        lazyCtx,
                        new Guid("48430be7-e17f-48ad-ac8b-7f9cb5341318"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<TypeRef, string>(
                        lazyCtx,
                        new Guid("e418e513-e623-4a8f-bcbd-8572a29b7c82"),
                        "FullName",
                        null,
                        obj => obj.FullName,
                        (obj, val) => obj.FullName = val,
						obj => OnFullName_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<TypeRef, IList<Zetbox.App.Base.TypeRef>>(
                        lazyCtx,
                        new Guid("443e3370-b1f4-46e8-9779-1a8d9ba1c8a6"),
                        "GenericArguments",
                        null,
                        obj => obj.GenericArguments,
                        null, // lists are read-only properties
                        obj => OnGenericArguments_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<TypeRef, Zetbox.App.Base.TypeRef>(
                        lazyCtx,
                        new Guid("f7ed21a0-9a41-40eb-b3ab-b35591f2edd7"),
                        "Parent",
                        null,
                        obj => obj.Parent,
                        (obj, val) => obj.Parent = val,
						obj => OnParent_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<TypeRef, string>(
                        lazyCtx,
                        new Guid("7887ad1c-654c-46fb-b7eb-bde9de04184a"),
                        "ToStringCache",
                        null,
                        obj => obj.ToStringCache,
                        (obj, val) => obj.ToStringCache = val,
						obj => OnToStringCache_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_TypeRef")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_TypeRef != null)
            {
                OnToString_TypeRef(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<TypeRef> OnToString_TypeRef;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_TypeRef")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.IsValid = b.IsValid;
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_TypeRef != null)
            {
                OnObjectIsValid_TypeRef(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<TypeRef> OnObjectIsValid_TypeRef;

        [EventBasedMethod("OnNotifyPreSave_TypeRef")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_TypeRef != null) OnNotifyPreSave_TypeRef(this);
        }
        public static event ObjectEventHandler<TypeRef> OnNotifyPreSave_TypeRef;

        [EventBasedMethod("OnNotifyPostSave_TypeRef")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_TypeRef != null) OnNotifyPostSave_TypeRef(this);
        }
        public static event ObjectEventHandler<TypeRef> OnNotifyPostSave_TypeRef;

        [EventBasedMethod("OnNotifyCreated_TypeRef")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("Assembly");
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("Deleted");
            SetNotInitializedProperty("FullName");
            SetNotInitializedProperty("Parent");
            SetNotInitializedProperty("ToStringCache");
            base.NotifyCreated();
            if (OnNotifyCreated_TypeRef != null) OnNotifyCreated_TypeRef(this);
        }
        public static event ObjectEventHandler<TypeRef> OnNotifyCreated_TypeRef;

        [EventBasedMethod("OnNotifyDeleting_TypeRef")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_TypeRef != null) OnNotifyDeleting_TypeRef(this);
            GenericArguments.Clear();
            ChangedBy = null;
            CreatedBy = null;
            Parent = null;
        }
        public static event ObjectEventHandler<TypeRef> OnNotifyDeleting_TypeRef;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(Assembly != null ? Assembly.ID : (int?)null);
            binStream.Write(ChangedBy != null ? ChangedBy.ID : (int?)null);
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this._ChangedOn);
            }
            binStream.Write(CreatedBy != null ? CreatedBy.ID : (int?)null);
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this._CreatedOn);
            }
            binStream.Write(this._Deleted);
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this._ExportGuid);
            }
            binStream.Write(this._FullName);

            binStream.Write(eagerLoadLists);
            if (eagerLoadLists && auxObjects != null)
            {
                foreach(var obj in GenericArguments)
                {
                    auxObjects.Add(obj);
                }
            }
            binStream.Write(Parent != null ? Parent.ID : (int?)null);
            binStream.Write(this._ToStringCache);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._fk_Assembly = binStream.ReadNullableInt32();
            this._fk_ChangedBy = binStream.ReadNullableInt32();
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this._ChangedOn = binStream.ReadDateTime();
            }
            this._fk_CreatedBy = binStream.ReadNullableInt32();
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this._CreatedOn = binStream.ReadDateTime();
            }
            this._Deleted = binStream.ReadNullableBoolean();
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this._ExportGuid = binStream.ReadGuid();
            }
            this._FullName = binStream.ReadString();

            GenericArguments_was_eagerLoaded = binStream.ReadBoolean();
            this._fk_Parent = binStream.ReadNullableInt32();
            this._ToStringCache = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(Assembly != null ? Assembly.ExportGuid : (Guid?)null, xml, "Assembly", "Zetbox.App.Base");
            System.Diagnostics.Debug.Assert(this._isChangedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Zetbox.App.Base");
            System.Diagnostics.Debug.Assert(this._isCreatedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._Deleted, xml, "Deleted", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._FullName, xml, "FullName", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(Parent != null ? Parent.ExportGuid : (Guid?)null, xml, "Parent", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._ToStringCache, xml, "ToStringCache", "Zetbox.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|Assembly":
                this._fk_guid_Assembly = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|ChangedOn":
                // Import must have default value set
                this._ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.Base|CreatedOn":
                // Import must have default value set
                this._CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.Base|Deleted":
                this._Deleted = XmlStreamer.ReadNullableBoolean(xml);
                break;
            case "Zetbox.App.Base|ExportGuid":
                // Import must have default value set
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.Base|FullName":
                this._FullName = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|Parent":
                this._fk_guid_Parent = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|ToStringCache":
                this._ToStringCache = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

    }
}