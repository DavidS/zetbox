// <autogenerated/>

namespace Zetbox.App.GUI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.Memory;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("ViewModelDescriptor")]
    public class ViewModelDescriptorMemoryImpl : Zetbox.DalProvider.Memory.DataObjectMemoryImpl, ViewModelDescriptor, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("5d152c6f-6c1e-48b7-b03e-669e30468808");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public ViewModelDescriptorMemoryImpl()
            : base(null)
        {
        }

        public ViewModelDescriptorMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// The default ControlKind to use for displaying this Presentable readonly. Defaults to DefaultKind with editing disabled.
        /// </summary>
	        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultDisplayKind
        // fkBackingName=_fk_DefaultDisplayKind; fkGuidBackingName=_fk_guid_DefaultDisplayKind;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.GUI.ControlKind DefaultDisplayKind
        {
            get { return DefaultDisplayKindImpl; }
            set { DefaultDisplayKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_DefaultDisplayKind;

        private Guid? _fk_guid_DefaultDisplayKind = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.GUI.ControlKindMemoryImpl DefaultDisplayKindImpl
        {
            get
            {
                Zetbox.App.GUI.ControlKindMemoryImpl __value;
                if (_fk_DefaultDisplayKind.HasValue)
                    __value = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_DefaultDisplayKind.Value);
                else
                    __value = null;

                if (OnDefaultDisplayKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ControlKind>(__value);
                    OnDefaultDisplayKind_Getter(this, e);
                    __value = (Zetbox.App.GUI.ControlKindMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_DefaultDisplayKind == null) || (value != null && value.ID == _fk_DefaultDisplayKind))
				{
					SetInitializedProperty("DefaultDisplayKind");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = DefaultDisplayKindImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultDisplayKind", __oldValue, __newValue);

                if (OnDefaultDisplayKind_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultDisplayKind_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ControlKindMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_DefaultDisplayKind = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultDisplayKind", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnDefaultDisplayKind_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultDisplayKind_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultDisplayKind
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultDisplayKind_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultDisplayKind_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultDisplayKind_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnDefaultDisplayKind_IsValid;

        /// <summary>
        /// The default ControlKind to use for this Presentable.
        /// </summary>
	        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultEditorKind
        // fkBackingName=_fk_DefaultEditorKind; fkGuidBackingName=_fk_guid_DefaultEditorKind;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.GUI.ControlKind DefaultEditorKind
        {
            get { return DefaultEditorKindImpl; }
            set { DefaultEditorKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_DefaultEditorKind;

        private Guid? _fk_guid_DefaultEditorKind = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.GUI.ControlKindMemoryImpl DefaultEditorKindImpl
        {
            get
            {
                Zetbox.App.GUI.ControlKindMemoryImpl __value;
                if (_fk_DefaultEditorKind.HasValue)
                    __value = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_DefaultEditorKind.Value);
                else
                    __value = null;

                if (OnDefaultEditorKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ControlKind>(__value);
                    OnDefaultEditorKind_Getter(this, e);
                    __value = (Zetbox.App.GUI.ControlKindMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_DefaultEditorKind == null) || (value != null && value.ID == _fk_DefaultEditorKind))
				{
					SetInitializedProperty("DefaultEditorKind");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = DefaultEditorKindImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultEditorKind", __oldValue, __newValue);

                if (OnDefaultEditorKind_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultEditorKind_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ControlKindMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_DefaultEditorKind = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultEditorKind", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnDefaultEditorKind_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultEditorKind_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultEditorKind
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultEditorKind_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultEditorKind_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultEditorKind_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnDefaultEditorKind_IsValid;

        /// <summary>
        /// The default ControlKind to use for displaying this Presentable readonly in a GridCell. Defaults to DefaultDisplayKind.
        /// </summary>
	        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellDisplayKind
        // fkBackingName=_fk_DefaultGridCellDisplayKind; fkGuidBackingName=_fk_guid_DefaultGridCellDisplayKind;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.GUI.ControlKind DefaultGridCellDisplayKind
        {
            get { return DefaultGridCellDisplayKindImpl; }
            set { DefaultGridCellDisplayKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_DefaultGridCellDisplayKind;

        private Guid? _fk_guid_DefaultGridCellDisplayKind = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.GUI.ControlKindMemoryImpl DefaultGridCellDisplayKindImpl
        {
            get
            {
                Zetbox.App.GUI.ControlKindMemoryImpl __value;
                if (_fk_DefaultGridCellDisplayKind.HasValue)
                    __value = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_DefaultGridCellDisplayKind.Value);
                else
                    __value = null;

                if (OnDefaultGridCellDisplayKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ControlKind>(__value);
                    OnDefaultGridCellDisplayKind_Getter(this, e);
                    __value = (Zetbox.App.GUI.ControlKindMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_DefaultGridCellDisplayKind == null) || (value != null && value.ID == _fk_DefaultGridCellDisplayKind))
				{
					SetInitializedProperty("DefaultGridCellDisplayKind");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = DefaultGridCellDisplayKindImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultGridCellDisplayKind", __oldValue, __newValue);

                if (OnDefaultGridCellDisplayKind_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellDisplayKind_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ControlKindMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_DefaultGridCellDisplayKind = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultGridCellDisplayKind", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnDefaultGridCellDisplayKind_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellDisplayKind_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellDisplayKind
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellDisplayKind_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellDisplayKind_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellDisplayKind_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnDefaultGridCellDisplayKind_IsValid;

        /// <summary>
        /// The default ControlKind for displaying this model in a GridCell in editing mode. Defaults to DefaultKind.
        /// </summary>
	        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellEditorKind
        // fkBackingName=_fk_DefaultGridCellEditorKind; fkGuidBackingName=_fk_guid_DefaultGridCellEditorKind;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.GUI.ControlKind DefaultGridCellEditorKind
        {
            get { return DefaultGridCellEditorKindImpl; }
            set { DefaultGridCellEditorKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_DefaultGridCellEditorKind;

        private Guid? _fk_guid_DefaultGridCellEditorKind = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.GUI.ControlKindMemoryImpl DefaultGridCellEditorKindImpl
        {
            get
            {
                Zetbox.App.GUI.ControlKindMemoryImpl __value;
                if (_fk_DefaultGridCellEditorKind.HasValue)
                    __value = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_DefaultGridCellEditorKind.Value);
                else
                    __value = null;

                if (OnDefaultGridCellEditorKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ControlKind>(__value);
                    OnDefaultGridCellEditorKind_Getter(this, e);
                    __value = (Zetbox.App.GUI.ControlKindMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_DefaultGridCellEditorKind == null) || (value != null && value.ID == _fk_DefaultGridCellEditorKind))
				{
					SetInitializedProperty("DefaultGridCellEditorKind");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = DefaultGridCellEditorKindImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultGridCellEditorKind", __oldValue, __newValue);

                if (OnDefaultGridCellEditorKind_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellEditorKind_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ControlKindMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_DefaultGridCellEditorKind = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultGridCellEditorKind", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnDefaultGridCellEditorKind_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellEditorKind_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellEditorKind
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellEditorKind_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellEditorKind_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellEditorKind_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnDefaultGridCellEditorKind_IsValid;

        /// <summary>
        /// .The default ControlKind for displaying this model in a GridCell befor editing starts. Defaults to DefaultGridCellDisplayKind.
        /// </summary>
	        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellPreEditorKind
        // fkBackingName=_fk_DefaultGridCellPreEditorKind; fkGuidBackingName=_fk_guid_DefaultGridCellPreEditorKind;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.GUI.ControlKind DefaultGridCellPreEditorKind
        {
            get { return DefaultGridCellPreEditorKindImpl; }
            set { DefaultGridCellPreEditorKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_DefaultGridCellPreEditorKind;

        private Guid? _fk_guid_DefaultGridCellPreEditorKind = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.GUI.ControlKindMemoryImpl DefaultGridCellPreEditorKindImpl
        {
            get
            {
                Zetbox.App.GUI.ControlKindMemoryImpl __value;
                if (_fk_DefaultGridCellPreEditorKind.HasValue)
                    __value = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_DefaultGridCellPreEditorKind.Value);
                else
                    __value = null;

                if (OnDefaultGridCellPreEditorKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ControlKind>(__value);
                    OnDefaultGridCellPreEditorKind_Getter(this, e);
                    __value = (Zetbox.App.GUI.ControlKindMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_DefaultGridCellPreEditorKind == null) || (value != null && value.ID == _fk_DefaultGridCellPreEditorKind))
				{
					SetInitializedProperty("DefaultGridCellPreEditorKind");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = DefaultGridCellPreEditorKindImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultGridCellPreEditorKind", __oldValue, __newValue);

                if (OnDefaultGridCellPreEditorKind_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellPreEditorKind_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ControlKindMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_DefaultGridCellPreEditorKind = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultGridCellPreEditorKind", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnDefaultGridCellPreEditorKind_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellPreEditorKind_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellPreEditorKind
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellPreEditorKind_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellPreEditorKind_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellPreEditorKind_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnDefaultGridCellPreEditorKind_IsValid;

        /// <summary>
        /// describe this ViewModel
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = _Description = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("Description");
				}
            }
        }
        private string _Description;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, string> OnDescription_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnDescription_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("77ce1e5b-f244-4279-af13-b3e75b55f933"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'ViewModelDescriptor.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = _ExportGuid = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }
        private Guid _ExportGuid;
        private bool _isExportGuidSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
	        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=_fk_Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Zetbox.App.Base.Module; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Module Module
        {
            get { return ModuleImpl; }
            set { ModuleImpl = (Zetbox.App.Base.ModuleMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_Module;

        private Guid? _fk_guid_Module = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.ModuleMemoryImpl ModuleImpl
        {
            get
            {
                Zetbox.App.Base.ModuleMemoryImpl __value;
                if (_fk_Module.HasValue)
                    __value = (Zetbox.App.Base.ModuleMemoryImpl)Context.Find<Zetbox.App.Base.Module>(_fk_Module.Value);
                else
                    __value = null;

                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Module>(__value);
                    OnModule_Getter(this, e);
                    __value = (Zetbox.App.Base.ModuleMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_Module == null) || (value != null && value.ID == _fk_Module))
				{
					SetInitializedProperty("Module");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = ModuleImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Module", __oldValue, __newValue);

                if (OnModule_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ModuleMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_Module = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Module", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnModule_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.Base.Module> OnModule_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnModule_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // collection entry list property
   		// Zetbox.Generator.Templates.Properties.CollectionEntryListProperty
		public ICollection<Zetbox.App.GUI.ControlKind> SecondaryControlKinds
		{
			get
			{
				if (_SecondaryControlKinds == null)
				{
					Context.FetchRelation<Zetbox.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryMemoryImpl>(new Guid("5404456a-4527-4e40-a660-b4a5e96e4a47"), RelationEndRole.A, this);
					_SecondaryControlKinds 
						= new ObservableBSideCollectionWrapper<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind, Zetbox.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryMemoryImpl, ICollection<Zetbox.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryMemoryImpl>>(
							this, 
							new RelationshipFilterASideCollection<Zetbox.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryMemoryImpl>(this.Context, this));
				}
				return (ICollection<Zetbox.App.GUI.ControlKind>)_SecondaryControlKinds;
			}
		}

		private ObservableBSideCollectionWrapper<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind, Zetbox.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryMemoryImpl, ICollection<Zetbox.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryMemoryImpl>> _SecondaryControlKinds;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnSecondaryControlKinds_IsValid;

        /// <summary>
        /// The described CLR class&amp;apos; reference
        /// </summary>
	        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ViewModelRef
        // fkBackingName=_fk_ViewModelRef; fkGuidBackingName=_fk_guid_ViewModelRef;
        // referencedInterface=Zetbox.App.Base.TypeRef; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.TypeRef ViewModelRef
        {
            get { return ViewModelRefImpl; }
            set { ViewModelRefImpl = (Zetbox.App.Base.TypeRefMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_ViewModelRef;

        private Guid? _fk_guid_ViewModelRef = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.TypeRefMemoryImpl ViewModelRefImpl
        {
            get
            {
                Zetbox.App.Base.TypeRefMemoryImpl __value;
                if (_fk_ViewModelRef.HasValue)
                    __value = (Zetbox.App.Base.TypeRefMemoryImpl)Context.Find<Zetbox.App.Base.TypeRef>(_fk_ViewModelRef.Value);
                else
                    __value = null;

                if (OnViewModelRef_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.TypeRef>(__value);
                    OnViewModelRef_Getter(this, e);
                    __value = (Zetbox.App.Base.TypeRefMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_ViewModelRef == null) || (value != null && value.ID == _fk_ViewModelRef))
				{
					SetInitializedProperty("ViewModelRef");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = ViewModelRefImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ViewModelRef", __oldValue, __newValue);

                if (OnViewModelRef_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.TypeRef>(__oldValue, __newValue);
                    OnViewModelRef_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.TypeRefMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_ViewModelRef = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ViewModelRef", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnViewModelRef_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.TypeRef>(__oldValue, __newValue);
                    OnViewModelRef_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ViewModelRef
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.Base.TypeRef> OnViewModelRef_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.Base.TypeRef> OnViewModelRef_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.Base.TypeRef> OnViewModelRef_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnViewModelRef_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetName_ViewModelDescriptor")]
        public virtual string GetName()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetName_ViewModelDescriptor != null)
            {
                OnGetName_ViewModelDescriptor(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ViewModelDescriptor.GetName");
            }
            return e.Result;
        }
        public delegate void GetName_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetName_Handler<ViewModelDescriptor> OnGetName_ViewModelDescriptor;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ViewModelDescriptor> OnGetName_ViewModelDescriptor_CanExec;

        [EventBasedMethod("OnGetName_ViewModelDescriptor_CanExec")]
        public virtual bool GetNameCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetName_ViewModelDescriptor_CanExec != null)
				{
					OnGetName_ViewModelDescriptor_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ViewModelDescriptor> OnGetName_ViewModelDescriptor_CanExecReason;

        [EventBasedMethod("OnGetName_ViewModelDescriptor_CanExecReason")]
        public virtual string GetNameCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetName_ViewModelDescriptor_CanExecReason != null)
				{
					OnGetName_ViewModelDescriptor_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(ViewModelDescriptor);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ViewModelDescriptor)obj;
            var otherImpl = (ViewModelDescriptorMemoryImpl)obj;
            var me = (ViewModelDescriptor)this;

            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            this._fk_DefaultDisplayKind = otherImpl._fk_DefaultDisplayKind;
            this._fk_DefaultEditorKind = otherImpl._fk_DefaultEditorKind;
            this._fk_DefaultGridCellDisplayKind = otherImpl._fk_DefaultGridCellDisplayKind;
            this._fk_DefaultGridCellEditorKind = otherImpl._fk_DefaultGridCellEditorKind;
            this._fk_DefaultGridCellPreEditorKind = otherImpl._fk_DefaultGridCellPreEditorKind;
            this._fk_Module = otherImpl._fk_Module;
            this._fk_ViewModelRef = otherImpl._fk_ViewModelRef;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "DefaultDisplayKind":
                    {
                        var __oldValue = _fk_DefaultDisplayKind;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("DefaultDisplayKind", __oldValue, __newValue);
                        _fk_DefaultDisplayKind = __newValue;
                        NotifyPropertyChanged("DefaultDisplayKind", __oldValue, __newValue);
                    }
                    break;
                case "DefaultEditorKind":
                    {
                        var __oldValue = _fk_DefaultEditorKind;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("DefaultEditorKind", __oldValue, __newValue);
                        _fk_DefaultEditorKind = __newValue;
                        NotifyPropertyChanged("DefaultEditorKind", __oldValue, __newValue);
                    }
                    break;
                case "DefaultGridCellDisplayKind":
                    {
                        var __oldValue = _fk_DefaultGridCellDisplayKind;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("DefaultGridCellDisplayKind", __oldValue, __newValue);
                        _fk_DefaultGridCellDisplayKind = __newValue;
                        NotifyPropertyChanged("DefaultGridCellDisplayKind", __oldValue, __newValue);
                    }
                    break;
                case "DefaultGridCellEditorKind":
                    {
                        var __oldValue = _fk_DefaultGridCellEditorKind;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("DefaultGridCellEditorKind", __oldValue, __newValue);
                        _fk_DefaultGridCellEditorKind = __newValue;
                        NotifyPropertyChanged("DefaultGridCellEditorKind", __oldValue, __newValue);
                    }
                    break;
                case "DefaultGridCellPreEditorKind":
                    {
                        var __oldValue = _fk_DefaultGridCellPreEditorKind;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("DefaultGridCellPreEditorKind", __oldValue, __newValue);
                        _fk_DefaultGridCellPreEditorKind = __newValue;
                        NotifyPropertyChanged("DefaultGridCellPreEditorKind", __oldValue, __newValue);
                    }
                    break;
                case "Module":
                    {
                        var __oldValue = _fk_Module;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("Module", __oldValue, __newValue);
                        _fk_Module = __newValue;
                        NotifyPropertyChanged("Module", __oldValue, __newValue);
                    }
                    break;
                case "ViewModelRef":
                    {
                        var __oldValue = _fk_ViewModelRef;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("ViewModelRef", __oldValue, __newValue);
                        _fk_ViewModelRef = __newValue;
                        NotifyPropertyChanged("ViewModelRef", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "DefaultDisplayKind":
                case "DefaultEditorKind":
                case "DefaultGridCellDisplayKind":
                case "DefaultGridCellEditorKind":
                case "DefaultGridCellPreEditorKind":
                case "Description":
                case "ExportGuid":
                case "Module":
                case "ViewModelRef":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "SecondaryControlKinds":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_DefaultDisplayKind.HasValue)
                DefaultDisplayKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_DefaultDisplayKind.Value);
            else
            if (_fk_DefaultDisplayKind.HasValue)
                DefaultDisplayKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_DefaultDisplayKind.Value);
            else
                DefaultDisplayKindImpl = null;

            if (_fk_guid_DefaultEditorKind.HasValue)
                DefaultEditorKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_DefaultEditorKind.Value);
            else
            if (_fk_DefaultEditorKind.HasValue)
                DefaultEditorKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_DefaultEditorKind.Value);
            else
                DefaultEditorKindImpl = null;

            if (_fk_guid_DefaultGridCellDisplayKind.HasValue)
                DefaultGridCellDisplayKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_DefaultGridCellDisplayKind.Value);
            else
            if (_fk_DefaultGridCellDisplayKind.HasValue)
                DefaultGridCellDisplayKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_DefaultGridCellDisplayKind.Value);
            else
                DefaultGridCellDisplayKindImpl = null;

            if (_fk_guid_DefaultGridCellEditorKind.HasValue)
                DefaultGridCellEditorKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_DefaultGridCellEditorKind.Value);
            else
            if (_fk_DefaultGridCellEditorKind.HasValue)
                DefaultGridCellEditorKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_DefaultGridCellEditorKind.Value);
            else
                DefaultGridCellEditorKindImpl = null;

            if (_fk_guid_DefaultGridCellPreEditorKind.HasValue)
                DefaultGridCellPreEditorKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_DefaultGridCellPreEditorKind.Value);
            else
            if (_fk_DefaultGridCellPreEditorKind.HasValue)
                DefaultGridCellPreEditorKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_DefaultGridCellPreEditorKind.Value);
            else
                DefaultGridCellPreEditorKindImpl = null;

            if (_fk_guid_Module.HasValue)
                ModuleImpl = (Zetbox.App.Base.ModuleMemoryImpl)Context.FindPersistenceObject<Zetbox.App.Base.Module>(_fk_guid_Module.Value);
            else
            if (_fk_Module.HasValue)
                ModuleImpl = (Zetbox.App.Base.ModuleMemoryImpl)Context.Find<Zetbox.App.Base.Module>(_fk_Module.Value);
            else
                ModuleImpl = null;

            if (_fk_guid_ViewModelRef.HasValue)
                ViewModelRefImpl = (Zetbox.App.Base.TypeRefMemoryImpl)Context.FindPersistenceObject<Zetbox.App.Base.TypeRef>(_fk_guid_ViewModelRef.Value);
            else
            if (_fk_ViewModelRef.HasValue)
                ViewModelRefImpl = (Zetbox.App.Base.TypeRefMemoryImpl)Context.Find<Zetbox.App.Base.TypeRef>(_fk_ViewModelRef.Value);
            else
                ViewModelRefImpl = null;
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorMemoryImpl<ViewModelDescriptor, Zetbox.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("067ed744-cd2c-4c8b-9829-cf7d0b16df60"),
                        "DefaultDisplayKind",
                        null,
                        obj => obj.DefaultDisplayKind,
                        (obj, val) => obj.DefaultDisplayKind = val,
						obj => OnDefaultDisplayKind_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<ViewModelDescriptor, Zetbox.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("b535115c-b847-479d-bdea-a7994ae6eeca"),
                        "DefaultEditorKind",
                        null,
                        obj => obj.DefaultEditorKind,
                        (obj, val) => obj.DefaultEditorKind = val,
						obj => OnDefaultEditorKind_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<ViewModelDescriptor, Zetbox.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("20fb1478-5e20-48e3-b418-c101397d15d1"),
                        "DefaultGridCellDisplayKind",
                        null,
                        obj => obj.DefaultGridCellDisplayKind,
                        (obj, val) => obj.DefaultGridCellDisplayKind = val,
						obj => OnDefaultGridCellDisplayKind_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<ViewModelDescriptor, Zetbox.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("7a093e89-a9ea-46ca-aeb6-cd3a1740714a"),
                        "DefaultGridCellEditorKind",
                        null,
                        obj => obj.DefaultGridCellEditorKind,
                        (obj, val) => obj.DefaultGridCellEditorKind = val,
						obj => OnDefaultGridCellEditorKind_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<ViewModelDescriptor, Zetbox.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("6c744476-35e0-4cef-a221-f02abc81566c"),
                        "DefaultGridCellPreEditorKind",
                        null,
                        obj => obj.DefaultGridCellPreEditorKind,
                        (obj, val) => obj.DefaultGridCellPreEditorKind = val,
						obj => OnDefaultGridCellPreEditorKind_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<ViewModelDescriptor, string>(
                        lazyCtx,
                        new Guid("93e25648-50f9-40d8-8753-e5dadab68e1d"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val,
						obj => OnDescription_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<ViewModelDescriptor, Guid>(
                        lazyCtx,
                        new Guid("77ce1e5b-f244-4279-af13-b3e75b55f933"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<ViewModelDescriptor, Zetbox.App.Base.Module>(
                        lazyCtx,
                        new Guid("0b7135d3-dedc-4091-a0c4-690c1b4a2b6d"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val,
						obj => OnModule_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<ViewModelDescriptor, ICollection<Zetbox.App.GUI.ControlKind>>(
                        lazyCtx,
                        new Guid("5e2e007c-2e90-4ba6-9c9d-46e62b662ff9"),
                        "SecondaryControlKinds",
                        null,
                        obj => obj.SecondaryControlKinds,
                        null, // lists are read-only properties
                        obj => OnSecondaryControlKinds_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<ViewModelDescriptor, Zetbox.App.Base.TypeRef>(
                        lazyCtx,
                        new Guid("554288d1-f5f4-4b22-908b-01525a1d0f9b"),
                        "ViewModelRef",
                        null,
                        obj => obj.ViewModelRef,
                        (obj, val) => obj.ViewModelRef = val,
						obj => OnViewModelRef_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_ViewModelDescriptor")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_ViewModelDescriptor != null)
            {
                OnToString_ViewModelDescriptor(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<ViewModelDescriptor> OnToString_ViewModelDescriptor;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_ViewModelDescriptor")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.IsValid = b.IsValid;
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_ViewModelDescriptor != null)
            {
                OnObjectIsValid_ViewModelDescriptor(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<ViewModelDescriptor> OnObjectIsValid_ViewModelDescriptor;

        [EventBasedMethod("OnNotifyPreSave_ViewModelDescriptor")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_ViewModelDescriptor != null) OnNotifyPreSave_ViewModelDescriptor(this);
        }
        public static event ObjectEventHandler<ViewModelDescriptor> OnNotifyPreSave_ViewModelDescriptor;

        [EventBasedMethod("OnNotifyPostSave_ViewModelDescriptor")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_ViewModelDescriptor != null) OnNotifyPostSave_ViewModelDescriptor(this);
        }
        public static event ObjectEventHandler<ViewModelDescriptor> OnNotifyPostSave_ViewModelDescriptor;

        [EventBasedMethod("OnNotifyCreated_ViewModelDescriptor")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("DefaultDisplayKind");
            SetNotInitializedProperty("DefaultEditorKind");
            SetNotInitializedProperty("DefaultGridCellDisplayKind");
            SetNotInitializedProperty("DefaultGridCellEditorKind");
            SetNotInitializedProperty("DefaultGridCellPreEditorKind");
            SetNotInitializedProperty("Description");
            SetNotInitializedProperty("Module");
            SetNotInitializedProperty("ViewModelRef");
            base.NotifyCreated();
            if (OnNotifyCreated_ViewModelDescriptor != null) OnNotifyCreated_ViewModelDescriptor(this);
        }
        public static event ObjectEventHandler<ViewModelDescriptor> OnNotifyCreated_ViewModelDescriptor;

        [EventBasedMethod("OnNotifyDeleting_ViewModelDescriptor")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_ViewModelDescriptor != null) OnNotifyDeleting_ViewModelDescriptor(this);
            SecondaryControlKinds.Clear();
            DefaultDisplayKind = null;
            DefaultEditorKind = null;
            DefaultGridCellDisplayKind = null;
            DefaultGridCellEditorKind = null;
            DefaultGridCellPreEditorKind = null;
        }
        public static event ObjectEventHandler<ViewModelDescriptor> OnNotifyDeleting_ViewModelDescriptor;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(DefaultDisplayKind != null ? DefaultDisplayKind.ID : (int?)null);
            binStream.Write(DefaultEditorKind != null ? DefaultEditorKind.ID : (int?)null);
            binStream.Write(DefaultGridCellDisplayKind != null ? DefaultGridCellDisplayKind.ID : (int?)null);
            binStream.Write(DefaultGridCellEditorKind != null ? DefaultGridCellEditorKind.ID : (int?)null);
            binStream.Write(DefaultGridCellPreEditorKind != null ? DefaultGridCellPreEditorKind.ID : (int?)null);
            binStream.Write(this._Description);
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this._ExportGuid);
            }
            binStream.Write(Module != null ? Module.ID : (int?)null);
            binStream.Write(ViewModelRef != null ? ViewModelRef.ID : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._fk_DefaultDisplayKind = binStream.ReadNullableInt32();
            this._fk_DefaultEditorKind = binStream.ReadNullableInt32();
            this._fk_DefaultGridCellDisplayKind = binStream.ReadNullableInt32();
            this._fk_DefaultGridCellEditorKind = binStream.ReadNullableInt32();
            this._fk_DefaultGridCellPreEditorKind = binStream.ReadNullableInt32();
            this._Description = binStream.ReadString();
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this._ExportGuid = binStream.ReadGuid();
            }
            this._fk_Module = binStream.ReadNullableInt32();
            this._fk_ViewModelRef = binStream.ReadNullableInt32();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(DefaultDisplayKind != null ? DefaultDisplayKind.ExportGuid : (Guid?)null, xml, "DefaultDisplayKind", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(DefaultEditorKind != null ? DefaultEditorKind.ExportGuid : (Guid?)null, xml, "DefaultEditorKind", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(DefaultGridCellDisplayKind != null ? DefaultGridCellDisplayKind.ExportGuid : (Guid?)null, xml, "DefaultGridCellDisplayKind", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(DefaultGridCellEditorKind != null ? DefaultGridCellEditorKind.ExportGuid : (Guid?)null, xml, "DefaultGridCellEditorKind", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(DefaultGridCellPreEditorKind != null ? DefaultGridCellPreEditorKind.ExportGuid : (Guid?)null, xml, "DefaultGridCellPreEditorKind", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._Description, xml, "Description", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(Module != null ? Module.ExportGuid : (Guid?)null, xml, "Module", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(ViewModelRef != null ? ViewModelRef.ExportGuid : (Guid?)null, xml, "ViewModelRef", "Zetbox.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.GUI|DefaultDisplayKind":
                this._fk_guid_DefaultDisplayKind = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|DefaultEditorKind":
                this._fk_guid_DefaultEditorKind = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|DefaultGridCellDisplayKind":
                this._fk_guid_DefaultGridCellDisplayKind = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|DefaultGridCellEditorKind":
                this._fk_guid_DefaultGridCellEditorKind = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|DefaultGridCellPreEditorKind":
                this._fk_guid_DefaultGridCellPreEditorKind = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|Description":
                this._Description = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.GUI|ExportGuid":
                // Import must have default value set
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.GUI|Module":
                this._fk_guid_Module = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|ViewModelRef":
                this._fk_guid_ViewModelRef = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

    }
}