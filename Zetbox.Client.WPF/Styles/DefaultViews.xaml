<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:styles="clr-namespace:Zetbox.Client.WPF.Styles"
                    xmlns:ctrls="clr-namespace:Zetbox.Client.WPF.CustomControls;assembly=Zetbox.Client.WPF.Toolkit"
                    xmlns:view="clr-namespace:Zetbox.Client.WPF.View.ZetboxBase"
                    xmlns:wpftk="clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit"
                    xmlns:kevinTxt="clr-namespace:Microsoft.Samples.KMoore.WPFSamples.InfoTextBox;assembly=WPFSamplesLib"
                    xmlns:kevinDate="clr-namespace:Microsoft.Samples.KMoore.WPFSamples.DateControls;assembly=WPFSamplesLib"
                    xmlns:client="clr-namespace:Zetbox.Client.Presentables;assembly=Zetbox.Client">
    <!--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
    -->
    <ResourceDictionary.MergedDictionaries>
        <!--<ResourceDictionary Source="DebugColors.xaml" />-->
        <ResourceDictionary Source="DefaultStyles.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- #################################################################
    
    Translate color scheme into actual control-specific scheme
    
    ################################################################# -->

    <!-- todo: where to put these two? -->
    <SolidColorBrush x:Key="ControlDisabledBackground">#FFDDDDDD</SolidColorBrush>
    <SolidColorBrush x:Key="ControlDisabledForeground">#FF888888</SolidColorBrush>

    <!-- Controls -->
    <SolidColorBrush x:Key="ControlBackground"
                     Color="{StaticResource {x:Static styles:Defaults.TertiaryBackgroundKey}}" />
    <SolidColorBrush x:Key="ControlForeground"
                     Color="{StaticResource {x:Static styles:Defaults.TertiaryForegroundKey}}" />
    <SolidColorBrush x:Key="ControlHoverBackground"
                     Color="{StaticResource {x:Static styles:Defaults.TertiaryAccentKey}}" />
    <SolidColorBrush x:Key="ControlHoverForeground"
                     Color="{StaticResource {x:Static styles:Defaults.TertiaryAccentForegroundKey}}" />
    <SolidColorBrush x:Key="ControlPressedBackground"
                     Color="{StaticResource {x:Static styles:Defaults.TertiaryHighlightKey}}" />
    <SolidColorBrush x:Key="ControlPressedForeground"
                     Color="{StaticResource {x:Static styles:Defaults.TertiaryHighlightForegroundKey}}" />

    <SolidColorBrush x:Key="ControlBorder"
                     Color="{StaticResource {x:Static styles:Defaults.TertiaryAccentKey}}" />
    <SolidColorBrush x:Key="ControlHoverBorder"
                     Color="{StaticResource {x:Static styles:Defaults.TertiaryAccentKey}}" />
    <SolidColorBrush x:Key="ControlPressedBorder"
                     Color="{StaticResource {x:Static styles:Defaults.TertiaryHighlightKey}}" />

    <!-- Buttons -->
    <SolidColorBrush x:Key="ButtonBackground"
                     Color="{StaticResource {x:Static styles:Defaults.MainBackgroundKey}}" />
    <SolidColorBrush x:Key="ButtonForeground"
                     Color="{StaticResource {x:Static styles:Defaults.MainForegroundKey}}" />
    <SolidColorBrush x:Key="ButtonHoverBackground"
                     Color="{StaticResource {x:Static styles:Defaults.MainAccentKey}}" />
    <SolidColorBrush x:Key="ButtonHoverForeground"
                     Color="{StaticResource {x:Static styles:Defaults.MainAccentForegroundKey}}" />
    <SolidColorBrush x:Key="ButtonPressedBackground"
                     Color="{StaticResource {x:Static styles:Defaults.MainHighlightKey}}" />
    <SolidColorBrush x:Key="ButtonPressedForeground"
                     Color="{StaticResource {x:Static styles:Defaults.MainHighlightForegroundKey}}" />

    <!-- Area groups -->
    <SolidColorBrush x:Key="AreaGroup1Background"
                     Color="{StaticResource {x:Static styles:Defaults.MainBackgroundKey}}" />
    <SolidColorBrush x:Key="AreaGroup1Foreground"
                     Color="{StaticResource {x:Static styles:Defaults.MainForegroundKey}}" />
    <SolidColorBrush x:Key="AreaGroup1HeaderBackground"
                     Color="{StaticResource {x:Static styles:Defaults.MainAccentKey}}" />
    <SolidColorBrush x:Key="AreaGroup1HeaderForeground"
                     Color="{StaticResource {x:Static styles:Defaults.MainAccentForegroundKey}}" />
    <SolidColorBrush x:Key="AreaGroup1PressedBackground"
                     Color="{StaticResource {x:Static styles:Defaults.MainHighlightKey}}" />
    <SolidColorBrush x:Key="AreaGroup1PressedForeground"
                     Color="{StaticResource {x:Static styles:Defaults.MainHighlightForegroundKey}}" />

    <SolidColorBrush x:Key="AreaGroup1Border"
                     Color="{StaticResource {x:Static styles:Defaults.MainBorderKey}}" />

    <!-- Item groups -->
    <SolidColorBrush x:Key="ItemGroup1Background"
                     Color="{StaticResource {x:Static styles:Defaults.SecondaryBackgroundKey}}" />
    <SolidColorBrush x:Key="ItemGroup1Foreground"
                     Color="{StaticResource {x:Static styles:Defaults.SecondaryForegroundKey}}" />
    <SolidColorBrush x:Key="ItemGroup1HeaderBackground"
                     Color="{StaticResource {x:Static styles:Defaults.SecondaryAccentKey}}" />
    <SolidColorBrush x:Key="ItemGroup1HeaderForeground"
                     Color="{StaticResource {x:Static styles:Defaults.SecondaryAccentForegroundKey}}" />
    <SolidColorBrush x:Key="ItemGroup1PressedBackground"
                     Color="{StaticResource {x:Static styles:Defaults.SecondaryHighlightKey}}" />
    <SolidColorBrush x:Key="ItemGroup1PressedForeground"
                     Color="{StaticResource {x:Static styles:Defaults.SecondaryHighlightForegroundKey}}" />

    <SolidColorBrush x:Key="ItemGroup1Border"
                     Color="{StaticResource {x:Static styles:Defaults.SecondaryBorderKey}}" />

    <!-- todo colors -->
    <SolidColorBrush x:Key="DefaultBackground">#00ffffff</SolidColorBrush>
    <SolidColorBrush x:Key="NoBorder">#00000000</SolidColorBrush>
    <SolidColorBrush x:Key="NoBackground">#00000000</SolidColorBrush>
    <!-- end todo colors -->

    <!-- Define Default Controls Styles-->

    <Style x:Key="zbWindow"
           TargetType="Window">
        <Setter Property="Control.FontSize"
                Value="{StaticResource NormalFontSize}" />
    </Style>

    <Style TargetType="Border">
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
    </Style>

    <!-- Complex controls -->
    <Style x:Key="GroupBorderStyle"
           TargetType="Border">
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="BorderBrush"
                Value="{StaticResource ControlBorder}" />
    </Style>

    <Style x:Key="AreaGroup1BorderStyle"
           TargetType="Border">
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="BorderBrush"
                Value="{StaticResource AreaGroup1Border}" />
    </Style>

    <Style x:Key="ItemGroup1BorderStyle"
           TargetType="Border">
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="BorderBrush"
                Value="{StaticResource ItemGroup1Border}" />
    </Style>

    <Style x:Key="zbButtonTemplate"
           TargetType="ButtonBase">
        <!-- TODO: extract colors into attached properties to allow individual coloring -->
        <Setter Property="Margin"
                Value="{StaticResource ItemGroup1Margin}" />
        <Setter Property="SnapsToDevicePixels"
                Value="true" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="MinHeight"
                Value="{StaticResource NormalControlHeight}" />
        <Setter Property="MinWidth"
                Value="75" />
        <Setter Property="Padding"
                Value="{StaticResource ItemGroup1Padding}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Border x:Name="Border"
                            BorderBrush="{StaticResource ControlBorder}"
                            BorderThickness="1"
                            Background="{StaticResource ButtonBackground}"
                            TextBlock.Foreground="{StaticResource ButtonForeground}">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{StaticResource ButtonHoverBackground}" />
                            <Setter TargetName="Border"
                                    Property="TextBlock.Foreground"
                                    Value="{StaticResource ButtonHoverForeground}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{StaticResource ButtonPressedBackground}" />
                            <Setter TargetName="Border"
                                    Property="TextBlock.Foreground"
                                    Value="{StaticResource ButtonPressedForeground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{StaticResource ControlDisabledBackground}" />
                            <Setter TargetName="Border"
                                    Property="TextBlock.Foreground"
                                    Value="{StaticResource ControlDisabledForeground}" />
                        </Trigger>
                        <Trigger Property="Button.IsDefault"
                                 Value="true">
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{StaticResource ButtonHoverBackground}" />
                            <Setter TargetName="Border"
                                    Property="BorderThickness"
                                    Value="2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button"
           BasedOn="{StaticResource zbButtonTemplate}" />

    <Style TargetType="ToggleButton"
           BasedOn="{StaticResource zbButtonTemplate}" />

    <Style x:Key="zbTextBlockTemplate"
           TargetType="TextBlock">
        <Setter Property="MinHeight"
                Value="{StaticResource NormalControlHeight}" />
    </Style>

    <Style x:Key="zbTextBoxTemplate"
           TargetType="TextBox">
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation"
                Value="None" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="MinHeight"
                Value="{StaticResource NormalControlHeight}" />
        <Setter Property="AllowDrop"
                Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBoxBase">
                    <Border Name="Border"
                            Padding="{TemplateBinding Padding}"
                            Background="{StaticResource ControlBackground}"
                            BorderBrush="{StaticResource ControlBorder}"
                            BorderThickness="1">
                        <ScrollViewer Margin="0"
                                      x:Name="PART_ContentHost" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{StaticResource ControlDisabledBackground}" />
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{StaticResource ControlDisabledBackground}" />
                            <Setter Property="Foreground"
                                    Value="{StaticResource ControlDisabledForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TextBox"
           BasedOn="{StaticResource zbTextBoxTemplate}" />

    <Style x:Key="zbComboBoxTemplate"
           TargetType="ComboBox">
        <Style.Resources>
            <ControlTemplate x:Key="zbComboBoxButtonTemplate"
                             TargetType="ButtonBase">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter Content="{TemplateBinding Content}" />
                    <Border x:Name="Border"
                            Grid.Column="1"
                            MinWidth="{StaticResource NormalControlHeight}"
                            Background="{StaticResource ControlBackground}"
                            BorderBrush="{StaticResource ControlBorder}"
                            BorderThickness="0,1,1,1" />
                    <Path x:Name="Arrow"
                          Grid.Column="1"
                          Fill="{TemplateBinding Foreground}"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center"
                          Data="M 0 0 L 4 4 L 8 0 Z" />
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="ToggleButton.IsMouseOver"
                             Value="true">
                        <Setter TargetName="Border"
                                Property="Background"
                                Value="{StaticResource ControlHoverBackground}" />
                    </Trigger>
                    <Trigger Property="ToggleButton.IsChecked"
                             Value="true">
                        <Setter TargetName="Border"
                                Property="Background"
                                Value="{StaticResource ControlPressedBackground}" />
                    </Trigger>
                    <Trigger Property="IsEnabled"
                             Value="False">
                        <Setter TargetName="Border"
                                Property="Background"
                                Value="{StaticResource ControlDisabledBackground}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>

        <Setter Property="SnapsToDevicePixels"
                Value="true" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll"
                Value="true" />
        <Setter Property="MinHeight"
                Value="{StaticResource NormalControlHeight}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ToggleButton Name="ToggleButton"
                                      Template="{StaticResource zbComboBoxButtonTemplate}"
                                      Grid.Column="0"
                                      Grid.ColumnSpan="2"
                                      Focusable="false"
                                      Margin="0"
                                      MinHeight="0"
                                      HorizontalAlignment="Stretch"
                                      VerticalAlignment="Stretch"
                                      IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                      ClickMode="Press">
                            <Border Name="ContentSite"
                                    Background="{StaticResource ControlBackground}"
                                    BorderBrush="{StaticResource ControlBorder}"
                                    BorderThickness="1">
                                <ContentPresenter Content="{TemplateBinding SelectionBoxItem}"
                                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                  MinHeight="0"
                                                  Margin="2,0,0,0"
                                                  VerticalAlignment="Center"
                                                  HorizontalAlignment="Left" />
                            </Border>
                        </ToggleButton>
                        <TextBox x:Name="PART_EditableTextBox"
                                 Grid.Column="0"
                                 HorizontalAlignment="Stretch"
                                 VerticalAlignment="Center"
                                 Focusable="True"
                                 Background="Transparent"
                                 Visibility="Hidden"
                                 Margin="0"
                                 MinHeight="{StaticResource NormalControlHeight}"
                                 IsReadOnly="{TemplateBinding IsReadOnly}" />
                        <Canvas Name="Filler"
                                Width="{StaticResource NormalControlHeight}"
                                Grid.Column="1" />
                        <Popup Name="Popup"
                               Placement="Bottom"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               AllowsTransparency="True"
                               Focusable="False"
                               PopupAnimation="Slide">
                            <Grid Name="DropDown"
                                  SnapsToDevicePixels="True"
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder"
                                        Background="{StaticResource ControlBackground}"
                                        BorderThickness="1"
                                        BorderBrush="{StaticResource ControlBorder}" />
                                <ScrollViewer Margin="4,6,4,6"
                                              SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True"
                                                KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems"
                                 Value="false">
                            <Setter TargetName="DropDownBorder"
                                    Property="MinHeight"
                                    Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{StaticResource ControlDisabledForeground}" />
                        </Trigger>
                        <Trigger Property="IsGrouping"
                                 Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll"
                                    Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup"
                                 Property="Popup.AllowsTransparency"
                                 Value="true">
                            <Setter TargetName="DropDownBorder"
                                    Property="Margin"
                                    Value="0,2,0,0" />
                        </Trigger>
                        <Trigger Property="IsEditable"
                                 Value="true">
                            <Setter Property="IsTabStop"
                                    Value="false" />
                            <Setter TargetName="PART_EditableTextBox"
                                    Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="ContentSite"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ComboBox"
           BasedOn="{StaticResource zbComboBoxTemplate}" />

    <Style x:Key="zbExpanderTemplate"
           TargetType="Expander">
        <Style.Resources>
            <ControlTemplate x:Key="ExpanderToggleButtonDown"
                             TargetType="ToggleButton">
                <Border Name="Border"
                        Background="{Binding Path=(styles:Controls.HeaderBackground), RelativeSource={RelativeSource AncestorType={x:Type Expander}}}"
                        TextBlock.Foreground="{Binding Path=(styles:Controls.HeaderForeground), RelativeSource={RelativeSource AncestorType={x:Type Expander}}}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid Grid.Column="0"
                              Margin="{StaticResource ItemGroup1Margin}"
                              MinHeight="{StaticResource NormalControlHeight}"
                              MinWidth="{StaticResource NormalControlHeight}">
                            <Path Name="Arrow"
                                  Fill="{Binding Path=(styles:Controls.HeaderForeground), RelativeSource={RelativeSource AncestorType={x:Type Expander}}}"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="M 0 0 L 4 4 L 8 0 Z" />
                        </Grid>
                        <ContentPresenter Grid.Column="1"
                                          Margin="{StaticResource ItemGroup1Margin}"
                                          MinHeight="{StaticResource NormalControlHeight}"
                                          ContentSource="Content"
                                          VerticalAlignment="Center"
                                          RecognizesAccessKey="True" />
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="ToggleButton.IsMouseOver"
                             Value="true">
                        <!-- switch fore and background when hovering -->
                        <Setter TargetName="Border"
                                Property="Background"
                                Value="{Binding Path=(styles:Controls.HeaderForeground), RelativeSource={RelativeSource AncestorType={x:Type Expander}}}" />
                        <Setter TargetName="Border"
                                Property="TextBlock.Foreground"
                                Value="{Binding Path=(styles:Controls.HeaderBackground), RelativeSource={RelativeSource AncestorType={x:Type Expander}}}" />
                        <Setter TargetName="Arrow"
                                Property="Fill"
                                Value="{Binding Path=(styles:Controls.HeaderBackground), RelativeSource={RelativeSource AncestorType={x:Type Expander}}}" />
                    </Trigger>
                    <Trigger Property="IsPressed"
                             Value="true">
                        <Setter TargetName="Border"
                                Property="Background"
                                Value="{Binding Path=(styles:Controls.PressedBackground), RelativeSource={RelativeSource AncestorType={x:Type Expander}}}" />
                        <Setter TargetName="Arrow"
                                Property="Fill"
                                Value="{Binding Path=(styles:Controls.PressedForeground), RelativeSource={RelativeSource AncestorType={x:Type Expander}}}" />
                    </Trigger>
                    <Trigger Property="IsChecked"
                             Value="true">
                        <Setter TargetName="Arrow"
                                Property="Data"
                                Value="M 0 4 L 4 0 L 8 4 Z" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="ExpanderToggleButtonRight"
                             TargetType="ToggleButton">
                <Border Name="Border"
                        Background="{TemplateBinding styles:Controls.HeaderBackground}"
                        TextBlock.Foreground="{Binding Path=(styles:Controls.HeaderForeground), RelativeSource={RelativeSource AncestorType={x:Type Expander}}}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid Grid.Row="0"
                              Margin="{StaticResource ItemGroup1Margin}"
                              Height="{StaticResource NormalControlHeight}"
                              Width="{StaticResource NormalControlHeight}">
                            <Path Name="Arrow"
                                  Fill="{Binding Path=(styles:Controls.HeaderForeground), RelativeSource={RelativeSource AncestorType={x:Type Expander}}}"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="M 0 0 L 4 4 L 0 8 Z" />
                        </Grid>
                        <ContentPresenter Grid.Row="1"
                                          Margin="{StaticResource ItemGroup1Margin}"
                                          MinWidth="{StaticResource NormalControlHeight}"
                                          HorizontalAlignment="Center"
                                          RecognizesAccessKey="True" />
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="ToggleButton.IsMouseOver"
                             Value="true">
                        <!-- switch fore and background when hovering -->
                        <Setter TargetName="Border"
                                Property="Background"
                                Value="{Binding Path=(styles:Controls.HeaderForeground), RelativeSource={RelativeSource AncestorType={x:Type Expander}}}" />
                        <Setter TargetName="Border"
                                Property="TextBlock.Foreground"
                                Value="{Binding Path=(styles:Controls.HeaderBackground), RelativeSource={RelativeSource AncestorType={x:Type Expander}}}" />
                        <Setter TargetName="Arrow"
                                Property="Fill"
                                Value="{Binding Path=(styles:Controls.HeaderBackground), RelativeSource={RelativeSource AncestorType={x:Type Expander}}}" />
                    </Trigger>
                    <Trigger Property="IsPressed"
                             Value="true">
                        <Setter TargetName="Border"
                                Property="Background"
                                Value="{Binding Path=(styles:Controls.PressedBackground), RelativeSource={RelativeSource AncestorType={x:Type Expander}}}" />
                        <Setter TargetName="Arrow"
                                Property="Fill"
                                Value="{Binding Path=(styles:Controls.PressedForeground), RelativeSource={RelativeSource AncestorType={x:Type Expander}}}" />
                    </Trigger>
                    <Trigger Property="IsChecked"
                             Value="true">
                        <Setter TargetName="Arrow"
                                Property="Data"
                                Value="M 4 0 L 0 4 L 4 8 Z" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>
        <Setter Property="styles:Controls.HeaderBackground"
                Value="{StaticResource ControlHoverBackground}" />
        <Setter Property="styles:Controls.HeaderForeground"
                Value="{StaticResource ControlHoverForeground}" />
        <Setter Property="styles:Controls.PressedBackground"
                Value="{StaticResource ControlPressedBackground}" />
        <Setter Property="styles:Controls.PressedForeground"
                Value="{StaticResource ControlPressedForeground}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource ControlBorder}" />
        <Setter Property="styles:Controls.BorderStyle"
                Value="{StaticResource GroupBorderStyle}" />

        <Style.Triggers>
            <Trigger Property="ExpandDirection"
                     Value="Down">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Expander">
                            <Border Style="{Binding Path=(styles:Controls.BorderStyle), RelativeSource={RelativeSource AncestorType={x:Type Expander}}}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Name="ContentRow"
                                                       Height="0" />
                                    </Grid.RowDefinitions>
                                    <Border Name="Border"
                                            Grid.Row="0"
                                            MinHeight="{StaticResource NormalControlHeight}"
                                            Background="{TemplateBinding styles:Controls.HeaderBackground}">
                                        <ToggleButton IsChecked="{Binding Path=IsExpanded,Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                      OverridesDefaultStyle="True"
                                                      Foreground="{TemplateBinding styles:Controls.HeaderForeground}"
                                                      Margin="0"
                                                      Template="{StaticResource ExpanderToggleButtonDown}">
                                            <ContentPresenter ContentSource="Header"
                                                              VerticalAlignment="Center"
                                                              RecognizesAccessKey="True" />
                                        </ToggleButton>
                                    </Border>
                                    <Border Name="Content"
                                            Grid.Row="1"
                                            Background="{TemplateBinding Background}">
                                        <ContentPresenter Margin="{TemplateBinding Padding}" />
                                    </Border>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded"
                                         Value="True">
                                    <Setter TargetName="ContentRow"
                                            Property="Height"
                                            Value="{Binding ElementName=Content,Path=DesiredHeight}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="ExpandDirection"
                     Value="Right">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Expander">
                            <Border Style="{Binding Path=(styles:Controls.BorderStyle), RelativeSource={RelativeSource AncestorType={x:Type Expander}}}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Name="ContentRow"
                                                          Width="0" />
                                    </Grid.ColumnDefinitions>
                                    <Border Name="Border"
                                            Grid.Column="0"
                                            Background="{TemplateBinding styles:Controls.HeaderBackground}"
                                            MinWidth="{StaticResource NormalControlHeight}">
                                        <ToggleButton IsChecked="{Binding Path=IsExpanded,Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                      Foreground="{TemplateBinding styles:Controls.HeaderForeground}"
                                                      OverridesDefaultStyle="True"
                                                      Margin="0"
                                                      MinWidth="{StaticResource NormalControlHeight}"
                                                      Template="{StaticResource ExpanderToggleButtonRight}">
                                            <ContentPresenter ContentSource="Header"
                                                              VerticalAlignment="Top"
                                                              HorizontalAlignment="Center"
                                                              RecognizesAccessKey="True">
                                                <ContentPresenter.LayoutTransform>
                                                    <RotateTransform Angle="-90" />
                                                </ContentPresenter.LayoutTransform>
                                            </ContentPresenter>
                                        </ToggleButton>
                                    </Border>
                                    <Border Name="Content"
                                            Grid.Column="1"
                                            Background="{TemplateBinding Background}">
                                        <ContentPresenter Margin="{TemplateBinding Padding}" />
                                    </Border>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded"
                                         Value="True">
                                    <Setter TargetName="ContentRow"
                                            Property="Width"
                                            Value="{Binding ElementName=Content,Path=DesiredHeight}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Area1Expander"
           TargetType="Expander"
           BasedOn="{StaticResource zbExpanderTemplate}">
        <Setter Property="Foreground"
                Value="{StaticResource AreaGroup1Foreground}" />
        <Setter Property="Background"
                Value="{StaticResource AreaGroup1Background}" />
        <Setter Property="styles:Controls.HeaderForeground"
                Value="{StaticResource AreaGroup1HeaderForeground}" />
        <Setter Property="styles:Controls.HeaderBackground"
                Value="{StaticResource AreaGroup1HeaderBackground}" />
        <Setter Property="styles:Controls.PressedForeground"
                Value="{StaticResource AreaGroup1PressedForeground}" />
        <Setter Property="styles:Controls.PressedBackground"
                Value="{StaticResource AreaGroup1PressedBackground}" />
        <Setter Property="styles:Controls.BorderStyle"
                Value="{StaticResource AreaGroup1BorderStyle}" />
        <Setter Property="Margin"
                Value="{StaticResource AreaGroup1Margin}" />
        <Setter Property="Padding"
                Value="{StaticResource AreaGroup1Padding}" />
    </Style>

    <Style x:Key="Item1Expander"
           TargetType="Expander"
           BasedOn="{StaticResource zbExpanderTemplate}">
        <Setter Property="Foreground"
                Value="{StaticResource ItemGroup1Foreground}" />
        <Setter Property="Background"
                Value="{StaticResource ItemGroup1Background}" />
        <Setter Property="styles:Controls.HeaderForeground"
                Value="{StaticResource ItemGroup1HeaderForeground}" />
        <Setter Property="styles:Controls.HeaderBackground"
                Value="{StaticResource ItemGroup1HeaderBackground}" />
        <Setter Property="styles:Controls.PressedForeground"
                Value="{StaticResource ItemGroup1PressedForeground}" />
        <Setter Property="styles:Controls.PressedBackground"
                Value="{StaticResource ItemGroup1PressedBackground}" />
        <Setter Property="styles:Controls.BorderStyle"
                Value="{StaticResource ItemGroup1BorderStyle}" />
        <Setter Property="Margin"
                Value="{StaticResource ItemGroup1Margin}" />
        <Setter Property="Padding"
                Value="{StaticResource ItemGroup1Padding}" />
    </Style>

    <Style TargetType="Expander"
           BasedOn="{StaticResource zbExpanderTemplate}">
    </Style>

    <Style x:Key="zbTabItemTemplate"
           TargetType="TabItem">
        <Setter Property="Background"
                Value="{StaticResource ControlBackground}" />
        <Setter Property="TextBox.Foreground"
                Value="{StaticResource ControlForeground}" />
        <Setter Property="styles:Controls.HoverBackground"
                Value="{StaticResource ControlHoverBackground}" />
        <Setter Property="styles:Controls.HoverForeground"
                Value="{StaticResource ControlHoverForeground}" />
        <Setter Property="styles:Controls.PressedBackground"
                Value="{StaticResource ControlPressedBackground}" />
        <Setter Property="styles:Controls.PressedForeground"
                Value="{StaticResource ControlPressedForeground}" />

        <Setter Property="BorderBrush"
                Value="{StaticResource NoBorder}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid SnapsToDevicePixels="True">
                        <Border Padding="{TemplateBinding Control.Padding}"
                                BorderBrush="{TemplateBinding Border.BorderBrush}"
                                Background="{TemplateBinding Panel.Background}"
                                Name="Bd">
                            <ContentPresenter RecognizesAccessKey="True"
                                              Content="{TemplateBinding HeaderedContentControl.Header}"
                                              ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                              ContentStringFormat="{TemplateBinding HeaderedContentControl.HeaderStringFormat}"
                                              ContentSource="Header"
                                              Name="Content"
                                              HorizontalAlignment="Stretch"
                                              VerticalAlignment="Stretch"
                                              Margin="{StaticResource ItemGroup1Margin}"
                                              MinHeight="{StaticResource NormalControlHeight}"
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver"
                                 Value="True">
                            <Setter TargetName="Bd"
                                    Property="Panel.Background"
                                    Value="{Binding Path=(styles:Controls.HoverBackground), RelativeSource={RelativeSource AncestorType={x:Type TabItem}}}" />
                            <Setter TargetName="Bd"
                                    Property="TextBlock.Foreground"
                                    Value="{Binding Path=(styles:Controls.HoverForeground), RelativeSource={RelativeSource AncestorType={x:Type TabItem}}}" />
                        </Trigger>
                        <Trigger Property="Selector.IsSelected"
                                 Value="True">
                            <Setter Property="Panel.ZIndex"
                                    Value="1" />
                            <Setter TargetName="Bd"
                                    Property="Panel.Background"
                                    Value="{Binding Path=(styles:Controls.HoverBackground), RelativeSource={RelativeSource AncestorType={x:Type TabItem}}}" />
                            <Setter TargetName="Bd"
                                    Property="TextBlock.Foreground"
                                    Value="{Binding Path=(styles:Controls.HoverForeground), RelativeSource={RelativeSource AncestorType={x:Type TabItem}}}" />
                        </Trigger>
                        <!--<MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelected"
                                               Value="False" />
                                    <Condition Property="UIElement.IsMouseOver"
                                               Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Bd"
                                        Property="Border.BorderBrush"
                                        Value="#FF3C7FB1" />
                            </MultiTrigger>-->
                        <Trigger Property="TabItem.TabStripPlacement"
                                 Value="Bottom">
                            <Setter TargetName="Bd"
                                    Property="Border.BorderThickness"
                                    Value="1,0,1,1" />
                        </Trigger>
                        <Trigger Property="TabItem.TabStripPlacement"
                                 Value="Left">
                            <Setter TargetName="Bd"
                                    Property="Border.BorderThickness"
                                    Value="1,1,0,1" />
                        </Trigger>
                        <Trigger Property="TabItem.TabStripPlacement"
                                 Value="Right">
                            <Setter TargetName="Bd"
                                    Property="Border.BorderThickness"
                                    Value="0,1,1,1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected"
                                           Value="True" />
                                <Condition Property="TabItem.TabStripPlacement"
                                           Value="Top" />
                            </MultiTrigger.Conditions>
                            <Setter Property="FrameworkElement.Margin"
                                    Value="-2,-2,-2,-1" />
                            <Setter TargetName="Content"
                                    Property="FrameworkElement.Margin"
                                    Value="0,0,0,1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected"
                                           Value="True" />
                                <Condition Property="TabItem.TabStripPlacement"
                                           Value="Bottom" />
                            </MultiTrigger.Conditions>
                            <Setter Property="FrameworkElement.Margin"
                                    Value="-2,-1,-2,-2" />
                            <Setter TargetName="Content"
                                    Property="FrameworkElement.Margin"
                                    Value="0,1,0,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected"
                                           Value="True" />
                                <Condition Property="TabItem.TabStripPlacement"
                                           Value="Left" />
                            </MultiTrigger.Conditions>
                            <Setter Property="FrameworkElement.Margin"
                                    Value="-2,-2,-1,-2" />
                            <Setter TargetName="Content"
                                    Property="FrameworkElement.Margin"
                                    Value="0,0,1,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected"
                                           Value="True" />
                                <Condition Property="TabItem.TabStripPlacement"
                                           Value="Right" />
                            </MultiTrigger.Conditions>
                            <Setter Property="FrameworkElement.Margin"
                                    Value="-1,-2,-2,-2" />
                            <Setter TargetName="Content"
                                    Property="FrameworkElement.Margin"
                                    Value="1,0,0,0" />
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled"
                                 Value="False">
                            <Setter TargetName="Bd"
                                    Property="Panel.Background"
                                    Value="{StaticResource ControlDisabledBackground}" />
                            <Setter Property="TextElement.Foreground"
                                    Value="{StaticResource ControlDisabledForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TabItem"
           BasedOn="{StaticResource zbTabItemTemplate}">
    </Style>

    <Style x:Key="AreaGroup1TabItem"
           TargetType="TabItem"
           BasedOn="{StaticResource zbTabItemTemplate}">
        <!-- switch header and hover colors so that the selected item has the same color as the content -->
        <Setter Property="Background"
                Value="{StaticResource AreaGroup1HeaderBackground}" />
        <Setter Property="TextBox.Foreground"
                Value="{StaticResource AreaGroup1HeaderForeground}" />
        <Setter Property="styles:Controls.HoverBackground"
                Value="{StaticResource AreaGroup1Background}" />
        <Setter Property="styles:Controls.HoverForeground"
                Value="{StaticResource AreaGroup1Foreground}" />
        <Setter Property="styles:Controls.PressedBackground"
                Value="{StaticResource AreaGroup1PressedBackground}" />
        <Setter Property="styles:Controls.PressedForeground"
                Value="{StaticResource AreaGroup1PressedForeground}" />

        <Setter Property="BorderBrush"
                Value="{StaticResource NoBorder}" />
    </Style>

    <Style x:Key="ItemGroup1TabItem"
           TargetType="TabItem"
           BasedOn="{StaticResource zbTabItemTemplate}">
        <!-- switch header and hover colors so that the selected item has the same color as the content -->
        <Setter Property="Background"
                Value="{StaticResource ItemGroup1HeaderBackground}" />
        <Setter Property="TextBox.Foreground"
                Value="{StaticResource ItemGroup1HeaderForeground}" />
        <Setter Property="styles:Controls.HoverBackground"
                Value="{StaticResource ItemGroup1Background}" />
        <Setter Property="styles:Controls.HoverForeground"
                Value="{StaticResource ItemGroup1Foreground}" />
        <Setter Property="styles:Controls.PressedBackground"
                Value="{StaticResource ItemGroup1PressedBackground}" />
        <Setter Property="styles:Controls.PressedForeground"
                Value="{StaticResource ItemGroup1PressedForeground}" />

        <Setter Property="BorderBrush"
                Value="{StaticResource NoBorder}" />
    </Style>

    <Style x:Key="zbTabControlTemplate"
           TargetType="TabControl">
        <Setter Property="ItemContainerStyle"
                Value="{StaticResource zbTabItemTemplate}" />
        <Setter Property="Background"
                Value="{StaticResource ControlBackground}" />
        <Setter Property="TextBox.Foreground"
                Value="{StaticResource ControlForeground}" />
        <Setter Property="styles:Controls.HoverBackground"
                Value="{StaticResource ControlHoverBackground}" />
        <Setter Property="styles:Controls.HoverForeground"
                Value="{StaticResource ControlHoverForeground}" />
        <Setter Property="styles:Controls.PressedBackground"
                Value="{StaticResource ControlPressedBackground}" />
        <Setter Property="styles:Controls.PressedForeground"
                Value="{StaticResource ControlPressedForeground}" />

        <Setter Property="BorderBrush"
                Value="{StaticResource ControlBorder}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid ClipToBounds="True"
                          SnapsToDevicePixels="True"
                          KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Name="ColumnDefinition0" />
                            <ColumnDefinition Width="0"
                                              Name="ColumnDefinition1" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"
                                           Name="RowDefinition0" />
                            <RowDefinition Height="*"
                                           Name="RowDefinition1" />
                        </Grid.RowDefinitions>
                        <TabPanel IsItemsHost="True"
                                  Name="HeaderPanel"
                                  Margin="2,2,2,0"
                                  Panel.ZIndex="1"
                                  KeyboardNavigation.TabIndex="1"
                                  Grid.Column="0"
                                  Grid.Row="0" />
                        <Border BorderThickness="{TemplateBinding Border.BorderThickness}"
                                BorderBrush="{TemplateBinding Border.BorderBrush}"
                                Background="{TemplateBinding Panel.Background}"
                                Name="ContentPanel"
                                KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Local"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                Grid.Column="0"
                                Grid.Row="1">
                            <ContentPresenter Content="{TemplateBinding TabControl.SelectedContent}"
                                              ContentTemplate="{TemplateBinding TabControl.SelectedContentTemplate}"
                                              ContentStringFormat="{TemplateBinding TabControl.SelectedContentStringFormat}"
                                              ContentSource="SelectedContent"
                                              Name="PART_SelectedContentHost"
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabControl.TabStripPlacement"
                                 Value="Bottom">
                            <Setter TargetName="HeaderPanel"
                                    Property="Grid.Row"
                                    Value="1" />
                            <Setter TargetName="ContentPanel"
                                    Property="Grid.Row"
                                    Value="0" />
                            <Setter TargetName="RowDefinition0"
                                    Property="RowDefinition.Height"
                                    Value="*" />
                            <Setter TargetName="RowDefinition1"
                                    Property="RowDefinition.Height"
                                    Value="Auto" />
                            <Setter TargetName="HeaderPanel"
                                    Property="FrameworkElement.Margin"
                                    Value="2,0,2,2" />
                        </Trigger>
                        <Trigger Property="TabControl.TabStripPlacement"
                                 Value="Left">
                            <Setter TargetName="HeaderPanel"
                                    Property="Grid.Row"
                                    Value="0" />
                            <Setter TargetName="ContentPanel"
                                    Property="Grid.Row"
                                    Value="0" />
                            <Setter TargetName="HeaderPanel"
                                    Property="Grid.Column"
                                    Value="0" />
                            <Setter TargetName="ContentPanel"
                                    Property="Grid.Column"
                                    Value="1" />
                            <Setter TargetName="ColumnDefinition0"
                                    Property="ColumnDefinition.Width"
                                    Value="Auto" />
                            <Setter TargetName="ColumnDefinition1"
                                    Property="ColumnDefinition.Width"
                                    Value="*" />
                            <Setter TargetName="RowDefinition0"
                                    Property="RowDefinition.Height"
                                    Value="*" />
                            <Setter TargetName="RowDefinition1"
                                    Property="RowDefinition.Height"
                                    Value="0" />
                            <Setter TargetName="HeaderPanel"
                                    Property="FrameworkElement.Margin"
                                    Value="2,2,0,2" />
                        </Trigger>
                        <Trigger Property="TabControl.TabStripPlacement"
                                 Value="Right">
                            <Setter TargetName="HeaderPanel"
                                    Property="Grid.Row"
                                    Value="0" />
                            <Setter TargetName="ContentPanel"
                                    Property="Grid.Row"
                                    Value="0" />
                            <Setter TargetName="HeaderPanel"
                                    Property="Grid.Column"
                                    Value="1" />
                            <Setter TargetName="ContentPanel"
                                    Property="Grid.Column"
                                    Value="0" />
                            <Setter TargetName="ColumnDefinition0"
                                    Property="ColumnDefinition.Width"
                                    Value="*" />
                            <Setter TargetName="ColumnDefinition1"
                                    Property="ColumnDefinition.Width"
                                    Value="Auto" />
                            <Setter TargetName="RowDefinition0"
                                    Property="RowDefinition.Height"
                                    Value="*" />
                            <Setter TargetName="RowDefinition1"
                                    Property="RowDefinition.Height"
                                    Value="0" />
                            <Setter TargetName="HeaderPanel"
                                    Property="FrameworkElement.Margin"
                                    Value="0,2,2,2" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled"
                                 Value="False">
                            <Setter Property="TextElement.Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AreaGroup1TabControl"
           TargetType="TabControl"
           BasedOn="{StaticResource zbTabControlTemplate}">
        <Setter Property="ItemContainerStyle"
                Value="{StaticResource AreaGroup1TabItem}" />
        <Setter Property="Background"
                Value="{StaticResource AreaGroup1Background}" />
        <Setter Property="TextBox.Foreground"
                Value="{StaticResource AreaGroup1Foreground}" />
        <Setter Property="styles:Controls.HoverBackground"
                Value="{StaticResource AreaGroup1HeaderBackground}" />
        <Setter Property="styles:Controls.HoverForeground"
                Value="{StaticResource AreaGroup1HeaderForeground}" />
        <Setter Property="styles:Controls.PressedBackground"
                Value="{StaticResource AreaGroup1PressedBackground}" />
        <Setter Property="styles:Controls.PressedForeground"
                Value="{StaticResource AreaGroup1PressedForeground}" />

        <Setter Property="BorderBrush"
                Value="{StaticResource AreaGroup1Border}" />
        <Setter Property="Margin"
                Value="{StaticResource AreaGroup1Margin}" />
        <Setter Property="Padding"
                Value="{StaticResource AreaGroup1Padding}" />
    </Style>

    <Style x:Key="ItemGroup1TabControl"
           TargetType="TabControl"
           BasedOn="{StaticResource zbTabControlTemplate}">
        <Setter Property="ItemContainerStyle"
                Value="{StaticResource ItemGroup1TabItem}" />
        <Setter Property="Background"
                Value="{StaticResource ItemGroup1Background}" />
        <Setter Property="TextBox.Foreground"
                Value="{StaticResource ItemGroup1Foreground}" />
        <Setter Property="styles:Controls.HoverBackground"
                Value="{StaticResource ItemGroup1HeaderBackground}" />
        <Setter Property="styles:Controls.HoverForeground"
                Value="{StaticResource ItemGroup1HeaderForeground}" />
        <Setter Property="styles:Controls.PressedBackground"
                Value="{StaticResource ItemGroup1PressedBackground}" />
        <Setter Property="styles:Controls.PressedForeground"
                Value="{StaticResource ItemGroup1PressedForeground}" />

        <Setter Property="BorderBrush"
                Value="{StaticResource ItemGroup1Border}" />
        <Setter Property="Margin"
                Value="{StaticResource ItemGroup1Margin}" />
        <Setter Property="Padding"
                Value="{StaticResource ItemGroup1Padding}" />
    </Style>

    <Style TargetType="TabControl"
           BasedOn="{StaticResource zbTabControlTemplate}">
    </Style>

    <Style x:Key="MainTabCtrl"
           TargetType="TabControl">
        <Setter Property="Background"
                Value="{StaticResource DefaultBackground}" />
    </Style>

    <Style x:Key="zbGroupBoxTemplate"
           TargetType="GroupBox">
        <Setter Property="SnapsToDevicePixels"
                Value="True" />

        <Setter Property="Background"
                Value="{StaticResource ControlBackground}" />
        <Setter Property="TextBox.Foreground"
                Value="{StaticResource ControlForeground}" />
        <Setter Property="styles:Controls.HeaderBackground"
                Value="{StaticResource ControlHoverBackground}" />
        <Setter Property="styles:Controls.HeaderForeground"
                Value="{StaticResource ControlHoverForeground}" />
        <Setter Property="styles:Controls.PressedBackground"
                Value="{StaticResource ControlPressedBackground}" />
        <Setter Property="styles:Controls.PressedForeground"
                Value="{StaticResource ControlPressedForeground}" />

        <Setter Property="BorderBrush"
                Value="{StaticResource NoBorder}" />
        <Setter Property="styles:Controls.BorderStyle"
                Value="{StaticResource GroupBorderStyle}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Border>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <!-- ContentPresenter for the header -->
                            <Border Grid.Row="0"
                                    x:Name="Header"
                                    Padding="20,0,0,0"
                                    MinHeight="{StaticResource NormalControlHeight}"
                                    Background="{Binding Path=(styles:Controls.HeaderBackground), RelativeSource={RelativeSource AncestorType={x:Type GroupBox}}}"
                                    BorderBrush="{TemplateBinding BorderBrush}">
                                <ContentPresenter ContentSource="Header"
                                                  VerticalAlignment="Center"
                                                  TextBlock.Foreground="{Binding Path=(styles:Controls.HeaderForeground), RelativeSource={RelativeSource AncestorType={x:Type GroupBox}}}"
                                                  Margin="{StaticResource ItemGroup1Margin}"
                                                  MinHeight="{StaticResource NormalControlHeight}"
                                                  RecognizesAccessKey="True" />
                            </Border>
                            <Border Grid.Row="1"
                                    Background="{TemplateBinding Background}">
                                <!-- Primary content for GroupBox -->
                                <ContentPresenter Margin="{TemplateBinding Padding}" />
                            </Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AreaGroup1GroupBox"
           TargetType="GroupBox"
           BasedOn="{StaticResource zbGroupBoxTemplate}">
        <Setter Property="Foreground"
                Value="{StaticResource AreaGroup1Foreground}" />
        <Setter Property="Background"
                Value="{StaticResource AreaGroup1Background}" />
        <Setter Property="styles:Controls.HeaderForeground"
                Value="{StaticResource AreaGroup1HeaderForeground}" />
        <Setter Property="styles:Controls.HeaderBackground"
                Value="{StaticResource AreaGroup1HeaderBackground}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource AreaGroup1Border}" />
        <Setter Property="Margin"
                Value="{StaticResource AreaGroup1Margin}" />
        <Setter Property="Padding"
                Value="{StaticResource AreaGroup1Padding}" />

    </Style>

    <Style x:Key="ItemGroup1GroupBox"
           TargetType="GroupBox"
           BasedOn="{StaticResource zbGroupBoxTemplate}">
        <Setter Property="Foreground"
                Value="{StaticResource ItemGroup1Foreground}" />
        <Setter Property="Background"
                Value="{StaticResource ItemGroup1Background}" />
        <Setter Property="styles:Controls.HeaderForeground"
                Value="{StaticResource ItemGroup1HeaderForeground}" />
        <Setter Property="styles:Controls.HeaderBackground"
                Value="{StaticResource ItemGroup1HeaderBackground}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource ItemGroup1Border}" />
        <Setter Property="Margin"
                Value="{StaticResource ItemGroup1Margin}" />
        <Setter Property="Padding"
                Value="{StaticResource ItemGroup1Padding}" />
    </Style>

    <Style TargetType="GroupBox"
           BasedOn="{StaticResource zbGroupBoxTemplate}">
    </Style>

    <DataTemplate x:Key="ExportOverlayTemplate">
        <DataTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver"
                     Value="true">
                <Setter Property="StackPanel.Visibility"
                        TargetName="Layer"
                        Value="Visible" />
            </Trigger>
        </DataTemplate.Triggers>
        <Grid Background="Transparent">
            <ContentPresenter Content="{Binding}" />
            <StackPanel x:Name="Layer"
                        VerticalAlignment="Bottom"
                        HorizontalAlignment="Right"
                        Orientation="Horizontal"
                        Visibility="Hidden">
                <Button>Print</Button>
                <Button>Export</Button>
            </StackPanel>
        </Grid>
    </DataTemplate>

    <Style x:Key="zbListViewTemplate"
           TargetType="ListView">
        <Setter Property="BorderBrush"
                Value="{StaticResource ControlBorder}" />
    </Style>

    <Style TargetType="ListView"
           BasedOn="{StaticResource zbListViewTemplate}">
    </Style>

    <Style TargetType="{x:Type wpftk:DataGrid}">
    </Style>

    <!-- Style buttons -->
    <Style x:Key="ImageButton"
           TargetType="{x:Type ctrls:CommandButton}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Image Source="{Binding Path=(ctrls:CommandButton.Image), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrls:CommandButton}}}"
                               MaxHeight="32"
                               MaxWidth="32" />
                        <ContentPresenter Content="{Binding Path=Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrls:CommandButton}}}"
                                          Margin="5 0 0 0"
                                          VerticalAlignment="Center" />
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ImageOnlyButton"
           TargetType="{x:Type ctrls:CommandButton}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Image Source="{Binding Path=(ctrls:CommandButton.Image), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrls:CommandButton}}}"
                           MaxHeight="32"
                           MaxWidth="32" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ImageToolbarButton"
           BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
           TargetType="{x:Type ctrls:CommandButton}">
        <Setter Property="Margin"
                Value="0,0,7,0" />
        <Setter Property="Padding"
                Value="0,0,5,0" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Image Source="{Binding Path=(ctrls:CommandButton.Image), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrls:CommandButton}}}"
                               MaxHeight="16"
                               MaxWidth="16" />
                        <ContentPresenter Content="{Binding Path=Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrls:CommandButton}}}"
                                          Margin="5 0 0 0"
                                          VerticalAlignment="Center" />
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ImageOnlyToolbarButton"
           BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
           TargetType="{x:Type ctrls:CommandButton}">
        <Setter Property="Margin"
                Value="0,0,7,0" />
        <Setter Property="Padding"
                Value="0,0,5,0" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Image Source="{Binding Path=(ctrls:CommandButton.Image), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrls:CommandButton}}}"
                           MaxHeight="16"
                           MaxWidth="16" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--- Style menus -->
    <Style x:Key="CommandMenuItem"
           TargetType="MenuItem">
        <Setter Property="Command"
                Value="{Binding Converter={StaticResource CommandConverter}}" />
        <Setter Property="Header"
                Value="{Binding Label}" />
        <Setter Property="ToolTip"
                Value="{Binding ToolTip}" />
        <Setter Property="Icon"
                Value="{Binding Icon, Converter={StaticResource ImageCtrlConverter}, ConverterParameter='16,16'}" />
    </Style>

    <!-- Commands -->
    <DataTemplate DataType="{x:Type client:ContainerCommand}">
        <Menu Margin="0,2,0,0"
              Background="#00000000">
            <Menu.Resources>
                <DataTemplate DataType="{x:Type client:CommandViewModel}">
                    <TextBlock Text="{Binding}" />
                </DataTemplate>
                <DataTemplate DataType="{x:Type client:ActionViewModel}">
                    <TextBlock Text="{Binding}" />
                </DataTemplate>
            </Menu.Resources>
            <MenuItem ItemsSource="{Binding Commands}"
                      Header="{Binding Name}"
                      ItemContainerStyle="{StaticResource CommandMenuItem}">
            </MenuItem>
        </Menu>
    </DataTemplate>

    <!-- from http://stackoverflow.com/questions/780426/link-button-in-wpf by Anderson Imes -->
    <Style x:Key="LinkButton"
           TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock x:Name="Underliner">
            <ContentPresenter />
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Cursor"
                Value="Hand" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="true">
                <!-- TODO -->
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <!-- TODO -->
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style Girds and lists -->
    <Style x:Key="ListViewItemContainerStyle"
           TargetType="ListViewItem">
        <Setter Property="Background"
                Value="{Binding Highlight, Converter={StaticResource HighlightGridBackgroundConverter}}" />
        <Setter Property="Foreground"
                Value="{Binding Highlight, Converter={StaticResource HighlightGridForegroundConverter}}" />
        <Setter Property="FontStyle"
                Value="{Binding Highlight, Converter={StaticResource HighlightGridFontStyleConverter}}" />
        <Setter Property="FontWeight"
                Value="{Binding Highlight, Converter={StaticResource HighlightGridFontWeightConverter}}" />
    </Style>

    <Style x:Key="ListBoxItemContainerStyle"
           TargetType="ListBoxItem">
        <Setter Property="Background"
                Value="{Binding Highlight, Converter={StaticResource HighlightGridBackgroundConverter}}" />
        <Setter Property="Foreground"
                Value="{Binding Highlight, Converter={StaticResource HighlightGridForegroundConverter}}" />
        <Setter Property="FontStyle"
                Value="{Binding Highlight, Converter={StaticResource HighlightGridFontStyleConverter}}" />
        <Setter Property="FontWeight"
                Value="{Binding Highlight, Converter={StaticResource HighlightGridFontWeightConverter}}" />
    </Style>

    <!-- Force GridView content to be streched -->
    <Style x:Key="ListViewAsGridViewItemContainerStyle"
           TargetType="ListViewItem"
           BasedOn="{StaticResource ListViewItemContainerStyle}">
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
    </Style>

    <Style x:Key="DataGridItemContainerStyle"
           TargetType="{x:Type wpftk:DataGridRow}">
        <Setter Property="Background"
                Value="{Binding Highlight, Converter={StaticResource HighlightGridBackgroundConverter}}" />
        <Setter Property="Foreground"
                Value="{Binding Highlight, Converter={StaticResource HighlightGridForegroundConverter}}" />
        <Setter Property="FontStyle"
                Value="{Binding Highlight, Converter={StaticResource HighlightGridFontStyleConverter}}" />
        <Setter Property="FontWeight"
                Value="{Binding Highlight, Converter={StaticResource HighlightGridFontWeightConverter}}" />
    </Style>

    <!-- NavigationBreadCrumb -->
    <Style x:Key="NavigationBreadCrumb">
        <Setter Property="Control.FontWeight"
                Value="Bold" />
        <Setter Property="TextBlock.FontWeight"
                Value="Bold" />
    </Style>

    <Style x:Key="NavigationBreadCrumbLinkButton"
           BasedOn="{StaticResource LinkButton}"
           TargetType="Button">
        <Setter Property="FontSize"
                Value="{StaticResource LargeFontSize}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="FontWeight"
                        Value="Bold" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Data Templates -->
    <DataTemplate x:Key="emptyTemplate">
        <Viewbox Stretch="UniformToFill"
                 StretchDirection="DownOnly">
            <Ellipse Height="100"
                     Width="100"
                     StrokeThickness="10"
                     Stroke="Red"
                     Fill="White" />
        </Viewbox>
    </DataTemplate>

    <DataTemplate x:Key="nullTemplate">
        <TextBlock FontWeight="Bold">k. A.</TextBlock>
        <!-- TODO: this is german, needs translation -->
    </DataTemplate>

    <DataTemplate x:Key="GridHeaderTemplateArrowUp">
        <StackPanel Orientation="Horizontal">
            <ContentPresenter Content="{Binding}" />
            <TextBlock Text="^"
                       Margin="10 0 0 0" />
        </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="GridHeaderTemplateArrowDown">
        <StackPanel Orientation="Horizontal">
            <ContentPresenter Content="{Binding}" />
            <TextBlock Text="v"
                       Margin="10 0 0 0" />
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="idCellTemplate">
        <TextBlock Text="{Binding ID}" />
    </DataTemplate>
    <DataTemplate x:Key="iconCellTemplate">
        <Image Source="{Binding Converter={StaticResource IconConverter}}"
               Width="14"
               Height="14" />
    </DataTemplate>
    <DataTemplate x:Key="nameCellTemplate">
        <TextBlock Text="{Binding Name}" />
    </DataTemplate>

    <!-- default styles for our usercontrols -->
    <Style TargetType="{x:Type ctrls:LabeledView}">
        <Setter Property="Margin"
                Value="2,1,2,1" />
        <Setter Property="MinWidth"
                Value="100" />
        <Setter Property="MinHeight"
                Value="26" />
        <Setter Property="VerticalAlignment"
                Value="Top" />
    </Style>

</ResourceDictionary>