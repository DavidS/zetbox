<%@ CodeTemplate Language="C#" 
    Name="Mappings.CollectionEntriesHbm"
    ClassName="Kistl.DalProvider.NHibernate.Generator.Templates.Mappings.CollectionEntriesHbm" 
    Inherits="Kistl.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Import Namespace="Kistl.Generator" %>
<%@ Import Namespace="Kistl.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<?xml version="1.0"?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2" 
                   schema="`dbo`"
                   default-cascade="save-update"
                   assembly="Kistl.Objects.NHibernateImpl">

    <!-- RelationCollectionEntries -->
<%
    foreach (var rel in ctx.GetQuery<Relation>()
        .Where(r => r.Storage == StorageType.Separate)
        .ToList()
        .OrderBy(r => r.GetRelationClassName()))
    {
        var collectionEntryNamespace = rel.A.Type.Module.Namespace;
        var collectionEntryClassName = rel.GetRelationClassName() + ImplementationSuffix;
        var proxyClassName = rel.GetRelationClassName() + "Proxy";
        var tableName = rel.GetRelationTableName();
%>
    <class name="<%= collectionEntryNamespace %>.<%= collectionEntryClassName %>+<%= proxyClassName %>"
           proxy="<%= collectionEntryNamespace %>.<%= collectionEntryClassName %>+<%= proxyClassName %>"
           table="`<%= tableName %>`">
        <id name="ID"
            column="`ID`"
            type="Int32">

            <generator class="native">
                <param name="sequence">`<%= tableName %>_ID_seq`</param>
            </generator>
        </id>

        <many-to-one name="A"
                     column="`<%= rel.GetRelationFkColumnName(RelationEndRole.A) %>`" />
        <many-to-one name="B"
                     column="`<%= rel.GetRelationFkColumnName(RelationEndRole.B) %>`" />
<% if (rel.NeedsPositionStorage(RelationEndRole.A)) { %>
        <property name="A<%= Kistl.API.Helper.PositionSuffix %>"
                    column="`<%= Construct.ListPositionColumnName(rel.B) %>`" />
<% } %>
<% if (rel.NeedsPositionStorage(RelationEndRole.B)) { %>
        <property name="B<%= Kistl.API.Helper.PositionSuffix %>"
                  column="`<%= Construct.ListPositionColumnName(rel.A) %>`" />
<% } %>
<% if (rel.A.Type.ImplementsIExportable() && rel.B.Type.ImplementsIExportable()) { %>
        <property name="ExportGuid" column="`ExportGuid`" type="Guid" />
<% } %>
    </class>
<% } %>

    <!-- ValueCollectionEntries -->
<%
    foreach (var vtp in ctx.GetQuery<ValueTypeProperty>()
        .Where(p => p.IsList)
        .OrderBy(p => p.Name))
    {
        var collectionEntryNamespace = vtp.Module.Namespace;
        var collectionEntryClassName = vtp.GetCollectionEntryClassName() + ImplementationSuffix;
        var proxyClassName = vtp.GetCollectionEntryClassName() + "Proxy";
        var tableName = vtp.GetCollectionEntryTable();
%>
    <class name="<%= collectionEntryNamespace %>.<%= collectionEntryClassName %>+<%= proxyClassName %>"
           proxy="<%= collectionEntryNamespace %>.<%= collectionEntryClassName %>+<%= proxyClassName %>"
           table="`<%= tableName %>`">
        <id name="ID"
            column="`ID`"
            type="Int32">

            <generator class="native">
                <param name="sequence">`<%= tableName %>_ID_seq`</param>
            </generator>
        </id>

        <many-to-one name="Parent"
                     column="`<%= vtp.GetCollectionEntryReverseKeyColumnName() %>`" />
        <property name="Value"
                  column="`<%= vtp.Name %>`" />
<% if (vtp.HasPersistentOrder) { %>
        <property name="<%= vtp.Name %>Index"
                  column="`<%= vtp.Name %>Index`" />
<%  
    throw new NotImplementedException();
} %>
<% if (((ObjectClass)vtp.ObjectClass).ImplementsIExportable()) { %>
        <property name="ExportGuid" column="`ExportGuid`" type="Guid" />
<% } %>
    </class>
<% } %>

    <!-- CompoundObjectCollectionEntries -->
<%
    foreach (var cop in ctx.GetQuery<CompoundObjectProperty>()
        .Where(p => p.IsList)
        .OrderBy(p => p.Name))
    {
        var collectionEntryNamespace = cop.Module.Namespace;
        var collectionEntryClassName = cop.GetCollectionEntryClassName() + ImplementationSuffix;
        var proxyClassName = cop.GetCollectionEntryClassName() + "Proxy";
        var tableName = cop.GetCollectionEntryTable();
%>
    <class name="<%= collectionEntryNamespace %>.<%= collectionEntryClassName %>+<%= proxyClassName %>"
           proxy="<%= collectionEntryNamespace %>.<%= collectionEntryClassName %>+<%= proxyClassName %>"
           table="`<%= tableName %>`">
        <id name="ID"
            column="`ID`"
            type="Int32">

            <generator class="native">
                <param name="sequence">`<%= tableName %>_ID_seq`</param>
            </generator>
        </id>

        <many-to-one name="Parent"
                     column="`<%= cop.GetCollectionEntryReverseKeyColumnName() %>`" />
        <component name="Value"
                   class="<%= cop.CompoundObjectDefinition.Module.Namespace %>.<%= cop.CompoundObjectDefinition.Name %><%= ImplementationSuffix %>,Kistl.Objects.NHibernateImpl">
<% PropertiesHbm.Call(Host, ctx, cop.Name + "_", cop.CompoundObjectDefinition.Properties); %>
        </component>

<% if (cop.HasPersistentOrder) { %>
        <property name="<%= cop.Name %>Index"
                    column="`<%= cop.Name %>Index`" />
<% 
    throw new NotImplementedException();
} %>
<% if (((ObjectClass)cop.ObjectClass).ImplementsIExportable()) { %>
        <property name="ExportGuid" column="`ExportGuid`" type="Guid" />
<% } %>
    </class>
<% } %>
</hibernate-mapping>