<%@ CodeTemplate Language="C#" 
    Name="Mappings.CollectionEntriesHbm"
    ClassName="Kistl.DalProvider.NHibernate.Generator.Templates.Mappings.CollectionEntriesHbm" 
    Inherits="Kistl.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Import Namespace="Kistl.Generator" %>
<%@ Import Namespace="Kistl.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<?xml version="1.0"?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2" 
                   default-cascade="save-update"
                   assembly="Kistl.Objects.NHibernateImpl">

    <!-- RelationCollectionEntries -->
<%
    foreach (var rel in ctx.GetQuery<Relation>()
        .Where(r => r.Storage == StorageType.Separate)
        .ToList()
        .OrderBy(r => r.GetRelationClassName()))
    {
        var collectionEntryNamespace = rel.A.Type.Module.Namespace;
        var collectionEntryClassName = rel.GetRelationClassName() + ImplementationSuffix;
        var proxyClassName = rel.GetRelationClassName() + "Proxy";
        var schemaName = rel.Module.SchemaName;
        var tableName = rel.GetRelationTableName();
%>
    <class name="<%= collectionEntryNamespace %>.<%= collectionEntryClassName %>+<%= proxyClassName %>"
           proxy="<%= collectionEntryNamespace %>.<%= collectionEntryClassName %>+<%= proxyClassName %>"
           table="`<%= tableName %>`"
           schema="`<%= schemaName %>`" >

<% IdGeneratorHbm.Call(Host, "id", schemaName, tableName); %>

        <many-to-one name="A"
                     column="`<%= rel.GetRelationFkColumnName(RelationEndRole.A) %>`" />
        <many-to-one name="B"
                     column="`<%= rel.GetRelationFkColumnName(RelationEndRole.B) %>`" />
<% if (rel.NeedsPositionStorage(RelationEndRole.A)) { %>
        <property name="A<%= Kistl.API.Helper.PositionSuffix %>"
                    column="`<%= Construct.ListPositionColumnName(rel.B) %>`" />
<% } %>
<% if (rel.NeedsPositionStorage(RelationEndRole.B)) { %>
        <property name="B<%= Kistl.API.Helper.PositionSuffix %>"
                  column="`<%= Construct.ListPositionColumnName(rel.A) %>`" />
<% } %>
<% if (rel.A.Type.ImplementsIExportable() && rel.B.Type.ImplementsIExportable()) { %>
        <property name="ExportGuid" column="`ExportGuid`" type="Guid" />
<% } %>
    </class>
<% } %>

    <!-- ValueCollectionEntries are defined directly on use -->
<%
   foreach (var prop in ctx.GetQuery<ValueTypeProperty>()
                            .Where(p => p.IsList && !p.IsCalculated)
                            .Where(p => p.ObjectClass is ObjectClass)
                            .ToList()
                            .OrderBy(p => p.ObjectClass.Name)
                            .ThenBy(p => p.Name))
   {
        var collectionEntryNamespace = prop.GetCollectionEntryNamespace();
        var collectionEntryClassName = prop.GetCollectionEntryClassName() + ImplementationSuffix;
        var proxyClassName = prop.GetCollectionEntryClassName() + "Proxy";
        var schemaName = prop.Module.SchemaName;
        var tableName = prop.GetCollectionEntryTable();
        var ceReverseKeyColumnName = prop.GetCollectionEntryReverseKeyColumnName();
%>
    <class name="<%= collectionEntryNamespace %>.<%= collectionEntryClassName %>+<%= proxyClassName %>"
           proxy="<%= collectionEntryNamespace %>.<%= collectionEntryClassName %>+<%= proxyClassName %>"
           table="`<%= tableName %>`"
           schema="`<%= schemaName %>`" >

<% IdGeneratorHbm.Call(Host, "id", schemaName, tableName); %>

        <many-to-one name="Parent"
                     column="`<%= ceReverseKeyColumnName %>`" />
<% ValueTypePropertyHbm.Call(Host, String.Empty, prop, "Value", prop.Name, true, ImplementationSuffix, false); %>
<% if (prop.HasPersistentOrder) { %>
        <property name="Value_pos"
                  column="`Index`" />
<% } %>
<% if (((ObjectClass)prop.ObjectClass).ImplementsIExportable()) { %>
        <!-- export guid is not needed since serialization is always "in-place"
        <property name="ExportGuid" column="`ExportGuid`" type="Guid" />
        -->
<% } %>
    </class>

<% } %>
    <!-- CompoundObjectCollectionEntries -->
<%
   foreach (var prop in ctx.GetQuery<CompoundObjectProperty>()
                            .Where(p => p.IsList /* && !p.IsCalculated */)
                            .Where(p => p.ObjectClass is ObjectClass)
                            .ToList()
                            .OrderBy(p => p.ObjectClass.Name)
                            .ThenBy(p => p.Name))
   {
        var collectionEntryNamespace = prop.GetCollectionEntryNamespace();
        var collectionEntryClassName = prop.GetCollectionEntryClassName() + ImplementationSuffix;
        var proxyClassName = prop.GetCollectionEntryClassName() + "Proxy";
        var schemaName = prop.Module.SchemaName;
        var tableName = prop.GetCollectionEntryTable();
        var ceReverseKeyColumnName = prop.GetCollectionEntryReverseKeyColumnName();
%>
    <class name="<%= collectionEntryNamespace %>.<%= collectionEntryClassName %>+<%= proxyClassName %>"
           proxy="<%= collectionEntryNamespace %>.<%= collectionEntryClassName %>+<%= proxyClassName %>"
           table="`<%= tableName %>`"
           schema="`<%= schemaName %>`" >

<% IdGeneratorHbm.Call(Host, "id", schemaName, tableName); %>

        <many-to-one name="Parent"
                     column="`<%= ceReverseKeyColumnName %>`" />
<% CompoundObjectPropertyHbm.Call(Host, ctx, String.Empty, prop, "Value", prop.Name, true, ImplementationSuffix); %>
<% if (prop.HasPersistentOrder) { %>
        <property name="Value_pos"
                  column="`Index`" />
<% } %>
<% if (((ObjectClass)prop.ObjectClass).ImplementsIExportable()) { %>
        <!-- export guid is not needed since serialization is always "in-place"
        <property name="ExportGuid" column="`ExportGuid`" type="Guid" />
        -->
<% } %>
    </class>

<% } %>
</hibernate-mapping>
