<%@ CodeTemplate Language="C#"
    Name="Properties.CompoundObjectPropertyTemplate"
    ClassName="Kistl.DalProvider.NHibernate.Generator.Templates.Properties.CompoundObjectPropertyTemplate"
    Inherits="Kistl.Generator.MemberTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Import Namespace="Kistl.Generator" %>
<%@ Import Namespace="Kistl.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="serializationList" Type="Kistl.Generator.Templates.Serialization.SerializationMembersList" %>
<%@ Parameter Name="xmlNamespace" Type="string" %>
<%@ Parameter Name="propName" Type="string" %>
<%@ Parameter Name="backingPropertyName" Type="string" %>
<%@ Parameter Name="backingStoreName" Type="string" %>
<%@ Parameter Name="coType" Type="string" %>
<%@ Parameter Name="coImplementationType" Type="string" %>
<%@ Parameter Name="isNullable" Type="bool" %>
        // BEGIN <%= this.GetType() %>
<%
    backingStoreName = "this.Proxy." + propName;
%>
        // implement the user-visible interface
        <%= GetModifiers() %> <%= coType %> <%= propName %>
        {
            get { return <%= backingPropertyName %>.CompoundObject_IsNull ? null : <%= backingPropertyName %>; }
            set { <%= backingPropertyName %> = (<%= coImplementationType %>)value; }
        }

        /// <summary>backing property for <%= UglyXmlEncode(propName) %>, takes care of attaching/detaching the values</summary>
        <%= GetModifiers() %> <%= coImplementationType %> <%= backingPropertyName %>
        {
            get 
			{ 
                if (!CurrentAccessRights.HasReadRights()) return null;
				return <%= backingStoreName %>; 
			}
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
<% if (!isNullable) { %>
                if (value == null)
                    throw new ArgumentNullException("value");
<% } %>
                if (!object.Equals(<%= backingStoreName %>, value))
                {
					var __oldValue = <%= backingStoreName %>;
					var __newValue = value;

					NotifyPropertyChanging("<%= propName %>", __oldValue, __newValue);

					if (<%= backingStoreName %> != null)
					{ 
						<%= backingStoreName %>.DetachFromObject(this, "<%= propName %>");
					}
					if (__newValue == null)
					{
						<%= backingStoreName %> = new <%= coImplementationType %>(this, "<%= propName %>", null, null) { CompoundObject_IsNull = true };
					}
                    else
                    {
					    __newValue = (<%= coImplementationType %>)__newValue.Clone();
					    <%= backingStoreName %> = __newValue;
                        <%= backingStoreName %>.CompoundObject_IsNull = false;
					    <%= backingStoreName %>.AttachToObject(this, "<%= propName %>");
                    }

					NotifyPropertyChanged("<%= propName %>", __oldValue, __newValue);
				}
            }
        }
<%
        AddSerialization(serializationList, coType, propName, coImplementationType, backingPropertyName);
%>
        // END <%= this.GetType() %>