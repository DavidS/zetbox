<%@ CodeTemplate Language="C#" 
    Name="Properties.ValueCollectionProperty"
    ClassName="Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ValueCollectionProperty" 
    Inherits="Kistl.Generator.MemberTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Generator" %>
<%@ Import Namespace="Kistl.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="serializationList" Type="Kistl.Generator.Templates.Serialization.SerializationMembersList" %>
<%@ Parameter Name="name" Type="string" %>
<%@ Parameter Name="backingName" Type="string" %>
<%@ Parameter Name="backingCollectionType" Type="string" %>
<%@ Parameter Name="exposedCollectionInterface" Type="string" %>
<%@ Parameter Name="thisInterface" Type="string" %>
<%@ Parameter Name="referencedType" Type="string" %>
<%@ Parameter Name="referencedCollectionEntry" Type="string" %>
<%@ Parameter Name="referencedCollectionEntryProxy" Type="string" %>
<%@ Parameter Name="providerCollectionType" Type="string" %>
<%@ Parameter Name="underlyingCollectionName" Type="string" %>
<%@ Parameter Name="orderByB" Type="bool" %>
<%@ Parameter Name="moduleNamespace" Type="string" %>
        // BEGIN <%= this.GetType() %>
<% AddSerialization(serializationList, underlyingCollectionName); %>
        <%= GetModifiers() %> <%= exposedCollectionInterface %><<%= referencedType %>> <%= name %>
        {
            get
            {
                if (<%= backingName %> == null)
                {
                    <%= underlyingCollectionName %> = new ProjectedList<<%= referencedCollectionEntryProxy %>, <%= referencedCollectionEntry %>>(
                                MagicCollectionFactory.WrapAsList(this.Proxy.<%= name %>),
                                p => (<%= referencedCollectionEntry %>)OurContext.AttachAndWrap(p),
                                d => (<%= referencedCollectionEntryProxy %>)((NHibernatePersistenceObject)d).NHibernateProxy);

                    <%= backingName %> = new <%= backingCollectionType %>(
                            this.Context,
                            this,
                            // () => this.NotifyPropertyChanged("<%= name %>", null, null),
                            <%= underlyingCollectionName %>);
                }
                return <%= backingName %>;
            }
        }

        private <%= backingCollectionType %> <%= backingName %>;
        private ProjectedList<<%= referencedCollectionEntryProxy %>, <%= referencedCollectionEntry %>> <%= underlyingCollectionName %>;
        // END <%= this.GetType() %>
