<%@ CodeTemplate Language="C#" 
    Name="Properties.ValueCollectionProperty"
    ClassName="Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ValueCollectionProperty" 
    Inherits="Kistl.Generator.MemberTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Generator" %>
<%@ Import Namespace="Kistl.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="serializationList" Type="Kistl.Generator.Templates.Serialization.SerializationMembersList" %>
<%@ Parameter Name="name" Type="string" %>
<%@ Parameter Name="backingName" Type="string" %>
<%@ Parameter Name="backingCollectionType" Type="string" %>
<%@ Parameter Name="exposedCollectionInterface" Type="string" %>
<%@ Parameter Name="thisInterface" Type="string" %>
<%@ Parameter Name="referencedType" Type="string" %>
<%@ Parameter Name="referencedCollectionEntry" Type="string" %>
<%@ Parameter Name="referencedCollectionEntryImpl" Type="string" %>
<%@ Parameter Name="referencedCollectionEntryProxy" Type="string" %>
<%@ Parameter Name="providerCollectionType" Type="string" %>
<%@ Parameter Name="underlyingCollectionName" Type="string" %>
<%@ Parameter Name="underlyingCollectionBackingName" Type="string" %>
<%@ Parameter Name="orderByValue" Type="bool" %>
<%@ Parameter Name="moduleNamespace" Type="string" %>
<%@ Parameter Name="ListOrCollection" Type="string" %>

<%
	var eventName = "On" + name + "_PostSetter";
%>
        // BEGIN <%= this.GetType() %>
<% AddSerialization(serializationList, underlyingCollectionName); %>
        <%= GetModifiers() %> <%= exposedCollectionInterface %><<%= referencedType %>> <%= name %>
        {
            get
            {
                if (<%= backingName %> == null)
                {
                    <%= backingName %> = new <%= backingCollectionType %>(
                            this.Context,
                            this,
                            () => { this.NotifyPropertyChanged("<%= name %>", null, null); if(<%= eventName %> != null && IsAttached) <%= eventName%>(this); },
                            <%= underlyingCollectionName %>);
                }
                return <%= backingName %>;
            }
        }

        private Projected<%= ListOrCollection %><<%= referencedCollectionEntryProxy %>, <%= referencedCollectionEntryImpl %>> <%= underlyingCollectionName %>
        {
            get {
                if (<%= underlyingCollectionBackingName %> == null)
                {
                    <%= underlyingCollectionBackingName %> = new Projected<%= ListOrCollection %><<%= referencedCollectionEntryProxy %>, <%= referencedCollectionEntryImpl %>>(
<% if (ListOrCollection == "List" ) { %>
                        MagicCollectionFactory.WrapAsList(this.Proxy.<%= name %>),
<% } else { %>
                        this.Proxy.<%= name %>,
<% } %>
                        p => (<%= referencedCollectionEntryImpl %>)OurContext.AttachAndWrap(p),
                        d => (<%= referencedCollectionEntryProxy %>)((NHibernatePersistenceObject)d).NHibernateProxy);
                }
                return <%= underlyingCollectionBackingName %>;
            }
        }

        private <%= backingCollectionType %> <%= backingName %>;
        private Projected<%= ListOrCollection %><<%= referencedCollectionEntryProxy %>, <%= referencedCollectionEntryImpl %>> <%= underlyingCollectionBackingName %>;
        // END <%= this.GetType() %>
