// <autogenerated/>


namespace at.dasz.CourseOrganiser
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.API.Server;
    using Kistl.DalProvider.EF;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="Exam")]
    [System.Diagnostics.DebuggerDisplay("Exam")]
    public class Exam__Implementation__ : BaseServerDataObject_EntityFramework, Exam
    {
    
		public Exam__Implementation__()
		{
        }

        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual DateTime? Date
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Date;
                if (OnDate_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnDate_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Date != value)
                {
                    var __oldValue = _Date;
                    var __newValue = value;
                    if(OnDate_PreSetter != null)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnDate_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Date", __oldValue, __newValue);
                    _Date = __newValue;
                    NotifyPropertyChanged("Date", __oldValue, __newValue);
                    if(OnDate_PostSetter != null)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnDate_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime? _Date;
		public static event PropertyGetterHandler<at.dasz.CourseOrganiser.Exam, DateTime?> OnDate_Getter;
		public static event PropertyPreSetterHandler<at.dasz.CourseOrganiser.Exam, DateTime?> OnDate_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.CourseOrganiser.Exam, DateTime?> OnDate_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual int MaxScores
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _MaxScores;
                if (OnMaxScores_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<int>(__result);
                    OnMaxScores_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_MaxScores != value)
                {
                    var __oldValue = _MaxScores;
                    var __newValue = value;
                    if(OnMaxScores_PreSetter != null)
                    {
                        var __e = new PropertyPreSetterEventArgs<int>(__oldValue, __newValue);
                        OnMaxScores_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("MaxScores", __oldValue, __newValue);
                    _MaxScores = __newValue;
                    NotifyPropertyChanged("MaxScores", __oldValue, __newValue);
                    if(OnMaxScores_PostSetter != null)
                    {
                        var __e = new PropertyPostSetterEventArgs<int>(__oldValue, __newValue);
                        OnMaxScores_PostSetter(this, __e);
                    }
                }
            }
        }
        private int _MaxScores;
		public static event PropertyGetterHandler<at.dasz.CourseOrganiser.Exam, int> OnMaxScores_Getter;
		public static event PropertyPreSetterHandler<at.dasz.CourseOrganiser.Exam, int> OnMaxScores_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.CourseOrganiser.Exam, int> OnMaxScores_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if(OnName_PreSetter != null)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(OnName_PostSetter != null)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Name;
		public static event PropertyGetterHandler<at.dasz.CourseOrganiser.Exam, string> OnName_Getter;
		public static event PropertyPreSetterHandler<at.dasz.CourseOrganiser.Exam, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.CourseOrganiser.Exam, string> OnName_PostSetter;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_Exam_happens_in_Semester
    A: ZeroOrMore Exam as Exam
    B: One Semester as Semester
    Preferred Storage: MergeIntoA
    */
        // object reference property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.CourseOrganiser.Semester Semester
        {
            get
            {
                return Semester__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                Semester__Implementation__ = (at.dasz.CourseOrganiser.Semester__Implementation__)value;
            }
        }
        
        private int? _fk_Semester;
        private Guid? _fk_guid_Semester = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Exam_happens_in_Semester", "Semester")]
        public at.dasz.CourseOrganiser.Semester__Implementation__ Semester__Implementation__
        {
            get
            {
                EntityReference<at.dasz.CourseOrganiser.Semester__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.CourseOrganiser.Semester__Implementation__>(
                        "Model.FK_Exam_happens_in_Semester",
                        "Semester");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
				if(OnSemester_Getter != null)
				{
					var e = new PropertyGetterEventArgs<at.dasz.CourseOrganiser.Semester>(__value);
					OnSemester_Getter(this, e);
					__value = (at.dasz.CourseOrganiser.Semester__Implementation__)e.Result;
				}
                return __value;
            }
            set
            {
                EntityReference<at.dasz.CourseOrganiser.Semester__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.CourseOrganiser.Semester__Implementation__>(
                        "Model.FK_Exam_happens_in_Semester",
                        "Semester");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                at.dasz.CourseOrganiser.Semester __oldValue = (at.dasz.CourseOrganiser.Semester)r.Value;
                at.dasz.CourseOrganiser.Semester __newValue = (at.dasz.CourseOrganiser.Semester)value;

                if(OnSemester_PreSetter != null)
                {
					var e = new PropertyPreSetterEventArgs<at.dasz.CourseOrganiser.Semester>(__oldValue, __newValue);
					OnSemester_PreSetter(this, e);
					__newValue = e.Result;
                }
                r.Value = (at.dasz.CourseOrganiser.Semester__Implementation__)__newValue;
                if(OnSemester_PostSetter != null)
                {
					var e = new PropertyPostSetterEventArgs<at.dasz.CourseOrganiser.Semester>(__oldValue, __newValue);
					OnSemester_PostSetter(this, e);
                }
                                
            }
        }
        
        
		public static event PropertyGetterHandler<at.dasz.CourseOrganiser.Exam, at.dasz.CourseOrganiser.Semester> OnSemester_Getter;
		public static event PropertyPreSetterHandler<at.dasz.CourseOrganiser.Exam, at.dasz.CourseOrganiser.Semester> OnSemester_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.CourseOrganiser.Exam, at.dasz.CourseOrganiser.Semester> OnSemester_PostSetter;

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Exam));
		}

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Exam)obj;
			var otherImpl = (Exam__Implementation__)obj;
			var me = (Exam)this;

			me.Date = other.Date;
			me.MaxScores = other.MaxScores;
			me.Name = other.Name;
			this._fk_Semester = otherImpl._fk_Semester;
		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Exam")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Exam != null)
            {
                OnToString_Exam(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Exam> OnToString_Exam;

        [EventBasedMethod("OnPreSave_Exam")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_Exam != null) OnPreSave_Exam(this);
        }
        public static event ObjectEventHandler<Exam> OnPreSave_Exam;

        [EventBasedMethod("OnPostSave_Exam")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_Exam != null) OnPostSave_Exam(this);
        }
        public static event ObjectEventHandler<Exam> OnPostSave_Exam;

        [EventBasedMethod("OnCreated_Exam")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_Exam != null) OnCreated_Exam(this);
        }
        public static event ObjectEventHandler<Exam> OnCreated_Exam;

        [EventBasedMethod("OnDeleting_Exam")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_Exam != null) OnDeleting_Exam(this);
        }
        public static event ObjectEventHandler<Exam> OnDeleting_Exam;


		protected override string GetPropertyError(string propertyName) 
		{
			switch(propertyName)
			{
				case "Date":
				{
					var errors = FrozenContext.Single.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("bfbc9284-3d72-4966-9b03-2f9f5f628e42")).Constraints
						.Where(c => !c.IsValid(this, this.Date))
						.Select(c => c.GetErrorText(this, this.Date))
						.ToArray();
					
					return String.Join("; ", errors);
				}
				case "MaxScores":
				{
					var errors = FrozenContext.Single.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("9223d17a-d22d-4419-8c47-83414de4ae28")).Constraints
						.Where(c => !c.IsValid(this, this.MaxScores))
						.Select(c => c.GetErrorText(this, this.MaxScores))
						.ToArray();
					
					return String.Join("; ", errors);
				}
				case "Name":
				{
					var errors = FrozenContext.Single.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("7a257582-b2cc-43bc-b76f-03eee27c5a7c")).Constraints
						.Where(c => !c.IsValid(this, this.Name))
						.Select(c => c.GetErrorText(this, this.Name))
						.ToArray();
					
					return String.Join("; ", errors);
				}
				case "Semester":
				{
					var errors = FrozenContext.Single.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("7b83aa6f-84f3-4c62-8dd8-ce4d1020935a")).Constraints
						.Where(c => !c.IsValid(this, this.Semester))
						.Select(c => c.GetErrorText(this, this.Semester))
						.ToArray();
					
					return String.Join("; ", errors);
				}
				default:
					return base.GetPropertyError(propertyName);
			}
		}

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			// fix direct object references

			if (_fk_guid_Semester.HasValue)
				Semester__Implementation__ = (at.dasz.CourseOrganiser.Semester__Implementation__)Context.FindPersistenceObject<at.dasz.CourseOrganiser.Semester>(_fk_guid_Semester.Value);
			else if (_fk_Semester.HasValue)
				Semester__Implementation__ = (at.dasz.CourseOrganiser.Semester__Implementation__)Context.Find<at.dasz.CourseOrganiser.Semester>(_fk_Semester.Value);
			else
				Semester__Implementation__ = null;
		}
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._Date, binStream);
            BinarySerializer.ToStream(this._MaxScores, binStream);
            BinarySerializer.ToStream(this._Name, binStream);
            BinarySerializer.ToStream(Semester != null ? Semester.ID : (int?)null, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._Date, binStream);
            BinarySerializer.FromStream(out this._MaxScores, binStream);
            BinarySerializer.FromStream(out this._Name, binStream);
            BinarySerializer.FromStream(out this._fk_Semester, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._Date, xml, "Date", "at.dasz.CourseOrganiser");
            XmlStreamer.ToStream(this._MaxScores, xml, "MaxScores", "at.dasz.CourseOrganiser");
            XmlStreamer.ToStream(this._Name, xml, "Name", "at.dasz.CourseOrganiser");
            XmlStreamer.ToStream(Semester != null ? Semester.ID : (int?)null, xml, "Semester", "at.dasz.CourseOrganiser");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._Date, xml, "Date", "at.dasz.CourseOrganiser");
            XmlStreamer.FromStream(ref this._MaxScores, xml, "MaxScores", "at.dasz.CourseOrganiser");
            XmlStreamer.FromStream(ref this._Name, xml, "Name", "at.dasz.CourseOrganiser");
            XmlStreamer.FromStream(ref this._fk_Semester, xml, "Semester", "at.dasz.CourseOrganiser");
        }

#endregion

    }


}