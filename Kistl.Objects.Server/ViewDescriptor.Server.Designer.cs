//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Objects.DataClasses.EdmRelationshipAttribute("Model", "FK_ViewDescriptor_TypeRef_LayoutRef", "A_TypeRef", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Kistl.App.Base.TypeRef__Implementation__), "B_ViewDescriptor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kistl.App.Base.ViewDescriptor__Implementation__))]
[assembly: System.Data.Objects.DataClasses.EdmRelationshipAttribute("Model", "FK_ViewDescriptor_TypeRef_ViewRef", "A_TypeRef", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Kistl.App.Base.TypeRef__Implementation__), "B_ViewDescriptor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kistl.App.Base.ViewDescriptor__Implementation__))]

namespace Kistl.App.Base
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Collections;
    using System.Xml;
    using System.Xml.Serialization;
    using Kistl.API;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Kistl.DALProvider.EF;
    using Kistl.API.Server;
    
    
    [System.Diagnostics.DebuggerDisplay("Kistl.App.Base.ViewDescriptor")]
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="ViewDescriptor")]
    public class ViewDescriptor__Implementation__ : BaseServerDataObject_EntityFramework, ViewDescriptor
    {
        
        private int _ID;
        
        private System.Nullable<int> _fk_LayoutRef = null;
        
        private Kistl.App.GUI.Toolkit _Toolkit;
        
        private System.Nullable<int> _fk_ViewRef = null;
        
        public ViewDescriptor__Implementation__()
        {
        }
        
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                return _ID;
            }
            set
            {
                _ID = value;
            }
        }
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.TypeRef LayoutRef
        {
            get
            {
                return LayoutRef__Implementation__;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                LayoutRef__Implementation__ = (Kistl.App.Base.TypeRef__Implementation__)value;
            }
        }
        
        public System.Nullable<int> fk_LayoutRef
        {
            get
            {
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && LayoutRef != null)
                {
                    _fk_LayoutRef = LayoutRef.ID;
                }
                return _fk_LayoutRef;
            }
            set
            {
                _fk_LayoutRef = value;
            }
        }
        
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_ViewDescriptor_TypeRef_LayoutRef", "A_TypeRef")]
        public Kistl.App.Base.TypeRef__Implementation__ LayoutRef__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.TypeRef__Implementation__> r = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRef__Implementation__>("Model.FK_ViewDescriptor_TypeRef_LayoutRef", "A_TypeRef");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && !r.IsLoaded) r.Load(); 
                return r.Value;
            }
            set
            {
                EntityReference<Kistl.App.Base.TypeRef__Implementation__> r = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRef__Implementation__>("Model.FK_ViewDescriptor_TypeRef_LayoutRef", "A_TypeRef");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && !r.IsLoaded) r.Load(); 
                r.Value = (Kistl.App.Base.TypeRef__Implementation__)value;
            }
        }
        
        public Kistl.App.GUI.Toolkit Toolkit
        {
            get
            {
                return _Toolkit;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (Toolkit != value)
                {
                    NotifyPropertyChanging("Toolkit"); 
                    _Toolkit = value;
                    NotifyPropertyChanged("Toolkit");;
                }
            }
        }
        
        [EdmScalarPropertyAttribute()]
        public int Toolkit__Implementation__
        {
            get
            {
                return (int)Toolkit;
            }
            set
            {
                Toolkit = (Kistl.App.GUI.Toolkit)value;
            }
        }
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.TypeRef ViewRef
        {
            get
            {
                return ViewRef__Implementation__;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                ViewRef__Implementation__ = (Kistl.App.Base.TypeRef__Implementation__)value;
            }
        }
        
        public System.Nullable<int> fk_ViewRef
        {
            get
            {
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && ViewRef != null)
                {
                    _fk_ViewRef = ViewRef.ID;
                }
                return _fk_ViewRef;
            }
            set
            {
                _fk_ViewRef = value;
            }
        }
        
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_ViewDescriptor_TypeRef_ViewRef", "A_TypeRef")]
        public Kistl.App.Base.TypeRef__Implementation__ ViewRef__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.TypeRef__Implementation__> r = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRef__Implementation__>("Model.FK_ViewDescriptor_TypeRef_ViewRef", "A_TypeRef");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && !r.IsLoaded) r.Load(); 
                return r.Value;
            }
            set
            {
                EntityReference<Kistl.App.Base.TypeRef__Implementation__> r = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRef__Implementation__>("Model.FK_ViewDescriptor_TypeRef_ViewRef", "A_TypeRef");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && !r.IsLoaded) r.Load(); 
                r.Value = (Kistl.App.Base.TypeRef__Implementation__)value;
            }
        }
        
        public event ToStringHandler<ViewDescriptor> OnToString_ViewDescriptor;
        
        public event ObjectEventHandler<ViewDescriptor> OnPreSave_ViewDescriptor;
        
        public event ObjectEventHandler<ViewDescriptor> OnPostSave_ViewDescriptor;
        
        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_ViewDescriptor != null)
            {
                OnToString_ViewDescriptor(this, e);
            }
            return e.Result;
        }
        
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_ViewDescriptor != null) OnPreSave_ViewDescriptor(this);
        }
        
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_ViewDescriptor != null) OnPostSave_ViewDescriptor(this);
        }
        
        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }
        
        protected override string GetPropertyError(string prop)
        {
            switch(prop)
            {
                case "LayoutRef":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(209).Constraints
                            .Where(c => !c.IsValid(this, this.LayoutRef))
                            .Select(c => c.GetErrorText(this, this.LayoutRef))
                            .ToArray());
                case "Toolkit":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(210).Constraints
                            .Where(c => !c.IsValid(this, this.Toolkit))
                            .Select(c => c.GetErrorText(this, this.Toolkit))
                            .ToArray());
                case "ViewRef":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(211).Constraints
                            .Where(c => !c.IsValid(this, this.ViewRef))
                            .Select(c => c.GetErrorText(this, this.ViewRef))
                            .ToArray());
            }
            return base.GetPropertyError(prop);
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this.fk_LayoutRef, sw);
            BinarySerializer.ToBinary((int)this._Toolkit, sw);
            BinarySerializer.ToBinary(this.fk_ViewRef, sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._fk_LayoutRef, sr);
            int tmpToolkit; BinarySerializer.FromBinary(out tmpToolkit, sr); _Toolkit = (Kistl.App.GUI.Toolkit)tmpToolkit;
            BinarySerializer.FromBinary(out this._fk_ViewRef, sr);
        }
    }
}
