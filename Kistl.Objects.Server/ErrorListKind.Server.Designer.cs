// <autogenerated/>


namespace Kistl.App.GUI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.API.Server;
    using Kistl.DalProvider.EF;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="ErrorListKind")]
    [System.Diagnostics.DebuggerDisplay("ErrorListKind")]
    public class ErrorListKind__Implementation__ : Kistl.App.GUI.ControlKind__Implementation__, ErrorListKind
    {
    
		public ErrorListKind__Implementation__()
		{
        }


		public override Type GetImplementedInterface()
		{
			return typeof(ErrorListKind);
		}

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (ErrorListKind)obj;
			var otherImpl = (ErrorListKind__Implementation__)obj;
			var me = (ErrorListKind)this;

		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_ErrorListKind")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_ErrorListKind != null)
            {
                OnToString_ErrorListKind(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<ErrorListKind> OnToString_ErrorListKind;

        [EventBasedMethod("OnPreSave_ErrorListKind")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_ErrorListKind != null) OnPreSave_ErrorListKind(this);
        }
        public static event ObjectEventHandler<ErrorListKind> OnPreSave_ErrorListKind;

        [EventBasedMethod("OnPostSave_ErrorListKind")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_ErrorListKind != null) OnPostSave_ErrorListKind(this);
        }
        public static event ObjectEventHandler<ErrorListKind> OnPostSave_ErrorListKind;

        [EventBasedMethod("OnCreated_ErrorListKind")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_ErrorListKind != null) OnCreated_ErrorListKind(this);
        }
        public static event ObjectEventHandler<ErrorListKind> OnCreated_ErrorListKind;

        [EventBasedMethod("OnDeleting_ErrorListKind")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_ErrorListKind != null) OnDeleting_ErrorListKind(this);
        }
        public static event ObjectEventHandler<ErrorListKind> OnDeleting_ErrorListKind;


	

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			base.ReloadReferences();
			
			// fix direct object references
		}
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            base.Export(xml, modules);
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            
            base.MergeImport(xml);
        }

#endregion

    }


}