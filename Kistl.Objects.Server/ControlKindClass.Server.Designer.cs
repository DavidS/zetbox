// <autogenerated/>


namespace Kistl.App.GUI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.API.Server;
    using Kistl.DALProvider.EF;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// Extended MetaClass for defining supported interfaces of ControlKinds
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="ControlKindClass")]
    [System.Diagnostics.DebuggerDisplay("ControlKindClass")]
    public class ControlKindClass__Implementation__ : Kistl.App.Base.ObjectClass__Implementation__, ControlKindClass
    {
    
		public ControlKindClass__Implementation__()
		{
        }


        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_ControlKindClass_supports_SupportedInterfaces
    A: ZeroOrMore ControlKindClass as ControlKindClass
    B: ZeroOrMore TypeRef as SupportedInterfaces
    Preferred Storage: Separate
    */
        // collection reference property
		// Kistl.Server.Generators.EntityFramework.Implementation.ObjectClasses.CollectionEntryListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Base.TypeRef> SupportedInterfaces
        {
            get
            {
                if (_SupportedInterfacesWrapper == null)
                {
                    _SupportedInterfacesWrapper = new EntityRelationBSideCollectionWrapper<Kistl.App.GUI.ControlKindClass, Kistl.App.Base.TypeRef, Kistl.App.GUI.ControlKindClass_supports_TypeRef_RelationEntry__Implementation__>(
                            this,
                            SupportedInterfaces__Implementation__);
                }
                return _SupportedInterfacesWrapper;
            }
        }
        
        [EdmRelationshipNavigationProperty("Model", "FK_ControlKindClass_supports_SupportedInterfaces_A", "CollectionEntry")]
        public EntityCollection<Kistl.App.GUI.ControlKindClass_supports_TypeRef_RelationEntry__Implementation__> SupportedInterfaces__Implementation__
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Kistl.App.GUI.ControlKindClass_supports_TypeRef_RelationEntry__Implementation__>(
                        "Model.FK_ControlKindClass_supports_SupportedInterfaces_A",
                        "CollectionEntry");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                return c;
            }
        }
        private EntityRelationBSideCollectionWrapper<Kistl.App.GUI.ControlKindClass, Kistl.App.Base.TypeRef, Kistl.App.GUI.ControlKindClass_supports_TypeRef_RelationEntry__Implementation__> _SupportedInterfacesWrapper;


        /// <summary>
        /// Creates, if needed, all default  Methods
        /// </summary>
		[EventBasedMethod("OnCreateDefaultMethods_ControlKindClass")]
		public override void CreateDefaultMethods() 
		{
            // base.CreateDefaultMethods();
            if (OnCreateDefaultMethods_ControlKindClass != null)
            {
				OnCreateDefaultMethods_ControlKindClass(this);
			}
			else
			{
			    base.CreateDefaultMethods();
			}
        }
		public event CreateDefaultMethods_Handler<ControlKindClass> OnCreateDefaultMethods_ControlKindClass;



        /// <summary>
        /// Creates a new Method for this class
        /// </summary>
		[EventBasedMethod("OnCreateMethod_ControlKindClass")]
		public override Kistl.App.Base.Method CreateMethod() 
        {
            var e = new MethodReturnEventArgs<Kistl.App.Base.Method>();
            if (OnCreateMethod_ControlKindClass != null)
            {
                OnCreateMethod_ControlKindClass(this, e);
            }
            else
            {
                e.Result = base.CreateMethod();
            }
            return e.Result;
        }
		public event CreateMethod_Handler<ControlKindClass> OnCreateMethod_ControlKindClass;



        /// <summary>
        /// Implements the "Create new Relation" use case
        /// </summary>
		[EventBasedMethod("OnCreateRelation_ControlKindClass")]
		public override Kistl.App.Base.Relation CreateRelation() 
        {
            var e = new MethodReturnEventArgs<Kistl.App.Base.Relation>();
            if (OnCreateRelation_ControlKindClass != null)
            {
                OnCreateRelation_ControlKindClass(this, e);
            }
            else
            {
                e.Result = base.CreateRelation();
            }
            return e.Result;
        }
		public event CreateRelation_Handler<ControlKindClass> OnCreateRelation_ControlKindClass;



        /// <summary>
        /// Returns the resulting Type of this Datatype Meta Object.
        /// </summary>
		[EventBasedMethod("OnGetDataType_ControlKindClass")]
		public override System.Type GetDataType() 
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetDataType_ControlKindClass != null)
            {
                OnGetDataType_ControlKindClass(this, e);
            }
            else
            {
                e.Result = base.GetDataType();
            }
            return e.Result;
        }
		public event GetDataType_Handler<ControlKindClass> OnGetDataType_ControlKindClass;



        /// <summary>
        /// Returns the String representation of this Datatype Meta Object.
        /// </summary>
		[EventBasedMethod("OnGetDataTypeString_ControlKindClass")]
		public override string GetDataTypeString() 
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetDataTypeString_ControlKindClass != null)
            {
                OnGetDataTypeString_ControlKindClass(this, e);
            }
            else
            {
                e.Result = base.GetDataTypeString();
            }
            return e.Result;
        }
		public event GetDataTypeString_Handler<ControlKindClass> OnGetDataTypeString_ControlKindClass;



        /// <summary>
        /// 
        /// </summary>
		[EventBasedMethod("OnGetInheritedMethods_ControlKindClass")]
		public override IList<Kistl.App.Base.Method> GetInheritedMethods() 
        {
            var e = new MethodReturnEventArgs<IList<Kistl.App.Base.Method>>();
            if (OnGetInheritedMethods_ControlKindClass != null)
            {
                OnGetInheritedMethods_ControlKindClass(this, e);
            }
            else
            {
                e.Result = base.GetInheritedMethods();
            }
            return e.Result;
        }
		public event GetInheritedMethods_Handler<ControlKindClass> OnGetInheritedMethods_ControlKindClass;



        /// <summary>
        /// Implements all available interfaces as Properties and Methods
        /// </summary>
		[EventBasedMethod("OnImplementInterfaces_ControlKindClass")]
		public override void ImplementInterfaces() 
		{
            // base.ImplementInterfaces();
            if (OnImplementInterfaces_ControlKindClass != null)
            {
				OnImplementInterfaces_ControlKindClass(this);
			}
			else
			{
			    base.ImplementInterfaces();
			}
        }
		public event ImplementInterfaces_Handler<ControlKindClass> OnImplementInterfaces_ControlKindClass;



		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(ControlKindClass));
		}

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (ControlKindClass)obj;
			var otherImpl = (ControlKindClass__Implementation__)obj;
			var me = (ControlKindClass)this;

		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_ControlKindClass")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_ControlKindClass != null)
            {
                OnToString_ControlKindClass(this, e);
            }
            return e.Result;
        }
        public event ToStringHandler<ControlKindClass> OnToString_ControlKindClass;

        [EventBasedMethod("OnPreSave_ControlKindClass")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_ControlKindClass != null) OnPreSave_ControlKindClass(this);
        }
        public event ObjectEventHandler<ControlKindClass> OnPreSave_ControlKindClass;

        [EventBasedMethod("OnPostSave_ControlKindClass")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_ControlKindClass != null) OnPostSave_ControlKindClass(this);
        }
        public event ObjectEventHandler<ControlKindClass> OnPostSave_ControlKindClass;

        [EventBasedMethod("OnCreated_ControlKindClass")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_ControlKindClass != null) OnCreated_ControlKindClass(this);
        }
        public event ObjectEventHandler<ControlKindClass> OnCreated_ControlKindClass;

        [EventBasedMethod("OnDeleting_ControlKindClass")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_ControlKindClass != null) OnDeleting_ControlKindClass(this);
        }
        public event ObjectEventHandler<ControlKindClass> OnDeleting_ControlKindClass;


		protected override string GetPropertyError(string propertyName) 
		{
			switch(propertyName)
			{
				case "SupportedInterfaces":
				{
					var errors = FrozenContext.Single.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("883a2f71-78ae-4978-8d76-904a2237cc25")).Constraints
						.Where(c => !c.IsValid(this, this.SupportedInterfaces))
						.Select(c => c.GetErrorText(this, this.SupportedInterfaces))
						.ToArray();
					
					return String.Join("; ", errors);
				}
				default:
					return base.GetPropertyError(propertyName);
			}
		}

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			base.ReloadReferences();
			
			// fix direct object references
		}
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            base.Export(xml, modules);
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            
            base.MergeImport(xml);
        }

#endregion

    }


}