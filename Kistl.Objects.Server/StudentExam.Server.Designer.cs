// <autogenerated/>


namespace at.dasz.CourseOrganiser
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.API.Server;
    using Kistl.DalProvider.EF;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="StudentExam")]
    [System.Diagnostics.DebuggerDisplay("StudentExam")]
    public class StudentExam__Implementation__ : BaseServerDataObject_EntityFramework, StudentExam
    {
    
		public StudentExam__Implementation__()
		{
        }

        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_StudentExam_passes_Exam
    A: ZeroOrMore StudentExam as StudentExam
    B: One Exam as Exam
    Preferred Storage: MergeIntoA
    */
        // object reference property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.CourseOrganiser.Exam Exam
        {
            get
            {
                return Exam__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                Exam__Implementation__ = (at.dasz.CourseOrganiser.Exam__Implementation__)value;
            }
        }
        
        private int? _fk_Exam;
        private Guid? _fk_guid_Exam = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_StudentExam_passes_Exam", "Exam")]
        public at.dasz.CourseOrganiser.Exam__Implementation__ Exam__Implementation__
        {
            get
            {
                EntityReference<at.dasz.CourseOrganiser.Exam__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.CourseOrganiser.Exam__Implementation__>(
                        "Model.FK_StudentExam_passes_Exam",
                        "Exam");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
				if(OnExam_Getter != null)
				{
					var e = new PropertyGetterEventArgs<at.dasz.CourseOrganiser.Exam>(__value);
					OnExam_Getter(this, e);
					__value = (at.dasz.CourseOrganiser.Exam__Implementation__)e.Result;
				}
                return __value;
            }
            set
            {
                EntityReference<at.dasz.CourseOrganiser.Exam__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.CourseOrganiser.Exam__Implementation__>(
                        "Model.FK_StudentExam_passes_Exam",
                        "Exam");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                at.dasz.CourseOrganiser.Exam __oldValue = (at.dasz.CourseOrganiser.Exam)r.Value;
                at.dasz.CourseOrganiser.Exam __newValue = (at.dasz.CourseOrganiser.Exam)value;

                if(OnExam_PreSetter != null)
                {
					var e = new PropertyPreSetterEventArgs<at.dasz.CourseOrganiser.Exam>(__oldValue, __newValue);
					OnExam_PreSetter(this, e);
					__newValue = e.Result;
                }
                r.Value = (at.dasz.CourseOrganiser.Exam__Implementation__)__newValue;
                if(OnExam_PostSetter != null)
                {
					var e = new PropertyPostSetterEventArgs<at.dasz.CourseOrganiser.Exam>(__oldValue, __newValue);
					OnExam_PostSetter(this, e);
                }
                                
            }
        }
        
        
		public static event PropertyGetterHandler<at.dasz.CourseOrganiser.StudentExam, at.dasz.CourseOrganiser.Exam> OnExam_Getter;
		public static event PropertyPreSetterHandler<at.dasz.CourseOrganiser.StudentExam, at.dasz.CourseOrganiser.Exam> OnExam_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.CourseOrganiser.StudentExam, at.dasz.CourseOrganiser.Exam> OnExam_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual int? Score
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Score;
                if (OnScore_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<int?>(__result);
                    OnScore_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Score != value)
                {
                    var __oldValue = _Score;
                    var __newValue = value;
                    if(OnScore_PreSetter != null)
                    {
                        var __e = new PropertyPreSetterEventArgs<int?>(__oldValue, __newValue);
                        OnScore_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Score", __oldValue, __newValue);
                    _Score = __newValue;
                    NotifyPropertyChanged("Score", __oldValue, __newValue);
                    if(OnScore_PostSetter != null)
                    {
                        var __e = new PropertyPostSetterEventArgs<int?>(__oldValue, __newValue);
                        OnScore_PostSetter(this, __e);
                    }
                }
            }
        }
        private int? _Score;
		public static event PropertyGetterHandler<at.dasz.CourseOrganiser.StudentExam, int?> OnScore_Getter;
		public static event PropertyPreSetterHandler<at.dasz.CourseOrganiser.StudentExam, int?> OnScore_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.CourseOrganiser.StudentExam, int?> OnScore_PostSetter;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_StudentExam_writtenby_Student
    A: ZeroOrMore StudentExam as StudentExam
    B: One Student as Student
    Preferred Storage: MergeIntoA
    */
        // object reference property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.CourseOrganiser.Student Student
        {
            get
            {
                return Student__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                Student__Implementation__ = (at.dasz.CourseOrganiser.Student__Implementation__)value;
            }
        }
        
        private int? _fk_Student;
        private Guid? _fk_guid_Student = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_StudentExam_writtenby_Student", "Student")]
        public at.dasz.CourseOrganiser.Student__Implementation__ Student__Implementation__
        {
            get
            {
                EntityReference<at.dasz.CourseOrganiser.Student__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.CourseOrganiser.Student__Implementation__>(
                        "Model.FK_StudentExam_writtenby_Student",
                        "Student");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
				if(OnStudent_Getter != null)
				{
					var e = new PropertyGetterEventArgs<at.dasz.CourseOrganiser.Student>(__value);
					OnStudent_Getter(this, e);
					__value = (at.dasz.CourseOrganiser.Student__Implementation__)e.Result;
				}
                return __value;
            }
            set
            {
                EntityReference<at.dasz.CourseOrganiser.Student__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.CourseOrganiser.Student__Implementation__>(
                        "Model.FK_StudentExam_writtenby_Student",
                        "Student");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                at.dasz.CourseOrganiser.Student __oldValue = (at.dasz.CourseOrganiser.Student)r.Value;
                at.dasz.CourseOrganiser.Student __newValue = (at.dasz.CourseOrganiser.Student)value;

                if(OnStudent_PreSetter != null)
                {
					var e = new PropertyPreSetterEventArgs<at.dasz.CourseOrganiser.Student>(__oldValue, __newValue);
					OnStudent_PreSetter(this, e);
					__newValue = e.Result;
                }
                r.Value = (at.dasz.CourseOrganiser.Student__Implementation__)__newValue;
                if(OnStudent_PostSetter != null)
                {
					var e = new PropertyPostSetterEventArgs<at.dasz.CourseOrganiser.Student>(__oldValue, __newValue);
					OnStudent_PostSetter(this, e);
                }
                                
            }
        }
        
        
		public static event PropertyGetterHandler<at.dasz.CourseOrganiser.StudentExam, at.dasz.CourseOrganiser.Student> OnStudent_Getter;
		public static event PropertyPreSetterHandler<at.dasz.CourseOrganiser.StudentExam, at.dasz.CourseOrganiser.Student> OnStudent_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.CourseOrganiser.StudentExam, at.dasz.CourseOrganiser.Student> OnStudent_PostSetter;

		public override Type GetImplementedInterface()
		{
			return typeof(StudentExam);
		}

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (StudentExam)obj;
			var otherImpl = (StudentExam__Implementation__)obj;
			var me = (StudentExam)this;

			me.Score = other.Score;
			this._fk_Exam = otherImpl._fk_Exam;
			this._fk_Student = otherImpl._fk_Student;
		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_StudentExam")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_StudentExam != null)
            {
                OnToString_StudentExam(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<StudentExam> OnToString_StudentExam;

        [EventBasedMethod("OnPreSave_StudentExam")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_StudentExam != null) OnPreSave_StudentExam(this);
        }
        public static event ObjectEventHandler<StudentExam> OnPreSave_StudentExam;

        [EventBasedMethod("OnPostSave_StudentExam")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_StudentExam != null) OnPostSave_StudentExam(this);
        }
        public static event ObjectEventHandler<StudentExam> OnPostSave_StudentExam;

        [EventBasedMethod("OnCreated_StudentExam")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_StudentExam != null) OnCreated_StudentExam(this);
        }
        public static event ObjectEventHandler<StudentExam> OnCreated_StudentExam;

        [EventBasedMethod("OnDeleting_StudentExam")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_StudentExam != null) OnDeleting_StudentExam(this);
        }
        public static event ObjectEventHandler<StudentExam> OnDeleting_StudentExam;


		private static readonly System.ComponentModel.PropertyDescriptor[] _properties = new System.ComponentModel.PropertyDescriptor[] {
			// else
			new CustomPropertyDescriptor<StudentExam__Implementation__, at.dasz.CourseOrganiser.Exam>(
				new Guid("4fe24a6b-6f71-4313-8b1e-6d1a96437abb"),
				"Exam",
				null,
				obj => obj.Exam,
				(obj, val) => obj.Exam = val),
			// else
			new CustomPropertyDescriptor<StudentExam__Implementation__, int?>(
				new Guid("b7e4ed77-9a3b-497f-9792-3e7341d9b960"),
				"Score",
				null,
				obj => obj.Score,
				(obj, val) => obj.Score = val),
			// else
			new CustomPropertyDescriptor<StudentExam__Implementation__, at.dasz.CourseOrganiser.Student>(
				new Guid("2fd40eb4-b358-4e7d-bf1e-4f49dd3e5efd"),
				"Student",
				null,
				obj => obj.Student,
				(obj, val) => obj.Student = val),
			// rel: StudentExam passes Exam (3e15530a-1753-4e97-9390-7235192a1a9e)
			// rel: StudentExam writtenby Student (da365b25-b8d4-43dd-91c7-f30cad09d600)
		};
		
		protected override void CollectProperties(List<System.ComponentModel.PropertyDescriptor> props)
		{
			base.CollectProperties(props);
			props.AddRange(_properties);
		}
	

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			// fix direct object references

			if (_fk_guid_Exam.HasValue)
				Exam__Implementation__ = (at.dasz.CourseOrganiser.Exam__Implementation__)Context.FindPersistenceObject<at.dasz.CourseOrganiser.Exam>(_fk_guid_Exam.Value);
			else if (_fk_Exam.HasValue)
				Exam__Implementation__ = (at.dasz.CourseOrganiser.Exam__Implementation__)Context.Find<at.dasz.CourseOrganiser.Exam>(_fk_Exam.Value);
			else
				Exam__Implementation__ = null;

			if (_fk_guid_Student.HasValue)
				Student__Implementation__ = (at.dasz.CourseOrganiser.Student__Implementation__)Context.FindPersistenceObject<at.dasz.CourseOrganiser.Student>(_fk_guid_Student.Value);
			else if (_fk_Student.HasValue)
				Student__Implementation__ = (at.dasz.CourseOrganiser.Student__Implementation__)Context.Find<at.dasz.CourseOrganiser.Student>(_fk_Student.Value);
			else
				Student__Implementation__ = null;
		}
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(Exam != null ? Exam.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._Score, binStream);
            BinarySerializer.ToStream(Student != null ? Student.ID : (int?)null, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_Exam, binStream);
            BinarySerializer.FromStream(out this._Score, binStream);
            BinarySerializer.FromStream(out this._fk_Student, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(Exam != null ? Exam.ID : (int?)null, xml, "Exam", "at.dasz.CourseOrganiser");
            XmlStreamer.ToStream(this._Score, xml, "Score", "at.dasz.CourseOrganiser");
            XmlStreamer.ToStream(Student != null ? Student.ID : (int?)null, xml, "Student", "at.dasz.CourseOrganiser");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_Exam, xml, "Exam", "at.dasz.CourseOrganiser");
            XmlStreamer.FromStream(ref this._Score, xml, "Score", "at.dasz.CourseOrganiser");
            XmlStreamer.FromStream(ref this._fk_Student, xml, "Student", "at.dasz.CourseOrganiser");
        }

#endregion

    }


}