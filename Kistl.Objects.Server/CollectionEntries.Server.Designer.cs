// <autogenerated/>

using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;
using System.Linq;

using Kistl.API;
    using Kistl.API.Server;
    using Kistl.DalProvider.EF;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

namespace Kistl.App.Base
{
    [EdmEntityType(NamespaceName="Model", Name="CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry__Implementation__")]
    public class CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.CollectionEntries.ExportGuidProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        public Guid RelationID { get { return new Guid("47595643-e8d0-48ef-82c7-2d24de8a784e"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Base.CalculatedObjectReferenceProperty)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.Property)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.CalculatedObjectReferenceProperty A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (Kistl.App.Base.CalculatedObjectReferenceProperty__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_CalculatedReference_dependsOn_InputProperties_A", "CalculatedReference")]
        public Kistl.App.Base.CalculatedObjectReferenceProperty__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.CalculatedObjectReferenceProperty__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.CalculatedObjectReferenceProperty__Implementation__>(
                        "Model.FK_CalculatedReference_dependsOn_InputProperties_A",
                        "CalculatedReference");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.CalculatedObjectReferenceProperty__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.CalculatedObjectReferenceProperty__Implementation__>(
                        "Model.FK_CalculatedReference_dependsOn_InputProperties_A",
                        "CalculatedReference");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.CalculatedObjectReferenceProperty __oldValue = (Kistl.App.Base.CalculatedObjectReferenceProperty)r.Value;
                Kistl.App.Base.CalculatedObjectReferenceProperty __newValue = (Kistl.App.Base.CalculatedObjectReferenceProperty)value;

                r.Value = (Kistl.App.Base.CalculatedObjectReferenceProperty__Implementation__)__newValue;
                                
            }
        }
        
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Property B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (Kistl.App.Base.Property__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_CalculatedReference_dependsOn_InputProperties_B", "InputProperties")]
        public Kistl.App.Base.Property__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.Property__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Property__Implementation__>(
                        "Model.FK_CalculatedReference_dependsOn_InputProperties_B",
                        "InputProperties");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.Property__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Property__Implementation__>(
                        "Model.FK_CalculatedReference_dependsOn_InputProperties_B",
                        "InputProperties");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.Property __oldValue = (Kistl.App.Base.Property)r.Value;
                Kistl.App.Base.Property __newValue = (Kistl.App.Base.Property)value;

                r.Value = (Kistl.App.Base.Property__Implementation__)__newValue;
                                
            }
        }
        
        

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
			if (auxObjects != null) {
				auxObjects.Add(B);
			}
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "Kistl.App.Base");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "Kistl.App.Base");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Base");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.Base");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (Kistl.App.Base.CalculatedObjectReferenceProperty__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.CalculatedObjectReferenceProperty>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (Kistl.App.Base.CalculatedObjectReferenceProperty__Implementation__)Context.Find<Kistl.App.Base.CalculatedObjectReferenceProperty>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (Kistl.App.Base.Property__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.Property>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (Kistl.App.Base.Property__Implementation__)Context.Find<Kistl.App.Base.Property>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry__Implementation__)obj;
			var me = (CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.GUI
{
	using Kistl.App.Base;
    [EdmEntityType(NamespaceName="Model", Name="ControlKindClass_supports_TypeRef_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("ControlKindClass_supports_TypeRef_RelationEntry__Implementation__")]
    public class ControlKindClass_supports_TypeRef_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, ControlKindClass_supports_TypeRef_RelationEntry, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.CollectionEntries.ExportGuidProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        public Guid RelationID { get { return new Guid("0ded88ab-da47-4e72-83bc-5e409b81e0d1"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.GUI.ControlKindClass)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.TypeRef)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ControlKindClass A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (Kistl.App.GUI.ControlKindClass__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ControlKindClass_supports_SupportedInterfaces_A", "ControlKindClass")]
        public Kistl.App.GUI.ControlKindClass__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.GUI.ControlKindClass__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindClass__Implementation__>(
                        "Model.FK_ControlKindClass_supports_SupportedInterfaces_A",
                        "ControlKindClass");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.GUI.ControlKindClass__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindClass__Implementation__>(
                        "Model.FK_ControlKindClass_supports_SupportedInterfaces_A",
                        "ControlKindClass");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.GUI.ControlKindClass __oldValue = (Kistl.App.GUI.ControlKindClass)r.Value;
                Kistl.App.GUI.ControlKindClass __newValue = (Kistl.App.GUI.ControlKindClass)value;

                r.Value = (Kistl.App.GUI.ControlKindClass__Implementation__)__newValue;
                                
            }
        }
        
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.TypeRef B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (Kistl.App.Base.TypeRef__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ControlKindClass_supports_SupportedInterfaces_B", "SupportedInterfaces")]
        public Kistl.App.Base.TypeRef__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.TypeRef__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRef__Implementation__>(
                        "Model.FK_ControlKindClass_supports_SupportedInterfaces_B",
                        "SupportedInterfaces");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.TypeRef__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRef__Implementation__>(
                        "Model.FK_ControlKindClass_supports_SupportedInterfaces_B",
                        "SupportedInterfaces");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.TypeRef __oldValue = (Kistl.App.Base.TypeRef)r.Value;
                Kistl.App.Base.TypeRef __newValue = (Kistl.App.Base.TypeRef)value;

                r.Value = (Kistl.App.Base.TypeRef__Implementation__)__newValue;
                                
            }
        }
        
        

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "Kistl.App.GUI");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "Kistl.App.Base");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Base");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.Base");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(ControlKindClass_supports_TypeRef_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (Kistl.App.GUI.ControlKindClass__Implementation__)Context.FindPersistenceObject<Kistl.App.GUI.ControlKindClass>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (Kistl.App.GUI.ControlKindClass__Implementation__)Context.Find<Kistl.App.GUI.ControlKindClass>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (Kistl.App.Base.TypeRef__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.TypeRef>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (Kistl.App.Base.TypeRef__Implementation__)Context.Find<Kistl.App.Base.TypeRef>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (ControlKindClass_supports_TypeRef_RelationEntry__Implementation__)obj;
			var me = (ControlKindClass_supports_TypeRef_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace at.dasz.DocumentManagement
{
	using Kistl.App.Base;
    [EdmEntityType(NamespaceName="Model", Name="Document_has_Blob_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("Document_has_Blob_RelationEntry__Implementation__")]
    public class Document_has_Blob_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, Document_has_Blob_RelationEntry, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.CollectionEntries.ExportGuidProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        public Guid RelationID { get { return new Guid("69d27812-e981-443b-a94b-dfe1a95f3aad"); } }
        public IDataObject AObject { get { return A; } set { A = (at.dasz.DocumentManagement.Document)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.Blob)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.DocumentManagement.Document A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (at.dasz.DocumentManagement.Document__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Document_has_Revisions_A", "Document")]
        public at.dasz.DocumentManagement.Document__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<at.dasz.DocumentManagement.Document__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.DocumentManagement.Document__Implementation__>(
                        "Model.FK_Document_has_Revisions_A",
                        "Document");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<at.dasz.DocumentManagement.Document__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.DocumentManagement.Document__Implementation__>(
                        "Model.FK_Document_has_Revisions_A",
                        "Document");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                at.dasz.DocumentManagement.Document __oldValue = (at.dasz.DocumentManagement.Document)r.Value;
                at.dasz.DocumentManagement.Document __newValue = (at.dasz.DocumentManagement.Document)value;

                r.Value = (at.dasz.DocumentManagement.Document__Implementation__)__newValue;
                                
            }
        }
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? A_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
                    var __oldValue = _A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    _A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _A_pos;
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Blob B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (Kistl.App.Base.Blob__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Document_has_Revisions_B", "Revisions")]
        public Kistl.App.Base.Blob__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.Blob__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Blob__Implementation__>(
                        "Model.FK_Document_has_Revisions_B",
                        "Revisions");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.Blob__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Blob__Implementation__>(
                        "Model.FK_Document_has_Revisions_B",
                        "Revisions");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.Blob __oldValue = (Kistl.App.Base.Blob)r.Value;
                Kistl.App.Base.Blob __newValue = (Kistl.App.Base.Blob)value;

                r.Value = (Kistl.App.Base.Blob__Implementation__)__newValue;
                                
            }
        }
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? B_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
                    var __oldValue = _B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    _B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _B_pos;
        



        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
public int? AIndex { get { return A_pos; } set { A_pos = value; } }
        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
public int? BIndex { get { return B_pos; } set { B_pos = value; } }
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "at.dasz.DocumentManagement");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "Kistl.App.Base");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "at.dasz.DocumentManagement");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "at.dasz.DocumentManagement");
	
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.Base");
	
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
	
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
	
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "at.dasz.DocumentManagement");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Document_has_Blob_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (at.dasz.DocumentManagement.Document__Implementation__)Context.FindPersistenceObject<at.dasz.DocumentManagement.Document>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (at.dasz.DocumentManagement.Document__Implementation__)Context.Find<at.dasz.DocumentManagement.Document>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (Kistl.App.Base.Blob__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.Blob>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (Kistl.App.Base.Blob__Implementation__)Context.Find<Kistl.App.Base.Blob>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Document_has_Blob_RelationEntry__Implementation__)obj;
			var me = (Document_has_Blob_RelationEntry__Implementation__)this;
			
            me.AIndex = other.AIndex;
            me.BIndex = other.BIndex;
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.Base
{
    [EdmEntityType(NamespaceName="Model", Name="Group_memberOf_Group_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("Group_memberOf_Group_RelationEntry__Implementation__")]
    public class Group_memberOf_Group_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, Group_memberOf_Group_RelationEntry, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.CollectionEntries.ExportGuidProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        public Guid RelationID { get { return new Guid("3e7ba7e0-1774-4b1f-b5b3-2b90c77805af"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Base.Group)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.Group)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Group A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (Kistl.App.Base.Group__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Group_memberOf_ParentGroup_A", "Group")]
        public Kistl.App.Base.Group__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.Group__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Group__Implementation__>(
                        "Model.FK_Group_memberOf_ParentGroup_A",
                        "Group");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.Group__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Group__Implementation__>(
                        "Model.FK_Group_memberOf_ParentGroup_A",
                        "Group");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.Group __oldValue = (Kistl.App.Base.Group)r.Value;
                Kistl.App.Base.Group __newValue = (Kistl.App.Base.Group)value;

                r.Value = (Kistl.App.Base.Group__Implementation__)__newValue;
                                
            }
        }
        
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Group B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (Kistl.App.Base.Group__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Group_memberOf_ParentGroup_B", "ParentGroup")]
        public Kistl.App.Base.Group__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.Group__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Group__Implementation__>(
                        "Model.FK_Group_memberOf_ParentGroup_B",
                        "ParentGroup");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.Group__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Group__Implementation__>(
                        "Model.FK_Group_memberOf_ParentGroup_B",
                        "ParentGroup");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.Group __oldValue = (Kistl.App.Base.Group)r.Value;
                Kistl.App.Base.Group __newValue = (Kistl.App.Base.Group)value;

                r.Value = (Kistl.App.Base.Group__Implementation__)__newValue;
                                
            }
        }
        
        

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "Kistl.App.Base");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "Kistl.App.Base");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Base");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.Base");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Group_memberOf_Group_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (Kistl.App.Base.Group__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.Group>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (Kistl.App.Base.Group__Implementation__)Context.Find<Kistl.App.Base.Group>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (Kistl.App.Base.Group__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.Group>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (Kistl.App.Base.Group__Implementation__)Context.Find<Kistl.App.Base.Group>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Group_memberOf_Group_RelationEntry__Implementation__)obj;
			var me = (Group_memberOf_Group_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace at.dasz.CourseOrganiser
{
    [EdmEntityType(NamespaceName="Model", Name="GroupExcercise_accomplished_by_Student_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("GroupExcercise_accomplished_by_Student_RelationEntry__Implementation__")]
    public class GroupExcercise_accomplished_by_Student_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, GroupExcercise_accomplished_by_Student_RelationEntry
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("464d1407-fbdb-44f1-896e-b6dedad82ce2"); } }
        public IDataObject AObject { get { return A; } set { A = (at.dasz.CourseOrganiser.GroupExcercise)value; } }
        public IDataObject BObject { get { return B; } set { B = (at.dasz.CourseOrganiser.Student)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.CourseOrganiser.GroupExcercise A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (at.dasz.CourseOrganiser.GroupExcercise__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_GroupExcercise_accomplished_by_Students_A", "GroupExcercise")]
        public at.dasz.CourseOrganiser.GroupExcercise__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<at.dasz.CourseOrganiser.GroupExcercise__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.CourseOrganiser.GroupExcercise__Implementation__>(
                        "Model.FK_GroupExcercise_accomplished_by_Students_A",
                        "GroupExcercise");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<at.dasz.CourseOrganiser.GroupExcercise__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.CourseOrganiser.GroupExcercise__Implementation__>(
                        "Model.FK_GroupExcercise_accomplished_by_Students_A",
                        "GroupExcercise");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                at.dasz.CourseOrganiser.GroupExcercise __oldValue = (at.dasz.CourseOrganiser.GroupExcercise)r.Value;
                at.dasz.CourseOrganiser.GroupExcercise __newValue = (at.dasz.CourseOrganiser.GroupExcercise)value;

                r.Value = (at.dasz.CourseOrganiser.GroupExcercise__Implementation__)__newValue;
                                
            }
        }
        
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.CourseOrganiser.Student B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (at.dasz.CourseOrganiser.Student__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_GroupExcercise_accomplished_by_Students_B", "Students")]
        public at.dasz.CourseOrganiser.Student__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<at.dasz.CourseOrganiser.Student__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.CourseOrganiser.Student__Implementation__>(
                        "Model.FK_GroupExcercise_accomplished_by_Students_B",
                        "Students");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<at.dasz.CourseOrganiser.Student__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.CourseOrganiser.Student__Implementation__>(
                        "Model.FK_GroupExcercise_accomplished_by_Students_B",
                        "Students");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                at.dasz.CourseOrganiser.Student __oldValue = (at.dasz.CourseOrganiser.Student)r.Value;
                at.dasz.CourseOrganiser.Student __newValue = (at.dasz.CourseOrganiser.Student)value;

                r.Value = (at.dasz.CourseOrganiser.Student__Implementation__)__newValue;
                                
            }
        }
        
        

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "at.dasz.CourseOrganiser");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "at.dasz.CourseOrganiser");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "at.dasz.CourseOrganiser");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "at.dasz.CourseOrganiser");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(GroupExcercise_accomplished_by_Student_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (at.dasz.CourseOrganiser.GroupExcercise__Implementation__)Context.FindPersistenceObject<at.dasz.CourseOrganiser.GroupExcercise>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (at.dasz.CourseOrganiser.GroupExcercise__Implementation__)Context.Find<at.dasz.CourseOrganiser.GroupExcercise>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (at.dasz.CourseOrganiser.Student__Implementation__)Context.FindPersistenceObject<at.dasz.CourseOrganiser.Student>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (at.dasz.CourseOrganiser.Student__Implementation__)Context.Find<at.dasz.CourseOrganiser.Student>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (GroupExcercise_accomplished_by_Student_RelationEntry__Implementation__)obj;
			var me = (GroupExcercise_accomplished_by_Student_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.Base
{
    [EdmEntityType(NamespaceName="Model", Name="Identity_memberOf_Group_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("Identity_memberOf_Group_RelationEntry__Implementation__")]
    public class Identity_memberOf_Group_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, Identity_memberOf_Group_RelationEntry
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("3efb7ae8-ba6b-40e3-9482-b45d1c101743"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Base.Identity)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.Group)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (Kistl.App.Base.Identity__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Identities_memberOf_Groups_A", "Identities")]
        public Kistl.App.Base.Identity__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.Identity__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Identity__Implementation__>(
                        "Model.FK_Identities_memberOf_Groups_A",
                        "Identities");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.Identity__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Identity__Implementation__>(
                        "Model.FK_Identities_memberOf_Groups_A",
                        "Identities");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.Identity __oldValue = (Kistl.App.Base.Identity)r.Value;
                Kistl.App.Base.Identity __newValue = (Kistl.App.Base.Identity)value;

                r.Value = (Kistl.App.Base.Identity__Implementation__)__newValue;
                                
            }
        }
        
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Group B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (Kistl.App.Base.Group__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Identities_memberOf_Groups_B", "Groups")]
        public Kistl.App.Base.Group__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.Group__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Group__Implementation__>(
                        "Model.FK_Identities_memberOf_Groups_B",
                        "Groups");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.Group__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Group__Implementation__>(
                        "Model.FK_Identities_memberOf_Groups_B",
                        "Groups");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.Group __oldValue = (Kistl.App.Base.Group)r.Value;
                Kistl.App.Base.Group __newValue = (Kistl.App.Base.Group)value;

                r.Value = (Kistl.App.Base.Group__Implementation__)__newValue;
                                
            }
        }
        
        

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "Kistl.App.Base");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "Kistl.App.Base");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Base");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Identity_memberOf_Group_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (Kistl.App.Base.Identity__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.Identity>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (Kistl.App.Base.Identity__Implementation__)Context.Find<Kistl.App.Base.Identity>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (Kistl.App.Base.Group__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.Group>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (Kistl.App.Base.Group__Implementation__)Context.Find<Kistl.App.Base.Group>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Identity_memberOf_Group_RelationEntry__Implementation__)obj;
			var me = (Identity_memberOf_Group_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.Test
{
    [EdmEntityType(NamespaceName="Model", Name="Muhblah_has_TestCustomObject_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("Muhblah_has_TestCustomObject_RelationEntry__Implementation__")]
    public class Muhblah_has_TestCustomObject_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, Muhblah_has_TestCustomObject_RelationEntry
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("d1e0da3e-ce64-4587-b62d-70c0f4371d97"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Test.Muhblah)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Test.TestCustomObject)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.Muhblah A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (Kistl.App.Test.Muhblah__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_MuhBlah_ManyList_Role_has_TestCustomObjects_ManyList_Role_A", "MuhBlah_ManyList_Role")]
        public Kistl.App.Test.Muhblah__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Test.Muhblah__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.Muhblah__Implementation__>(
                        "Model.FK_MuhBlah_ManyList_Role_has_TestCustomObjects_ManyList_Role_A",
                        "MuhBlah_ManyList_Role");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Test.Muhblah__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.Muhblah__Implementation__>(
                        "Model.FK_MuhBlah_ManyList_Role_has_TestCustomObjects_ManyList_Role_A",
                        "MuhBlah_ManyList_Role");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Test.Muhblah __oldValue = (Kistl.App.Test.Muhblah)r.Value;
                Kistl.App.Test.Muhblah __newValue = (Kistl.App.Test.Muhblah)value;

                r.Value = (Kistl.App.Test.Muhblah__Implementation__)__newValue;
                                
            }
        }
        
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.TestCustomObject B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (Kistl.App.Test.TestCustomObject__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_MuhBlah_ManyList_Role_has_TestCustomObjects_ManyList_Role_B", "TestCustomObjects_ManyList_Role")]
        public Kistl.App.Test.TestCustomObject__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Test.TestCustomObject__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.TestCustomObject__Implementation__>(
                        "Model.FK_MuhBlah_ManyList_Role_has_TestCustomObjects_ManyList_Role_B",
                        "TestCustomObjects_ManyList_Role");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Test.TestCustomObject__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.TestCustomObject__Implementation__>(
                        "Model.FK_MuhBlah_ManyList_Role_has_TestCustomObjects_ManyList_Role_B",
                        "TestCustomObjects_ManyList_Role");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Test.TestCustomObject __oldValue = (Kistl.App.Test.TestCustomObject)r.Value;
                Kistl.App.Test.TestCustomObject __newValue = (Kistl.App.Test.TestCustomObject)value;

                r.Value = (Kistl.App.Test.TestCustomObject__Implementation__)__newValue;
                                
            }
        }
        
        

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "Kistl.App.Test");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "Kistl.App.Test");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Test");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Test");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Muhblah_has_TestCustomObject_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (Kistl.App.Test.Muhblah__Implementation__)Context.FindPersistenceObject<Kistl.App.Test.Muhblah>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (Kistl.App.Test.Muhblah__Implementation__)Context.Find<Kistl.App.Test.Muhblah>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (Kistl.App.Test.TestCustomObject__Implementation__)Context.FindPersistenceObject<Kistl.App.Test.TestCustomObject>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (Kistl.App.Test.TestCustomObject__Implementation__)Context.Find<Kistl.App.Test.TestCustomObject>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Muhblah_has_TestCustomObject_RelationEntry__Implementation__)obj;
			var me = (Muhblah_has_TestCustomObject_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.Base
{
    [EdmEntityType(NamespaceName="Model", Name="ObjectClass_implements_Interface_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("ObjectClass_implements_Interface_RelationEntry__Implementation__")]
    public class ObjectClass_implements_Interface_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, ObjectClass_implements_Interface_RelationEntry
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.CollectionEntries.ExportGuidProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        public Guid RelationID { get { return new Guid("692c1064-37a2-4be3-a81e-4cb91f673aa3"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Base.ObjectClass)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.Interface)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.ObjectClass A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (Kistl.App.Base.ObjectClass__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ObjectClass_implements_ImplementsInterfaces_A", "ObjectClass")]
        public Kistl.App.Base.ObjectClass__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.ObjectClass__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.ObjectClass__Implementation__>(
                        "Model.FK_ObjectClass_implements_ImplementsInterfaces_A",
                        "ObjectClass");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.ObjectClass__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.ObjectClass__Implementation__>(
                        "Model.FK_ObjectClass_implements_ImplementsInterfaces_A",
                        "ObjectClass");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.ObjectClass __oldValue = (Kistl.App.Base.ObjectClass)r.Value;
                Kistl.App.Base.ObjectClass __newValue = (Kistl.App.Base.ObjectClass)value;

                r.Value = (Kistl.App.Base.ObjectClass__Implementation__)__newValue;
                                
            }
        }
        
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Interface B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (Kistl.App.Base.Interface__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ObjectClass_implements_ImplementsInterfaces_B", "ImplementsInterfaces")]
        public Kistl.App.Base.Interface__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.Interface__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Interface__Implementation__>(
                        "Model.FK_ObjectClass_implements_ImplementsInterfaces_B",
                        "ImplementsInterfaces");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.Interface__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Interface__Implementation__>(
                        "Model.FK_ObjectClass_implements_ImplementsInterfaces_B",
                        "ImplementsInterfaces");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.Interface __oldValue = (Kistl.App.Base.Interface)r.Value;
                Kistl.App.Base.Interface __newValue = (Kistl.App.Base.Interface)value;

                r.Value = (Kistl.App.Base.Interface__Implementation__)__newValue;
                                
            }
        }
        
        

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "Kistl.App.Base");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "Kistl.App.Base");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Base");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.Base");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(ObjectClass_implements_Interface_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (Kistl.App.Base.ObjectClass__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.ObjectClass>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (Kistl.App.Base.ObjectClass__Implementation__)Context.Find<Kistl.App.Base.ObjectClass>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (Kistl.App.Base.Interface__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.Interface>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (Kistl.App.Base.Interface__Implementation__)Context.Find<Kistl.App.Base.Interface>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (ObjectClass_implements_Interface_RelationEntry__Implementation__)obj;
			var me = (ObjectClass_implements_Interface_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.GUI
{
    [EdmEntityType(NamespaceName="Model", Name="PresentableModelDescriptor_displayedBy_ControlKind_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("PresentableModelDescriptor_displayedBy_ControlKind_RelationEntry__Implementation__")]
    public class PresentableModelDescriptor_displayedBy_ControlKind_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, PresentableModelDescriptor_displayedBy_ControlKind_RelationEntry
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.CollectionEntries.ExportGuidProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        public Guid RelationID { get { return new Guid("5404456a-4527-4e40-a660-b4a5e96e4a47"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.GUI.PresentableModelDescriptor)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.GUI.ControlKind)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.PresentableModelDescriptor A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (Kistl.App.GUI.PresentableModelDescriptor__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Presentable_displayedBy_SecondaryControlKinds_A", "Presentable")]
        public Kistl.App.GUI.PresentableModelDescriptor__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.GUI.PresentableModelDescriptor__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.PresentableModelDescriptor__Implementation__>(
                        "Model.FK_Presentable_displayedBy_SecondaryControlKinds_A",
                        "Presentable");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.GUI.PresentableModelDescriptor__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.PresentableModelDescriptor__Implementation__>(
                        "Model.FK_Presentable_displayedBy_SecondaryControlKinds_A",
                        "Presentable");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.GUI.PresentableModelDescriptor __oldValue = (Kistl.App.GUI.PresentableModelDescriptor)r.Value;
                Kistl.App.GUI.PresentableModelDescriptor __newValue = (Kistl.App.GUI.PresentableModelDescriptor)value;

                r.Value = (Kistl.App.GUI.PresentableModelDescriptor__Implementation__)__newValue;
                                
            }
        }
        
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ControlKind B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (Kistl.App.GUI.ControlKind__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Presentable_displayedBy_SecondaryControlKinds_B", "SecondaryControlKinds")]
        public Kistl.App.GUI.ControlKind__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.GUI.ControlKind__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKind__Implementation__>(
                        "Model.FK_Presentable_displayedBy_SecondaryControlKinds_B",
                        "SecondaryControlKinds");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.GUI.ControlKind__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKind__Implementation__>(
                        "Model.FK_Presentable_displayedBy_SecondaryControlKinds_B",
                        "SecondaryControlKinds");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.GUI.ControlKind __oldValue = (Kistl.App.GUI.ControlKind)r.Value;
                Kistl.App.GUI.ControlKind __newValue = (Kistl.App.GUI.ControlKind)value;

                r.Value = (Kistl.App.GUI.ControlKind__Implementation__)__newValue;
                                
            }
        }
        
        

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "Kistl.App.GUI");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "Kistl.App.GUI");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.GUI");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.GUI");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(PresentableModelDescriptor_displayedBy_ControlKind_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (Kistl.App.GUI.PresentableModelDescriptor__Implementation__)Context.FindPersistenceObject<Kistl.App.GUI.PresentableModelDescriptor>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (Kistl.App.GUI.PresentableModelDescriptor__Implementation__)Context.Find<Kistl.App.GUI.PresentableModelDescriptor>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (Kistl.App.GUI.ControlKind__Implementation__)Context.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (Kistl.App.GUI.ControlKind__Implementation__)Context.Find<Kistl.App.GUI.ControlKind>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (PresentableModelDescriptor_displayedBy_ControlKind_RelationEntry__Implementation__)obj;
			var me = (PresentableModelDescriptor_displayedBy_ControlKind_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.Projekte
{
    [EdmEntityType(NamespaceName="Model", Name="Projekt_haben_Mitarbeiter_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("Projekt_haben_Mitarbeiter_RelationEntry__Implementation__")]
    public class Projekt_haben_Mitarbeiter_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, Projekt_haben_Mitarbeiter_RelationEntry
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("c7b3cf10-cdc8-454c-826c-04a0f7e5ef3e"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Projekte.Projekt)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Projekte.Mitarbeiter)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Projekte.Projekt A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (Kistl.App.Projekte.Projekt__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Projekte_haben_Mitarbeiter_A", "Projekte")]
        public Kistl.App.Projekte.Projekt__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Projekte.Projekt__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Projekte.Projekt__Implementation__>(
                        "Model.FK_Projekte_haben_Mitarbeiter_A",
                        "Projekte");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Projekte.Projekt__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Projekte.Projekt__Implementation__>(
                        "Model.FK_Projekte_haben_Mitarbeiter_A",
                        "Projekte");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Projekte.Projekt __oldValue = (Kistl.App.Projekte.Projekt)r.Value;
                Kistl.App.Projekte.Projekt __newValue = (Kistl.App.Projekte.Projekt)value;

                r.Value = (Kistl.App.Projekte.Projekt__Implementation__)__newValue;
                                
            }
        }
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? A_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
                    var __oldValue = _A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    _A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _A_pos;
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Projekte.Mitarbeiter B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (Kistl.App.Projekte.Mitarbeiter__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Projekte_haben_Mitarbeiter_B", "Mitarbeiter")]
        public Kistl.App.Projekte.Mitarbeiter__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Projekte.Mitarbeiter__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Projekte.Mitarbeiter__Implementation__>(
                        "Model.FK_Projekte_haben_Mitarbeiter_B",
                        "Mitarbeiter");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Projekte.Mitarbeiter__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Projekte.Mitarbeiter__Implementation__>(
                        "Model.FK_Projekte_haben_Mitarbeiter_B",
                        "Mitarbeiter");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Projekte.Mitarbeiter __oldValue = (Kistl.App.Projekte.Mitarbeiter)r.Value;
                Kistl.App.Projekte.Mitarbeiter __newValue = (Kistl.App.Projekte.Mitarbeiter)value;

                r.Value = (Kistl.App.Projekte.Mitarbeiter__Implementation__)__newValue;
                                
            }
        }
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? B_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
                    var __oldValue = _B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    _B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _B_pos;
        



        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
public int? AIndex { get { return A_pos; } set { A_pos = value; } }
        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
public int? BIndex { get { return B_pos; } set { B_pos = value; } }
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "Kistl.App.Projekte");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Projekte");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "Kistl.App.Projekte");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Projekte");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Projekte");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Projekte");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Projekte");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Projekt_haben_Mitarbeiter_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (Kistl.App.Projekte.Projekt__Implementation__)Context.FindPersistenceObject<Kistl.App.Projekte.Projekt>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (Kistl.App.Projekte.Projekt__Implementation__)Context.Find<Kistl.App.Projekte.Projekt>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (Kistl.App.Projekte.Mitarbeiter__Implementation__)Context.FindPersistenceObject<Kistl.App.Projekte.Mitarbeiter>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (Kistl.App.Projekte.Mitarbeiter__Implementation__)Context.Find<Kistl.App.Projekte.Mitarbeiter>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Projekt_haben_Mitarbeiter_RelationEntry__Implementation__)obj;
			var me = (Projekt_haben_Mitarbeiter_RelationEntry__Implementation__)this;
			
            me.AIndex = other.AIndex;
            me.BIndex = other.BIndex;
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.Base
{
    [EdmEntityType(NamespaceName="Model", Name="RoleMembership_resolves_Relation_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("RoleMembership_resolves_Relation_RelationEntry__Implementation__")]
    public class RoleMembership_resolves_Relation_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, RoleMembership_resolves_Relation_RelationEntry
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.CollectionEntries.ExportGuidProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        public Guid RelationID { get { return new Guid("f74d425f-e733-4cba-baca-f4a05fbc0a80"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Base.RoleMembership)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.Relation)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.RoleMembership A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (Kistl.App.Base.RoleMembership__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_RoleMembership_resolves_Relations_A", "RoleMembership")]
        public Kistl.App.Base.RoleMembership__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.RoleMembership__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.RoleMembership__Implementation__>(
                        "Model.FK_RoleMembership_resolves_Relations_A",
                        "RoleMembership");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.RoleMembership__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.RoleMembership__Implementation__>(
                        "Model.FK_RoleMembership_resolves_Relations_A",
                        "RoleMembership");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.RoleMembership __oldValue = (Kistl.App.Base.RoleMembership)r.Value;
                Kistl.App.Base.RoleMembership __newValue = (Kistl.App.Base.RoleMembership)value;

                r.Value = (Kistl.App.Base.RoleMembership__Implementation__)__newValue;
                                
            }
        }
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? A_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
                    var __oldValue = _A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    _A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _A_pos;
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Relation B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (Kistl.App.Base.Relation__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_RoleMembership_resolves_Relations_B", "Relations")]
        public Kistl.App.Base.Relation__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.Relation__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Relation__Implementation__>(
                        "Model.FK_RoleMembership_resolves_Relations_B",
                        "Relations");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.Relation__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Relation__Implementation__>(
                        "Model.FK_RoleMembership_resolves_Relations_B",
                        "Relations");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.Relation __oldValue = (Kistl.App.Base.Relation)r.Value;
                Kistl.App.Base.Relation __newValue = (Kistl.App.Base.Relation)value;

                r.Value = (Kistl.App.Base.Relation__Implementation__)__newValue;
                                
            }
        }
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? B_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
                    var __oldValue = _B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    _B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _B_pos;
        



        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
public int? AIndex { get { return A_pos; } set { A_pos = value; } }
        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
public int? BIndex { get { return B_pos; } set { B_pos = value; } }
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "Kistl.App.Base");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "Kistl.App.Base");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Kistl.App.Base");
	
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.Base");
	
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
	
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Base");
	
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(RoleMembership_resolves_Relation_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (Kistl.App.Base.RoleMembership__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.RoleMembership>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (Kistl.App.Base.RoleMembership__Implementation__)Context.Find<Kistl.App.Base.RoleMembership>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (Kistl.App.Base.Relation__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.Relation>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (Kistl.App.Base.Relation__Implementation__)Context.Find<Kistl.App.Base.Relation>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (RoleMembership_resolves_Relation_RelationEntry__Implementation__)obj;
			var me = (RoleMembership_resolves_Relation_RelationEntry__Implementation__)this;
			
            me.AIndex = other.AIndex;
            me.BIndex = other.BIndex;
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace at.dasz.CourseOrganiser
{
    [EdmEntityType(NamespaceName="Model", Name="Student_attend_Semester_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("Student_attend_Semester_RelationEntry__Implementation__")]
    public class Student_attend_Semester_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, Student_attend_Semester_RelationEntry
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("e10ddd77-ead7-41f8-8ef7-20ebaaeee705"); } }
        public IDataObject AObject { get { return A; } set { A = (at.dasz.CourseOrganiser.Student)value; } }
        public IDataObject BObject { get { return B; } set { B = (at.dasz.CourseOrganiser.Semester)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.CourseOrganiser.Student A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (at.dasz.CourseOrganiser.Student__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Students_attend_Semesters_A", "Students")]
        public at.dasz.CourseOrganiser.Student__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<at.dasz.CourseOrganiser.Student__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.CourseOrganiser.Student__Implementation__>(
                        "Model.FK_Students_attend_Semesters_A",
                        "Students");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<at.dasz.CourseOrganiser.Student__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.CourseOrganiser.Student__Implementation__>(
                        "Model.FK_Students_attend_Semesters_A",
                        "Students");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                at.dasz.CourseOrganiser.Student __oldValue = (at.dasz.CourseOrganiser.Student)r.Value;
                at.dasz.CourseOrganiser.Student __newValue = (at.dasz.CourseOrganiser.Student)value;

                r.Value = (at.dasz.CourseOrganiser.Student__Implementation__)__newValue;
                                
            }
        }
        
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.CourseOrganiser.Semester B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (at.dasz.CourseOrganiser.Semester__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Students_attend_Semesters_B", "Semesters")]
        public at.dasz.CourseOrganiser.Semester__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<at.dasz.CourseOrganiser.Semester__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.CourseOrganiser.Semester__Implementation__>(
                        "Model.FK_Students_attend_Semesters_B",
                        "Semesters");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<at.dasz.CourseOrganiser.Semester__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.CourseOrganiser.Semester__Implementation__>(
                        "Model.FK_Students_attend_Semesters_B",
                        "Semesters");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                at.dasz.CourseOrganiser.Semester __oldValue = (at.dasz.CourseOrganiser.Semester)r.Value;
                at.dasz.CourseOrganiser.Semester __newValue = (at.dasz.CourseOrganiser.Semester)value;

                r.Value = (at.dasz.CourseOrganiser.Semester__Implementation__)__newValue;
                                
            }
        }
        
        

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "at.dasz.CourseOrganiser");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "at.dasz.CourseOrganiser");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "at.dasz.CourseOrganiser");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "at.dasz.CourseOrganiser");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Student_attend_Semester_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (at.dasz.CourseOrganiser.Student__Implementation__)Context.FindPersistenceObject<at.dasz.CourseOrganiser.Student>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (at.dasz.CourseOrganiser.Student__Implementation__)Context.Find<at.dasz.CourseOrganiser.Student>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (at.dasz.CourseOrganiser.Semester__Implementation__)Context.FindPersistenceObject<at.dasz.CourseOrganiser.Semester>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (at.dasz.CourseOrganiser.Semester__Implementation__)Context.Find<at.dasz.CourseOrganiser.Semester>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Student_attend_Semester_RelationEntry__Implementation__)obj;
			var me = (Student_attend_Semester_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.GUI
{
    [EdmEntityType(NamespaceName="Model", Name="Template_hasMenu_Visual_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("Template_hasMenu_Visual_RelationEntry__Implementation__")]
    public class Template_hasMenu_Visual_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, Template_hasMenu_Visual_RelationEntry
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("81ff3089-57da-478c-8be5-fd23abc222a2"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.GUI.Template)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.GUI.Visual)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Template A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (Kistl.App.GUI.Template__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Template_hasMenu_Menu_A", "Template")]
        public Kistl.App.GUI.Template__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.GUI.Template__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.Template__Implementation__>(
                        "Model.FK_Template_hasMenu_Menu_A",
                        "Template");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.GUI.Template__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.Template__Implementation__>(
                        "Model.FK_Template_hasMenu_Menu_A",
                        "Template");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.GUI.Template __oldValue = (Kistl.App.GUI.Template)r.Value;
                Kistl.App.GUI.Template __newValue = (Kistl.App.GUI.Template)value;

                r.Value = (Kistl.App.GUI.Template__Implementation__)__newValue;
                                
            }
        }
        
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (Kistl.App.GUI.Visual__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Template_hasMenu_Menu_B", "Menu")]
        public Kistl.App.GUI.Visual__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.GUI.Visual__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.Visual__Implementation__>(
                        "Model.FK_Template_hasMenu_Menu_B",
                        "Menu");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.GUI.Visual__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.Visual__Implementation__>(
                        "Model.FK_Template_hasMenu_Menu_B",
                        "Menu");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.GUI.Visual __oldValue = (Kistl.App.GUI.Visual)r.Value;
                Kistl.App.GUI.Visual __newValue = (Kistl.App.GUI.Visual)value;

                r.Value = (Kistl.App.GUI.Visual__Implementation__)__newValue;
                                
            }
        }
        
        

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "Kistl.App.GUI");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "Kistl.App.GUI");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.GUI");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Template_hasMenu_Visual_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (Kistl.App.GUI.Template__Implementation__)Context.FindPersistenceObject<Kistl.App.GUI.Template>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (Kistl.App.GUI.Template__Implementation__)Context.Find<Kistl.App.GUI.Template>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (Kistl.App.GUI.Visual__Implementation__)Context.FindPersistenceObject<Kistl.App.GUI.Visual>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (Kistl.App.GUI.Visual__Implementation__)Context.Find<Kistl.App.GUI.Visual>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Template_hasMenu_Visual_RelationEntry__Implementation__)obj;
			var me = (Template_hasMenu_Visual_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.Test
{
    [EdmEntityType(NamespaceName="Model", Name="TestStudent_füllt_aus_Fragebogen_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("TestStudent_füllt_aus_Fragebogen_RelationEntry__Implementation__")]
    public class TestStudent_füllt_aus_Fragebogen_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, TestStudent_füllt_aus_Fragebogen_RelationEntry
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("6819ca86-571c-4d59-bc30-cc1fb0decc9e"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Test.TestStudent)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Test.Fragebogen)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.TestStudent A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (Kistl.App.Test.TestStudent__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Student_füllt_aus_Testbogen_A", "Student")]
        public Kistl.App.Test.TestStudent__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Test.TestStudent__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.TestStudent__Implementation__>(
                        "Model.FK_Student_füllt_aus_Testbogen_A",
                        "Student");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Test.TestStudent__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.TestStudent__Implementation__>(
                        "Model.FK_Student_füllt_aus_Testbogen_A",
                        "Student");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Test.TestStudent __oldValue = (Kistl.App.Test.TestStudent)r.Value;
                Kistl.App.Test.TestStudent __newValue = (Kistl.App.Test.TestStudent)value;

                r.Value = (Kistl.App.Test.TestStudent__Implementation__)__newValue;
                                
            }
        }
        
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.Fragebogen B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (Kistl.App.Test.Fragebogen__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Student_füllt_aus_Testbogen_B", "Testbogen")]
        public Kistl.App.Test.Fragebogen__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Test.Fragebogen__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.Fragebogen__Implementation__>(
                        "Model.FK_Student_füllt_aus_Testbogen_B",
                        "Testbogen");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Test.Fragebogen__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.Fragebogen__Implementation__>(
                        "Model.FK_Student_füllt_aus_Testbogen_B",
                        "Testbogen");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Test.Fragebogen __oldValue = (Kistl.App.Test.Fragebogen)r.Value;
                Kistl.App.Test.Fragebogen __newValue = (Kistl.App.Test.Fragebogen)value;

                r.Value = (Kistl.App.Test.Fragebogen__Implementation__)__newValue;
                                
            }
        }
        
        

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "Kistl.App.Test");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "Kistl.App.Test");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Test");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Test");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(TestStudent_füllt_aus_Fragebogen_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (Kistl.App.Test.TestStudent__Implementation__)Context.FindPersistenceObject<Kistl.App.Test.TestStudent>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (Kistl.App.Test.TestStudent__Implementation__)Context.Find<Kistl.App.Test.TestStudent>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (Kistl.App.Test.Fragebogen__Implementation__)Context.FindPersistenceObject<Kistl.App.Test.Fragebogen>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (Kistl.App.Test.Fragebogen__Implementation__)Context.Find<Kistl.App.Test.Fragebogen>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (TestStudent_füllt_aus_Fragebogen_RelationEntry__Implementation__)obj;
			var me = (TestStudent_füllt_aus_Fragebogen_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.Base
{
    [EdmEntityType(NamespaceName="Model", Name="TypeRef_hasGenericArguments_TypeRef_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("TypeRef_hasGenericArguments_TypeRef_RelationEntry__Implementation__")]
    public class TypeRef_hasGenericArguments_TypeRef_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, TypeRef_hasGenericArguments_TypeRef_RelationEntry
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.CollectionEntries.ExportGuidProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        public Guid RelationID { get { return new Guid("8b41ffa4-8ffa-4d96-b4e5-708188045c71"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Base.TypeRef)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.TypeRef)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.TypeRef A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (Kistl.App.Base.TypeRef__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_TypeRef_hasGenericArguments_GenericArguments_A", "TypeRef")]
        public Kistl.App.Base.TypeRef__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.TypeRef__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRef__Implementation__>(
                        "Model.FK_TypeRef_hasGenericArguments_GenericArguments_A",
                        "TypeRef");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.TypeRef__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRef__Implementation__>(
                        "Model.FK_TypeRef_hasGenericArguments_GenericArguments_A",
                        "TypeRef");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.TypeRef __oldValue = (Kistl.App.Base.TypeRef)r.Value;
                Kistl.App.Base.TypeRef __newValue = (Kistl.App.Base.TypeRef)value;

                r.Value = (Kistl.App.Base.TypeRef__Implementation__)__newValue;
                                
            }
        }
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? A_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
                    var __oldValue = _A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    _A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _A_pos;
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.TypeRef B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (Kistl.App.Base.TypeRef__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_TypeRef_hasGenericArguments_GenericArguments_B", "GenericArguments")]
        public Kistl.App.Base.TypeRef__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.TypeRef__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRef__Implementation__>(
                        "Model.FK_TypeRef_hasGenericArguments_GenericArguments_B",
                        "GenericArguments");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.TypeRef__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRef__Implementation__>(
                        "Model.FK_TypeRef_hasGenericArguments_GenericArguments_B",
                        "GenericArguments");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.TypeRef __oldValue = (Kistl.App.Base.TypeRef)r.Value;
                Kistl.App.Base.TypeRef __newValue = (Kistl.App.Base.TypeRef)value;

                r.Value = (Kistl.App.Base.TypeRef__Implementation__)__newValue;
                                
            }
        }
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? B_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
                    var __oldValue = _B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    _B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _B_pos;
        



        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
public int? AIndex { get { return A_pos; } set { A_pos = value; } }
        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
public int? BIndex { get { return B_pos; } set { B_pos = value; } }
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
			if (auxObjects != null) {
				auxObjects.Add(B);
			}
            BinarySerializer.ToStream(this._B_pos, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "Kistl.App.Base");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "Kistl.App.Base");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Kistl.App.Base");
	
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.Base");
	
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
	
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Base");
	
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(TypeRef_hasGenericArguments_TypeRef_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (Kistl.App.Base.TypeRef__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.TypeRef>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (Kistl.App.Base.TypeRef__Implementation__)Context.Find<Kistl.App.Base.TypeRef>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (Kistl.App.Base.TypeRef__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.TypeRef>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (Kistl.App.Base.TypeRef__Implementation__)Context.Find<Kistl.App.Base.TypeRef>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (TypeRef_hasGenericArguments_TypeRef_RelationEntry__Implementation__)obj;
			var me = (TypeRef_hasGenericArguments_TypeRef_RelationEntry__Implementation__)this;
			
            me.AIndex = other.AIndex;
            me.BIndex = other.BIndex;
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.GUI
{
    [EdmEntityType(NamespaceName="Model", Name="Visual_contains_Visual_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("Visual_contains_Visual_RelationEntry__Implementation__")]
    public class Visual_contains_Visual_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, Visual_contains_Visual_RelationEntry
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("4d4e1ffd-f362-40e2-9fe1-0711ded83241"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.GUI.Visual)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.GUI.Visual)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (Kistl.App.GUI.Visual__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Visual_contains_Children_A", "Visual")]
        public Kistl.App.GUI.Visual__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.GUI.Visual__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.Visual__Implementation__>(
                        "Model.FK_Visual_contains_Children_A",
                        "Visual");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.GUI.Visual__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.Visual__Implementation__>(
                        "Model.FK_Visual_contains_Children_A",
                        "Visual");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.GUI.Visual __oldValue = (Kistl.App.GUI.Visual)r.Value;
                Kistl.App.GUI.Visual __newValue = (Kistl.App.GUI.Visual)value;

                r.Value = (Kistl.App.GUI.Visual__Implementation__)__newValue;
                                
            }
        }
        
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (Kistl.App.GUI.Visual__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Visual_contains_Children_B", "Children")]
        public Kistl.App.GUI.Visual__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.GUI.Visual__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.Visual__Implementation__>(
                        "Model.FK_Visual_contains_Children_B",
                        "Children");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.GUI.Visual__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.Visual__Implementation__>(
                        "Model.FK_Visual_contains_Children_B",
                        "Children");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.GUI.Visual __oldValue = (Kistl.App.GUI.Visual)r.Value;
                Kistl.App.GUI.Visual __newValue = (Kistl.App.GUI.Visual)value;

                r.Value = (Kistl.App.GUI.Visual__Implementation__)__newValue;
                                
            }
        }
        
        

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "Kistl.App.GUI");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "Kistl.App.GUI");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.GUI");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Visual_contains_Visual_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (Kistl.App.GUI.Visual__Implementation__)Context.FindPersistenceObject<Kistl.App.GUI.Visual>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (Kistl.App.GUI.Visual__Implementation__)Context.Find<Kistl.App.GUI.Visual>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (Kistl.App.GUI.Visual__Implementation__)Context.FindPersistenceObject<Kistl.App.GUI.Visual>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (Kistl.App.GUI.Visual__Implementation__)Context.Find<Kistl.App.GUI.Visual>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Visual_contains_Visual_RelationEntry__Implementation__)obj;
			var me = (Visual_contains_Visual_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.GUI
{
    [EdmEntityType(NamespaceName="Model", Name="Visual_hasContextMenu_Visual_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("Visual_hasContextMenu_Visual_RelationEntry__Implementation__")]
    public class Visual_hasContextMenu_Visual_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, Visual_hasContextMenu_Visual_RelationEntry
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("358c14b9-fef5-495d-8d44-04e84186830e"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.GUI.Visual)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.GUI.Visual)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (Kistl.App.GUI.Visual__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Visual_hasContextMenu_ContextMenu_A", "Visual")]
        public Kistl.App.GUI.Visual__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.GUI.Visual__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.Visual__Implementation__>(
                        "Model.FK_Visual_hasContextMenu_ContextMenu_A",
                        "Visual");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.GUI.Visual__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.Visual__Implementation__>(
                        "Model.FK_Visual_hasContextMenu_ContextMenu_A",
                        "Visual");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.GUI.Visual __oldValue = (Kistl.App.GUI.Visual)r.Value;
                Kistl.App.GUI.Visual __newValue = (Kistl.App.GUI.Visual)value;

                r.Value = (Kistl.App.GUI.Visual__Implementation__)__newValue;
                                
            }
        }
        
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (Kistl.App.GUI.Visual__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Visual_hasContextMenu_ContextMenu_B", "ContextMenu")]
        public Kistl.App.GUI.Visual__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.GUI.Visual__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.Visual__Implementation__>(
                        "Model.FK_Visual_hasContextMenu_ContextMenu_B",
                        "ContextMenu");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.GUI.Visual__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.Visual__Implementation__>(
                        "Model.FK_Visual_hasContextMenu_ContextMenu_B",
                        "ContextMenu");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.GUI.Visual __oldValue = (Kistl.App.GUI.Visual)r.Value;
                Kistl.App.GUI.Visual __newValue = (Kistl.App.GUI.Visual)value;

                r.Value = (Kistl.App.GUI.Visual__Implementation__)__newValue;
                                
            }
        }
        
        

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "Kistl.App.GUI");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "Kistl.App.GUI");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.GUI");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Visual_hasContextMenu_Visual_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (Kistl.App.GUI.Visual__Implementation__)Context.FindPersistenceObject<Kistl.App.GUI.Visual>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (Kistl.App.GUI.Visual__Implementation__)Context.Find<Kistl.App.GUI.Visual>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (Kistl.App.GUI.Visual__Implementation__)Context.FindPersistenceObject<Kistl.App.GUI.Visual>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (Kistl.App.GUI.Visual__Implementation__)Context.Find<Kistl.App.GUI.Visual>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Visual_hasContextMenu_Visual_RelationEntry__Implementation__)obj;
			var me = (Visual_hasContextMenu_Visual_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.TimeRecords
{
	using Kistl.App.Projekte;
    [EdmEntityType(NamespaceName="Model", Name="WorkEffortAccount_has_Mitarbeiter_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("WorkEffortAccount_has_Mitarbeiter_RelationEntry__Implementation__")]
    public class WorkEffortAccount_has_Mitarbeiter_RelationEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, WorkEffortAccount_has_Mitarbeiter_RelationEntry
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("7db412de-b90b-48ba-8340-1e6ac8c8fbaf"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.TimeRecords.WorkEffortAccount)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Projekte.Mitarbeiter)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.TimeRecords.WorkEffortAccount A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (Kistl.App.TimeRecords.WorkEffortAccount__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        private Guid? _fk_guid_A = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_WorkEffortAccount_has_Mitarbeiter_A", "WorkEffortAccount")]
        public Kistl.App.TimeRecords.WorkEffortAccount__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.TimeRecords.WorkEffortAccount__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.TimeRecords.WorkEffortAccount__Implementation__>(
                        "Model.FK_WorkEffortAccount_has_Mitarbeiter_A",
                        "WorkEffortAccount");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.TimeRecords.WorkEffortAccount__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.TimeRecords.WorkEffortAccount__Implementation__>(
                        "Model.FK_WorkEffortAccount_has_Mitarbeiter_A",
                        "WorkEffortAccount");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.TimeRecords.WorkEffortAccount __oldValue = (Kistl.App.TimeRecords.WorkEffortAccount)r.Value;
                Kistl.App.TimeRecords.WorkEffortAccount __newValue = (Kistl.App.TimeRecords.WorkEffortAccount)value;

                r.Value = (Kistl.App.TimeRecords.WorkEffortAccount__Implementation__)__newValue;
                                
            }
        }
        
        
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Projekte.Mitarbeiter B
        {
            get
            {
                return B__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                B__Implementation__ = (Kistl.App.Projekte.Mitarbeiter__Implementation__)value;
            }
        }
        
        private int? _fk_B;
        private Guid? _fk_guid_B = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_WorkEffortAccount_has_Mitarbeiter_B", "Mitarbeiter")]
        public Kistl.App.Projekte.Mitarbeiter__Implementation__ B__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Projekte.Mitarbeiter__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Projekte.Mitarbeiter__Implementation__>(
                        "Model.FK_WorkEffortAccount_has_Mitarbeiter_B",
                        "Mitarbeiter");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Projekte.Mitarbeiter__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Projekte.Mitarbeiter__Implementation__>(
                        "Model.FK_WorkEffortAccount_has_Mitarbeiter_B",
                        "Mitarbeiter");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Projekte.Mitarbeiter __oldValue = (Kistl.App.Projekte.Mitarbeiter)r.Value;
                Kistl.App.Projekte.Mitarbeiter __newValue = (Kistl.App.Projekte.Mitarbeiter)value;

                r.Value = (Kistl.App.Projekte.Mitarbeiter__Implementation__)__newValue;
                                
            }
        }
        
        

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(B != null ? B.ID : (int?)null, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "Kistl.App.TimeRecords");
            XmlStreamer.ToStream(B != null ? B.ID : (int?)null, xml, "B", "Kistl.App.Projekte");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.TimeRecords");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Projekte");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(WorkEffortAccount_has_Mitarbeiter_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;

			if (_fk_guid_A.HasValue)
				A__Implementation__ = (Kistl.App.TimeRecords.WorkEffortAccount__Implementation__)Context.FindPersistenceObject<Kistl.App.TimeRecords.WorkEffortAccount>(_fk_guid_A.Value);
			else if (_fk_A.HasValue)
				A__Implementation__ = (Kistl.App.TimeRecords.WorkEffortAccount__Implementation__)Context.Find<Kistl.App.TimeRecords.WorkEffortAccount>(_fk_A.Value);
			else
				A__Implementation__ = null;


			if (_fk_guid_B.HasValue)
				B__Implementation__ = (Kistl.App.Projekte.Mitarbeiter__Implementation__)Context.FindPersistenceObject<Kistl.App.Projekte.Mitarbeiter>(_fk_guid_B.Value);
			else if (_fk_B.HasValue)
				B__Implementation__ = (Kistl.App.Projekte.Mitarbeiter__Implementation__)Context.Find<Kistl.App.Projekte.Mitarbeiter>(_fk_B.Value);
			else
				B__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (WorkEffortAccount_has_Mitarbeiter_RelationEntry__Implementation__)obj;
			var me = (WorkEffortAccount_has_Mitarbeiter_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.Projekte
{
    [EdmEntityType(NamespaceName="Model", Name="Kunde_EMails_CollectionEntry")]    [System.Diagnostics.DebuggerDisplay("Kunde_EMails_CollectionEntry__Implementation__")]
    public class Kunde_EMails_CollectionEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, Kunde_EMails_CollectionEntry
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public IDataObject ParentObject { get { return Parent; } set { Parent = (Kunde)value; } }
        public object ValueObject { get { return Value; } set { Value = (string)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kunde A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (Kunde__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Kunde_value_EMails", "Kunde")]
        public Kunde__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<Kunde__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kunde__Implementation__>(
                        "Model.FK_Kunde_value_EMails",
                        "Kunde");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<Kunde__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kunde__Implementation__>(
                        "Model.FK_Kunde_value_EMails",
                        "Kunde");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kunde __oldValue = (Kunde)r.Value;
                Kunde __newValue = (Kunde)value;

                r.Value = (Kunde__Implementation__)__newValue;
                                
            }
        }
        
        
public Kunde Parent { get { return A; } set { A = value; } }
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual string B
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B != value)
                {
                    var __oldValue = _B;
                    var __newValue = value;
                    NotifyPropertyChanging("B", __oldValue, __newValue);
                    _B = __newValue;
                    NotifyPropertyChanged("B", __oldValue, __newValue);
                }
            }
        }
        private string _B;
public string Value { get { return B; } set { B = value; } }

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "Kistl.App.Projekte");
            XmlStreamer.ToStream(this._B, xml, "B", "Kistl.App.Projekte");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._B, xml, "B", "Kistl.App.Projekte");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Kunde_EMails_CollectionEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			if (_fk_A.HasValue)
				A__Implementation__ = (Kunde__Implementation__)Context.Find<Kunde>(_fk_A.Value);
			else
				A__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Kunde_EMails_CollectionEntry__Implementation__)obj;
			var me = (Kunde_EMails_CollectionEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me.B = other.B;
		}		
		
		

    }
}

namespace Kistl.App.Test
{
    [EdmEntityType(NamespaceName="Model", Name="TestCustomObject_PhoneNumbersOther_CollectionEntry")]    [System.Diagnostics.DebuggerDisplay("TestCustomObject_PhoneNumbersOther_CollectionEntry__Implementation__")]
    public class TestCustomObject_PhoneNumbersOther_CollectionEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, TestCustomObject_PhoneNumbersOther_CollectionEntry
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public IDataObject ParentObject { get { return Parent; } set { Parent = (TestCustomObject)value; } }
        public object ValueObject { get { return Value; } set { Value = (Kistl.App.Test.TestPhoneCompoundObject)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public TestCustomObject A
        {
            get
            {
                return A__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                A__Implementation__ = (TestCustomObject__Implementation__)value;
            }
        }
        
        private int? _fk_A;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_TestCustomObject_value_PhoneNumbersOther", "TestCustomObject")]
        public TestCustomObject__Implementation__ A__Implementation__
        {
            get
            {
                EntityReference<TestCustomObject__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TestCustomObject__Implementation__>(
                        "Model.FK_TestCustomObject_value_PhoneNumbersOther",
                        "TestCustomObject");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
                return __value;
            }
            set
            {
                EntityReference<TestCustomObject__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TestCustomObject__Implementation__>(
                        "Model.FK_TestCustomObject_value_PhoneNumbersOther",
                        "TestCustomObject");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                TestCustomObject __oldValue = (TestCustomObject)r.Value;
                TestCustomObject __newValue = (TestCustomObject)value;

                r.Value = (TestCustomObject__Implementation__)__newValue;
                                
            }
        }
        
        
public TestCustomObject Parent { get { return A; } set { A = value; } }
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        public Kistl.App.Test.TestPhoneCompoundObject B
        {
            get { return B__Implementation__.CompoundObject_IsNull ? null : B__Implementation__; }
            set { B__Implementation__ = (Kistl.App.Test.TestPhoneCompoundObject__Implementation__)value; }
        }
        
        /// <summary>backing store for B</summary>
        private Kistl.App.Test.TestPhoneCompoundObject__Implementation__ _B;
        
        /// <summary>backing property for B, takes care of attaching/detaching the values, mapped via EF</summary>
        [XmlIgnore()]
        [EdmComplexProperty()]
        public Kistl.App.Test.TestPhoneCompoundObject__Implementation__ B__Implementation__
        {
            get
            {
                return _B;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (!object.Equals(_B, value))
                {
					var __oldValue = _B;
                    NotifyPropertyChanging("B", "B__Implementation__", __oldValue, value);
                    if (_B != null)
                    {
						_B.DetachFromObject(this, "B");
					}
                    if(value == null)
                    {
						_B = new Kistl.App.Test.TestPhoneCompoundObject__Implementation__(true, this, "B");
                    }
                    else
                    {
						_B = (Kistl.App.Test.TestPhoneCompoundObject__Implementation__)value.Clone();
						_B.AttachToObject(this, "B");
					}
                    NotifyPropertyChanged("B", "B__Implementation__", __oldValue, value);
                }
            }
        }


  public Kistl.App.Test.TestPhoneCompoundObject Value { get { return B; } set { B = value; } }

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(A != null ? A.ID : (int?)null, binStream);
			BinarySerializer.ToStream(this.B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
			{
				// trick compiler into generating correct temporary variable
				var tmp = this.B__Implementation__;
				BinarySerializer.FromStream(out tmp, binStream);
				// use setter to de-/attach everything correctly
	            this.B__Implementation__ = tmp;
	        }
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(A != null ? A.ID : (int?)null, xml, "A", "Kistl.App.Test");
			// TODO: Add XML Serializer here
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Test");
			// TODO: Add XML Serializer here
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(TestCustomObject_PhoneNumbersOther_CollectionEntry));
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			if (_fk_A.HasValue)
				A__Implementation__ = (TestCustomObject__Implementation__)Context.Find<TestCustomObject>(_fk_A.Value);
			else
				A__Implementation__ = null;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (TestCustomObject_PhoneNumbersOther_CollectionEntry__Implementation__)obj;
			var me = (TestCustomObject_PhoneNumbersOther_CollectionEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me.B = other.B;
		}		
		
		

    }
}
