// <autogenerated/>


namespace Kistl.App.Projekte
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.API.Server;
    using Kistl.DalProvider.EF;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="Kunde")]
    [System.Diagnostics.DebuggerDisplay("Kunde")]
    public class Kunde__Implementation__ : BaseServerDataObject_EntityFramework, Kunde
    {
    
		public Kunde__Implementation__()
		{
        }

        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;

        /// <summary>
        /// Adresse &amp; Hausnummer
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Adresse
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Adresse;
                if (OnAdresse_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnAdresse_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Adresse != value)
                {
                    var __oldValue = _Adresse;
                    var __newValue = value;
                    if(OnAdresse_PreSetter != null)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnAdresse_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Adresse", __oldValue, __newValue);
                    _Adresse = __newValue;
                    NotifyPropertyChanged("Adresse", __oldValue, __newValue);
                    if(OnAdresse_PostSetter != null)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnAdresse_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Adresse;
		public static event PropertyGetterHandler<Kistl.App.Projekte.Kunde, string> OnAdresse_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Projekte.Kunde, string> OnAdresse_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Projekte.Kunde, string> OnAdresse_PostSetter;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
    /*
    Relation: FK_Kunde_was_ChangedBy
    A: ZeroOrMore Kunde as Kunde
    B: ZeroOrOne Identity as ChangedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity ChangedBy
        {
            get
            {
                return ChangedBy__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                ChangedBy__Implementation__ = (Kistl.App.Base.Identity__Implementation__)value;
            }
        }
        
        private int? _fk_ChangedBy;
        private Guid? _fk_guid_ChangedBy = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Kunde_was_ChangedBy", "ChangedBy")]
        public Kistl.App.Base.Identity__Implementation__ ChangedBy__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.Identity__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Identity__Implementation__>(
                        "Model.FK_Kunde_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
				if(OnChangedBy_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
					OnChangedBy_Getter(this, e);
					__value = (Kistl.App.Base.Identity__Implementation__)e.Result;
				}
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.Identity__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Identity__Implementation__>(
                        "Model.FK_Kunde_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.Identity __oldValue = (Kistl.App.Base.Identity)r.Value;
                Kistl.App.Base.Identity __newValue = (Kistl.App.Base.Identity)value;

                if(OnChangedBy_PreSetter != null)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
					OnChangedBy_PreSetter(this, e);
					__newValue = e.Result;
                }
                r.Value = (Kistl.App.Base.Identity__Implementation__)__newValue;
                if(OnChangedBy_PostSetter != null)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
					OnChangedBy_PostSetter(this, e);
                }
                                
            }
        }
        
        
		public static event PropertyGetterHandler<Kistl.App.Projekte.Kunde, Kistl.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Projekte.Kunde, Kistl.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Projekte.Kunde, Kistl.App.Base.Identity> OnChangedBy_PostSetter;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual DateTime? ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if(OnChangedOn_PreSetter != null)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(OnChangedOn_PostSetter != null)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime? _ChangedOn;
		public static event PropertyGetterHandler<Kistl.App.Projekte.Kunde, DateTime?> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Projekte.Kunde, DateTime?> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Projekte.Kunde, DateTime?> OnChangedOn_PostSetter;

        /// <summary>
        /// Identity which created this object
        /// </summary>
    /*
    Relation: FK_Kunde_was_CreatedBy
    A: ZeroOrMore Kunde as Kunde
    B: ZeroOrOne Identity as CreatedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity CreatedBy
        {
            get
            {
                return CreatedBy__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                CreatedBy__Implementation__ = (Kistl.App.Base.Identity__Implementation__)value;
            }
        }
        
        private int? _fk_CreatedBy;
        private Guid? _fk_guid_CreatedBy = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Kunde_was_CreatedBy", "CreatedBy")]
        public Kistl.App.Base.Identity__Implementation__ CreatedBy__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.Identity__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Identity__Implementation__>(
                        "Model.FK_Kunde_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
				if(OnCreatedBy_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
					OnCreatedBy_Getter(this, e);
					__value = (Kistl.App.Base.Identity__Implementation__)e.Result;
				}
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.Identity__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Identity__Implementation__>(
                        "Model.FK_Kunde_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.Identity __oldValue = (Kistl.App.Base.Identity)r.Value;
                Kistl.App.Base.Identity __newValue = (Kistl.App.Base.Identity)value;

                if(OnCreatedBy_PreSetter != null)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
					OnCreatedBy_PreSetter(this, e);
					__newValue = e.Result;
                }
                r.Value = (Kistl.App.Base.Identity__Implementation__)__newValue;
                if(OnCreatedBy_PostSetter != null)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
					OnCreatedBy_PostSetter(this, e);
                }
                                
            }
        }
        
        
		public static event PropertyGetterHandler<Kistl.App.Projekte.Kunde, Kistl.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Projekte.Kunde, Kistl.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Projekte.Kunde, Kistl.App.Base.Identity> OnCreatedBy_PostSetter;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual DateTime? CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if(OnCreatedOn_PreSetter != null)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(OnCreatedOn_PostSetter != null)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime? _CreatedOn;
		public static event PropertyGetterHandler<Kistl.App.Projekte.Kunde, DateTime?> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Projekte.Kunde, DateTime?> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Projekte.Kunde, DateTime?> OnCreatedOn_PostSetter;

        /// <summary>
        /// EMails des Kunden - können mehrere sein
        /// </summary>
        // value list property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ValueCollectionProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<string> EMails
        {
            get
            {
                if (_EMailsWrapper == null)
                {
                    _EMailsWrapper = new EFValueCollectionWrapper<Kunde, string, Kunde_EMails_CollectionEntry__Implementation__, EntityCollection<Kunde_EMails_CollectionEntry__Implementation__>>(
						this.Context,
                        this,
              			// () => this.NotifyPropertyChanged("EMails", "EMails__Implementation__", null, null),
          	            EMails__Implementation__);
                }
                return _EMailsWrapper;
            }
        }
        
        [EdmRelationshipNavigationProperty("Model", "FK_Kunde_value_EMails", "CollectionEntry")]
        public EntityCollection<Kunde_EMails_CollectionEntry__Implementation__> EMails__Implementation__
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Kunde_EMails_CollectionEntry__Implementation__>(
                        "Model.FK_Kunde_value_EMails",
                        "CollectionEntry");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                return c;
            }
        }
        private EFValueCollectionWrapper<Kunde, string, Kunde_EMails_CollectionEntry__Implementation__, EntityCollection<Kunde_EMails_CollectionEntry__Implementation__>> _EMailsWrapper;

        /// <summary>
        /// Name des Kunden
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Kundenname
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Kundenname;
                if (OnKundenname_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnKundenname_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Kundenname != value)
                {
                    var __oldValue = _Kundenname;
                    var __newValue = value;
                    if(OnKundenname_PreSetter != null)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnKundenname_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Kundenname", __oldValue, __newValue);
                    _Kundenname = __newValue;
                    NotifyPropertyChanged("Kundenname", __oldValue, __newValue);
                    if(OnKundenname_PostSetter != null)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnKundenname_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Kundenname;
		public static event PropertyGetterHandler<Kistl.App.Projekte.Kunde, string> OnKundenname_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Projekte.Kunde, string> OnKundenname_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Projekte.Kunde, string> OnKundenname_PostSetter;

        /// <summary>
        /// Land
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Land
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Land;
                if (OnLand_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnLand_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Land != value)
                {
                    var __oldValue = _Land;
                    var __newValue = value;
                    if(OnLand_PreSetter != null)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnLand_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Land", __oldValue, __newValue);
                    _Land = __newValue;
                    NotifyPropertyChanged("Land", __oldValue, __newValue);
                    if(OnLand_PostSetter != null)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnLand_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Land;
		public static event PropertyGetterHandler<Kistl.App.Projekte.Kunde, string> OnLand_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Projekte.Kunde, string> OnLand_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Projekte.Kunde, string> OnLand_PostSetter;

        /// <summary>
        /// Ort
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Ort
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Ort;
                if (OnOrt_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnOrt_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Ort != value)
                {
                    var __oldValue = _Ort;
                    var __newValue = value;
                    if(OnOrt_PreSetter != null)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnOrt_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Ort", __oldValue, __newValue);
                    _Ort = __newValue;
                    NotifyPropertyChanged("Ort", __oldValue, __newValue);
                    if(OnOrt_PostSetter != null)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnOrt_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Ort;
		public static event PropertyGetterHandler<Kistl.App.Projekte.Kunde, string> OnOrt_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Projekte.Kunde, string> OnOrt_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Projekte.Kunde, string> OnOrt_PostSetter;

        /// <summary>
        /// Postleitzahl
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string PLZ
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _PLZ;
                if (OnPLZ_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnPLZ_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_PLZ != value)
                {
                    var __oldValue = _PLZ;
                    var __newValue = value;
                    if(OnPLZ_PreSetter != null)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnPLZ_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("PLZ", __oldValue, __newValue);
                    _PLZ = __newValue;
                    NotifyPropertyChanged("PLZ", __oldValue, __newValue);
                    if(OnPLZ_PostSetter != null)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnPLZ_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _PLZ;
		public static event PropertyGetterHandler<Kistl.App.Projekte.Kunde, string> OnPLZ_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Projekte.Kunde, string> OnPLZ_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Projekte.Kunde, string> OnPLZ_PostSetter;

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Kunde));
		}

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Kunde)obj;
			var otherImpl = (Kunde__Implementation__)obj;
			var me = (Kunde)this;

			me.Adresse = other.Adresse;
			me.ChangedOn = other.ChangedOn;
			me.CreatedOn = other.CreatedOn;
			me.Kundenname = other.Kundenname;
			me.Land = other.Land;
			me.Ort = other.Ort;
			me.PLZ = other.PLZ;
			this._fk_ChangedBy = otherImpl._fk_ChangedBy;
			this._fk_CreatedBy = otherImpl._fk_CreatedBy;
		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Kunde")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Kunde != null)
            {
                OnToString_Kunde(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Kunde> OnToString_Kunde;

        [EventBasedMethod("OnPreSave_Kunde")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_Kunde != null) OnPreSave_Kunde(this);
        }
        public static event ObjectEventHandler<Kunde> OnPreSave_Kunde;

        [EventBasedMethod("OnPostSave_Kunde")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_Kunde != null) OnPostSave_Kunde(this);
        }
        public static event ObjectEventHandler<Kunde> OnPostSave_Kunde;

        [EventBasedMethod("OnCreated_Kunde")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_Kunde != null) OnCreated_Kunde(this);
        }
        public static event ObjectEventHandler<Kunde> OnCreated_Kunde;

        [EventBasedMethod("OnDeleting_Kunde")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_Kunde != null) OnDeleting_Kunde(this);
        }
        public static event ObjectEventHandler<Kunde> OnDeleting_Kunde;


		private static readonly System.ComponentModel.PropertyDescriptor[] _properties = new System.ComponentModel.PropertyDescriptor[] {
			// else
			new CustomPropertyDescriptor<Kunde__Implementation__, string>(
				new Guid("7ba07561-15f4-495a-b2eb-59006e4210e5"),
				"Adresse",
				null,
				obj => obj.Adresse,
				(obj, val) => obj.Adresse = val),
			// else
			new CustomPropertyDescriptor<Kunde__Implementation__, Kistl.App.Base.Identity>(
				new Guid("d2148600-ebba-4782-8379-a8b03a31362b"),
				"ChangedBy",
				null,
				obj => obj.ChangedBy,
				(obj, val) => obj.ChangedBy = val),
			// else
			new CustomPropertyDescriptor<Kunde__Implementation__, DateTime?>(
				new Guid("028ff0b0-1beb-486d-b400-bfe3cdf73c5f"),
				"ChangedOn",
				null,
				obj => obj.ChangedOn,
				(obj, val) => obj.ChangedOn = val),
			// else
			new CustomPropertyDescriptor<Kunde__Implementation__, Kistl.App.Base.Identity>(
				new Guid("acc46d95-0f07-40cd-b2b1-79d093d6e7b4"),
				"CreatedBy",
				null,
				obj => obj.CreatedBy,
				(obj, val) => obj.CreatedBy = val),
			// else
			new CustomPropertyDescriptor<Kunde__Implementation__, DateTime?>(
				new Guid("1c23561e-07d4-4363-8ceb-3b13f3125634"),
				"CreatedOn",
				null,
				obj => obj.CreatedOn,
				(obj, val) => obj.CreatedOn = val),
			// property.IsAssociation() && !property.IsObjectReferencePropertySingle()
			new CustomPropertyDescriptor<Kunde__Implementation__, ICollection<string>>(
				new Guid("1d0f6da6-4b69-48d7-9e94-bfb5466654b9"),
				"EMails",
				null,
				obj => obj.EMails,
				null), // lists are read-only properties
			// else
			new CustomPropertyDescriptor<Kunde__Implementation__, string>(
				new Guid("2817a845-b2d5-43ed-b0f1-5a6692a62183"),
				"Kundenname",
				null,
				obj => obj.Kundenname,
				(obj, val) => obj.Kundenname = val),
			// else
			new CustomPropertyDescriptor<Kunde__Implementation__, string>(
				new Guid("c01afb40-9f28-494f-9058-9d0eca79a125"),
				"Land",
				null,
				obj => obj.Land,
				(obj, val) => obj.Land = val),
			// else
			new CustomPropertyDescriptor<Kunde__Implementation__, string>(
				new Guid("5281cbe0-8f63-4a2d-bb9e-2ee04588202d"),
				"Ort",
				null,
				obj => obj.Ort,
				(obj, val) => obj.Ort = val),
			// else
			new CustomPropertyDescriptor<Kunde__Implementation__, string>(
				new Guid("cafb4b93-4a1a-4753-8ec0-c65936a0d129"),
				"PLZ",
				null,
				obj => obj.PLZ,
				(obj, val) => obj.PLZ = val),
			// rel: Auftrag has Kunde (c0c472d1-95b3-4588-812b-0d41c6e692b5)
			// rel: Kunde was CreatedBy (5daf8db8-be8b-4ac7-a887-9217442fa7f4)
			// rel: Kunde was ChangedBy (2a33407e-beeb-4919-b4c1-9aa264286151)
			// rel: TestObjClass has ObjectProp (9d44eac8-2470-4373-a2bf-df3bc16d3454)
		};
		
		protected override void CollectProperties(List<System.ComponentModel.PropertyDescriptor> props)
		{
			base.CollectProperties(props);
			props.AddRange(_properties);
		}
	

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			// fix direct object references

			if (_fk_guid_ChangedBy.HasValue)
				ChangedBy__Implementation__ = (Kistl.App.Base.Identity__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.Identity>(_fk_guid_ChangedBy.Value);
			else if (_fk_ChangedBy.HasValue)
				ChangedBy__Implementation__ = (Kistl.App.Base.Identity__Implementation__)Context.Find<Kistl.App.Base.Identity>(_fk_ChangedBy.Value);
			else
				ChangedBy__Implementation__ = null;

			if (_fk_guid_CreatedBy.HasValue)
				CreatedBy__Implementation__ = (Kistl.App.Base.Identity__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.Identity>(_fk_guid_CreatedBy.Value);
			else if (_fk_CreatedBy.HasValue)
				CreatedBy__Implementation__ = (Kistl.App.Base.Identity__Implementation__)Context.Find<Kistl.App.Base.Identity>(_fk_CreatedBy.Value);
			else
				CreatedBy__Implementation__ = null;
		}
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._Adresse, binStream);
            BinarySerializer.ToStream(ChangedBy != null ? ChangedBy.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._ChangedOn, binStream);
            BinarySerializer.ToStream(CreatedBy != null ? CreatedBy.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._CreatedOn, binStream);
            BinarySerializer.ToStreamCollectionEntries(this.EMails__Implementation__, binStream);
            BinarySerializer.ToStream(this._Kundenname, binStream);
            BinarySerializer.ToStream(this._Land, binStream);
            BinarySerializer.ToStream(this._Ort, binStream);
            BinarySerializer.ToStream(this._PLZ, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._Adresse, binStream);
            BinarySerializer.FromStream(out this._fk_ChangedBy, binStream);
            BinarySerializer.FromStream(out this._ChangedOn, binStream);
            BinarySerializer.FromStream(out this._fk_CreatedBy, binStream);
            BinarySerializer.FromStream(out this._CreatedOn, binStream);
            BinarySerializer.FromStream(out this._Kundenname, binStream);
            BinarySerializer.FromStream(out this._Land, binStream);
            BinarySerializer.FromStream(out this._Ort, binStream);
            BinarySerializer.FromStream(out this._PLZ, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._Adresse, xml, "Adresse", "Kistl.App.Projekte");
            XmlStreamer.ToStream(ChangedBy != null ? ChangedBy.ID : (int?)null, xml, "ChangedBy", "Kistl.App.Projekte");
            XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Kistl.App.Projekte");
            XmlStreamer.ToStream(CreatedBy != null ? CreatedBy.ID : (int?)null, xml, "CreatedBy", "Kistl.App.Projekte");
            XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Kistl.App.Projekte");
            XmlStreamer.ToStreamCollectionEntries(this.EMails__Implementation__, xml, "EMails", "Kistl.App.Projekte");
            XmlStreamer.ToStream(this._Kundenname, xml, "Kundenname", "Kistl.App.Projekte");
            XmlStreamer.ToStream(this._Land, xml, "Land", "Kistl.App.Projekte");
            XmlStreamer.ToStream(this._Ort, xml, "Ort", "Kistl.App.Projekte");
            XmlStreamer.ToStream(this._PLZ, xml, "PLZ", "Kistl.App.Projekte");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._Adresse, xml, "Adresse", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._fk_ChangedBy, xml, "ChangedBy", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._fk_CreatedBy, xml, "CreatedBy", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "Kistl.App.Projekte");
            XmlStreamer.FromStreamCollectionEntries(this.EMails__Implementation__, xml, "EMails", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._Kundenname, xml, "Kundenname", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._Land, xml, "Land", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._Ort, xml, "Ort", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._PLZ, xml, "PLZ", "Kistl.App.Projekte");
        }

#endregion

    }


}