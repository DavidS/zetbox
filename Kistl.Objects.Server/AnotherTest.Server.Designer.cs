//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Objects.DataClasses.EdmRelationshipAttribute("Model", "FK_AnotherTest_ListPropertyCollectionEntry_Muhblah_ListProperty", "A_Muhblah", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Kistl.App.Test.Muhblah__Implementation__), "B_AnotherTest_ListPropertyCollectionEntry", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kistl.App.Test.AnotherTest_ListPropertyCollectionEntry__Implementation__))]
[assembly: System.Data.Objects.DataClasses.EdmRelationshipAttribute("Model", "FK_AnotherTest_ListPropertyCollectionEntry_AnotherTest_fk_Parent", "A_AnotherTest", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Kistl.App.Test.AnotherTest__Implementation__), "B_AnotherTest_ListPropertyCollectionEntry", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kistl.App.Test.AnotherTest_ListPropertyCollectionEntry__Implementation__))]
[assembly: System.Data.Objects.DataClasses.EdmRelationshipAttribute("Model", "FK_AnotherTest_StringPropertyCollectionEntry_AnotherTest_fk_Parent", "A_AnotherTest", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Kistl.App.Test.AnotherTest__Implementation__), "B_AnotherTest_StringPropertyCollectionEntry", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kistl.App.Test.AnotherTest_StringPropertyCollectionEntry__Implementation__))]

namespace Kistl.App.Test
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Collections;
    using System.Xml;
    using System.Xml.Serialization;
    using Kistl.API;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Kistl.DALProvider.EF;
    using Kistl.API.Server;
    
    
    [System.Diagnostics.DebuggerDisplay("Kistl.App.Test.AnotherTest")]
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="AnotherTest")]
    public class AnotherTest__Implementation__ : BaseServerDataObject_EntityFramework, AnotherTest
    {
        
        private int _ID;
        
        private EntityCollectionEntryValueWrapperSorted<Kistl.App.Test.AnotherTest, Kistl.App.Test.Muhblah, Kistl.App.Test.AnotherTest_ListPropertyCollectionEntry__Implementation__> ListPropertyWrapper;
        
        private EntityCollectionEntryValueWrapperSorted<Kistl.App.Test.AnotherTest, string, Kistl.App.Test.AnotherTest_StringPropertyCollectionEntry__Implementation__> StringPropertyWrapper;
        
        public AnotherTest__Implementation__()
        {
        }
        
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                return _ID;
            }
            set
            {
                _ID = value;
            }
        }
        
        public IList<Kistl.App.Test.Muhblah> ListProperty
        {
            get
            {
                if (ListPropertyWrapper == null) ListPropertyWrapper = new EntityCollectionEntryValueWrapperSorted<Kistl.App.Test.AnotherTest, Kistl.App.Test.Muhblah, Kistl.App.Test.AnotherTest_ListPropertyCollectionEntry__Implementation__>(this, ListProperty__Implementation__);
                return ListPropertyWrapper;
            }
        }
        
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_AnotherTest_ListPropertyCollectionEntry_AnotherTest_fk_Parent", "B_AnotherTest_ListPropertyCollectionEntry")]
        public EntityCollection<Kistl.App.Test.AnotherTest_ListPropertyCollectionEntry__Implementation__> ListProperty__Implementation__
        {
            get
            {
                EntityCollection<AnotherTest_ListPropertyCollectionEntry__Implementation__> c = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<AnotherTest_ListPropertyCollectionEntry__Implementation__>("Model.FK_AnotherTest_ListPropertyCollectionEntry_AnotherTest_fk_Parent", "B_AnotherTest_ListPropertyCollectionEntry");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && !c.IsLoaded) c.Load(); 
                return c;
            }
        }
        
        public IList<System.String> StringProperty
        {
            get
            {
                if (StringPropertyWrapper == null) StringPropertyWrapper = new EntityCollectionEntryValueWrapperSorted<Kistl.App.Test.AnotherTest, System.String, Kistl.App.Test.AnotherTest_StringPropertyCollectionEntry__Implementation__>(this, StringProperty__Implementation__);
                return StringPropertyWrapper;
            }
        }
        
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_AnotherTest_StringPropertyCollectionEntry_AnotherTest_fk_Parent", "B_AnotherTest_StringPropertyCollectionEntry")]
        public EntityCollection<Kistl.App.Test.AnotherTest_StringPropertyCollectionEntry__Implementation__> StringProperty__Implementation__
        {
            get
            {
                EntityCollection<AnotherTest_StringPropertyCollectionEntry__Implementation__> c = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<AnotherTest_StringPropertyCollectionEntry__Implementation__>("Model.FK_AnotherTest_StringPropertyCollectionEntry_AnotherTest_fk_Parent", "B_AnotherTest_StringPropertyCollectionEntry");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && !c.IsLoaded) c.Load(); 
                return c;
            }
        }
        
        public event ToStringHandler<AnotherTest> OnToString_AnotherTest;
        
        public event ObjectEventHandler<AnotherTest> OnPreSave_AnotherTest;
        
        public event ObjectEventHandler<AnotherTest> OnPostSave_AnotherTest;
        
        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_AnotherTest != null)
            {
                OnToString_AnotherTest(this, e);
            }
            return e.Result;
        }
        
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_AnotherTest != null) OnPreSave_AnotherTest(this);
        }
        
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_AnotherTest != null) OnPostSave_AnotherTest(this);
        }
        
        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
            /// Use ToList before using foreach - the collection will change in the KistContext.Attach() Method because EntityFramework will need a Trick to attach CollectionEntries correctly
            ListProperty__Implementation__.ToList().ForEach<ICollectionEntry>(i => ctx.Attach(i));
            /// Use ToList before using foreach - the collection will change in the KistContext.Attach() Method because EntityFramework will need a Trick to attach CollectionEntries correctly
            StringProperty__Implementation__.ToList().ForEach<ICollectionEntry>(i => ctx.Attach(i));
        }
        
        protected override string GetPropertyError(string prop)
        {
            switch(prop)
            {
                case "ListProperty":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(205).Constraints
                            .Where(c => !c.IsValid(this, this.ListProperty))
                            .Select(c => c.GetErrorText(this, this.ListProperty))
                            .ToArray());
                case "StringProperty":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(206).Constraints
                            .Where(c => !c.IsValid(this, this.StringProperty))
                            .Select(c => c.GetErrorText(this, this.StringProperty))
                            .ToArray());
            }
            return base.GetPropertyError(prop);
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this.ListProperty__Implementation__, sw);
            BinarySerializer.ToBinary(this.StringProperty__Implementation__, sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinaryCollectionEntries(this.ListProperty__Implementation__, sr);
            BinarySerializer.FromBinaryCollectionEntries(this.StringProperty__Implementation__, sr);
        }
    }
    
    [System.Diagnostics.DebuggerDisplay("Kistl.App.Test.AnotherTest_ListPropertyCollectionEntry")]
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="AnotherTest_ListPropertyCollectionEntry")]
    public class AnotherTest_ListPropertyCollectionEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, ICollectionEntrySorted<Kistl.App.Test.Muhblah, Kistl.App.Test.AnotherTest>
    {
        
        private int _ID;
        
        private int _fk_Value;
        
        private int _fk_Parent;
        
        private System.Nullable<int> _ValueIndex;
        
        private System.Nullable<int> _ParentIndex;
        
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                return _ID;
            }
            set
            {
                _ID = value;
            }
        }
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.Muhblah Value
        {
            get
            {
                return ValueImpl;
            }
            set
            {
                ValueImpl = (Kistl.App.Test.Muhblah__Implementation__)value;
            }
        }
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.AnotherTest Parent
        {
            get
            {
                return ParentImpl;
            }
            set
            {
                ParentImpl = (Kistl.App.Test.AnotherTest__Implementation__)value;
            }
        }
        
        public int fk_Value
        {
            get
            {
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && Value != null)
                {
                    _fk_Value = Value.ID;
                }
                return _fk_Value;
            }
            set
            {
                _fk_Value = value;
            }
        }
        
        public int fk_Parent
        {
            get
            {
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && Parent != null)
                {
                    _fk_Parent = Parent.ID;
                }
                return _fk_Parent;
            }
            set
            {
                _fk_Parent = value;
            }
        }
        
        public System.Nullable<int> ValueIndex
        {
            get
            {
                return _ValueIndex;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (ValueIndex != value)
                {
                    NotifyPropertyChanging("ValueIndex"); 
                    _ValueIndex = value;
                    NotifyPropertyChanged("ValueIndex");;
                }
            }
        }
        
        public System.Nullable<int> ParentIndex
        {
            get
            {
                return _ParentIndex;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (ParentIndex != value)
                {
                    NotifyPropertyChanging("ParentIndex"); 
                    _ParentIndex = value;
                    NotifyPropertyChanged("ParentIndex");;
                }
            }
        }
        
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_AnotherTest_ListPropertyCollectionEntry_Muhblah_ListProperty", "A_Muhblah")]
        public Kistl.App.Test.Muhblah__Implementation__ ValueImpl
        {
            get
            {
                EntityReference<Kistl.App.Test.Muhblah__Implementation__> r = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.Muhblah__Implementation__>("Model.FK_AnotherTest_ListPropertyCollectionEntry_Muhblah_ListProperty", "A_Muhblah");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && !r.IsLoaded) r.Load(); 
                return r.Value;
            }
            set
            {
                EntityReference<Kistl.App.Test.Muhblah__Implementation__> r = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.Muhblah__Implementation__>("Model.FK_AnotherTest_ListPropertyCollectionEntry_Muhblah_ListProperty", "A_Muhblah");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && !r.IsLoaded) r.Load(); 
                r.Value = (Kistl.App.Test.Muhblah__Implementation__)value;
            }
        }
        
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_AnotherTest_ListPropertyCollectionEntry_AnotherTest_fk_Parent", "A_AnotherTest")]
        public Kistl.App.Test.AnotherTest__Implementation__ ParentImpl
        {
            get
            {
                EntityReference<AnotherTest__Implementation__> r = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<AnotherTest__Implementation__>("Model.FK_AnotherTest_ListPropertyCollectionEntry_AnotherTest_fk_Parent", "A_AnotherTest");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && !r.IsLoaded) r.Load(); 
                return r.Value;
            }
            set
            {
                EntityReference<AnotherTest__Implementation__> r = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<AnotherTest__Implementation__>("Model.FK_AnotherTest_ListPropertyCollectionEntry_AnotherTest_fk_Parent", "A_AnotherTest");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && !r.IsLoaded) r.Load(); 
                r.Value = (AnotherTest__Implementation__)value;
            }
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this.fk_Value, sw);
            BinarySerializer.ToBinary(this.fk_Parent, sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._fk_Value, sr);
            BinarySerializer.FromBinary(out this._fk_Parent, sr);
        }
    }
    
    [System.Diagnostics.DebuggerDisplay("Kistl.App.Test.AnotherTest_StringPropertyCollectionEntry")]
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="AnotherTest_StringPropertyCollectionEntry")]
    public class AnotherTest_StringPropertyCollectionEntry__Implementation__ : BaseServerCollectionEntry_EntityFramework, ICollectionEntrySorted<System.String, Kistl.App.Test.AnotherTest>
    {
        
        private int _ID;
        
        private string _Value;
        
        private int _fk_Parent;
        
        private System.Nullable<int> _ValueIndex;
        
        private System.Nullable<int> _ParentIndex;
        
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                return _ID;
            }
            set
            {
                _ID = value;
            }
        }
        
        [EdmScalarPropertyAttribute()]
        public string Value
        {
            get
            {
                return _Value;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (Value != value)
                {
                    NotifyPropertyChanging("Value"); 
                    _Value = value;
                    NotifyPropertyChanged("Value");;
                }
            }
        }
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.AnotherTest Parent
        {
            get
            {
                return ParentImpl;
            }
            set
            {
                ParentImpl = (Kistl.App.Test.AnotherTest__Implementation__)value;
            }
        }
        
        public int fk_Parent
        {
            get
            {
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && Parent != null)
                {
                    _fk_Parent = Parent.ID;
                }
                return _fk_Parent;
            }
            set
            {
                _fk_Parent = value;
            }
        }
        
        public System.Nullable<int> ValueIndex
        {
            get
            {
                return _ValueIndex;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (ValueIndex != value)
                {
                    NotifyPropertyChanging("ValueIndex"); 
                    _ValueIndex = value;
                    NotifyPropertyChanged("ValueIndex");;
                }
            }
        }
        
        public System.Nullable<int> ParentIndex
        {
            get
            {
                return _ParentIndex;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (ParentIndex != value)
                {
                    NotifyPropertyChanging("ParentIndex"); 
                    _ParentIndex = value;
                    NotifyPropertyChanged("ParentIndex");;
                }
            }
        }
        
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_AnotherTest_StringPropertyCollectionEntry_AnotherTest_fk_Parent", "A_AnotherTest")]
        public Kistl.App.Test.AnotherTest__Implementation__ ParentImpl
        {
            get
            {
                EntityReference<AnotherTest__Implementation__> r = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<AnotherTest__Implementation__>("Model.FK_AnotherTest_StringPropertyCollectionEntry_AnotherTest_fk_Parent", "A_AnotherTest");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && !r.IsLoaded) r.Load(); 
                return r.Value;
            }
            set
            {
                EntityReference<AnotherTest__Implementation__> r = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<AnotherTest__Implementation__>("Model.FK_AnotherTest_StringPropertyCollectionEntry_AnotherTest_fk_Parent", "A_AnotherTest");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && !r.IsLoaded) r.Load(); 
                r.Value = (AnotherTest__Implementation__)value;
            }
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this.Value, sw);
            BinarySerializer.ToBinary(this.fk_Parent, sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._Value, sr);
            BinarySerializer.FromBinary(out this._fk_Parent, sr);
        }
    }
}
