//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kistl.App.Base
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Collections;
    using System.Xml;
    using System.Xml.Serialization;
    using Kistl.API;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Kistl.DALProvider.EF;
    using Kistl.API.Server;
    
    
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="StringRangeConstraint")]
    public class StringRangeConstraint__Implementation__ : Kistl.App.Base.Constraint__Implementation__, StringRangeConstraint
    {
        
        private int _MaxLength;
        
        private int _MinLength;
        
        public StringRangeConstraint__Implementation__()
        {
        }
        
        [EdmScalarPropertyAttribute()]
        public int MaxLength
        {
            get
            {
                return _MaxLength;
            }
            set
            {
                if (MaxLength != value)
                {
                    NotifyPropertyChanging("MaxLength"); 
                    _MaxLength = value;
                    NotifyPropertyChanged("MaxLength");;
                }
            }
        }
        
        [EdmScalarPropertyAttribute()]
        public int MinLength
        {
            get
            {
                return _MinLength;
            }
            set
            {
                if (MinLength != value)
                {
                    NotifyPropertyChanging("MinLength"); 
                    _MinLength = value;
                    NotifyPropertyChanged("MinLength");;
                }
            }
        }
        
        public event ToStringHandler<StringRangeConstraint> OnToString_StringRangeConstraint;
        
        public event ObjectEventHandler<StringRangeConstraint> OnPreSave_StringRangeConstraint;
        
        public event ObjectEventHandler<StringRangeConstraint> OnPostSave_StringRangeConstraint;
        
        public event IsValid_Handler<StringRangeConstraint> OnIsValid_StringRangeConstraint;
        
        public event GetErrorText_Handler<StringRangeConstraint> OnGetErrorText_StringRangeConstraint;
        
        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_StringRangeConstraint != null)
            {
                OnToString_StringRangeConstraint(this, e);
            }
            return e.Result;
        }
        
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_StringRangeConstraint != null) OnPreSave_StringRangeConstraint(this);
        }
        
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_StringRangeConstraint != null) OnPostSave_StringRangeConstraint(this);
        }
        
        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }
        
        protected override string GetPropertyError(string prop)
        {
            switch(prop)
            {
                case "MaxLength":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(172).Constraints
                            .Where(c => !c.IsValid(this, this.MaxLength))
                            .Select(c => c.GetErrorText(this, this.MaxLength))
                            .ToArray());
                case "MinLength":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(173).Constraints
                            .Where(c => !c.IsValid(this, this.MinLength))
                            .Select(c => c.GetErrorText(this, this.MinLength))
                            .ToArray());
            }
            return base.GetPropertyError(prop);
        }
        
        public override bool IsValid(object constrainedObj, object constrainedValue)
        {
            MethodReturnEventArgs<System.Boolean> e = new MethodReturnEventArgs<System.Boolean>();
            e.Result = base.IsValid(constrainedObj, constrainedValue);
            if (OnIsValid_StringRangeConstraint != null)
            {
                OnIsValid_StringRangeConstraint(this, e, constrainedObj, constrainedValue);
            };
            return e.Result;
        }
        
        public override string GetErrorText(object constrainedObject, object constrainedValue)
        {
            MethodReturnEventArgs<System.String> e = new MethodReturnEventArgs<System.String>();
            e.Result = base.GetErrorText(constrainedObject, constrainedValue);
            if (OnGetErrorText_StringRangeConstraint != null)
            {
                OnGetErrorText_StringRangeConstraint(this, e, constrainedObject, constrainedValue);
            };
            return e.Result;
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this._MaxLength, sw);
            BinarySerializer.ToBinary(this._MinLength, sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._MaxLength, sr);
            BinarySerializer.FromBinary(out this._MinLength, sr);
        }
    }
}
