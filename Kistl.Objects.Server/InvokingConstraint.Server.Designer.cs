// <autogenerated/>


namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.API.Server;
    using Kistl.DalProvider.EF;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="InvokingConstraint")]
    [System.Diagnostics.DebuggerDisplay("InvokingConstraint")]
    public class InvokingConstraint__Implementation__ : Kistl.App.Base.Constraint__Implementation__, InvokingConstraint
    {
        [Obsolete]
        public InvokingConstraint__Implementation__()
            : base(null)
        {
        }

        public InvokingConstraint__Implementation__(Func<IReadOnlyKistlContext> lazyCtx)
            : base(lazyCtx)
        {
        }


        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_Constraint_invokes_GetErrorTextInvocation
    A: One InvokingConstraint as Constraint
    B: One ConstraintInvocation as GetErrorTextInvocation
    Preferred Storage: MergeIntoA
    */
        // object reference property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.ConstraintInvocation GetErrorTextInvocation
        {
            get
            {
                return GetErrorTextInvocation__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                GetErrorTextInvocation__Implementation__ = (Kistl.App.Base.ConstraintInvocation__Implementation__)value;
            }
        }
        
        private int? _fk_GetErrorTextInvocation;
        private Guid? _fk_guid_GetErrorTextInvocation = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Constraint_invokes_GetErrorTextInvocation", "GetErrorTextInvocation")]
        public Kistl.App.Base.ConstraintInvocation__Implementation__ GetErrorTextInvocation__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.ConstraintInvocation__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.ConstraintInvocation__Implementation__>(
                        "Model.FK_Constraint_invokes_GetErrorTextInvocation",
                        "GetErrorTextInvocation");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
				if(OnGetErrorTextInvocation_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Base.ConstraintInvocation>(__value);
					OnGetErrorTextInvocation_Getter(this, e);
					__value = (Kistl.App.Base.ConstraintInvocation__Implementation__)e.Result;
				}
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.ConstraintInvocation__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.ConstraintInvocation__Implementation__>(
                        "Model.FK_Constraint_invokes_GetErrorTextInvocation",
                        "GetErrorTextInvocation");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.ConstraintInvocation __oldValue = (Kistl.App.Base.ConstraintInvocation)r.Value;
                Kistl.App.Base.ConstraintInvocation __newValue = (Kistl.App.Base.ConstraintInvocation)value;

                if(OnGetErrorTextInvocation_PreSetter != null)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Base.ConstraintInvocation>(__oldValue, __newValue);
					OnGetErrorTextInvocation_PreSetter(this, e);
					__newValue = e.Result;
                }
                r.Value = (Kistl.App.Base.ConstraintInvocation__Implementation__)__newValue;
                if(OnGetErrorTextInvocation_PostSetter != null)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Base.ConstraintInvocation>(__oldValue, __newValue);
					OnGetErrorTextInvocation_PostSetter(this, e);
                }
                                
            }
        }
        
        
		public static event PropertyGetterHandler<Kistl.App.Base.InvokingConstraint, Kistl.App.Base.ConstraintInvocation> OnGetErrorTextInvocation_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.InvokingConstraint, Kistl.App.Base.ConstraintInvocation> OnGetErrorTextInvocation_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.InvokingConstraint, Kistl.App.Base.ConstraintInvocation> OnGetErrorTextInvocation_PostSetter;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_Constraint_invokes_IsValidInvocation
    A: One InvokingConstraint as Constraint
    B: One ConstraintInvocation as IsValidInvocation
    Preferred Storage: MergeIntoA
    */
        // object reference property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.ConstraintInvocation IsValidInvocation
        {
            get
            {
                return IsValidInvocation__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                IsValidInvocation__Implementation__ = (Kistl.App.Base.ConstraintInvocation__Implementation__)value;
            }
        }
        
        private int? _fk_IsValidInvocation;
        private Guid? _fk_guid_IsValidInvocation = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Constraint_invokes_IsValidInvocation", "IsValidInvocation")]
        public Kistl.App.Base.ConstraintInvocation__Implementation__ IsValidInvocation__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.ConstraintInvocation__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.ConstraintInvocation__Implementation__>(
                        "Model.FK_Constraint_invokes_IsValidInvocation",
                        "IsValidInvocation");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
				if(OnIsValidInvocation_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Base.ConstraintInvocation>(__value);
					OnIsValidInvocation_Getter(this, e);
					__value = (Kistl.App.Base.ConstraintInvocation__Implementation__)e.Result;
				}
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.ConstraintInvocation__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.ConstraintInvocation__Implementation__>(
                        "Model.FK_Constraint_invokes_IsValidInvocation",
                        "IsValidInvocation");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.ConstraintInvocation __oldValue = (Kistl.App.Base.ConstraintInvocation)r.Value;
                Kistl.App.Base.ConstraintInvocation __newValue = (Kistl.App.Base.ConstraintInvocation)value;

                if(OnIsValidInvocation_PreSetter != null)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Base.ConstraintInvocation>(__oldValue, __newValue);
					OnIsValidInvocation_PreSetter(this, e);
					__newValue = e.Result;
                }
                r.Value = (Kistl.App.Base.ConstraintInvocation__Implementation__)__newValue;
                if(OnIsValidInvocation_PostSetter != null)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Base.ConstraintInvocation>(__oldValue, __newValue);
					OnIsValidInvocation_PostSetter(this, e);
                }
                                
            }
        }
        
        
		public static event PropertyGetterHandler<Kistl.App.Base.InvokingConstraint, Kistl.App.Base.ConstraintInvocation> OnIsValidInvocation_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.InvokingConstraint, Kistl.App.Base.ConstraintInvocation> OnIsValidInvocation_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.InvokingConstraint, Kistl.App.Base.ConstraintInvocation> OnIsValidInvocation_PostSetter;

        /// <summary>
        /// 
        /// </summary>
		[EventBasedMethod("OnGetErrorText_InvokingConstraint")]
		public override string GetErrorText(System.Object constrainedObject, System.Object constrainedValue) 
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetErrorText_InvokingConstraint != null)
            {
                OnGetErrorText_InvokingConstraint(this, e, constrainedObject, constrainedValue);
            }
            else
            {
                e.Result = base.GetErrorText(constrainedObject, constrainedValue);
            }
            return e.Result;
        }
		public static event GetErrorText_Handler<InvokingConstraint> OnGetErrorText_InvokingConstraint;



        /// <summary>
        /// 
        /// </summary>
		[EventBasedMethod("OnIsValid_InvokingConstraint")]
		public override bool IsValid(System.Object constrainedObject, System.Object constrainedValue) 
        {
            var e = new MethodReturnEventArgs<bool>();
            if (OnIsValid_InvokingConstraint != null)
            {
                OnIsValid_InvokingConstraint(this, e, constrainedObject, constrainedValue);
            }
            else
            {
                e.Result = base.IsValid(constrainedObject, constrainedValue);
            }
            return e.Result;
        }
		public static event IsValid_Handler<InvokingConstraint> OnIsValid_InvokingConstraint;



        public override Type GetImplementedInterface()
        {
            return typeof(InvokingConstraint);
        }

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (InvokingConstraint)obj;
			var otherImpl = (InvokingConstraint__Implementation__)obj;
			var me = (InvokingConstraint)this;

			this._fk_GetErrorTextInvocation = otherImpl._fk_GetErrorTextInvocation;
			this._fk_IsValidInvocation = otherImpl._fk_IsValidInvocation;
		}

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			base.ReloadReferences();
			
			// fix direct object references

			if (_fk_guid_GetErrorTextInvocation.HasValue)
				GetErrorTextInvocation__Implementation__ = (Kistl.App.Base.ConstraintInvocation__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.ConstraintInvocation>(_fk_guid_GetErrorTextInvocation.Value);
			else if (_fk_GetErrorTextInvocation.HasValue)
				GetErrorTextInvocation__Implementation__ = (Kistl.App.Base.ConstraintInvocation__Implementation__)Context.Find<Kistl.App.Base.ConstraintInvocation>(_fk_GetErrorTextInvocation.Value);
			else
				GetErrorTextInvocation__Implementation__ = null;

			if (_fk_guid_IsValidInvocation.HasValue)
				IsValidInvocation__Implementation__ = (Kistl.App.Base.ConstraintInvocation__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.ConstraintInvocation>(_fk_guid_IsValidInvocation.Value);
			else if (_fk_IsValidInvocation.HasValue)
				IsValidInvocation__Implementation__ = (Kistl.App.Base.ConstraintInvocation__Implementation__)Context.Find<Kistl.App.Base.ConstraintInvocation>(_fk_IsValidInvocation.Value);
			else
				IsValidInvocation__Implementation__ = null;
		}
        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_InvokingConstraint")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_InvokingConstraint != null)
            {
                OnToString_InvokingConstraint(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<InvokingConstraint> OnToString_InvokingConstraint;

        [EventBasedMethod("OnPreSave_InvokingConstraint")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_InvokingConstraint != null) OnPreSave_InvokingConstraint(this);
        }
        public static event ObjectEventHandler<InvokingConstraint> OnPreSave_InvokingConstraint;

        [EventBasedMethod("OnPostSave_InvokingConstraint")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_InvokingConstraint != null) OnPostSave_InvokingConstraint(this);
        }
        public static event ObjectEventHandler<InvokingConstraint> OnPostSave_InvokingConstraint;

        [EventBasedMethod("OnCreated_InvokingConstraint")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_InvokingConstraint != null) OnCreated_InvokingConstraint(this);
        }
        public static event ObjectEventHandler<InvokingConstraint> OnCreated_InvokingConstraint;

        [EventBasedMethod("OnDeleting_InvokingConstraint")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_InvokingConstraint != null) OnDeleting_InvokingConstraint(this);
        }
        public static event ObjectEventHandler<InvokingConstraint> OnDeleting_InvokingConstraint;


		private static readonly object _propertiesLock = new object();
		private static System.ComponentModel.PropertyDescriptor[] _properties;
		
		private void _InitializePropertyDescriptors(Func<IReadOnlyKistlContext> lazyCtx)
		{
			if (_properties != null) return;
			lock (_propertiesLock)
			{
				// recheck for a lost race after aquiring the lock
				if (_properties != null) return;
				
				_properties = new System.ComponentModel.PropertyDescriptor[] {
					// else
					new CustomPropertyDescriptor<InvokingConstraint__Implementation__, Kistl.App.Base.ConstraintInvocation>(
						lazyCtx,
						new Guid("3b5d70f7-b6fd-4e39-b912-5a644a5de716"),
						"GetErrorTextInvocation",
						null,
						obj => obj.GetErrorTextInvocation,
						(obj, val) => obj.GetErrorTextInvocation = val),
					// else
					new CustomPropertyDescriptor<InvokingConstraint__Implementation__, Kistl.App.Base.ConstraintInvocation>(
						lazyCtx,
						new Guid("3c98da56-1c21-4849-87b1-81bf72d17e70"),
						"IsValidInvocation",
						null,
						obj => obj.IsValidInvocation,
						(obj, val) => obj.IsValidInvocation = val),
				};
			}
		}
		
		protected override void CollectProperties(Func<IReadOnlyKistlContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
		{
			base.CollectProperties(props);
			_InitializePropertyDescriptors(lazyCtx);
			props.AddRange(_properties);
		}
	

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(GetErrorTextInvocation != null ? GetErrorTextInvocation.ID : (int?)null, binStream);
			if (auxObjects != null) {
				auxObjects.Add(GetErrorTextInvocation);
			}
            BinarySerializer.ToStream(IsValidInvocation != null ? IsValidInvocation.ID : (int?)null, binStream);
			if (auxObjects != null) {
				auxObjects.Add(IsValidInvocation);
			}
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_GetErrorTextInvocation, binStream);
            BinarySerializer.FromStream(out this._fk_IsValidInvocation, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(GetErrorTextInvocation != null ? GetErrorTextInvocation.ID : (int?)null, xml, "GetErrorTextInvocation", "Kistl.App.Base");
            XmlStreamer.ToStream(IsValidInvocation != null ? IsValidInvocation.ID : (int?)null, xml, "IsValidInvocation", "Kistl.App.Base");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_GetErrorTextInvocation, xml, "GetErrorTextInvocation", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_IsValidInvocation, xml, "IsValidInvocation", "Kistl.App.Base");
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            base.Export(xml, modules);
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(GetErrorTextInvocation != null ? GetErrorTextInvocation.ExportGuid : (Guid?)null, xml, "GetErrorTextInvocation", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(IsValidInvocation != null ? IsValidInvocation.ExportGuid : (Guid?)null, xml, "IsValidInvocation", "Kistl.App.Base");
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            
            base.MergeImport(xml);
            XmlStreamer.FromStream(ref this._fk_guid_GetErrorTextInvocation, xml, "GetErrorTextInvocation", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_guid_IsValidInvocation, xml, "IsValidInvocation", "Kistl.App.Base");
        }

#endregion

    }


}