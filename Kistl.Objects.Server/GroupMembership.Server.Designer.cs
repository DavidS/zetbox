// <autogenerated/>


namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.API.Server;
    using Kistl.DalProvider.EF;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="GroupMembership")]
    [System.Diagnostics.DebuggerDisplay("GroupMembership")]
    public class GroupMembership__Implementation__ : Kistl.App.Base.AccessControl__Implementation__, GroupMembership
    {
    
		public GroupMembership__Implementation__()
		{
        }


        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_GroupMembership_has_Group
    A: ZeroOrMore GroupMembership as GroupMembership
    B: One Group as Group
    Preferred Storage: MergeIntoA
    */
        // object reference property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Group Group
        {
            get
            {
                return Group__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                Group__Implementation__ = (Kistl.App.Base.Group__Implementation__)value;
            }
        }
        
        private int? _fk_Group;
        private Guid? _fk_guid_Group = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_GroupMembership_has_Group", "Group")]
        public Kistl.App.Base.Group__Implementation__ Group__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.Group__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Group__Implementation__>(
                        "Model.FK_GroupMembership_has_Group",
                        "Group");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
				if(OnGroup_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Base.Group>(__value);
					OnGroup_Getter(this, e);
					__value = (Kistl.App.Base.Group__Implementation__)e.Result;
				}
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.Group__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.Group__Implementation__>(
                        "Model.FK_GroupMembership_has_Group",
                        "Group");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.Group __oldValue = (Kistl.App.Base.Group)r.Value;
                Kistl.App.Base.Group __newValue = (Kistl.App.Base.Group)value;

                if(OnGroup_PreSetter != null)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Group>(__oldValue, __newValue);
					OnGroup_PreSetter(this, e);
					__newValue = e.Result;
                }
                r.Value = (Kistl.App.Base.Group__Implementation__)__newValue;
                if(OnGroup_PostSetter != null)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Group>(__oldValue, __newValue);
					OnGroup_PostSetter(this, e);
                }
                                
            }
        }
        
        
		public static event PropertyGetterHandler<Kistl.App.Base.GroupMembership, Kistl.App.Base.Group> OnGroup_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.GroupMembership, Kistl.App.Base.Group> OnGroup_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.GroupMembership, Kistl.App.Base.Group> OnGroup_PostSetter;

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(GroupMembership));
		}

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (GroupMembership)obj;
			var otherImpl = (GroupMembership__Implementation__)obj;
			var me = (GroupMembership)this;

			this._fk_Group = otherImpl._fk_Group;
		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_GroupMembership")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_GroupMembership != null)
            {
                OnToString_GroupMembership(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<GroupMembership> OnToString_GroupMembership;

        [EventBasedMethod("OnPreSave_GroupMembership")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_GroupMembership != null) OnPreSave_GroupMembership(this);
        }
        public static event ObjectEventHandler<GroupMembership> OnPreSave_GroupMembership;

        [EventBasedMethod("OnPostSave_GroupMembership")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_GroupMembership != null) OnPostSave_GroupMembership(this);
        }
        public static event ObjectEventHandler<GroupMembership> OnPostSave_GroupMembership;

        [EventBasedMethod("OnCreated_GroupMembership")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_GroupMembership != null) OnCreated_GroupMembership(this);
        }
        public static event ObjectEventHandler<GroupMembership> OnCreated_GroupMembership;

        [EventBasedMethod("OnDeleting_GroupMembership")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_GroupMembership != null) OnDeleting_GroupMembership(this);
        }
        public static event ObjectEventHandler<GroupMembership> OnDeleting_GroupMembership;


		private static readonly System.ComponentModel.PropertyDescriptor[] _properties = new System.ComponentModel.PropertyDescriptor[] {
			new CustomPropertyDescriptor<GroupMembership, Kistl.App.Base.Group>(
				new Guid("da080b07-15d2-4cdf-bc1c-df776e094a75"),
				"Group",
				null,
				obj => obj.Group,
				(obj, val) => obj.Group = val),
		};
		
		protected override void CollectProperties(List<System.ComponentModel.PropertyDescriptor> props)
		{
			props.AddRange(_properties);
		}
	

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			base.ReloadReferences();
			
			// fix direct object references

			if (_fk_guid_Group.HasValue)
				Group__Implementation__ = (Kistl.App.Base.Group__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.Group>(_fk_guid_Group.Value);
			else if (_fk_Group.HasValue)
				Group__Implementation__ = (Kistl.App.Base.Group__Implementation__)Context.Find<Kistl.App.Base.Group>(_fk_Group.Value);
			else
				Group__Implementation__ = null;
		}
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(Group != null ? Group.ID : (int?)null, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_Group, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(Group != null ? Group.ID : (int?)null, xml, "Group", "Kistl.App.Base");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_Group, xml, "Group", "Kistl.App.Base");
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            base.Export(xml, modules);
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(Group != null ? Group.ExportGuid : (Guid?)null, xml, "Group", "Kistl.App.Base");
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            
            base.MergeImport(xml);
            XmlStreamer.FromStream(ref this._fk_guid_Group, xml, "Group", "Kistl.App.Base");
        }

#endregion

    }


}