// <autogenerated/>


namespace Kistl.App.Test
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.API.Server;
    using Kistl.DalProvider.EF;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="Fragebogen")]
    [System.Diagnostics.DebuggerDisplay("Fragebogen")]
    public class Fragebogen__Implementation__ : BaseServerDataObject_EntityFramework, Fragebogen
    {
    
		public Fragebogen__Implementation__()
		{
        }

        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_Fragebogen_enthält_Antworten
    A: One Fragebogen as Fragebogen
    B: ZeroOrMore Antwort as Antworten
    Preferred Storage: MergeIntoB
    */
        // object list property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectListProperty
	    // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public IList<Kistl.App.Test.Antwort> Antworten
        {
            get
            {
                if (_AntwortenWrapper == null)
                {
                    _AntwortenWrapper = new EntityListWrapper<Kistl.App.Test.Antwort, Kistl.App.Test.Antwort__Implementation__>(
                            this.Context, Antworten__Implementation__, "Fragebogen");
                }
                return _AntwortenWrapper;
            }
        }
        
        [EdmRelationshipNavigationProperty("Model", "FK_Fragebogen_enthält_Antworten", "Antworten")]
        public EntityCollection<Kistl.App.Test.Antwort__Implementation__> Antworten__Implementation__
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Kistl.App.Test.Antwort__Implementation__>(
                        "Model.FK_Fragebogen_enthält_Antworten",
                        "Antworten");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                return c;
            }
        }
        private EntityListWrapper<Kistl.App.Test.Antwort, Kistl.App.Test.Antwort__Implementation__> _AntwortenWrapper;

		private List<int> AntwortenIds;


        /// <summary>
        /// 
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual int? BogenNummer
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _BogenNummer;
                if (OnBogenNummer_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<int?>(__result);
                    OnBogenNummer_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_BogenNummer != value)
                {
                    var __oldValue = _BogenNummer;
                    var __newValue = value;
                    if(OnBogenNummer_PreSetter != null)
                    {
                        var __e = new PropertyPreSetterEventArgs<int?>(__oldValue, __newValue);
                        OnBogenNummer_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("BogenNummer", __oldValue, __newValue);
                    _BogenNummer = __newValue;
                    NotifyPropertyChanged("BogenNummer", __oldValue, __newValue);
                    if(OnBogenNummer_PostSetter != null)
                    {
                        var __e = new PropertyPostSetterEventArgs<int?>(__oldValue, __newValue);
                        OnBogenNummer_PostSetter(this, __e);
                    }
                }
            }
        }
        private int? _BogenNummer;
		public static event PropertyGetterHandler<Kistl.App.Test.Fragebogen, int?> OnBogenNummer_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Test.Fragebogen, int?> OnBogenNummer_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Test.Fragebogen, int?> OnBogenNummer_PostSetter;

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Fragebogen));
		}

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Fragebogen)obj;
			var otherImpl = (Fragebogen__Implementation__)obj;
			var me = (Fragebogen)this;

			me.BogenNummer = other.BogenNummer;
		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Fragebogen")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Fragebogen != null)
            {
                OnToString_Fragebogen(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Fragebogen> OnToString_Fragebogen;

        [EventBasedMethod("OnPreSave_Fragebogen")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_Fragebogen != null) OnPreSave_Fragebogen(this);
        }
        public static event ObjectEventHandler<Fragebogen> OnPreSave_Fragebogen;

        [EventBasedMethod("OnPostSave_Fragebogen")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_Fragebogen != null) OnPostSave_Fragebogen(this);
        }
        public static event ObjectEventHandler<Fragebogen> OnPostSave_Fragebogen;

        [EventBasedMethod("OnCreated_Fragebogen")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_Fragebogen != null) OnCreated_Fragebogen(this);
        }
        public static event ObjectEventHandler<Fragebogen> OnCreated_Fragebogen;

        [EventBasedMethod("OnDeleting_Fragebogen")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_Fragebogen != null) OnDeleting_Fragebogen(this);
        }
        public static event ObjectEventHandler<Fragebogen> OnDeleting_Fragebogen;


		protected override string GetPropertyError(string propertyName) 
		{
			switch(propertyName)
			{
				case "Antworten":
				{
					var errors = FrozenContext.Single.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("e8f20c02-abea-4c91-850f-c321adfd46f0")).Constraints
						.Where(c => !c.IsValid(this, this.Antworten))
						.Select(c => c.GetErrorText(this, this.Antworten))
						.ToArray();
					
					return String.Join("; ", errors);
				}
				case "BogenNummer":
				{
					var errors = FrozenContext.Single.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("b65f1a91-e063-4054-a2e7-d5dc0292e3fc")).Constraints
						.Where(c => !c.IsValid(this, this.BogenNummer))
						.Select(c => c.GetErrorText(this, this.BogenNummer))
						.ToArray();
					
					return String.Join("; ", errors);
				}
				default:
					return base.GetPropertyError(propertyName);
			}
		}

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			// fix direct object references
		}
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
            
            base.ToStream(binStream, auxObjects);
			{
				BinarySerializer.ToStream(Antworten.Count, binStream);
				foreach(var obj in Antworten)
				{
					if (auxObjects != null) {
						auxObjects.Add(obj);
					}
					BinarySerializer.ToStream(obj.ID, binStream);
				}
			}
            BinarySerializer.ToStream(this._BogenNummer, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
			{
				int numElements;
				BinarySerializer.FromStream(out numElements, binStream);
				AntwortenIds = new List<int>(numElements);
				while (numElements-- > 0) 
				{
					int id;
					BinarySerializer.FromStream(out id, binStream);
					AntwortenIds.Add(id);
				}
			}

            BinarySerializer.FromStream(out this._BogenNummer, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._BogenNummer, xml, "BogenNummer", "Kistl.App.Test");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._BogenNummer, xml, "BogenNummer", "Kistl.App.Test");
        }

#endregion

    }


}