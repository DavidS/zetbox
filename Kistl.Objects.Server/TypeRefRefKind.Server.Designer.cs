// <autogenerated/>


namespace Kistl.App.GUI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.API.Server;
    using Kistl.DalProvider.EF;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// A specifc ObjectRefKind for selecting TypeRefs
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="TypeRefRefKind")]
    [System.Diagnostics.DebuggerDisplay("TypeRefRefKind")]
    public class TypeRefRefKind__Implementation__ : Kistl.App.GUI.ObjectRefKind__Implementation__, TypeRefRefKind
    {
    
		public TypeRefRefKind__Implementation__()
		{
        }


		public override Type GetImplementedInterface()
		{
			return typeof(TypeRefRefKind);
		}

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (TypeRefRefKind)obj;
			var otherImpl = (TypeRefRefKind__Implementation__)obj;
			var me = (TypeRefRefKind)this;

		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_TypeRefRefKind")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_TypeRefRefKind != null)
            {
                OnToString_TypeRefRefKind(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<TypeRefRefKind> OnToString_TypeRefRefKind;

        [EventBasedMethod("OnPreSave_TypeRefRefKind")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_TypeRefRefKind != null) OnPreSave_TypeRefRefKind(this);
        }
        public static event ObjectEventHandler<TypeRefRefKind> OnPreSave_TypeRefRefKind;

        [EventBasedMethod("OnPostSave_TypeRefRefKind")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_TypeRefRefKind != null) OnPostSave_TypeRefRefKind(this);
        }
        public static event ObjectEventHandler<TypeRefRefKind> OnPostSave_TypeRefRefKind;

        [EventBasedMethod("OnCreated_TypeRefRefKind")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_TypeRefRefKind != null) OnCreated_TypeRefRefKind(this);
        }
        public static event ObjectEventHandler<TypeRefRefKind> OnCreated_TypeRefRefKind;

        [EventBasedMethod("OnDeleting_TypeRefRefKind")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_TypeRefRefKind != null) OnDeleting_TypeRefRefKind(this);
        }
        public static event ObjectEventHandler<TypeRefRefKind> OnDeleting_TypeRefRefKind;


	

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			base.ReloadReferences();
			
			// fix direct object references
		}
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            base.Export(xml, modules);
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            
            base.MergeImport(xml);
        }

#endregion

    }


}