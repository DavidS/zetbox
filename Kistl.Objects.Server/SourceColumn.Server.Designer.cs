// <autogenerated/>


namespace ZBox.App.SchemaMigration
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.API.Server;
    using Kistl.DalProvider.EF;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="SourceColumn")]
    [System.Diagnostics.DebuggerDisplay("SourceColumn")]
    public class SourceColumn__Implementation__ : BaseServerDataObject_EntityFramework, SourceColumn
    {
        [Obsolete]
        public SourceColumn__Implementation__()
            : base(null)
        {
        }

        public SourceColumn__Implementation__(Func<IReadOnlyKistlContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Comment
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Comment;
                if (OnComment_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnComment_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Comment != value)
                {
                    var __oldValue = _Comment;
                    var __newValue = value;
                    if(OnComment_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnComment_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Comment", __oldValue, __newValue);
                    _Comment = __newValue;
                    NotifyPropertyChanged("Comment", __oldValue, __newValue);
                    if(OnComment_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnComment_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Comment;
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnComment_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnComment_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnComment_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.EnumerationPropertyTemplate
        // implement the user-visible interface
        public ZBox.App.SchemaMigration.ColumnType DbType
        {
            get
            {
				var __value = _DbType;
				if(OnDbType_Getter != null)
				{
					var e = new PropertyGetterEventArgs<ZBox.App.SchemaMigration.ColumnType>(__value);
					OnDbType_Getter(this, e);
					__value = e.Result;
				}
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (_DbType != value)
                {
					var __oldValue = _DbType;
					var __newValue = value;
                    if(OnDbType_PreSetter != null)
                    {
						var e = new PropertyPreSetterEventArgs<ZBox.App.SchemaMigration.ColumnType>(__oldValue, __newValue);
						OnDbType_PreSetter(this, e);
						__newValue = e.Result;
                    }
					
                    NotifyPropertyChanging("DbType", "DbType__Implementation__", __oldValue, __newValue);
                    _DbType = value;
                    NotifyPropertyChanged("DbType", "DbType__Implementation__", __oldValue, __newValue);
                    if(OnDbType_PostSetter != null)
                    {
						var e = new PropertyPostSetterEventArgs<ZBox.App.SchemaMigration.ColumnType>(__oldValue, __newValue);
						OnDbType_PostSetter(this, e);
                    }
                    
                }
            }
        }
        
        /// <summary>backing store for DbType</summary>
        private ZBox.App.SchemaMigration.ColumnType _DbType;
        
        /// <summary>EF sees only this property, for DbType</summary>
        [XmlIgnore()]
        [EdmScalarProperty()]
        public int DbType__Implementation__
        {
            get
            {
                return (int)this.DbType;
            }
            set
            {
                this.DbType = (ZBox.App.SchemaMigration.ColumnType)value;
            }
        }
        
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.ColumnType> OnDbType_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.ColumnType> OnDbType_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.ColumnType> OnDbType_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if(OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Description;
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnDescription_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if(OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Name;
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnName_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnName_PostSetter;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_SourceColumn_belongs_to_SourceTable
    A: ZeroOrMore SourceColumn as SourceColumn
    B: One SourceTable as SourceTable
    Preferred Storage: MergeIntoA
    */
        // object reference property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ZBox.App.SchemaMigration.SourceTable SourceTable
        {
            get
            {
                return SourceTable__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                SourceTable__Implementation__ = (ZBox.App.SchemaMigration.SourceTable__Implementation__)value;
            }
        }
        
        private int? _fk_SourceTable;
        private Guid? _fk_guid_SourceTable = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_SourceColumn_belongs_to_SourceTable", "SourceTable")]
        public ZBox.App.SchemaMigration.SourceTable__Implementation__ SourceTable__Implementation__
        {
            get
            {
                EntityReference<ZBox.App.SchemaMigration.SourceTable__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.SourceTable__Implementation__>(
                        "Model.FK_SourceColumn_belongs_to_SourceTable",
                        "SourceTable");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
				if(OnSourceTable_Getter != null)
				{
					var e = new PropertyGetterEventArgs<ZBox.App.SchemaMigration.SourceTable>(__value);
					OnSourceTable_Getter(this, e);
					__value = (ZBox.App.SchemaMigration.SourceTable__Implementation__)e.Result;
				}
                return __value;
            }
            set
            {
                EntityReference<ZBox.App.SchemaMigration.SourceTable__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.SourceTable__Implementation__>(
                        "Model.FK_SourceColumn_belongs_to_SourceTable",
                        "SourceTable");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                ZBox.App.SchemaMigration.SourceTable __oldValue = (ZBox.App.SchemaMigration.SourceTable)r.Value;
                ZBox.App.SchemaMigration.SourceTable __newValue = (ZBox.App.SchemaMigration.SourceTable)value;

                if(OnSourceTable_PreSetter != null)
                {
					var e = new PropertyPreSetterEventArgs<ZBox.App.SchemaMigration.SourceTable>(__oldValue, __newValue);
					OnSourceTable_PreSetter(this, e);
					__newValue = e.Result;
                }
                r.Value = (ZBox.App.SchemaMigration.SourceTable__Implementation__)__newValue;
                if(OnSourceTable_PostSetter != null)
                {
					var e = new PropertyPostSetterEventArgs<ZBox.App.SchemaMigration.SourceTable>(__oldValue, __newValue);
					OnSourceTable_PostSetter(this, e);
                }
                                
            }
        }
        
        
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceTable> OnSourceTable_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceTable> OnSourceTable_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceTable> OnSourceTable_PostSetter;

        /// <summary>
        /// 
        /// </summary>
		[EventBasedMethod("OnCreateProperty_SourceColumn")]
		public virtual void CreateProperty() 
		{
            // base.CreateProperty();
            if (OnCreateProperty_SourceColumn != null)
            {
				OnCreateProperty_SourceColumn(this);
			}
			else
			{
                throw new NotImplementedException("No handler registered on SourceColumn.CreateProperty");
			}
        }
		public delegate void CreateProperty_Handler<T>(T obj);
		public static event CreateProperty_Handler<SourceColumn> OnCreateProperty_SourceColumn;



        public override Type GetImplementedInterface()
        {
            return typeof(SourceColumn);
        }

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (SourceColumn)obj;
			var otherImpl = (SourceColumn__Implementation__)obj;
			var me = (SourceColumn)this;

			me.Comment = other.Comment;
			me.DbType = other.DbType;
			me.Description = other.Description;
			me.Name = other.Name;
			this._fk_SourceTable = otherImpl._fk_SourceTable;
		}

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			// fix direct object references

			if (_fk_guid_SourceTable.HasValue)
				SourceTable__Implementation__ = (ZBox.App.SchemaMigration.SourceTable__Implementation__)Context.FindPersistenceObject<ZBox.App.SchemaMigration.SourceTable>(_fk_guid_SourceTable.Value);
			else if (_fk_SourceTable.HasValue)
				SourceTable__Implementation__ = (ZBox.App.SchemaMigration.SourceTable__Implementation__)Context.Find<ZBox.App.SchemaMigration.SourceTable>(_fk_SourceTable.Value);
			else
				SourceTable__Implementation__ = null;
		}
        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_SourceColumn")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_SourceColumn != null)
            {
                OnToString_SourceColumn(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<SourceColumn> OnToString_SourceColumn;

        [EventBasedMethod("OnPreSave_SourceColumn")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_SourceColumn != null) OnPreSave_SourceColumn(this);
        }
        public static event ObjectEventHandler<SourceColumn> OnPreSave_SourceColumn;

        [EventBasedMethod("OnPostSave_SourceColumn")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_SourceColumn != null) OnPostSave_SourceColumn(this);
        }
        public static event ObjectEventHandler<SourceColumn> OnPostSave_SourceColumn;

        [EventBasedMethod("OnCreated_SourceColumn")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_SourceColumn != null) OnCreated_SourceColumn(this);
        }
        public static event ObjectEventHandler<SourceColumn> OnCreated_SourceColumn;

        [EventBasedMethod("OnDeleting_SourceColumn")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_SourceColumn != null) OnDeleting_SourceColumn(this);
        }
        public static event ObjectEventHandler<SourceColumn> OnDeleting_SourceColumn;


		private static readonly object _propertiesLock = new object();
		private static System.ComponentModel.PropertyDescriptor[] _properties;
		
		private void _InitializePropertyDescriptors(Func<IReadOnlyKistlContext> lazyCtx)
		{
			if (_properties != null) return;
			lock (_propertiesLock)
			{
				// recheck for a lost race after aquiring the lock
				if (_properties != null) return;
				
				_properties = new System.ComponentModel.PropertyDescriptor[] {
					// else
					new CustomPropertyDescriptor<SourceColumn__Implementation__, string>(
						lazyCtx,
						new Guid("66bcca34-2297-4e06-84e8-ff19c5d4af35"),
						"Comment",
						null,
						obj => obj.Comment,
						(obj, val) => obj.Comment = val),
					// else
					new CustomPropertyDescriptor<SourceColumn__Implementation__, ZBox.App.SchemaMigration.ColumnType>(
						lazyCtx,
						new Guid("78873431-d503-4192-b658-5c5bc6442180"),
						"DbType",
						null,
						obj => obj.DbType,
						(obj, val) => obj.DbType = val),
					// else
					new CustomPropertyDescriptor<SourceColumn__Implementation__, string>(
						lazyCtx,
						new Guid("6273444e-5309-4481-8d2a-99a7a8a1b059"),
						"Description",
						null,
						obj => obj.Description,
						(obj, val) => obj.Description = val),
					// else
					new CustomPropertyDescriptor<SourceColumn__Implementation__, string>(
						lazyCtx,
						new Guid("a27f7d36-fd56-4271-bac0-88e22bc65027"),
						"Name",
						null,
						obj => obj.Name,
						(obj, val) => obj.Name = val),
					// else
					new CustomPropertyDescriptor<SourceColumn__Implementation__, ZBox.App.SchemaMigration.SourceTable>(
						lazyCtx,
						new Guid("d1dca069-f6b5-4da1-beee-a51853c109ba"),
						"SourceTable",
						null,
						obj => obj.SourceTable,
						(obj, val) => obj.SourceTable = val),
					// rel: SourceColumn belongs_to SourceTable (cd774e2e-93de-4f45-9fa8-daff40a61511)
				};
			}
		}
		
		protected override void CollectProperties(Func<IReadOnlyKistlContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
		{
			base.CollectProperties(props);
			_InitializePropertyDescriptors(lazyCtx);
			props.AddRange(_properties);
		}
	

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._Comment, binStream);
            BinarySerializer.ToStream((int?)((SourceColumn)this).DbType, binStream);
            BinarySerializer.ToStream(this._Description, binStream);
            BinarySerializer.ToStream(this._Name, binStream);
            BinarySerializer.ToStream(SourceTable != null ? SourceTable.ID : (int?)null, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._Comment, binStream);
			{
				int? baseValue;
				BinarySerializer.FromStream(out baseValue, binStream);
				((SourceColumn)this).DbType = (ZBox.App.SchemaMigration.ColumnType)baseValue;
			}
            BinarySerializer.FromStream(out this._Description, binStream);
            BinarySerializer.FromStream(out this._Name, binStream);
            BinarySerializer.FromStream(out this._fk_SourceTable, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._Comment, xml, "Comment", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream((int?)this.DbType, xml, "DbType", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._Name, xml, "Name", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(SourceTable != null ? SourceTable.ID : (int?)null, xml, "SourceTable", "ZBox.App.SchemaMigration");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._Comment, xml, "Comment", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStreamConverter(v => ((SourceColumn)this).DbType = (ZBox.App.SchemaMigration.ColumnType)v, xml, "DbType", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._Name, xml, "Name", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._fk_SourceTable, xml, "SourceTable", "ZBox.App.SchemaMigration");
        }

#endregion

    }


}