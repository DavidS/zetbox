// <autogenerated/>


namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.API.Server;
    using Kistl.DalProvider.EF;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// Metadefinition Object for ObjectClasses.
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="ObjectClass")]
    [System.Diagnostics.DebuggerDisplay("ObjectClass")]
    public class ObjectClass__Implementation__ : Kistl.App.Base.DataType__Implementation__, ObjectClass
    {
    
		public ObjectClass__Implementation__()
		{
        }


        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_ObjectClass_has_AccessControlList
    A: One ObjectClass as ObjectClass
    B: ZeroOrMore AccessControl as AccessControlList
    Preferred Storage: MergeIntoB
    */
        // object list property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectListProperty
	    // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Base.AccessControl> AccessControlList
        {
            get
            {
                if (_AccessControlListWrapper == null)
                {
                    _AccessControlListWrapper = new EntityCollectionWrapper<Kistl.App.Base.AccessControl, Kistl.App.Base.AccessControl__Implementation__>(
                            this.Context, AccessControlList__Implementation__);
                }
                return _AccessControlListWrapper;
            }
        }
        
        [EdmRelationshipNavigationProperty("Model", "FK_ObjectClass_has_AccessControlList", "AccessControlList")]
        public EntityCollection<Kistl.App.Base.AccessControl__Implementation__> AccessControlList__Implementation__
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Kistl.App.Base.AccessControl__Implementation__>(
                        "Model.FK_ObjectClass_has_AccessControlList",
                        "AccessControlList");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                c.ForEach(i => i.AttachToContext(Context));
                return c;
            }
        }
        private EntityCollectionWrapper<Kistl.App.Base.AccessControl, Kistl.App.Base.AccessControl__Implementation__> _AccessControlListWrapper;



        /// <summary>
        /// Pointer auf die Basisklasse
        /// </summary>
    /*
    Relation: FK_BaseObjectClass_has_SubClasses
    A: ZeroOrOne ObjectClass as BaseObjectClass
    B: ZeroOrMore ObjectClass as SubClasses
    Preferred Storage: MergeIntoB
    */
        // object reference property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.ObjectClass BaseObjectClass
        {
            get
            {
                return BaseObjectClass__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                BaseObjectClass__Implementation__ = (Kistl.App.Base.ObjectClass__Implementation__)value;
            }
        }
        
        private int? _fk_BaseObjectClass;
        private Guid? _fk_guid_BaseObjectClass = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_BaseObjectClass_has_SubClasses", "BaseObjectClass")]
        public Kistl.App.Base.ObjectClass__Implementation__ BaseObjectClass__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.Base.ObjectClass__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.ObjectClass__Implementation__>(
                        "Model.FK_BaseObjectClass_has_SubClasses",
                        "BaseObjectClass");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
				if(OnBaseObjectClass_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Base.ObjectClass>(__value);
					OnBaseObjectClass_Getter(this, e);
					__value = (Kistl.App.Base.ObjectClass__Implementation__)e.Result;
				}
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.Base.ObjectClass__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.ObjectClass__Implementation__>(
                        "Model.FK_BaseObjectClass_has_SubClasses",
                        "BaseObjectClass");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.Base.ObjectClass __oldValue = (Kistl.App.Base.ObjectClass)r.Value;
                Kistl.App.Base.ObjectClass __newValue = (Kistl.App.Base.ObjectClass)value;

                if(OnBaseObjectClass_PreSetter != null)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Base.ObjectClass>(__oldValue, __newValue);
					OnBaseObjectClass_PreSetter(this, e);
					__newValue = e.Result;
                }
                r.Value = (Kistl.App.Base.ObjectClass__Implementation__)__newValue;
                if(OnBaseObjectClass_PostSetter != null)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Base.ObjectClass>(__oldValue, __newValue);
					OnBaseObjectClass_PostSetter(this, e);
                }
                                
            }
        }
        
        
		public static event PropertyGetterHandler<Kistl.App.Base.ObjectClass, Kistl.App.Base.ObjectClass> OnBaseObjectClass_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.ObjectClass, Kistl.App.Base.ObjectClass> OnBaseObjectClass_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.ObjectClass, Kistl.App.Base.ObjectClass> OnBaseObjectClass_PostSetter;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_Constraint_on_Constrained
    A: ZeroOrMore InstanceConstraint as Constraint
    B: ZeroOrOne ObjectClass as Constrained
    Preferred Storage: MergeIntoA
    */
        // object list property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectListProperty
	    // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Base.InstanceConstraint> Constraints
        {
            get
            {
                if (_ConstraintsWrapper == null)
                {
                    _ConstraintsWrapper = new EntityCollectionWrapper<Kistl.App.Base.InstanceConstraint, Kistl.App.Base.InstanceConstraint__Implementation__>(
                            this.Context, Constraints__Implementation__);
                }
                return _ConstraintsWrapper;
            }
        }
        
        [EdmRelationshipNavigationProperty("Model", "FK_Constraint_on_Constrained", "Constraint")]
        public EntityCollection<Kistl.App.Base.InstanceConstraint__Implementation__> Constraints__Implementation__
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Kistl.App.Base.InstanceConstraint__Implementation__>(
                        "Model.FK_Constraint_on_Constrained",
                        "Constraint");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                c.ForEach(i => i.AttachToContext(Context));
                return c;
            }
        }
        private EntityCollectionWrapper<Kistl.App.Base.InstanceConstraint, Kistl.App.Base.InstanceConstraint__Implementation__> _ConstraintsWrapper;

		private List<int> ConstraintsIds;
		private bool Constraints_was_eagerLoaded = false;


        /// <summary>
        /// The default ViewModel to use for this ObjectClass
        /// </summary>
    /*
    Relation: FK_Presentable_has_DefaultViewModelDescriptor
    A: ZeroOrMore ObjectClass as Presentable
    B: One ViewModelDescriptor as DefaultViewModelDescriptor
    Preferred Storage: MergeIntoA
    */
        // object reference property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ViewModelDescriptor DefaultViewModelDescriptor
        {
            get
            {
                return DefaultViewModelDescriptor__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                DefaultViewModelDescriptor__Implementation__ = (Kistl.App.GUI.ViewModelDescriptor__Implementation__)value;
            }
        }
        
        private int? _fk_DefaultViewModelDescriptor;
        private Guid? _fk_guid_DefaultViewModelDescriptor = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Presentable_has_DefaultViewModelDescriptor", "DefaultViewModelDescriptor")]
        public Kistl.App.GUI.ViewModelDescriptor__Implementation__ DefaultViewModelDescriptor__Implementation__
        {
            get
            {
                EntityReference<Kistl.App.GUI.ViewModelDescriptor__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ViewModelDescriptor__Implementation__>(
                        "Model.FK_Presentable_has_DefaultViewModelDescriptor",
                        "DefaultViewModelDescriptor");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
				if(OnDefaultViewModelDescriptor_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.GUI.ViewModelDescriptor>(__value);
					OnDefaultViewModelDescriptor_Getter(this, e);
					__value = (Kistl.App.GUI.ViewModelDescriptor__Implementation__)e.Result;
				}
                return __value;
            }
            set
            {
                EntityReference<Kistl.App.GUI.ViewModelDescriptor__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ViewModelDescriptor__Implementation__>(
                        "Model.FK_Presentable_has_DefaultViewModelDescriptor",
                        "DefaultViewModelDescriptor");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                Kistl.App.GUI.ViewModelDescriptor __oldValue = (Kistl.App.GUI.ViewModelDescriptor)r.Value;
                Kistl.App.GUI.ViewModelDescriptor __newValue = (Kistl.App.GUI.ViewModelDescriptor)value;

                if(OnDefaultViewModelDescriptor_PreSetter != null)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
					OnDefaultViewModelDescriptor_PreSetter(this, e);
					__newValue = e.Result;
                }
                r.Value = (Kistl.App.GUI.ViewModelDescriptor__Implementation__)__newValue;
                if(OnDefaultViewModelDescriptor_PostSetter != null)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
					OnDefaultViewModelDescriptor_PostSetter(this, e);
                }
                                
            }
        }
        
        
		public static event PropertyGetterHandler<Kistl.App.Base.ObjectClass, Kistl.App.GUI.ViewModelDescriptor> OnDefaultViewModelDescriptor_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.ObjectClass, Kistl.App.GUI.ViewModelDescriptor> OnDefaultViewModelDescriptor_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.ObjectClass, Kistl.App.GUI.ViewModelDescriptor> OnDefaultViewModelDescriptor_PostSetter;

        /// <summary>
        /// Interfaces der Objektklasse
        /// </summary>
    /*
    Relation: FK_ObjectClass_implements_ImplementsInterfaces
    A: ZeroOrMore ObjectClass as ObjectClass
    B: ZeroOrMore Interface as ImplementsInterfaces
    Preferred Storage: Separate
    */
        // collection reference property
		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.CollectionEntryListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Base.Interface> ImplementsInterfaces
        {
            get
            {
                if (_ImplementsInterfacesWrapper == null)
                {
                    _ImplementsInterfacesWrapper = new EntityRelationBSideCollectionWrapper<Kistl.App.Base.ObjectClass, Kistl.App.Base.Interface, Kistl.App.Base.ObjectClass_implements_Interface_RelationEntry__Implementation__>(
                            this,
                            ImplementsInterfaces__Implementation__);
                }
                return _ImplementsInterfacesWrapper;
            }
        }
        
        [EdmRelationshipNavigationProperty("Model", "FK_ObjectClass_implements_ImplementsInterfaces_A", "CollectionEntry")]
        public EntityCollection<Kistl.App.Base.ObjectClass_implements_Interface_RelationEntry__Implementation__> ImplementsInterfaces__Implementation__
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Kistl.App.Base.ObjectClass_implements_Interface_RelationEntry__Implementation__>(
                        "Model.FK_ObjectClass_implements_ImplementsInterfaces_A",
                        "CollectionEntry");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                return c;
            }
        }
        private EntityRelationBSideCollectionWrapper<Kistl.App.Base.ObjectClass, Kistl.App.Base.Interface, Kistl.App.Base.ObjectClass_implements_Interface_RelationEntry__Implementation__> _ImplementsInterfacesWrapper;


        /// <summary>
        /// Class is abstract
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual bool IsAbstract
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsAbstract;
                if (OnIsAbstract_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsAbstract_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_IsAbstract != value)
                {
                    var __oldValue = _IsAbstract;
                    var __newValue = value;
                    if(OnIsAbstract_PreSetter != null)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsAbstract_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsAbstract", __oldValue, __newValue);
                    _IsAbstract = __newValue;
                    NotifyPropertyChanged("IsAbstract", __oldValue, __newValue);
                    if(OnIsAbstract_PostSetter != null)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsAbstract_PostSetter(this, __e);
                    }
                }
            }
        }
        private bool _IsAbstract;
		public static event PropertyGetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsAbstract_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsAbstract_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsAbstract_PostSetter;

        /// <summary>
        /// if true then all Instances appear in FozenContext.
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual bool IsFrozenObject
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsFrozenObject;
                if (OnIsFrozenObject_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsFrozenObject_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_IsFrozenObject != value)
                {
                    var __oldValue = _IsFrozenObject;
                    var __newValue = value;
                    if(OnIsFrozenObject_PreSetter != null)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsFrozenObject_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsFrozenObject", __oldValue, __newValue);
                    _IsFrozenObject = __newValue;
                    NotifyPropertyChanged("IsFrozenObject", __oldValue, __newValue);
                    if(OnIsFrozenObject_PostSetter != null)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsFrozenObject_PostSetter(this, __e);
                    }
                }
            }
        }
        private bool _IsFrozenObject;
		public static event PropertyGetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsFrozenObject_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsFrozenObject_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsFrozenObject_PostSetter;

        /// <summary>
        /// Setting this to true marks the instances of this class as &quot;simple.&quot; At first this will only mean that they'll be displayed inline.
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual bool IsSimpleObject
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsSimpleObject;
                if (OnIsSimpleObject_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsSimpleObject_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_IsSimpleObject != value)
                {
                    var __oldValue = _IsSimpleObject;
                    var __newValue = value;
                    if(OnIsSimpleObject_PreSetter != null)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsSimpleObject_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsSimpleObject", __oldValue, __newValue);
                    _IsSimpleObject = __newValue;
                    NotifyPropertyChanged("IsSimpleObject", __oldValue, __newValue);
                    if(OnIsSimpleObject_PostSetter != null)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsSimpleObject_PostSetter(this, __e);
                    }
                }
            }
        }
        private bool _IsSimpleObject;
		public static event PropertyGetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsSimpleObject_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsSimpleObject_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsSimpleObject_PostSetter;

        /// <summary>
        /// Liste der vererbten Klassen
        /// </summary>
    /*
    Relation: FK_BaseObjectClass_has_SubClasses
    A: ZeroOrOne ObjectClass as BaseObjectClass
    B: ZeroOrMore ObjectClass as SubClasses
    Preferred Storage: MergeIntoB
    */
        // object list property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectListProperty
	    // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Base.ObjectClass> SubClasses
        {
            get
            {
                if (_SubClassesWrapper == null)
                {
                    _SubClassesWrapper = new EntityCollectionWrapper<Kistl.App.Base.ObjectClass, Kistl.App.Base.ObjectClass__Implementation__>(
                            this.Context, SubClasses__Implementation__);
                }
                return _SubClassesWrapper;
            }
        }
        
        [EdmRelationshipNavigationProperty("Model", "FK_BaseObjectClass_has_SubClasses", "SubClasses")]
        public EntityCollection<Kistl.App.Base.ObjectClass__Implementation__> SubClasses__Implementation__
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Kistl.App.Base.ObjectClass__Implementation__>(
                        "Model.FK_BaseObjectClass_has_SubClasses",
                        "SubClasses");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                c.ForEach(i => i.AttachToContext(Context));
                return c;
            }
        }
        private EntityCollectionWrapper<Kistl.App.Base.ObjectClass, Kistl.App.Base.ObjectClass__Implementation__> _SubClassesWrapper;



        /// <summary>
        /// Tabellenname in der Datenbank
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string TableName
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _TableName;
                if (OnTableName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnTableName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_TableName != value)
                {
                    var __oldValue = _TableName;
                    var __newValue = value;
                    if(OnTableName_PreSetter != null)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnTableName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TableName", __oldValue, __newValue);
                    _TableName = __newValue;
                    NotifyPropertyChanged("TableName", __oldValue, __newValue);
                    if(OnTableName_PostSetter != null)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnTableName_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _TableName;
		public static event PropertyGetterHandler<Kistl.App.Base.ObjectClass, string> OnTableName_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.ObjectClass, string> OnTableName_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.ObjectClass, string> OnTableName_PostSetter;

        /// <summary>
        /// Creates, if needed, all default  Methods
        /// </summary>
		[EventBasedMethod("OnCreateDefaultMethods_ObjectClass")]
		public virtual void CreateDefaultMethods() 
		{
            // base.CreateDefaultMethods();
            if (OnCreateDefaultMethods_ObjectClass != null)
            {
				OnCreateDefaultMethods_ObjectClass(this);
			}
			else
			{
                throw new NotImplementedException("No handler registered on ObjectClass.CreateDefaultMethods");
			}
        }
		public delegate void CreateDefaultMethods_Handler<T>(T obj);
		public static event CreateDefaultMethods_Handler<ObjectClass> OnCreateDefaultMethods_ObjectClass;



        /// <summary>
        /// Creates a new Method for this class
        /// </summary>
		[EventBasedMethod("OnCreateMethod_ObjectClass")]
		public virtual Kistl.App.Base.Method CreateMethod() 
        {
            var e = new MethodReturnEventArgs<Kistl.App.Base.Method>();
            if (OnCreateMethod_ObjectClass != null)
            {
                OnCreateMethod_ObjectClass(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ObjectClass.CreateMethod");
            }
            return e.Result;
        }
		public delegate void CreateMethod_Handler<T>(T obj, MethodReturnEventArgs<Kistl.App.Base.Method> ret);
		public static event CreateMethod_Handler<ObjectClass> OnCreateMethod_ObjectClass;



        /// <summary>
        /// Implements the "Create new Relation" use case
        /// </summary>
		[EventBasedMethod("OnCreateRelation_ObjectClass")]
		public virtual Kistl.App.Base.Relation CreateRelation() 
        {
            var e = new MethodReturnEventArgs<Kistl.App.Base.Relation>();
            if (OnCreateRelation_ObjectClass != null)
            {
                OnCreateRelation_ObjectClass(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ObjectClass.CreateRelation");
            }
            return e.Result;
        }
		public delegate void CreateRelation_Handler<T>(T obj, MethodReturnEventArgs<Kistl.App.Base.Relation> ret);
		public static event CreateRelation_Handler<ObjectClass> OnCreateRelation_ObjectClass;



        /// <summary>
        /// Returns the resulting Type of this Datatype Meta Object.
        /// </summary>
		[EventBasedMethod("OnGetDataType_ObjectClass")]
		public override System.Type GetDataType() 
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetDataType_ObjectClass != null)
            {
                OnGetDataType_ObjectClass(this, e);
            }
            else
            {
                e.Result = base.GetDataType();
            }
            return e.Result;
        }
		public static event GetDataType_Handler<ObjectClass> OnGetDataType_ObjectClass;



        /// <summary>
        /// Returns the String representation of this Datatype Meta Object.
        /// </summary>
		[EventBasedMethod("OnGetDataTypeString_ObjectClass")]
		public override string GetDataTypeString() 
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetDataTypeString_ObjectClass != null)
            {
                OnGetDataTypeString_ObjectClass(this, e);
            }
            else
            {
                e.Result = base.GetDataTypeString();
            }
            return e.Result;
        }
		public static event GetDataTypeString_Handler<ObjectClass> OnGetDataTypeString_ObjectClass;



        /// <summary>
        /// 
        /// </summary>
		[EventBasedMethod("OnGetInheritedMethods_ObjectClass")]
		public virtual IList<Kistl.App.Base.Method> GetInheritedMethods() 
        {
            var e = new MethodReturnEventArgs<IList<Kistl.App.Base.Method>>();
            if (OnGetInheritedMethods_ObjectClass != null)
            {
                OnGetInheritedMethods_ObjectClass(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ObjectClass.GetInheritedMethods");
            }
            return e.Result;
        }
		public delegate void GetInheritedMethods_Handler<T>(T obj, MethodReturnEventArgs<IList<Kistl.App.Base.Method>> ret);
		public static event GetInheritedMethods_Handler<ObjectClass> OnGetInheritedMethods_ObjectClass;



        /// <summary>
        /// Implements all available interfaces as Properties and Methods
        /// </summary>
		[EventBasedMethod("OnImplementInterfaces_ObjectClass")]
		public virtual void ImplementInterfaces() 
		{
            // base.ImplementInterfaces();
            if (OnImplementInterfaces_ObjectClass != null)
            {
				OnImplementInterfaces_ObjectClass(this);
			}
			else
			{
                throw new NotImplementedException("No handler registered on ObjectClass.ImplementInterfaces");
			}
        }
		public delegate void ImplementInterfaces_Handler<T>(T obj);
		public static event ImplementInterfaces_Handler<ObjectClass> OnImplementInterfaces_ObjectClass;



		public override Type GetImplementedInterface()
		{
			return typeof(ObjectClass);
		}

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (ObjectClass)obj;
			var otherImpl = (ObjectClass__Implementation__)obj;
			var me = (ObjectClass)this;

			me.IsAbstract = other.IsAbstract;
			me.IsFrozenObject = other.IsFrozenObject;
			me.IsSimpleObject = other.IsSimpleObject;
			me.TableName = other.TableName;
			this._fk_BaseObjectClass = otherImpl._fk_BaseObjectClass;
			this._fk_DefaultViewModelDescriptor = otherImpl._fk_DefaultViewModelDescriptor;
		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_ObjectClass")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_ObjectClass != null)
            {
                OnToString_ObjectClass(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<ObjectClass> OnToString_ObjectClass;

        [EventBasedMethod("OnPreSave_ObjectClass")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_ObjectClass != null) OnPreSave_ObjectClass(this);
        }
        public static event ObjectEventHandler<ObjectClass> OnPreSave_ObjectClass;

        [EventBasedMethod("OnPostSave_ObjectClass")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_ObjectClass != null) OnPostSave_ObjectClass(this);
        }
        public static event ObjectEventHandler<ObjectClass> OnPostSave_ObjectClass;

        [EventBasedMethod("OnCreated_ObjectClass")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_ObjectClass != null) OnCreated_ObjectClass(this);
        }
        public static event ObjectEventHandler<ObjectClass> OnCreated_ObjectClass;

        [EventBasedMethod("OnDeleting_ObjectClass")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_ObjectClass != null) OnDeleting_ObjectClass(this);
        }
        public static event ObjectEventHandler<ObjectClass> OnDeleting_ObjectClass;


		private static readonly System.ComponentModel.PropertyDescriptor[] _properties = new System.ComponentModel.PropertyDescriptor[] {
			// property.IsAssociation() && !property.IsObjectReferencePropertySingle()
			new CustomPropertyDescriptor<ObjectClass__Implementation__, ICollection<Kistl.App.Base.AccessControl>>(
				new Guid("4514093c-0a1f-4644-b4a6-3389f1ca7aa8"),
				"AccessControlList",
				null,
				obj => obj.AccessControlList,
				null), // lists are read-only properties
			// else
			new CustomPropertyDescriptor<ObjectClass__Implementation__, Kistl.App.Base.ObjectClass>(
				new Guid("ad060d41-bc7a-41b8-a3e3-ec9302c8c714"),
				"BaseObjectClass",
				null,
				obj => obj.BaseObjectClass,
				(obj, val) => obj.BaseObjectClass = val),
			// property.IsAssociation() && !property.IsObjectReferencePropertySingle()
			new CustomPropertyDescriptor<ObjectClass__Implementation__, ICollection<Kistl.App.Base.InstanceConstraint>>(
				new Guid("eda15826-7251-4726-9f6b-65e7f24f6ad1"),
				"Constraints",
				null,
				obj => obj.Constraints,
				null), // lists are read-only properties
			// else
			new CustomPropertyDescriptor<ObjectClass__Implementation__, Kistl.App.GUI.ViewModelDescriptor>(
				new Guid("11adedb9-d32a-4da9-b986-0534e65df760"),
				"DefaultViewModelDescriptor",
				null,
				obj => obj.DefaultViewModelDescriptor,
				(obj, val) => obj.DefaultViewModelDescriptor = val),
			// property.IsAssociation() && !property.IsObjectReferencePropertySingle()
			new CustomPropertyDescriptor<ObjectClass__Implementation__, ICollection<Kistl.App.Base.Interface>>(
				new Guid("a9ec04c2-0807-4d6c-a96a-824d13e5c571"),
				"ImplementsInterfaces",
				null,
				obj => obj.ImplementsInterfaces,
				null), // lists are read-only properties
			// else
			new CustomPropertyDescriptor<ObjectClass__Implementation__, bool>(
				new Guid("e9d1402e-3580-4084-8836-c44844683191"),
				"IsAbstract",
				null,
				obj => obj.IsAbstract,
				(obj, val) => obj.IsAbstract = val),
			// else
			new CustomPropertyDescriptor<ObjectClass__Implementation__, bool>(
				new Guid("13c33710-ea02-4621-ad50-294a1f36b07d"),
				"IsFrozenObject",
				null,
				obj => obj.IsFrozenObject,
				(obj, val) => obj.IsFrozenObject = val),
			// else
			new CustomPropertyDescriptor<ObjectClass__Implementation__, bool>(
				new Guid("edc853d3-0d02-4492-9159-c548c7713e9b"),
				"IsSimpleObject",
				null,
				obj => obj.IsSimpleObject,
				(obj, val) => obj.IsSimpleObject = val),
			// property.IsAssociation() && !property.IsObjectReferencePropertySingle()
			new CustomPropertyDescriptor<ObjectClass__Implementation__, ICollection<Kistl.App.Base.ObjectClass>>(
				new Guid("0914de6e-966c-46fc-9359-e4da6c3608b1"),
				"SubClasses",
				null,
				obj => obj.SubClasses,
				null), // lists are read-only properties
			// else
			new CustomPropertyDescriptor<ObjectClass__Implementation__, string>(
				new Guid("2a5e5111-199c-4dce-8369-ce35ee741568"),
				"TableName",
				null,
				obj => obj.TableName,
				(obj, val) => obj.TableName = val),
			// rel: CalculatedReference references ReferencedClass (6c207cc8-d6a2-49b5-81f3-743d261b7411)
			// rel: Constraint on Constrained (e2b66b79-ab7a-43c0-a229-16dddf4b8934)
			// rel: ObjectClass has AccessControlList (5c3092e0-a3e1-46d2-8e66-e59298b342e7)
			// rel: BaseObjectClass has SubClasses (cba32040-b1f2-4267-991a-f3dc0e349ff5)
			// rel: Presentable has DefaultViewModelDescriptor (1ae94c81-3359-45e8-b97a-b61add91abba)
			// rel: ObjectReferencePlaceholderProperty ofType ReferencedObjectClass (47ccedbe-6cfa-4810-8b8e-c064b8434f3f)
			// rel: RelationEnd has Type (1d8d8e0b-cb0d-4746-a4c5-85c8f399e00a)
		};
		
		protected override void CollectProperties(List<System.ComponentModel.PropertyDescriptor> props)
		{
			base.CollectProperties(props);
			props.AddRange(_properties);
		}
	

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			base.ReloadReferences();
			
			// fix direct object references

			if (_fk_guid_BaseObjectClass.HasValue)
				BaseObjectClass__Implementation__ = (Kistl.App.Base.ObjectClass__Implementation__)Context.FindPersistenceObject<Kistl.App.Base.ObjectClass>(_fk_guid_BaseObjectClass.Value);
			else if (_fk_BaseObjectClass.HasValue)
				BaseObjectClass__Implementation__ = (Kistl.App.Base.ObjectClass__Implementation__)Context.Find<Kistl.App.Base.ObjectClass>(_fk_BaseObjectClass.Value);
			else
				BaseObjectClass__Implementation__ = null;

			if (_fk_guid_DefaultViewModelDescriptor.HasValue)
				DefaultViewModelDescriptor__Implementation__ = (Kistl.App.GUI.ViewModelDescriptor__Implementation__)Context.FindPersistenceObject<Kistl.App.GUI.ViewModelDescriptor>(_fk_guid_DefaultViewModelDescriptor.Value);
			else if (_fk_DefaultViewModelDescriptor.HasValue)
				DefaultViewModelDescriptor__Implementation__ = (Kistl.App.GUI.ViewModelDescriptor__Implementation__)Context.Find<Kistl.App.GUI.ViewModelDescriptor>(_fk_DefaultViewModelDescriptor.Value);
			else
				DefaultViewModelDescriptor__Implementation__ = null;
		}
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(BaseObjectClass != null ? BaseObjectClass.ID : (int?)null, binStream);

			BinarySerializer.ToStream(eagerLoadLists, binStream);
			if(eagerLoadLists)
			{
				BinarySerializer.ToStream(true, binStream);
				BinarySerializer.ToStream(Constraints.Count, binStream);
				foreach(var obj in Constraints)
				{
					if (auxObjects != null) {
						auxObjects.Add(obj);
					}
					BinarySerializer.ToStream(obj.ID, binStream);
				}
			}
			else
			{
				BinarySerializer.ToStream(false, binStream);
			}
            BinarySerializer.ToStream(DefaultViewModelDescriptor != null ? DefaultViewModelDescriptor.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._IsAbstract, binStream);
            BinarySerializer.ToStream(this._IsFrozenObject, binStream);
            BinarySerializer.ToStream(this._IsSimpleObject, binStream);
            BinarySerializer.ToStream(this._TableName, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_BaseObjectClass, binStream);

			BinarySerializer.FromStream(out Constraints_was_eagerLoaded, binStream);
			{
				bool containsList;
				BinarySerializer.FromStream(out containsList, binStream);
				if(containsList)
				{
					int numElements;
					BinarySerializer.FromStream(out numElements, binStream);
					ConstraintsIds = new List<int>(numElements);
					while (numElements-- > 0) 
					{
						int id;
						BinarySerializer.FromStream(out id, binStream);
						ConstraintsIds.Add(id);
					}
				}
			}
            BinarySerializer.FromStream(out this._fk_DefaultViewModelDescriptor, binStream);
            BinarySerializer.FromStream(out this._IsAbstract, binStream);
            BinarySerializer.FromStream(out this._IsFrozenObject, binStream);
            BinarySerializer.FromStream(out this._IsSimpleObject, binStream);
            BinarySerializer.FromStream(out this._TableName, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(BaseObjectClass != null ? BaseObjectClass.ID : (int?)null, xml, "BaseObjectClass", "Kistl.App.Base");
            XmlStreamer.ToStream(DefaultViewModelDescriptor != null ? DefaultViewModelDescriptor.ID : (int?)null, xml, "DefaultViewModelDescriptor", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._IsAbstract, xml, "IsAbstract", "Kistl.App.Base");
            XmlStreamer.ToStream(this._IsFrozenObject, xml, "IsFrozenObject", "Kistl.App.Base");
            XmlStreamer.ToStream(this._IsSimpleObject, xml, "IsSimpleObject", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._TableName, xml, "TableName", "Kistl.App.Base");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_BaseObjectClass, xml, "BaseObjectClass", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_DefaultViewModelDescriptor, xml, "DefaultViewModelDescriptor", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._IsAbstract, xml, "IsAbstract", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._IsFrozenObject, xml, "IsFrozenObject", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._IsSimpleObject, xml, "IsSimpleObject", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._TableName, xml, "TableName", "Kistl.App.Base");
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            base.Export(xml, modules);
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(BaseObjectClass != null ? BaseObjectClass.ExportGuid : (Guid?)null, xml, "BaseObjectClass", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(DefaultViewModelDescriptor != null ? DefaultViewModelDescriptor.ExportGuid : (Guid?)null, xml, "DefaultViewModelDescriptor", "Kistl.App.GUI");
    
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._IsAbstract, xml, "IsAbstract", "Kistl.App.Base");
    
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._IsFrozenObject, xml, "IsFrozenObject", "Kistl.App.Base");
    
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._IsSimpleObject, xml, "IsSimpleObject", "Kistl.App.GUI");
    
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._TableName, xml, "TableName", "Kistl.App.Base");
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            
            base.MergeImport(xml);
            XmlStreamer.FromStream(ref this._fk_guid_BaseObjectClass, xml, "BaseObjectClass", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_guid_DefaultViewModelDescriptor, xml, "DefaultViewModelDescriptor", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._IsAbstract, xml, "IsAbstract", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._IsFrozenObject, xml, "IsFrozenObject", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._IsSimpleObject, xml, "IsSimpleObject", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._TableName, xml, "TableName", "Kistl.App.Base");
        }

#endregion

    }


}