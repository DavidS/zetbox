// <autogenerated/>


namespace at.dasz.DocumentManagement
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.API.Server;
    using Kistl.DalProvider.EF;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// File with changeable content
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="DynamicFile")]
    [System.Diagnostics.DebuggerDisplay("DynamicFile")]
    public class DynamicFile__Implementation__ : at.dasz.DocumentManagement.File__Implementation__, DynamicFile
    {
    
		public DynamicFile__Implementation__()
		{
        }


        /// <summary>
        /// Handles the change of the current blob
        /// </summary>
		[EventBasedMethod("OnHandleBlobChange_DynamicFile")]
		public override Kistl.App.Base.Blob HandleBlobChange(Kistl.App.Base.Blob oldBlob, Kistl.App.Base.Blob newBlob) 
        {
            var e = new MethodReturnEventArgs<Kistl.App.Base.Blob>();
            if (OnHandleBlobChange_DynamicFile != null)
            {
                OnHandleBlobChange_DynamicFile(this, e, oldBlob, newBlob);
            }
            else
            {
                e.Result = base.HandleBlobChange(oldBlob, newBlob);
            }
            return e.Result;
        }
		public static event HandleBlobChange_Handler<DynamicFile> OnHandleBlobChange_DynamicFile;



        /// <summary>
        /// Opens the Content readonly
        /// </summary>
		[EventBasedMethod("OnOpen_DynamicFile")]
		public override void Open() 
		{
            // base.Open();
            if (OnOpen_DynamicFile != null)
            {
				OnOpen_DynamicFile(this);
			}
			else
			{
			    base.Open();
			}
        }
		public static event Open_Handler<DynamicFile> OnOpen_DynamicFile;



        /// <summary>
        /// Uploads a new Content
        /// </summary>
		[EventBasedMethod("OnUpload_DynamicFile")]
		public override void Upload() 
		{
            // base.Upload();
            if (OnUpload_DynamicFile != null)
            {
				OnUpload_DynamicFile(this);
			}
			else
			{
			    base.Upload();
			}
        }
		public static event Upload_Handler<DynamicFile> OnUpload_DynamicFile;



		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(DynamicFile));
		}

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (DynamicFile)obj;
			var otherImpl = (DynamicFile__Implementation__)obj;
			var me = (DynamicFile)this;

		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_DynamicFile")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_DynamicFile != null)
            {
                OnToString_DynamicFile(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<DynamicFile> OnToString_DynamicFile;

        [EventBasedMethod("OnPreSave_DynamicFile")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_DynamicFile != null) OnPreSave_DynamicFile(this);
        }
        public static event ObjectEventHandler<DynamicFile> OnPreSave_DynamicFile;

        [EventBasedMethod("OnPostSave_DynamicFile")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_DynamicFile != null) OnPostSave_DynamicFile(this);
        }
        public static event ObjectEventHandler<DynamicFile> OnPostSave_DynamicFile;

        [EventBasedMethod("OnCreated_DynamicFile")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_DynamicFile != null) OnCreated_DynamicFile(this);
        }
        public static event ObjectEventHandler<DynamicFile> OnCreated_DynamicFile;

        [EventBasedMethod("OnDeleting_DynamicFile")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_DynamicFile != null) OnDeleting_DynamicFile(this);
        }
        public static event ObjectEventHandler<DynamicFile> OnDeleting_DynamicFile;


	

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			base.ReloadReferences();
			
			// fix direct object references
		}
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            base.Export(xml, modules);
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            
            base.MergeImport(xml);
        }

#endregion

    }


}