// <autogenerated/>


namespace ZBox.App.SchemaMigration
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.API.Server;
    using Kistl.DalProvider.EF;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="SourceTable")]
    [System.Diagnostics.DebuggerDisplay("SourceTable")]
    public class SourceTable__Implementation__ : BaseServerDataObject_EntityFramework, SourceTable
    {
        [Obsolete]
        public SourceTable__Implementation__()
            : base(null)
        {
        }

        public SourceTable__Implementation__(Func<IReadOnlyKistlContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Comment
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Comment;
                if (OnComment_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnComment_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Comment != value)
                {
                    var __oldValue = _Comment;
                    var __newValue = value;
                    if(OnComment_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnComment_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Comment", __oldValue, __newValue);
                    _Comment = __newValue;
                    NotifyPropertyChanged("Comment", __oldValue, __newValue);
                    if(OnComment_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnComment_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Comment;
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnComment_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnComment_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnComment_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if(OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Description;
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnDescription_PostSetter;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_MigrationProject_has_SourceTables
    A: One MigrationProject as MigrationProject
    B: ZeroOrMore SourceTable as SourceTables
    Preferred Storage: MergeIntoB
    */
        // object reference property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ZBox.App.SchemaMigration.MigrationProject MigrationProject
        {
            get
            {
                return MigrationProject__Implementation__;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                MigrationProject__Implementation__ = (ZBox.App.SchemaMigration.MigrationProject__Implementation__)value;
            }
        }
        
        private int? _fk_MigrationProject;
        private Guid? _fk_guid_MigrationProject = null;
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_MigrationProject_has_SourceTables", "MigrationProject")]
        public ZBox.App.SchemaMigration.MigrationProject__Implementation__ MigrationProject__Implementation__
        {
            get
            {
                EntityReference<ZBox.App.SchemaMigration.MigrationProject__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.MigrationProject__Implementation__>(
                        "Model.FK_MigrationProject_has_SourceTables",
                        "MigrationProject");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
				if(OnMigrationProject_Getter != null)
				{
					var e = new PropertyGetterEventArgs<ZBox.App.SchemaMigration.MigrationProject>(__value);
					OnMigrationProject_Getter(this, e);
					__value = (ZBox.App.SchemaMigration.MigrationProject__Implementation__)e.Result;
				}
                return __value;
            }
            set
            {
                EntityReference<ZBox.App.SchemaMigration.MigrationProject__Implementation__> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.MigrationProject__Implementation__>(
                        "Model.FK_MigrationProject_has_SourceTables",
                        "MigrationProject");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                ZBox.App.SchemaMigration.MigrationProject __oldValue = (ZBox.App.SchemaMigration.MigrationProject)r.Value;
                ZBox.App.SchemaMigration.MigrationProject __newValue = (ZBox.App.SchemaMigration.MigrationProject)value;

                if(OnMigrationProject_PreSetter != null)
                {
					var e = new PropertyPreSetterEventArgs<ZBox.App.SchemaMigration.MigrationProject>(__oldValue, __newValue);
					OnMigrationProject_PreSetter(this, e);
					__newValue = e.Result;
                }
                r.Value = (ZBox.App.SchemaMigration.MigrationProject__Implementation__)__newValue;
                if(OnMigrationProject_PostSetter != null)
                {
					var e = new PropertyPostSetterEventArgs<ZBox.App.SchemaMigration.MigrationProject>(__oldValue, __newValue);
					OnMigrationProject_PostSetter(this, e);
                }
                                
            }
        }
        
        
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceTable, ZBox.App.SchemaMigration.MigrationProject> OnMigrationProject_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceTable, ZBox.App.SchemaMigration.MigrationProject> OnMigrationProject_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceTable, ZBox.App.SchemaMigration.MigrationProject> OnMigrationProject_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
           // Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if(OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Name;
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnName_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnName_PostSetter;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_SourceColumn_belongs_to_SourceTable
    A: ZeroOrMore SourceColumn as SourceColumn
    B: One SourceTable as SourceTable
    Preferred Storage: MergeIntoA
    */
        // object list property
   		// Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectListProperty
	    // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<ZBox.App.SchemaMigration.SourceColumn> SourceColumn
        {
            get
            {
                if (_SourceColumnWrapper == null)
                {
                    _SourceColumnWrapper = new EntityCollectionWrapper<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceColumn__Implementation__>(
                            this.Context, SourceColumn__Implementation__);
                }
                return _SourceColumnWrapper;
            }
        }
        
        [EdmRelationshipNavigationProperty("Model", "FK_SourceColumn_belongs_to_SourceTable", "SourceColumn")]
        public EntityCollection<ZBox.App.SchemaMigration.SourceColumn__Implementation__> SourceColumn__Implementation__
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<ZBox.App.SchemaMigration.SourceColumn__Implementation__>(
                        "Model.FK_SourceColumn_belongs_to_SourceTable",
                        "SourceColumn");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                c.ForEach(i => i.AttachToContext(Context));
                return c;
            }
        }
        private EntityCollectionWrapper<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceColumn__Implementation__> _SourceColumnWrapper;



        public override Type GetImplementedInterface()
        {
            return typeof(SourceTable);
        }

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (SourceTable)obj;
			var otherImpl = (SourceTable__Implementation__)obj;
			var me = (SourceTable)this;

			me.Comment = other.Comment;
			me.Description = other.Description;
			me.Name = other.Name;
			this._fk_MigrationProject = otherImpl._fk_MigrationProject;
		}

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			// fix direct object references

			if (_fk_guid_MigrationProject.HasValue)
				MigrationProject__Implementation__ = (ZBox.App.SchemaMigration.MigrationProject__Implementation__)Context.FindPersistenceObject<ZBox.App.SchemaMigration.MigrationProject>(_fk_guid_MigrationProject.Value);
			else if (_fk_MigrationProject.HasValue)
				MigrationProject__Implementation__ = (ZBox.App.SchemaMigration.MigrationProject__Implementation__)Context.Find<ZBox.App.SchemaMigration.MigrationProject>(_fk_MigrationProject.Value);
			else
				MigrationProject__Implementation__ = null;
		}
        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_SourceTable")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_SourceTable != null)
            {
                OnToString_SourceTable(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<SourceTable> OnToString_SourceTable;

        [EventBasedMethod("OnPreSave_SourceTable")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_SourceTable != null) OnPreSave_SourceTable(this);
        }
        public static event ObjectEventHandler<SourceTable> OnPreSave_SourceTable;

        [EventBasedMethod("OnPostSave_SourceTable")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_SourceTable != null) OnPostSave_SourceTable(this);
        }
        public static event ObjectEventHandler<SourceTable> OnPostSave_SourceTable;

        [EventBasedMethod("OnCreated_SourceTable")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_SourceTable != null) OnCreated_SourceTable(this);
        }
        public static event ObjectEventHandler<SourceTable> OnCreated_SourceTable;

        [EventBasedMethod("OnDeleting_SourceTable")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_SourceTable != null) OnDeleting_SourceTable(this);
        }
        public static event ObjectEventHandler<SourceTable> OnDeleting_SourceTable;


		private static readonly object _propertiesLock = new object();
		private static System.ComponentModel.PropertyDescriptor[] _properties;
		
		private void _InitializePropertyDescriptors(Func<IReadOnlyKistlContext> lazyCtx)
		{
			if (_properties != null) return;
			lock (_propertiesLock)
			{
				// recheck for a lost race after aquiring the lock
				if (_properties != null) return;
				
				_properties = new System.ComponentModel.PropertyDescriptor[] {
					// else
					new CustomPropertyDescriptor<SourceTable__Implementation__, string>(
						lazyCtx,
						new Guid("86a05242-c667-4181-a7a7-1d50d20f9d0f"),
						"Comment",
						null,
						obj => obj.Comment,
						(obj, val) => obj.Comment = val),
					// else
					new CustomPropertyDescriptor<SourceTable__Implementation__, string>(
						lazyCtx,
						new Guid("8b93e1d4-1e2a-44a8-91c3-0c71541934c6"),
						"Description",
						null,
						obj => obj.Description,
						(obj, val) => obj.Description = val),
					// else
					new CustomPropertyDescriptor<SourceTable__Implementation__, ZBox.App.SchemaMigration.MigrationProject>(
						lazyCtx,
						new Guid("b26f101a-69dc-4339-bad7-3120373342a7"),
						"MigrationProject",
						null,
						obj => obj.MigrationProject,
						(obj, val) => obj.MigrationProject = val),
					// else
					new CustomPropertyDescriptor<SourceTable__Implementation__, string>(
						lazyCtx,
						new Guid("f01c1095-cf9b-41f5-b89c-532a86a78cc5"),
						"Name",
						null,
						obj => obj.Name,
						(obj, val) => obj.Name = val),
					// property.IsAssociation() && !property.IsObjectReferencePropertySingle()
					new CustomPropertyDescriptor<SourceTable__Implementation__, ICollection<ZBox.App.SchemaMigration.SourceColumn>>(
						lazyCtx,
						new Guid("0e435261-9490-4fbb-8268-f7f1f6607d2c"),
						"SourceColumn",
						null,
						obj => obj.SourceColumn,
						null), // lists are read-only properties
					// rel: MigrationProject has SourceTables (daf3f4eb-21bc-4ad1-87f1-aef06ade1281)
					// rel: SourceColumn belongs_to SourceTable (cd774e2e-93de-4f45-9fa8-daff40a61511)
				};
			}
		}
		
		protected override void CollectProperties(Func<IReadOnlyKistlContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
		{
			base.CollectProperties(props);
			_InitializePropertyDescriptors(lazyCtx);
			props.AddRange(_properties);
		}
	

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._Comment, binStream);
            BinarySerializer.ToStream(this._Description, binStream);
            BinarySerializer.ToStream(MigrationProject != null ? MigrationProject.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._Name, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._Comment, binStream);
            BinarySerializer.FromStream(out this._Description, binStream);
            BinarySerializer.FromStream(out this._fk_MigrationProject, binStream);
            BinarySerializer.FromStream(out this._Name, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._Comment, xml, "Comment", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(MigrationProject != null ? MigrationProject.ID : (int?)null, xml, "MigrationProject", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._Name, xml, "Name", "ZBox.App.SchemaMigration");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._Comment, xml, "Comment", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._fk_MigrationProject, xml, "MigrationProject", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._Name, xml, "Name", "ZBox.App.SchemaMigration");
        }

#endregion

    }


}