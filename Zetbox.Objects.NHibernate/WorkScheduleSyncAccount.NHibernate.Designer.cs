// <autogenerated/>

namespace Zetbox.App.Calendar
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.API.Utils;
    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.NHibernate;

    /// <summary>
    /// Sync account for work schedules
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("WorkScheduleSyncAccount")]
    public class WorkScheduleSyncAccountNHibernateImpl : Zetbox.App.Calendar.SyncAccountNHibernateImpl, WorkScheduleSyncAccount
    {
        private static readonly Guid _objectClassID = new Guid("ed44a638-a19d-430c-b19f-766a1820fc67");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        public WorkScheduleSyncAccountNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public WorkScheduleSyncAccountNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new WorkScheduleSyncAccountProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public WorkScheduleSyncAccountNHibernateImpl(Func<IFrozenContext> lazyCtx, WorkScheduleSyncAccountProxy proxy)
            : base(lazyCtx, proxy) // pass proxy to parent
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal new readonly WorkScheduleSyncAccountProxy Proxy;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Calendar
        // fkBackingName=this.Proxy.Calendar; fkGuidBackingName=_fk_guid_Calendar;
        // referencedInterface=Zetbox.App.Calendar.Calendar; moduleNamespace=Zetbox.App.Calendar;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Calendar.Calendar Calendar
        {
            get
            {
                Zetbox.App.Calendar.CalendarNHibernateImpl __value = (Zetbox.App.Calendar.CalendarNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Calendar);

                if (OnCalendar_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Calendar.Calendar>(__value);
                    OnCalendar_Getter(this, e);
                    __value = (Zetbox.App.Calendar.CalendarNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.Calendar == null)
                {
                    SetInitializedProperty("Calendar");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Calendar.CalendarNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Calendar);
                var __newValue = (Zetbox.App.Calendar.CalendarNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("Calendar");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Calendar", __oldValue, __newValue);

                if (OnCalendar_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Calendar.Calendar>(__oldValue, __newValue);
                    OnCalendar_PreSetter(this, e);
                    __newValue = (Zetbox.App.Calendar.CalendarNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.Calendar = null;
                }
                else
                {
                    this.Proxy.Calendar = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Calendar", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCalendar_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Calendar.Calendar>(__oldValue, __newValue);
                    OnCalendar_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for Calendar's id, used on dehydration only</summary>
        private int? _fk_Calendar = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Calendar
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkScheduleSyncAccount, Zetbox.App.Calendar.Calendar> OnCalendar_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkScheduleSyncAccount, Zetbox.App.Calendar.Calendar> OnCalendar_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkScheduleSyncAccount, Zetbox.App.Calendar.Calendar> OnCalendar_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkScheduleSyncAccount> OnCalendar_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for WorkSchedule
        // fkBackingName=this.Proxy.WorkSchedule; fkGuidBackingName=_fk_guid_WorkSchedule;
        // referencedInterface=Zetbox.App.Calendar.WorkSchedule; moduleNamespace=Zetbox.App.Calendar;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Calendar.WorkSchedule WorkSchedule
        {
            get
            {
                Zetbox.App.Calendar.WorkScheduleNHibernateImpl __value = (Zetbox.App.Calendar.WorkScheduleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.WorkSchedule);

                if (OnWorkSchedule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Calendar.WorkSchedule>(__value);
                    OnWorkSchedule_Getter(this, e);
                    __value = (Zetbox.App.Calendar.WorkScheduleNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.WorkSchedule == null)
                {
                    SetInitializedProperty("WorkSchedule");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Calendar.WorkScheduleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.WorkSchedule);
                var __newValue = (Zetbox.App.Calendar.WorkScheduleNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("WorkSchedule");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("WorkSchedule", __oldValue, __newValue);

                if (OnWorkSchedule_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Calendar.WorkSchedule>(__oldValue, __newValue);
                    OnWorkSchedule_PreSetter(this, e);
                    __newValue = (Zetbox.App.Calendar.WorkScheduleNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.WorkSchedule = null;
                }
                else
                {
                    this.Proxy.WorkSchedule = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("WorkSchedule", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnWorkSchedule_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Calendar.WorkSchedule>(__oldValue, __newValue);
                    OnWorkSchedule_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for WorkSchedule's id, used on dehydration only</summary>
        private int? _fk_WorkSchedule = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for WorkSchedule
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkScheduleSyncAccount, Zetbox.App.Calendar.WorkSchedule> OnWorkSchedule_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkScheduleSyncAccount, Zetbox.App.Calendar.WorkSchedule> OnWorkSchedule_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkScheduleSyncAccount, Zetbox.App.Calendar.WorkSchedule> OnWorkSchedule_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkScheduleSyncAccount> OnWorkSchedule_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnPerformSync_WorkScheduleSyncAccount")]
        public override void PerformSync()
        {
            // base.PerformSync();
            if (OnPerformSync_WorkScheduleSyncAccount != null)
            {
                OnPerformSync_WorkScheduleSyncAccount(this);
            }
            else
            {
                base.PerformSync();
            }
        }
        public static event PerformSync_Handler<WorkScheduleSyncAccount> OnPerformSync_WorkScheduleSyncAccount;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<WorkScheduleSyncAccount> OnPerformSync_WorkScheduleSyncAccount_CanExec;

        [EventBasedMethod("OnPerformSync_WorkScheduleSyncAccount_CanExec")]
        public override bool PerformSyncCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnPerformSync_WorkScheduleSyncAccount_CanExec != null)
				{
					OnPerformSync_WorkScheduleSyncAccount_CanExec(this, e);
				}
				else
				{
					e.Result = base.PerformSyncCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<WorkScheduleSyncAccount> OnPerformSync_WorkScheduleSyncAccount_CanExecReason;

        [EventBasedMethod("OnPerformSync_WorkScheduleSyncAccount_CanExecReason")]
        public override string PerformSyncCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnPerformSync_WorkScheduleSyncAccount_CanExecReason != null)
				{
					OnPerformSync_WorkScheduleSyncAccount_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.PerformSyncCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(WorkScheduleSyncAccount);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (WorkScheduleSyncAccount)obj;
            var otherImpl = (WorkScheduleSyncAccountNHibernateImpl)obj;
            var me = (WorkScheduleSyncAccount)this;

            this._fk_Calendar = otherImpl._fk_Calendar;
            this._fk_WorkSchedule = otherImpl._fk_WorkSchedule;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "Calendar":
                    {
                        var __oldValue = (Zetbox.App.Calendar.CalendarNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Calendar);
                        var __newValue = (Zetbox.App.Calendar.CalendarNHibernateImpl)parentObj;
                        NotifyPropertyChanging("Calendar", __oldValue, __newValue);
                        this.Proxy.Calendar = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("Calendar", __oldValue, __newValue);
                    }
                    break;
                case "WorkSchedule":
                    {
                        var __oldValue = (Zetbox.App.Calendar.WorkScheduleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.WorkSchedule);
                        var __newValue = (Zetbox.App.Calendar.WorkScheduleNHibernateImpl)parentObj;
                        NotifyPropertyChanging("WorkSchedule", __oldValue, __newValue);
                        this.Proxy.WorkSchedule = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("WorkSchedule", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "Calendar":
                case "WorkSchedule":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_Calendar.HasValue)
                this.Calendar = ((Zetbox.App.Calendar.CalendarNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Calendar.Calendar>(_fk_Calendar.Value));
            else
                this.Calendar = null;

            if (_fk_WorkSchedule.HasValue)
                this.WorkSchedule = ((Zetbox.App.Calendar.WorkScheduleNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Calendar.WorkSchedule>(_fk_WorkSchedule.Value));
            else
                this.WorkSchedule = null;
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorNHibernateImpl<WorkScheduleSyncAccount, Zetbox.App.Calendar.Calendar>(
                        lazyCtx,
                        new Guid("f67558bb-7415-4a41-9196-7c39426746df"),
                        "Calendar",
                        null,
                        obj => obj.Calendar,
                        (obj, val) => obj.Calendar = val,
						obj => OnCalendar_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<WorkScheduleSyncAccount, Zetbox.App.Calendar.WorkSchedule>(
                        lazyCtx,
                        new Guid("72dcb583-17bc-4247-a7c1-39f607b4905c"),
                        "WorkSchedule",
                        null,
                        obj => obj.WorkSchedule,
                        (obj, val) => obj.WorkSchedule = val,
						obj => OnWorkSchedule_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_WorkScheduleSyncAccount")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_WorkScheduleSyncAccount != null)
            {
                OnToString_WorkScheduleSyncAccount(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<WorkScheduleSyncAccount> OnToString_WorkScheduleSyncAccount;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_WorkScheduleSyncAccount")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.IsValid = b.IsValid;
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_WorkScheduleSyncAccount != null)
            {
                OnObjectIsValid_WorkScheduleSyncAccount(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<WorkScheduleSyncAccount> OnObjectIsValid_WorkScheduleSyncAccount;

        [EventBasedMethod("OnNotifyPreSave_WorkScheduleSyncAccount")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_WorkScheduleSyncAccount != null) OnNotifyPreSave_WorkScheduleSyncAccount(this);
        }
        public static event ObjectEventHandler<WorkScheduleSyncAccount> OnNotifyPreSave_WorkScheduleSyncAccount;

        [EventBasedMethod("OnNotifyPostSave_WorkScheduleSyncAccount")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_WorkScheduleSyncAccount != null) OnNotifyPostSave_WorkScheduleSyncAccount(this);
        }
        public static event ObjectEventHandler<WorkScheduleSyncAccount> OnNotifyPostSave_WorkScheduleSyncAccount;

        [EventBasedMethod("OnNotifyCreated_WorkScheduleSyncAccount")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("Calendar");
            SetNotInitializedProperty("WorkSchedule");
            base.NotifyCreated();
            if (OnNotifyCreated_WorkScheduleSyncAccount != null) OnNotifyCreated_WorkScheduleSyncAccount(this);
        }
        public static event ObjectEventHandler<WorkScheduleSyncAccount> OnNotifyCreated_WorkScheduleSyncAccount;

        [EventBasedMethod("OnNotifyDeleting_WorkScheduleSyncAccount")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_WorkScheduleSyncAccount != null) OnNotifyDeleting_WorkScheduleSyncAccount(this);

            // FK_SyncAccount_for_Calendar
            if (Calendar != null) {
                ((NHibernatePersistenceObject)Calendar).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)Calendar);
            }
            // FK_SyncAccount_of_WorkSchedule
            if (WorkSchedule != null) {
                ((NHibernatePersistenceObject)WorkSchedule).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)WorkSchedule);
            }

            Calendar = null;
            WorkSchedule = null;
        }
        public static event ObjectEventHandler<WorkScheduleSyncAccount> OnNotifyDeleting_WorkScheduleSyncAccount;

        #endregion // Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        public class WorkScheduleSyncAccountProxy
            : Zetbox.App.Calendar.SyncAccountNHibernateImpl.SyncAccountProxy
        {
            public WorkScheduleSyncAccountProxy()
            {
            }

            public override Type ZetboxWrapper { get { return typeof(WorkScheduleSyncAccountNHibernateImpl); } }

            public override Type ZetboxProxy { get { return typeof(WorkScheduleSyncAccountProxy); } }

            public virtual Zetbox.App.Calendar.CalendarNHibernateImpl.CalendarProxy Calendar { get; set; }

            public virtual Zetbox.App.Calendar.WorkScheduleNHibernateImpl.WorkScheduleProxy WorkSchedule { get; set; }

        }

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.Calendar != null ? OurContext.GetIdFromProxy(this.Proxy.Calendar) : (int?)null);
            binStream.Write(this.Proxy.WorkSchedule != null ? OurContext.GetIdFromProxy(this.Proxy.WorkSchedule) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_Calendar);
            binStream.Read(out this._fk_WorkSchedule);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

    }
}