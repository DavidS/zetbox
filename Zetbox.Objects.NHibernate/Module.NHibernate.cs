// <autogenerated/>

namespace Zetbox.Objects
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Autofac;
	using Zetbox.API;
    using global::NHibernate;
    using global::NHibernate.Cfg;
    using Zetbox.API.Configuration;
    using Zetbox.API.Utils;
    using Zetbox.App.Extensions;
    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.NHibernate;

    public class NHibernateModule
        : Autofac.Module
    {
        protected override void Load(ContainerBuilder builder)
        {
            base.Load(builder);


            builder
                .Register<NHibernateImplementationTypeChecker>(
                    c => new NHibernateImplementationTypeChecker(
                        c.Resolve<Func<IEnumerable<IImplementationTypeChecker>>>()))
                .As<INHibernateImplementationTypeChecker>()
                .As<IImplementationTypeChecker>()
                .InstancePerDependency();
                
            builder
                .Register<NHibernateActionsManager>(
                    c => new NHibernateActionsManager(
                        c.Resolve<ILifetimeScope>(),
                        c.Resolve<IDeploymentRestrictor>()))
                .As<INHibernateActionsManager>()
                .InstancePerLifetimeScope();

            builder
                .Register<ISessionFactory>(
                    c => {
                        var zetboxConfig = c.Resolve<ZetboxConfig>();
                        using (Logging.Log.InfoTraceMethodCall("Init NH Session Factory"))
                        {
                            var result = new Configuration();
                            var connectionString = zetboxConfig.Server.GetConnectionString(Zetbox.API.Helper.ZetboxConnectionStringKey);
                            result.Properties["dialect"] = connectionString.DatabaseProvider;
                            result.Properties["connection.connection_string"] = connectionString.ConnectionString;
                            result.Properties["max_fetch_depth"] = "1"; // keep SQL statements small

                            return result
                                .AddAssembly(typeof(NHibernateModule).Assembly)
                                .BuildSessionFactory();
                        }
                    })
                .SingleInstance();
        }
    }


    internal sealed class NHibernateImplementationTypeChecker
        : Zetbox.API.BaseImplementationTypeChecker, INHibernateImplementationTypeChecker
    {
        public NHibernateImplementationTypeChecker(Func<IEnumerable<IImplementationTypeChecker>> implTypeCheckersFactory)
            : base(implTypeCheckersFactory)
        {
        }

        protected override System.Reflection.Assembly GetAssembly()
        {
            return typeof(NHibernateImplementationTypeChecker).Assembly;
        }
    }

    // marker class to provide stable and correct assembly reference
    internal sealed class NHibernateActionsManager
        : BaseCustomActionsManager, INHibernateActionsManager
    {
        private static object _syncRoot = new object();
        private static bool _isInitialised = false;

        protected override object SyncRoot { get { return _syncRoot; } }
        protected override bool IsInitialised
        {
            get { return _isInitialised; }
            set { _isInitialised = value; }
        }

        public NHibernateActionsManager(ILifetimeScope container, IDeploymentRestrictor restrictor)
            : base(container, restrictor, "NHibernateImpl")
        {
        }
    }
}
