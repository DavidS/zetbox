// <autogenerated/>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using System.Xml.Serialization;
using System.Linq;

using Zetbox.API;
using Zetbox.DalProvider.Base.RelationWrappers;
using Zetbox.API.Utils;
using Zetbox.DalProvider.Base;
using Zetbox.DalProvider.NHibernate;

namespace Zetbox.App.Base
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryNHibernateImpl")]
    public class CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.Base.CalculatedObjectReferenceProperty, Zetbox.App.Base.CalculatedObjectReferencePropertyNHibernateImpl, Zetbox.App.Base.Property, Zetbox.App.Base.PropertyNHibernateImpl>, CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        public CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryProxy Proxy;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.ExportGuid;
                if (this.Proxy.ExportGuid == Guid.Empty) {
                    __result = this.Proxy.ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("47595643-e8d0-48ef-82c7-2d24de8a784e");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Base.CalculatedObjectReferenceProperty)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Property)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Base.CalculatedObjectReferenceProperty; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.CalculatedObjectReferenceProperty A
        {
            get
            {
                Zetbox.App.Base.CalculatedObjectReferencePropertyNHibernateImpl __value = (Zetbox.App.Base.CalculatedObjectReferencePropertyNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.CalculatedObjectReferencePropertyNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.Base.CalculatedObjectReferencePropertyNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;

        /// <summary>Backing store for A's guid, used on import only</summary>
        private Guid? _fk_guid_A = null;

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Property; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Property B
        {
            get
            {
                Zetbox.App.Base.PropertyNHibernateImpl __value = (Zetbox.App.Base.PropertyNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.PropertyNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.Base.PropertyNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;

        /// <summary>Backing store for B's guid, used on import only</summary>
        private Guid? _fk_guid_B = null;

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.ExportGuid);
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this.Proxy.ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.A != null ? this.Proxy.A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.B != null ? this.Proxy.B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|ExportGuid":
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.Base|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryNHibernateImpl)obj;
            var me = (CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                this.A = ((Zetbox.App.Base.CalculatedObjectReferencePropertyNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.CalculatedObjectReferenceProperty>(_fk_guid_A.Value));
            else
            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.Base.CalculatedObjectReferencePropertyNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.CalculatedObjectReferenceProperty>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_guid_B.HasValue)
                this.B = ((Zetbox.App.Base.PropertyNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Property>(_fk_guid_B.Value));
            else
            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.Base.PropertyNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Property>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryProxy); } }

            public virtual Zetbox.App.Base.CalculatedObjectReferencePropertyNHibernateImpl.CalculatedObjectReferencePropertyProxy A { get; set; }

            public virtual Zetbox.App.Base.PropertyNHibernateImpl.PropertyProxy B { get; set; }

            public virtual Guid ExportGuid { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Base
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("DataType_implements_Interface_RelationEntryNHibernateImpl")]
    public class DataType_implements_Interface_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.Base.DataType, Zetbox.App.Base.DataTypeNHibernateImpl, Zetbox.App.Base.Interface, Zetbox.App.Base.InterfaceNHibernateImpl>, DataType_implements_Interface_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        public DataType_implements_Interface_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public DataType_implements_Interface_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new DataType_implements_Interface_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public DataType_implements_Interface_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, DataType_implements_Interface_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly DataType_implements_Interface_RelationEntryProxy Proxy;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.ExportGuid;
                if (this.Proxy.ExportGuid == Guid.Empty) {
                    __result = this.Proxy.ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("692c1064-37a2-4be3-a81e-4cb91f673aa3");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Base.DataType)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Interface)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Base.DataType; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.DataType A
        {
            get
            {
                Zetbox.App.Base.DataTypeNHibernateImpl __value = (Zetbox.App.Base.DataTypeNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.DataTypeNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.Base.DataTypeNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;

        /// <summary>Backing store for A's guid, used on import only</summary>
        private Guid? _fk_guid_A = null;

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Interface; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Interface B
        {
            get
            {
                Zetbox.App.Base.InterfaceNHibernateImpl __value = (Zetbox.App.Base.InterfaceNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.InterfaceNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.Base.InterfaceNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;

        /// <summary>Backing store for B's guid, used on import only</summary>
        private Guid? _fk_guid_B = null;

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.ExportGuid);
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this.Proxy.ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.A != null ? this.Proxy.A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.B != null ? this.Proxy.B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|ExportGuid":
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.Base|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(DataType_implements_Interface_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (DataType_implements_Interface_RelationEntryNHibernateImpl)obj;
            var me = (DataType_implements_Interface_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                this.A = ((Zetbox.App.Base.DataTypeNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.DataType>(_fk_guid_A.Value));
            else
            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.Base.DataTypeNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.DataType>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_guid_B.HasValue)
                this.B = ((Zetbox.App.Base.InterfaceNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Interface>(_fk_guid_B.Value));
            else
            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.Base.InterfaceNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Interface>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class DataType_implements_Interface_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public DataType_implements_Interface_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(DataType_implements_Interface_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(DataType_implements_Interface_RelationEntryProxy); } }

            public virtual Zetbox.App.Base.DataTypeNHibernateImpl.DataTypeProxy A { get; set; }

            public virtual Zetbox.App.Base.InterfaceNHibernateImpl.InterfaceProxy B { get; set; }

            public virtual Guid ExportGuid { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace at.dasz.DocumentManagement
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("Document_has_Blob_RelationEntryNHibernateImpl")]
    public class Document_has_Blob_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<at.dasz.DocumentManagement.Document, at.dasz.DocumentManagement.DocumentNHibernateImpl, Zetbox.App.Base.Blob, Zetbox.App.Base.BlobNHibernateImpl>, Document_has_Blob_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        public Document_has_Blob_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public Document_has_Blob_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new Document_has_Blob_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public Document_has_Blob_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, Document_has_Blob_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly Document_has_Blob_RelationEntryProxy Proxy;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.ExportGuid;
                if (this.Proxy.ExportGuid == Guid.Empty) {
                    __result = this.Proxy.ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("69d27812-e981-443b-a94b-dfe1a95f3aad");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (at.dasz.DocumentManagement.Document)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Blob)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=at.dasz.DocumentManagement.Document; moduleNamespace=at.dasz.DocumentManagement;
        // inverse Navigator=none; is reference;
        // PositionStorage=A_pos;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.DocumentManagement.Document A
        {
            get
            {
                at.dasz.DocumentManagement.DocumentNHibernateImpl __value = (at.dasz.DocumentManagement.DocumentNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (at.dasz.DocumentManagement.DocumentNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (at.dasz.DocumentManagement.DocumentNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;

        /// <summary>Backing store for A's guid, used on import only</summary>
        private Guid? _fk_guid_A = null;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        public virtual int? A_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.A_pos != value)
                {
                    var __oldValue = Proxy.A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    Proxy.A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("A_pos");
				}
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Blob; moduleNamespace=at.dasz.DocumentManagement;
        // inverse Navigator=none; is reference;
        // PositionStorage=B_pos;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Blob B
        {
            get
            {
                Zetbox.App.Base.BlobNHibernateImpl __value = (Zetbox.App.Base.BlobNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.BlobNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.Base.BlobNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;

        /// <summary>Backing store for B's guid, used on import only</summary>
        private Guid? _fk_guid_B = null;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        public virtual int? B_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.B_pos != value)
                {
                    var __oldValue = Proxy.B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    Proxy.B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("B_pos");
				}
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public int? AIndex
        {
            get { return this.A_pos; }
            set { this.A_pos = (int?)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public int? BIndex
        {
            get { return this.B_pos; }
            set { this.B_pos = (int?)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.ExportGuid);
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.A_pos);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
            binStream.Write(this.Proxy.B_pos);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this.Proxy.ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            this.Proxy.A_pos = binStream.ReadNullableInt32();
            binStream.Read(out this._fk_B);
            this.Proxy.B_pos = binStream.ReadNullableInt32();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(this.Proxy.A != null ? this.Proxy.A.ExportGuid : (Guid?)null, xml, "A", "at.dasz.DocumentManagement");
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(this.Proxy.A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(this.Proxy.B != null ? this.Proxy.B.ExportGuid : (Guid?)null, xml, "B", "at.dasz.DocumentManagement");
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(this.Proxy.B_pos, xml, "B_pos", "at.dasz.DocumentManagement");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "at.dasz.DocumentManagement|ExportGuid":
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "at.dasz.DocumentManagement|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "at.dasz.DocumentManagement|A_pos":
                this.Proxy.A_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            case "at.dasz.DocumentManagement|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "at.dasz.DocumentManagement|B_pos":
                this.Proxy.B_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Document_has_Blob_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Document_has_Blob_RelationEntryNHibernateImpl)obj;
            var me = (Document_has_Blob_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me.AIndex = other.AIndex;
            me._fk_B = other._fk_B;
            me.BIndex = other.BIndex;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                this.A = ((at.dasz.DocumentManagement.DocumentNHibernateImpl)OurContext.FindPersistenceObject<at.dasz.DocumentManagement.Document>(_fk_guid_A.Value));
            else
            if (_fk_A.HasValue)
                this.A = ((at.dasz.DocumentManagement.DocumentNHibernateImpl)OurContext.FindPersistenceObject<at.dasz.DocumentManagement.Document>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_guid_B.HasValue)
                this.B = ((Zetbox.App.Base.BlobNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Blob>(_fk_guid_B.Value));
            else
            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.Base.BlobNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Blob>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class Document_has_Blob_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public Document_has_Blob_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(Document_has_Blob_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(Document_has_Blob_RelationEntryProxy); } }

            public virtual at.dasz.DocumentManagement.DocumentNHibernateImpl.DocumentProxy A { get; set; }

            public virtual Zetbox.App.Base.BlobNHibernateImpl.BlobProxy B { get; set; }

            public virtual int? A_pos { get; set; }

            public virtual int? B_pos { get; set; }

            public virtual Guid ExportGuid { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Base
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("Identity_memberOf_Group_RelationEntryNHibernateImpl")]
    public class Identity_memberOf_Group_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.Base.Identity, Zetbox.App.Base.IdentityNHibernateImpl, Zetbox.App.Base.Group, Zetbox.App.Base.GroupNHibernateImpl>, Identity_memberOf_Group_RelationEntry
    {
        public Identity_memberOf_Group_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public Identity_memberOf_Group_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new Identity_memberOf_Group_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public Identity_memberOf_Group_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, Identity_memberOf_Group_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly Identity_memberOf_Group_RelationEntryProxy Proxy;
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("3efb7ae8-ba6b-40e3-9482-b45d1c101743");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Base.Identity)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Group)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Identity A
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Group; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Group B
        {
            get
            {
                Zetbox.App.Base.GroupNHibernateImpl __value = (Zetbox.App.Base.GroupNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.GroupNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.Base.GroupNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Identity_memberOf_Group_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Identity_memberOf_Group_RelationEntryNHibernateImpl)obj;
            var me = (Identity_memberOf_Group_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.Base.GroupNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Group>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class Identity_memberOf_Group_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public Identity_memberOf_Group_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(Identity_memberOf_Group_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(Identity_memberOf_Group_RelationEntryProxy); } }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy A { get; set; }

            public virtual Zetbox.App.Base.GroupNHibernateImpl.GroupProxy B { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Base
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("IndexConstraint_ensures_unique_on_Property_RelationEntryNHibernateImpl")]
    public class IndexConstraint_ensures_unique_on_Property_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.Base.IndexConstraint, Zetbox.App.Base.IndexConstraintNHibernateImpl, Zetbox.App.Base.Property, Zetbox.App.Base.PropertyNHibernateImpl>, IndexConstraint_ensures_unique_on_Property_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        public IndexConstraint_ensures_unique_on_Property_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public IndexConstraint_ensures_unique_on_Property_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new IndexConstraint_ensures_unique_on_Property_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public IndexConstraint_ensures_unique_on_Property_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, IndexConstraint_ensures_unique_on_Property_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly IndexConstraint_ensures_unique_on_Property_RelationEntryProxy Proxy;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.ExportGuid;
                if (this.Proxy.ExportGuid == Guid.Empty) {
                    __result = this.Proxy.ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("29235ba6-5979-4ed8-8e75-6bd0837c7f28");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Base.IndexConstraint)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Property)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Base.IndexConstraint; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.IndexConstraint A
        {
            get
            {
                Zetbox.App.Base.IndexConstraintNHibernateImpl __value = (Zetbox.App.Base.IndexConstraintNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IndexConstraintNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.Base.IndexConstraintNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;

        /// <summary>Backing store for A's guid, used on import only</summary>
        private Guid? _fk_guid_A = null;

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Property; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Property B
        {
            get
            {
                Zetbox.App.Base.PropertyNHibernateImpl __value = (Zetbox.App.Base.PropertyNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.PropertyNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.Base.PropertyNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;

        /// <summary>Backing store for B's guid, used on import only</summary>
        private Guid? _fk_guid_B = null;

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.ExportGuid);
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this.Proxy.ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.A != null ? this.Proxy.A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.B != null ? this.Proxy.B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|ExportGuid":
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.Base|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(IndexConstraint_ensures_unique_on_Property_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (IndexConstraint_ensures_unique_on_Property_RelationEntryNHibernateImpl)obj;
            var me = (IndexConstraint_ensures_unique_on_Property_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                this.A = ((Zetbox.App.Base.IndexConstraintNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.IndexConstraint>(_fk_guid_A.Value));
            else
            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.Base.IndexConstraintNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.IndexConstraint>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_guid_B.HasValue)
                this.B = ((Zetbox.App.Base.PropertyNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Property>(_fk_guid_B.Value));
            else
            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.Base.PropertyNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Property>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class IndexConstraint_ensures_unique_on_Property_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public IndexConstraint_ensures_unique_on_Property_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(IndexConstraint_ensures_unique_on_Property_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(IndexConstraint_ensures_unique_on_Property_RelationEntryProxy); } }

            public virtual Zetbox.App.Base.IndexConstraintNHibernateImpl.IndexConstraintProxy A { get; set; }

            public virtual Zetbox.App.Base.PropertyNHibernateImpl.PropertyProxy B { get; set; }

            public virtual Guid ExportGuid { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Test
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("Muhblah_has_TestCustomObject_RelationEntryNHibernateImpl")]
    public class Muhblah_has_TestCustomObject_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.Test.Muhblah, Zetbox.App.Test.MuhblahNHibernateImpl, Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.TestCustomObjectNHibernateImpl>, Muhblah_has_TestCustomObject_RelationEntry
    {
        public Muhblah_has_TestCustomObject_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public Muhblah_has_TestCustomObject_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new Muhblah_has_TestCustomObject_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public Muhblah_has_TestCustomObject_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, Muhblah_has_TestCustomObject_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly Muhblah_has_TestCustomObject_RelationEntryProxy Proxy;
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("d1e0da3e-ce64-4587-b62d-70c0f4371d97");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Test.Muhblah)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Test.TestCustomObject)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Test.Muhblah; moduleNamespace=Zetbox.App.Test;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Test.Muhblah A
        {
            get
            {
                Zetbox.App.Test.MuhblahNHibernateImpl __value = (Zetbox.App.Test.MuhblahNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Test.MuhblahNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.Test.MuhblahNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Test.TestCustomObject; moduleNamespace=Zetbox.App.Test;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Test.TestCustomObject B
        {
            get
            {
                Zetbox.App.Test.TestCustomObjectNHibernateImpl __value = (Zetbox.App.Test.TestCustomObjectNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Test.TestCustomObjectNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.Test.TestCustomObjectNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Muhblah_has_TestCustomObject_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Muhblah_has_TestCustomObject_RelationEntryNHibernateImpl)obj;
            var me = (Muhblah_has_TestCustomObject_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.Test.MuhblahNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Test.Muhblah>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.Test.TestCustomObjectNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Test.TestCustomObject>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class Muhblah_has_TestCustomObject_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public Muhblah_has_TestCustomObject_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(Muhblah_has_TestCustomObject_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(Muhblah_has_TestCustomObject_RelationEntryProxy); } }

            public virtual Zetbox.App.Test.MuhblahNHibernateImpl.MuhblahProxy A { get; set; }

            public virtual Zetbox.App.Test.TestCustomObjectNHibernateImpl.TestCustomObjectProxy B { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Test
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryNHibernateImpl")]
    public class N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.Test.N_to_M_relations_A, Zetbox.App.Test.N_to_M_relations_ANHibernateImpl, Zetbox.App.Test.N_to_M_relations_B, Zetbox.App.Test.N_to_M_relations_BNHibernateImpl>, N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntry
    {
        public N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryProxy Proxy;
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("3555da6e-0e9b-4f7c-903e-a51f3cce7cd9");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Test.N_to_M_relations_A)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Test.N_to_M_relations_B)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Test.N_to_M_relations_A; moduleNamespace=Zetbox.App.Test;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Test.N_to_M_relations_A A
        {
            get
            {
                Zetbox.App.Test.N_to_M_relations_ANHibernateImpl __value = (Zetbox.App.Test.N_to_M_relations_ANHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Test.N_to_M_relations_ANHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.Test.N_to_M_relations_ANHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Test.N_to_M_relations_B; moduleNamespace=Zetbox.App.Test;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Test.N_to_M_relations_B B
        {
            get
            {
                Zetbox.App.Test.N_to_M_relations_BNHibernateImpl __value = (Zetbox.App.Test.N_to_M_relations_BNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Test.N_to_M_relations_BNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.Test.N_to_M_relations_BNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryNHibernateImpl)obj;
            var me = (N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.Test.N_to_M_relations_ANHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Test.N_to_M_relations_A>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.Test.N_to_M_relations_BNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Test.N_to_M_relations_B>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryProxy); } }

            public virtual Zetbox.App.Test.N_to_M_relations_ANHibernateImpl.N_to_M_relations_AProxy A { get; set; }

            public virtual Zetbox.App.Test.N_to_M_relations_BNHibernateImpl.N_to_M_relations_BProxy B { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.GUI
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("NavigationEntry_accessed_by_Group_RelationEntryNHibernateImpl")]
    public class NavigationEntry_accessed_by_Group_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.GUI.NavigationEntry, Zetbox.App.GUI.NavigationEntryNHibernateImpl, Zetbox.App.Base.Group, Zetbox.App.Base.GroupNHibernateImpl>, NavigationEntry_accessed_by_Group_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        public NavigationEntry_accessed_by_Group_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public NavigationEntry_accessed_by_Group_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new NavigationEntry_accessed_by_Group_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public NavigationEntry_accessed_by_Group_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, NavigationEntry_accessed_by_Group_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly NavigationEntry_accessed_by_Group_RelationEntryProxy Proxy;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.ExportGuid;
                if (this.Proxy.ExportGuid == Guid.Empty) {
                    __result = this.Proxy.ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("b88c12ac-eabe-4aee-913e-5edd9d2a193a");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.GUI.NavigationEntry)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Group)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.GUI.NavigationEntry; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.NavigationEntry A
        {
            get
            {
                Zetbox.App.GUI.NavigationEntryNHibernateImpl __value = (Zetbox.App.GUI.NavigationEntryNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.GUI.NavigationEntryNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.GUI.NavigationEntryNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;

        /// <summary>Backing store for A's guid, used on import only</summary>
        private Guid? _fk_guid_A = null;

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Group; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Group B
        {
            get
            {
                Zetbox.App.Base.GroupNHibernateImpl __value = (Zetbox.App.Base.GroupNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.GroupNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.Base.GroupNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;

        /// <summary>Backing store for B's guid, used on import only</summary>
        private Guid? _fk_guid_B = null;

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.ExportGuid);
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this.Proxy.ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.A != null ? this.Proxy.A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.B != null ? this.Proxy.B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.GUI|ExportGuid":
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.GUI|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(NavigationEntry_accessed_by_Group_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (NavigationEntry_accessed_by_Group_RelationEntryNHibernateImpl)obj;
            var me = (NavigationEntry_accessed_by_Group_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                this.A = ((Zetbox.App.GUI.NavigationEntryNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.NavigationEntry>(_fk_guid_A.Value));
            else
            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.GUI.NavigationEntryNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.NavigationEntry>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_guid_B.HasValue)
                this.B = ((Zetbox.App.Base.GroupNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Group>(_fk_guid_B.Value));
            else
            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.Base.GroupNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Group>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class NavigationEntry_accessed_by_Group_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public NavigationEntry_accessed_by_Group_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(NavigationEntry_accessed_by_Group_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(NavigationEntry_accessed_by_Group_RelationEntryProxy); } }

            public virtual Zetbox.App.GUI.NavigationEntryNHibernateImpl.NavigationEntryProxy A { get; set; }

            public virtual Zetbox.App.Base.GroupNHibernateImpl.GroupProxy B { get; set; }

            public virtual Guid ExportGuid { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.GUI
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("ObjectReferenceProperty_shows_Method_RelationEntryNHibernateImpl")]
    public class ObjectReferenceProperty_shows_Method_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.Base.ObjectReferenceProperty, Zetbox.App.Base.ObjectReferencePropertyNHibernateImpl, Zetbox.App.Base.Method, Zetbox.App.Base.MethodNHibernateImpl>, ObjectReferenceProperty_shows_Method_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        public ObjectReferenceProperty_shows_Method_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public ObjectReferenceProperty_shows_Method_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new ObjectReferenceProperty_shows_Method_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public ObjectReferenceProperty_shows_Method_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, ObjectReferenceProperty_shows_Method_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly ObjectReferenceProperty_shows_Method_RelationEntryProxy Proxy;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.ExportGuid;
                if (this.Proxy.ExportGuid == Guid.Empty) {
                    __result = this.Proxy.ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("02b3e9d5-fc2e-4ffe-8867-0977b88437cc");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Base.ObjectReferenceProperty)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Method)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Base.ObjectReferenceProperty; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.ObjectReferenceProperty A
        {
            get
            {
                Zetbox.App.Base.ObjectReferencePropertyNHibernateImpl __value = (Zetbox.App.Base.ObjectReferencePropertyNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.ObjectReferencePropertyNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.Base.ObjectReferencePropertyNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;

        /// <summary>Backing store for A's guid, used on import only</summary>
        private Guid? _fk_guid_A = null;

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Method; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Method B
        {
            get
            {
                Zetbox.App.Base.MethodNHibernateImpl __value = (Zetbox.App.Base.MethodNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.MethodNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.Base.MethodNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;

        /// <summary>Backing store for B's guid, used on import only</summary>
        private Guid? _fk_guid_B = null;

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.ExportGuid);
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this.Proxy.ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.A != null ? this.Proxy.A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.B != null ? this.Proxy.B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.GUI|ExportGuid":
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.GUI|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(ObjectReferenceProperty_shows_Method_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ObjectReferenceProperty_shows_Method_RelationEntryNHibernateImpl)obj;
            var me = (ObjectReferenceProperty_shows_Method_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                this.A = ((Zetbox.App.Base.ObjectReferencePropertyNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.ObjectReferenceProperty>(_fk_guid_A.Value));
            else
            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.Base.ObjectReferencePropertyNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.ObjectReferenceProperty>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_guid_B.HasValue)
                this.B = ((Zetbox.App.Base.MethodNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Method>(_fk_guid_B.Value));
            else
            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.Base.MethodNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Method>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class ObjectReferenceProperty_shows_Method_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public ObjectReferenceProperty_shows_Method_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(ObjectReferenceProperty_shows_Method_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(ObjectReferenceProperty_shows_Method_RelationEntryProxy); } }

            public virtual Zetbox.App.Base.ObjectReferencePropertyNHibernateImpl.ObjectReferencePropertyProxy A { get; set; }

            public virtual Zetbox.App.Base.MethodNHibernateImpl.MethodProxy B { get; set; }

            public virtual Guid ExportGuid { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Projekte
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("Projekt_haben_Mitarbeiter_RelationEntryNHibernateImpl")]
    public class Projekt_haben_Mitarbeiter_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.Projekte.Projekt, Zetbox.App.Projekte.ProjektNHibernateImpl, Zetbox.App.Projekte.Mitarbeiter, Zetbox.App.Projekte.MitarbeiterNHibernateImpl>, Projekt_haben_Mitarbeiter_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        public Projekt_haben_Mitarbeiter_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public Projekt_haben_Mitarbeiter_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new Projekt_haben_Mitarbeiter_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public Projekt_haben_Mitarbeiter_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, Projekt_haben_Mitarbeiter_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly Projekt_haben_Mitarbeiter_RelationEntryProxy Proxy;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.ExportGuid;
                if (this.Proxy.ExportGuid == Guid.Empty) {
                    __result = this.Proxy.ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("c7b3cf10-cdc8-454c-826c-04a0f7e5ef3e");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Projekte.Projekt)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Projekte.Mitarbeiter)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Projekte.Projekt; moduleNamespace=Zetbox.App.Projekte;
        // inverse Navigator=none; is reference;
        // PositionStorage=A_pos;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Projekte.Projekt A
        {
            get
            {
                Zetbox.App.Projekte.ProjektNHibernateImpl __value = (Zetbox.App.Projekte.ProjektNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Projekte.ProjektNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.Projekte.ProjektNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;

        /// <summary>Backing store for A's guid, used on import only</summary>
        private Guid? _fk_guid_A = null;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        public virtual int? A_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.A_pos != value)
                {
                    var __oldValue = Proxy.A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    Proxy.A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("A_pos");
				}
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Projekte.Mitarbeiter; moduleNamespace=Zetbox.App.Projekte;
        // inverse Navigator=none; is reference;
        // PositionStorage=B_pos;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Projekte.Mitarbeiter B
        {
            get
            {
                Zetbox.App.Projekte.MitarbeiterNHibernateImpl __value = (Zetbox.App.Projekte.MitarbeiterNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Projekte.MitarbeiterNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.Projekte.MitarbeiterNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;

        /// <summary>Backing store for B's guid, used on import only</summary>
        private Guid? _fk_guid_B = null;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        public virtual int? B_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.B_pos != value)
                {
                    var __oldValue = Proxy.B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    Proxy.B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("B_pos");
				}
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public int? AIndex
        {
            get { return this.A_pos; }
            set { this.A_pos = (int?)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public int? BIndex
        {
            get { return this.B_pos; }
            set { this.B_pos = (int?)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.ExportGuid);
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.A_pos);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
            binStream.Write(this.Proxy.B_pos);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this.Proxy.ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            this.Proxy.A_pos = binStream.ReadNullableInt32();
            binStream.Read(out this._fk_B);
            this.Proxy.B_pos = binStream.ReadNullableInt32();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this.Proxy.A != null ? this.Proxy.A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this.Proxy.A_pos, xml, "A_pos", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this.Proxy.B != null ? this.Proxy.B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this.Proxy.B_pos, xml, "B_pos", "Zetbox.App.Projekte");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Projekte|ExportGuid":
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.Projekte|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Projekte|A_pos":
                this.Proxy.A_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            case "Zetbox.App.Projekte|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Projekte|B_pos":
                this.Proxy.B_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Projekt_haben_Mitarbeiter_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Projekt_haben_Mitarbeiter_RelationEntryNHibernateImpl)obj;
            var me = (Projekt_haben_Mitarbeiter_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me.AIndex = other.AIndex;
            me._fk_B = other._fk_B;
            me.BIndex = other.BIndex;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                this.A = ((Zetbox.App.Projekte.ProjektNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Projekte.Projekt>(_fk_guid_A.Value));
            else
            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.Projekte.ProjektNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Projekte.Projekt>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_guid_B.HasValue)
                this.B = ((Zetbox.App.Projekte.MitarbeiterNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Projekte.Mitarbeiter>(_fk_guid_B.Value));
            else
            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.Projekte.MitarbeiterNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Projekte.Mitarbeiter>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class Projekt_haben_Mitarbeiter_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public Projekt_haben_Mitarbeiter_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(Projekt_haben_Mitarbeiter_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(Projekt_haben_Mitarbeiter_RelationEntryProxy); } }

            public virtual Zetbox.App.Projekte.ProjektNHibernateImpl.ProjektProxy A { get; set; }

            public virtual Zetbox.App.Projekte.MitarbeiterNHibernateImpl.MitarbeiterProxy B { get; set; }

            public virtual int? A_pos { get; set; }

            public virtual int? B_pos { get; set; }

            public virtual Guid ExportGuid { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Base
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("RoleMembership_resolves_Relation_RelationEntryNHibernateImpl")]
    public class RoleMembership_resolves_Relation_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.Base.RoleMembership, Zetbox.App.Base.RoleMembershipNHibernateImpl, Zetbox.App.Base.Relation, Zetbox.App.Base.RelationNHibernateImpl>, RoleMembership_resolves_Relation_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        public RoleMembership_resolves_Relation_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public RoleMembership_resolves_Relation_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new RoleMembership_resolves_Relation_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public RoleMembership_resolves_Relation_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, RoleMembership_resolves_Relation_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly RoleMembership_resolves_Relation_RelationEntryProxy Proxy;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.ExportGuid;
                if (this.Proxy.ExportGuid == Guid.Empty) {
                    __result = this.Proxy.ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("f74d425f-e733-4cba-baca-f4a05fbc0a80");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Base.RoleMembership)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Relation)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Base.RoleMembership; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=A_pos;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.RoleMembership A
        {
            get
            {
                Zetbox.App.Base.RoleMembershipNHibernateImpl __value = (Zetbox.App.Base.RoleMembershipNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.RoleMembershipNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.Base.RoleMembershipNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;

        /// <summary>Backing store for A's guid, used on import only</summary>
        private Guid? _fk_guid_A = null;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        public virtual int? A_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.A_pos != value)
                {
                    var __oldValue = Proxy.A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    Proxy.A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("A_pos");
				}
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Relation; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=B_pos;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Relation B
        {
            get
            {
                Zetbox.App.Base.RelationNHibernateImpl __value = (Zetbox.App.Base.RelationNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.RelationNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.Base.RelationNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;

        /// <summary>Backing store for B's guid, used on import only</summary>
        private Guid? _fk_guid_B = null;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        public virtual int? B_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.B_pos != value)
                {
                    var __oldValue = Proxy.B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    Proxy.B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("B_pos");
				}
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public int? AIndex
        {
            get { return this.A_pos; }
            set { this.A_pos = (int?)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public int? BIndex
        {
            get { return this.B_pos; }
            set { this.B_pos = (int?)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.ExportGuid);
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.A_pos);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
            binStream.Write(this.Proxy.B_pos);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this.Proxy.ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            this.Proxy.A_pos = binStream.ReadNullableInt32();
            binStream.Read(out this._fk_B);
            this.Proxy.B_pos = binStream.ReadNullableInt32();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.A != null ? this.Proxy.A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.A_pos, xml, "A_pos", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.B != null ? this.Proxy.B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.B_pos, xml, "B_pos", "Zetbox.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|ExportGuid":
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.Base|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|A_pos":
                this.Proxy.A_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            case "Zetbox.App.Base|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|B_pos":
                this.Proxy.B_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(RoleMembership_resolves_Relation_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (RoleMembership_resolves_Relation_RelationEntryNHibernateImpl)obj;
            var me = (RoleMembership_resolves_Relation_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me.AIndex = other.AIndex;
            me._fk_B = other._fk_B;
            me.BIndex = other.BIndex;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                this.A = ((Zetbox.App.Base.RoleMembershipNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.RoleMembership>(_fk_guid_A.Value));
            else
            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.Base.RoleMembershipNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.RoleMembership>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_guid_B.HasValue)
                this.B = ((Zetbox.App.Base.RelationNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Relation>(_fk_guid_B.Value));
            else
            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.Base.RelationNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Relation>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class RoleMembership_resolves_Relation_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public RoleMembership_resolves_Relation_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(RoleMembership_resolves_Relation_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(RoleMembership_resolves_Relation_RelationEntryProxy); } }

            public virtual Zetbox.App.Base.RoleMembershipNHibernateImpl.RoleMembershipProxy A { get; set; }

            public virtual Zetbox.App.Base.RelationNHibernateImpl.RelationProxy B { get; set; }

            public virtual int? A_pos { get; set; }

            public virtual int? B_pos { get; set; }

            public virtual Guid ExportGuid { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.SchemaMigration
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("SourceColumn_created_Property_RelationEntryNHibernateImpl")]
    public class SourceColumn_created_Property_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.SchemaMigration.SourceColumnNHibernateImpl, Zetbox.App.Base.Property, Zetbox.App.Base.PropertyNHibernateImpl>, SourceColumn_created_Property_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        public SourceColumn_created_Property_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public SourceColumn_created_Property_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new SourceColumn_created_Property_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public SourceColumn_created_Property_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, SourceColumn_created_Property_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly SourceColumn_created_Property_RelationEntryProxy Proxy;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.ExportGuid;
                if (this.Proxy.ExportGuid == Guid.Empty) {
                    __result = this.Proxy.ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("fb27e3f8-3615-4f3b-ae2a-2b89b8782e27");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.SchemaMigration.SourceColumn)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Property)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.SchemaMigration.SourceColumn; moduleNamespace=Zetbox.App.SchemaMigration;
        // inverse Navigator=none; is reference;
        // PositionStorage=A_pos;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.SchemaMigration.SourceColumn A
        {
            get
            {
                Zetbox.App.SchemaMigration.SourceColumnNHibernateImpl __value = (Zetbox.App.SchemaMigration.SourceColumnNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.SchemaMigration.SourceColumnNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.SchemaMigration.SourceColumnNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;

        /// <summary>Backing store for A's guid, used on import only</summary>
        private Guid? _fk_guid_A = null;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        public virtual int? A_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.A_pos != value)
                {
                    var __oldValue = Proxy.A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    Proxy.A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("A_pos");
				}
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Property; moduleNamespace=Zetbox.App.SchemaMigration;
        // inverse Navigator=none; is reference;
        // PositionStorage=B_pos;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Property B
        {
            get
            {
                Zetbox.App.Base.PropertyNHibernateImpl __value = (Zetbox.App.Base.PropertyNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.PropertyNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.Base.PropertyNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;

        /// <summary>Backing store for B's guid, used on import only</summary>
        private Guid? _fk_guid_B = null;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        public virtual int? B_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.B_pos != value)
                {
                    var __oldValue = Proxy.B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    Proxy.B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("B_pos");
				}
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public int? AIndex
        {
            get { return this.A_pos; }
            set { this.A_pos = (int?)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public int? BIndex
        {
            get { return this.B_pos; }
            set { this.B_pos = (int?)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.ExportGuid);
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.A_pos);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
            binStream.Write(this.Proxy.B_pos);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this.Proxy.ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            this.Proxy.A_pos = binStream.ReadNullableInt32();
            binStream.Read(out this._fk_B);
            this.Proxy.B_pos = binStream.ReadNullableInt32();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this.Proxy.A != null ? this.Proxy.A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this.Proxy.A_pos, xml, "A_pos", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this.Proxy.B != null ? this.Proxy.B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this.Proxy.B_pos, xml, "B_pos", "Zetbox.App.SchemaMigration");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.SchemaMigration|ExportGuid":
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.SchemaMigration|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.SchemaMigration|A_pos":
                this.Proxy.A_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            case "Zetbox.App.SchemaMigration|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.SchemaMigration|B_pos":
                this.Proxy.B_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(SourceColumn_created_Property_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (SourceColumn_created_Property_RelationEntryNHibernateImpl)obj;
            var me = (SourceColumn_created_Property_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me.AIndex = other.AIndex;
            me._fk_B = other._fk_B;
            me.BIndex = other.BIndex;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                this.A = ((Zetbox.App.SchemaMigration.SourceColumnNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.SchemaMigration.SourceColumn>(_fk_guid_A.Value));
            else
            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.SchemaMigration.SourceColumnNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.SchemaMigration.SourceColumn>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_guid_B.HasValue)
                this.B = ((Zetbox.App.Base.PropertyNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Property>(_fk_guid_B.Value));
            else
            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.Base.PropertyNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Property>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class SourceColumn_created_Property_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public SourceColumn_created_Property_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(SourceColumn_created_Property_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(SourceColumn_created_Property_RelationEntryProxy); } }

            public virtual Zetbox.App.SchemaMigration.SourceColumnNHibernateImpl.SourceColumnProxy A { get; set; }

            public virtual Zetbox.App.Base.PropertyNHibernateImpl.PropertyProxy B { get; set; }

            public virtual int? A_pos { get; set; }

            public virtual int? B_pos { get; set; }

            public virtual Guid ExportGuid { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.GUI
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("Template_hasMenu_Visual_RelationEntryNHibernateImpl")]
    public class Template_hasMenu_Visual_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.GUI.Template, Zetbox.App.GUI.TemplateNHibernateImpl, Zetbox.App.GUI.Visual, Zetbox.App.GUI.VisualNHibernateImpl>, Template_hasMenu_Visual_RelationEntry
    {
        public Template_hasMenu_Visual_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public Template_hasMenu_Visual_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new Template_hasMenu_Visual_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public Template_hasMenu_Visual_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, Template_hasMenu_Visual_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly Template_hasMenu_Visual_RelationEntryProxy Proxy;
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("81ff3089-57da-478c-8be5-fd23abc222a2");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.GUI.Template)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.GUI.Visual)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.GUI.Template; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.Template A
        {
            get
            {
                Zetbox.App.GUI.TemplateNHibernateImpl __value = (Zetbox.App.GUI.TemplateNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.GUI.TemplateNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.GUI.TemplateNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.GUI.Visual; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.Visual B
        {
            get
            {
                Zetbox.App.GUI.VisualNHibernateImpl __value = (Zetbox.App.GUI.VisualNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.GUI.VisualNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.GUI.VisualNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Template_hasMenu_Visual_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Template_hasMenu_Visual_RelationEntryNHibernateImpl)obj;
            var me = (Template_hasMenu_Visual_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.GUI.TemplateNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.Template>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.GUI.VisualNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.Visual>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class Template_hasMenu_Visual_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public Template_hasMenu_Visual_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(Template_hasMenu_Visual_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(Template_hasMenu_Visual_RelationEntryProxy); } }

            public virtual Zetbox.App.GUI.TemplateNHibernateImpl.TemplateProxy A { get; set; }

            public virtual Zetbox.App.GUI.VisualNHibernateImpl.VisualProxy B { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Test
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("TestStudent_füllt_aus_Fragebogen_RelationEntryNHibernateImpl")]
    public class TestStudent_füllt_aus_Fragebogen_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.Test.TestStudent, Zetbox.App.Test.TestStudentNHibernateImpl, Zetbox.App.Test.Fragebogen, Zetbox.App.Test.FragebogenNHibernateImpl>, TestStudent_füllt_aus_Fragebogen_RelationEntry
    {
        public TestStudent_füllt_aus_Fragebogen_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public TestStudent_füllt_aus_Fragebogen_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new TestStudent_füllt_aus_Fragebogen_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public TestStudent_füllt_aus_Fragebogen_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, TestStudent_füllt_aus_Fragebogen_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly TestStudent_füllt_aus_Fragebogen_RelationEntryProxy Proxy;
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("6819ca86-571c-4d59-bc30-cc1fb0decc9e");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Test.TestStudent)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Test.Fragebogen)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Test.TestStudent; moduleNamespace=Zetbox.App.Test;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Test.TestStudent A
        {
            get
            {
                Zetbox.App.Test.TestStudentNHibernateImpl __value = (Zetbox.App.Test.TestStudentNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Test.TestStudentNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.Test.TestStudentNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Test.Fragebogen; moduleNamespace=Zetbox.App.Test;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Test.Fragebogen B
        {
            get
            {
                Zetbox.App.Test.FragebogenNHibernateImpl __value = (Zetbox.App.Test.FragebogenNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Test.FragebogenNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.Test.FragebogenNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(TestStudent_füllt_aus_Fragebogen_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (TestStudent_füllt_aus_Fragebogen_RelationEntryNHibernateImpl)obj;
            var me = (TestStudent_füllt_aus_Fragebogen_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.Test.TestStudentNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Test.TestStudent>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.Test.FragebogenNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Test.Fragebogen>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class TestStudent_füllt_aus_Fragebogen_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public TestStudent_füllt_aus_Fragebogen_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(TestStudent_füllt_aus_Fragebogen_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(TestStudent_füllt_aus_Fragebogen_RelationEntryProxy); } }

            public virtual Zetbox.App.Test.TestStudentNHibernateImpl.TestStudentProxy A { get; set; }

            public virtual Zetbox.App.Test.FragebogenNHibernateImpl.FragebogenProxy B { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Base
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("TypeRef_hasGenericArguments_TypeRef_RelationEntryNHibernateImpl")]
    public class TypeRef_hasGenericArguments_TypeRef_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.Base.TypeRef, Zetbox.App.Base.TypeRefNHibernateImpl, Zetbox.App.Base.TypeRef, Zetbox.App.Base.TypeRefNHibernateImpl>, TypeRef_hasGenericArguments_TypeRef_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        public TypeRef_hasGenericArguments_TypeRef_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public TypeRef_hasGenericArguments_TypeRef_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new TypeRef_hasGenericArguments_TypeRef_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public TypeRef_hasGenericArguments_TypeRef_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, TypeRef_hasGenericArguments_TypeRef_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly TypeRef_hasGenericArguments_TypeRef_RelationEntryProxy Proxy;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.ExportGuid;
                if (this.Proxy.ExportGuid == Guid.Empty) {
                    __result = this.Proxy.ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("8b41ffa4-8ffa-4d96-b4e5-708188045c71");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Base.TypeRef)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.TypeRef)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Base.TypeRef; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=A_pos;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.TypeRef A
        {
            get
            {
                Zetbox.App.Base.TypeRefNHibernateImpl __value = (Zetbox.App.Base.TypeRefNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.TypeRefNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.Base.TypeRefNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;

        /// <summary>Backing store for A's guid, used on import only</summary>
        private Guid? _fk_guid_A = null;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        public virtual int? A_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.A_pos != value)
                {
                    var __oldValue = Proxy.A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    Proxy.A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("A_pos");
				}
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.TypeRef; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=B_pos;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.TypeRef B
        {
            get
            {
                Zetbox.App.Base.TypeRefNHibernateImpl __value = (Zetbox.App.Base.TypeRefNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.TypeRefNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.Base.TypeRefNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;

        /// <summary>Backing store for B's guid, used on import only</summary>
        private Guid? _fk_guid_B = null;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        public virtual int? B_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.B_pos != value)
                {
                    var __oldValue = Proxy.B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    Proxy.B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("B_pos");
				}
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public int? AIndex
        {
            get { return this.A_pos; }
            set { this.A_pos = (int?)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public int? BIndex
        {
            get { return this.B_pos; }
            set { this.B_pos = (int?)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.ExportGuid);
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.A_pos);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
            binStream.Write(this.Proxy.B_pos);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this.Proxy.ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            this.Proxy.A_pos = binStream.ReadNullableInt32();
            binStream.Read(out this._fk_B);
            this.Proxy.B_pos = binStream.ReadNullableInt32();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.A != null ? this.Proxy.A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.A_pos, xml, "A_pos", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.B != null ? this.Proxy.B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.B_pos, xml, "B_pos", "Zetbox.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|ExportGuid":
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.Base|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|A_pos":
                this.Proxy.A_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            case "Zetbox.App.Base|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|B_pos":
                this.Proxy.B_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(TypeRef_hasGenericArguments_TypeRef_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (TypeRef_hasGenericArguments_TypeRef_RelationEntryNHibernateImpl)obj;
            var me = (TypeRef_hasGenericArguments_TypeRef_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me.AIndex = other.AIndex;
            me._fk_B = other._fk_B;
            me.BIndex = other.BIndex;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                this.A = ((Zetbox.App.Base.TypeRefNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.TypeRef>(_fk_guid_A.Value));
            else
            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.Base.TypeRefNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.TypeRef>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_guid_B.HasValue)
                this.B = ((Zetbox.App.Base.TypeRefNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.TypeRef>(_fk_guid_B.Value));
            else
            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.Base.TypeRefNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.TypeRef>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class TypeRef_hasGenericArguments_TypeRef_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public TypeRef_hasGenericArguments_TypeRef_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(TypeRef_hasGenericArguments_TypeRef_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(TypeRef_hasGenericArguments_TypeRef_RelationEntryProxy); } }

            public virtual Zetbox.App.Base.TypeRefNHibernateImpl.TypeRefProxy A { get; set; }

            public virtual Zetbox.App.Base.TypeRefNHibernateImpl.TypeRefProxy B { get; set; }

            public virtual int? A_pos { get; set; }

            public virtual int? B_pos { get; set; }

            public virtual Guid ExportGuid { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.GUI
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("ViewDescriptor_supports_TypeRef_RelationEntryNHibernateImpl")]
    public class ViewDescriptor_supports_TypeRef_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.GUI.ViewDescriptor, Zetbox.App.GUI.ViewDescriptorNHibernateImpl, Zetbox.App.Base.TypeRef, Zetbox.App.Base.TypeRefNHibernateImpl>, ViewDescriptor_supports_TypeRef_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        public ViewDescriptor_supports_TypeRef_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public ViewDescriptor_supports_TypeRef_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new ViewDescriptor_supports_TypeRef_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public ViewDescriptor_supports_TypeRef_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, ViewDescriptor_supports_TypeRef_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly ViewDescriptor_supports_TypeRef_RelationEntryProxy Proxy;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.ExportGuid;
                if (this.Proxy.ExportGuid == Guid.Empty) {
                    __result = this.Proxy.ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("786dae2f-cb6e-454d-93fd-192541df928d");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.GUI.ViewDescriptor)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.TypeRef)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.GUI.ViewDescriptor; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.ViewDescriptor A
        {
            get
            {
                Zetbox.App.GUI.ViewDescriptorNHibernateImpl __value = (Zetbox.App.GUI.ViewDescriptorNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.GUI.ViewDescriptorNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.GUI.ViewDescriptorNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;

        /// <summary>Backing store for A's guid, used on import only</summary>
        private Guid? _fk_guid_A = null;

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.TypeRef; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.TypeRef B
        {
            get
            {
                Zetbox.App.Base.TypeRefNHibernateImpl __value = (Zetbox.App.Base.TypeRefNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.TypeRefNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.Base.TypeRefNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;

        /// <summary>Backing store for B's guid, used on import only</summary>
        private Guid? _fk_guid_B = null;

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.ExportGuid);
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this.Proxy.ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.A != null ? this.Proxy.A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.B != null ? this.Proxy.B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.GUI|ExportGuid":
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.GUI|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(ViewDescriptor_supports_TypeRef_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ViewDescriptor_supports_TypeRef_RelationEntryNHibernateImpl)obj;
            var me = (ViewDescriptor_supports_TypeRef_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                this.A = ((Zetbox.App.GUI.ViewDescriptorNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.ViewDescriptor>(_fk_guid_A.Value));
            else
            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.GUI.ViewDescriptorNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.ViewDescriptor>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_guid_B.HasValue)
                this.B = ((Zetbox.App.Base.TypeRefNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.TypeRef>(_fk_guid_B.Value));
            else
            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.Base.TypeRefNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.TypeRef>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class ViewDescriptor_supports_TypeRef_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public ViewDescriptor_supports_TypeRef_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(ViewDescriptor_supports_TypeRef_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(ViewDescriptor_supports_TypeRef_RelationEntryProxy); } }

            public virtual Zetbox.App.GUI.ViewDescriptorNHibernateImpl.ViewDescriptorProxy A { get; set; }

            public virtual Zetbox.App.Base.TypeRefNHibernateImpl.TypeRefProxy B { get; set; }

            public virtual Guid ExportGuid { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.GUI
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("ViewModelDescriptor_displayedBy_ControlKind_RelationEntryNHibernateImpl")]
    public class ViewModelDescriptor_displayedBy_ControlKind_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl, Zetbox.App.GUI.ControlKind, Zetbox.App.GUI.ControlKindNHibernateImpl>, ViewModelDescriptor_displayedBy_ControlKind_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        public ViewModelDescriptor_displayedBy_ControlKind_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public ViewModelDescriptor_displayedBy_ControlKind_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new ViewModelDescriptor_displayedBy_ControlKind_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public ViewModelDescriptor_displayedBy_ControlKind_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, ViewModelDescriptor_displayedBy_ControlKind_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly ViewModelDescriptor_displayedBy_ControlKind_RelationEntryProxy Proxy;

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.ExportGuid;
                if (this.Proxy.ExportGuid == Guid.Empty) {
                    __result = this.Proxy.ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("5404456a-4527-4e40-a660-b4a5e96e4a47");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.GUI.ViewModelDescriptor)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.GUI.ControlKind)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.GUI.ViewModelDescriptor; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.ViewModelDescriptor A
        {
            get
            {
                Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl __value = (Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;

        /// <summary>Backing store for A's guid, used on import only</summary>
        private Guid? _fk_guid_A = null;

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.ControlKind B
        {
            get
            {
                Zetbox.App.GUI.ControlKindNHibernateImpl __value = (Zetbox.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.GUI.ControlKindNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;

        /// <summary>Backing store for B's guid, used on import only</summary>
        private Guid? _fk_guid_B = null;

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.ExportGuid);
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this.Proxy.ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.A != null ? this.Proxy.A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.B != null ? this.Proxy.B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.GUI|ExportGuid":
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.GUI|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(ViewModelDescriptor_displayedBy_ControlKind_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ViewModelDescriptor_displayedBy_ControlKind_RelationEntryNHibernateImpl)obj;
            var me = (ViewModelDescriptor_displayedBy_ControlKind_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                this.A = ((Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.ViewModelDescriptor>(_fk_guid_A.Value));
            else
            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.ViewModelDescriptor>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_guid_B.HasValue)
                this.B = ((Zetbox.App.GUI.ControlKindNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_B.Value));
            else
            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.GUI.ControlKindNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class ViewModelDescriptor_displayedBy_ControlKind_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public ViewModelDescriptor_displayedBy_ControlKind_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(ViewModelDescriptor_displayedBy_ControlKind_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(ViewModelDescriptor_displayedBy_ControlKind_RelationEntryProxy); } }

            public virtual Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl.ViewModelDescriptorProxy A { get; set; }

            public virtual Zetbox.App.GUI.ControlKindNHibernateImpl.ControlKindProxy B { get; set; }

            public virtual Guid ExportGuid { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.GUI
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("Visual_contains_Visual_RelationEntryNHibernateImpl")]
    public class Visual_contains_Visual_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.GUI.Visual, Zetbox.App.GUI.VisualNHibernateImpl, Zetbox.App.GUI.Visual, Zetbox.App.GUI.VisualNHibernateImpl>, Visual_contains_Visual_RelationEntry
    {
        public Visual_contains_Visual_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public Visual_contains_Visual_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new Visual_contains_Visual_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public Visual_contains_Visual_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, Visual_contains_Visual_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly Visual_contains_Visual_RelationEntryProxy Proxy;
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("4d4e1ffd-f362-40e2-9fe1-0711ded83241");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.GUI.Visual)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.GUI.Visual)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.GUI.Visual; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.Visual A
        {
            get
            {
                Zetbox.App.GUI.VisualNHibernateImpl __value = (Zetbox.App.GUI.VisualNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.GUI.VisualNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.GUI.VisualNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.GUI.Visual; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.Visual B
        {
            get
            {
                Zetbox.App.GUI.VisualNHibernateImpl __value = (Zetbox.App.GUI.VisualNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.GUI.VisualNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.GUI.VisualNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Visual_contains_Visual_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Visual_contains_Visual_RelationEntryNHibernateImpl)obj;
            var me = (Visual_contains_Visual_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.GUI.VisualNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.Visual>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.GUI.VisualNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.Visual>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class Visual_contains_Visual_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public Visual_contains_Visual_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(Visual_contains_Visual_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(Visual_contains_Visual_RelationEntryProxy); } }

            public virtual Zetbox.App.GUI.VisualNHibernateImpl.VisualProxy A { get; set; }

            public virtual Zetbox.App.GUI.VisualNHibernateImpl.VisualProxy B { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.GUI
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
    [System.Diagnostics.DebuggerDisplay("Visual_hasContextMenu_Visual_RelationEntryNHibernateImpl")]
    public class Visual_hasContextMenu_Visual_RelationEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.RelationEntryNHibernateImpl<Zetbox.App.GUI.Visual, Zetbox.App.GUI.VisualNHibernateImpl, Zetbox.App.GUI.Visual, Zetbox.App.GUI.VisualNHibernateImpl>, Visual_hasContextMenu_Visual_RelationEntry
    {
        public Visual_hasContextMenu_Visual_RelationEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public Visual_hasContextMenu_Visual_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new Visual_hasContextMenu_Visual_RelationEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public Visual_hasContextMenu_Visual_RelationEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, Visual_hasContextMenu_Visual_RelationEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly Visual_hasContextMenu_Visual_RelationEntryProxy Proxy;
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("358c14b9-fef5-495d-8d44-04e84186830e");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.GUI.Visual)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.GUI.Visual)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=this.Proxy.A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.GUI.Visual; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.Visual A
        {
            get
            {
                Zetbox.App.GUI.VisualNHibernateImpl __value = (Zetbox.App.GUI.VisualNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.A == null)
				{
					SetInitializedProperty("A");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.GUI.VisualNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.A);
                var __newValue = (Zetbox.App.GUI.VisualNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("A");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.A = null;
                }
                else
                {
                    this.Proxy.A = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for A's id, used on dehydration only</summary>
        private int? _fk_A = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=this.Proxy.B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.GUI.Visual; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.Visual B
        {
            get
            {
                Zetbox.App.GUI.VisualNHibernateImpl __value = (Zetbox.App.GUI.VisualNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.B == null)
				{
					SetInitializedProperty("B");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.GUI.VisualNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.B);
                var __newValue = (Zetbox.App.GUI.VisualNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("B");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.B = null;
                }
                else
                {
                    this.Proxy.B = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for B's id, used on dehydration only</summary>
        private int? _fk_B = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.A != null ? OurContext.GetIdFromProxy(this.Proxy.A) : (int?)null);
            binStream.Write(this.Proxy.B != null ? OurContext.GetIdFromProxy(this.Proxy.B) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Visual_hasContextMenu_Visual_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Visual_hasContextMenu_Visual_RelationEntryNHibernateImpl)obj;
            var me = (Visual_hasContextMenu_Visual_RelationEntryNHibernateImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                this.A = ((Zetbox.App.GUI.VisualNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.Visual>(_fk_A.Value));
            else
                this.A = null;

            if (_fk_B.HasValue)
                this.B = ((Zetbox.App.GUI.VisualNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.Visual>(_fk_B.Value));
            else
                this.B = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }

        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow A
            if (this.A != null && this.A.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.A);

            // Follow B
            if (this.B != null && this.B.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.B);

            return result;
        }

        public class Visual_hasContextMenu_Visual_RelationEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public Visual_hasContextMenu_Visual_RelationEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(Visual_hasContextMenu_Visual_RelationEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(Visual_hasContextMenu_Visual_RelationEntryProxy); } }

            public virtual Zetbox.App.GUI.VisualNHibernateImpl.VisualProxy A { get; set; }

            public virtual Zetbox.App.GUI.VisualNHibernateImpl.VisualProxy B { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Projekte
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.ValueCollectionEntry
    [System.Diagnostics.DebuggerDisplay("Kunde_EMails_CollectionEntryNHibernateImpl")]
    public class Kunde_EMails_CollectionEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.ValueCollectionEntryNHibernateImpl<Zetbox.App.Projekte.Kunde, Zetbox.App.Projekte.KundeNHibernateImpl, string>, Kunde_EMails_CollectionEntry, Zetbox.API.IExportableValueCollectionEntryInternal
    {
        public Kunde_EMails_CollectionEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public Kunde_EMails_CollectionEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new Kunde_EMails_CollectionEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public Kunde_EMails_CollectionEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, Kunde_EMails_CollectionEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly Kunde_EMails_CollectionEntryProxy Proxy;
        private static readonly Guid _propertyID = new Guid("1d0f6da6-4b69-48d7-9e94-bfb5466654b9");
        public override Guid PropertyID { get { return _propertyID; } }


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // fkBackingName=this.Proxy.Parent; fkGuidBackingName=unused;
        // referencedInterface=Zetbox.App.Projekte.Kunde; moduleNamespace=Zetbox.App.Projekte;
        // inverse Navigator=EMails; is list;
        // PositionStorage=none;
        // Target not exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Projekte.Kunde Parent
        {
            get
            {
                Zetbox.App.Projekte.KundeNHibernateImpl __value = (Zetbox.App.Projekte.KundeNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Parent);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.Parent == null)
				{
					SetInitializedProperty("Parent");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Projekte.KundeNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Parent);
                var __newValue = (Zetbox.App.Projekte.KundeNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("Parent");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Parent", __oldValue, __newValue);

                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("EMails", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("EMails", null, null);
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.Parent = null;
                }
                else
                {
                    this.Proxy.Parent = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.EMails as IRelationListSync<Kunde_EMails_CollectionEntry>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.EMails as IRelationListSync<Kunde_EMails_CollectionEntry>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("Parent", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for Parent's id, used on dehydration only</summary>
        private int? _fk_Parent = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.API.IDataObject ParentObject
        {
            get { return Parent; }
            set { Parent = (Zetbox.App.Projekte.KundeNHibernateImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        public virtual string Value
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Value;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Value != value)
                {
                    var __oldValue = Proxy.Value;
                    var __newValue = value;
                    NotifyPropertyChanging("Value", __oldValue, __newValue);
                    Proxy.Value = __newValue;
                    NotifyPropertyChanged("Value", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("Value");
				}
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public object ValueObject
        {
            get { return Value; }
            set { Value = (string)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.Parent != null ? OurContext.GetIdFromProxy(this.Proxy.Parent) : (int?)null);
            binStream.Write(this.Proxy.Value);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_Parent);
            this.Proxy.Value = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this.Proxy.Value, xml, "Value", "Zetbox.App.Projekte");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Projekte|Value":
                this.Proxy.Value = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Kunde_EMails_CollectionEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Kunde_EMails_CollectionEntryNHibernateImpl)obj;
            var me = (Kunde_EMails_CollectionEntryNHibernateImpl)this;

            me._fk_Parent = other._fk_Parent;
            me.Value = other.Value;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_Parent.HasValue)
                this.Parent = ((Zetbox.App.Projekte.KundeNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Projekte.Kunde>(_fk_Parent.Value));
            else
                this.Parent = null;

        }


        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "Parent":
                    {
                        var __oldValue = (Zetbox.App.Projekte.KundeNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Parent);
                        var __newValue = (Zetbox.App.Projekte.KundeNHibernateImpl)parentObj;
                        NotifyPropertyChanging("Parent", __oldValue, __newValue);
                        this.Proxy.Parent = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("Parent", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        public override void SaveOrUpdateTo(NHibernate.ISession session)
        {
            // ValueCollectionEntries and CompoundCollectionEntries are saved by cascade
            //base.SaveOrUpdateTo(session);
        }


        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow Parent
            if (this.Parent != null && this.Parent.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.Parent);

            return result;
        }

        public class Kunde_EMails_CollectionEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public Kunde_EMails_CollectionEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(Kunde_EMails_CollectionEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(Kunde_EMails_CollectionEntryProxy); } }

            public virtual Zetbox.App.Projekte.KundeNHibernateImpl.KundeProxy Parent { get; set; }

            public virtual bool ValueIsNull { get; set; }

            public virtual string Value { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.ValueCollectionEntry
}

namespace Zetbox.App.Projekte
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.ValueCollectionEntry
    [System.Diagnostics.DebuggerDisplay("Projekt_AuditJournal_CollectionEntryNHibernateImpl")]
    public class Projekt_AuditJournal_CollectionEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.CompoundCollectionEntryNHibernateImpl<Zetbox.App.Projekte.Projekt, Zetbox.App.Projekte.ProjektNHibernateImpl, Zetbox.App.Base.AuditEntry, Zetbox.App.Base.AuditEntryNHibernateImpl>, Projekt_AuditJournal_CollectionEntry, Zetbox.API.IExportableValueCollectionEntryInternal
    {
        public Projekt_AuditJournal_CollectionEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public Projekt_AuditJournal_CollectionEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new Projekt_AuditJournal_CollectionEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public Projekt_AuditJournal_CollectionEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, Projekt_AuditJournal_CollectionEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
            if (this.Proxy.Value == null)
            {
                this.Proxy.Value = new Zetbox.App.Base.AuditEntryNHibernateImpl(this, "Value", lazyCtx, null);
            }
            else
            {
                this.Proxy.Value.AttachToObject(this, "Value");
            }

        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly Projekt_AuditJournal_CollectionEntryProxy Proxy;
        private static readonly Guid _propertyID = new Guid("4bef0e48-79c8-4776-a5de-bbb250599a40");
        public override Guid PropertyID { get { return _propertyID; } }


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // fkBackingName=this.Proxy.Parent; fkGuidBackingName=unused;
        // referencedInterface=Zetbox.App.Projekte.Projekt; moduleNamespace=Zetbox.App.Projekte;
        // inverse Navigator=AuditJournal; is list;
        // PositionStorage=none;
        // Target not exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Projekte.Projekt Parent
        {
            get
            {
                Zetbox.App.Projekte.ProjektNHibernateImpl __value = (Zetbox.App.Projekte.ProjektNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Parent);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.Parent == null)
				{
					SetInitializedProperty("Parent");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Projekte.ProjektNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Parent);
                var __newValue = (Zetbox.App.Projekte.ProjektNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("Parent");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Parent", __oldValue, __newValue);

                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("AuditJournal", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("AuditJournal", null, null);
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.Parent = null;
                }
                else
                {
                    this.Proxy.Parent = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.AuditJournal as IRelationListSync<Projekt_AuditJournal_CollectionEntry>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.AuditJournal as IRelationListSync<Projekt_AuditJournal_CollectionEntry>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("Parent", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for Parent's id, used on dehydration only</summary>
        private int? _fk_Parent = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.API.IDataObject ParentObject
        {
            get { return Parent; }
            set { Parent = (Zetbox.App.Projekte.ProjektNHibernateImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        public Zetbox.App.Base.AuditEntry Value
        {
            get { return ValueImpl; }
            set { ValueImpl = (Zetbox.App.Base.AuditEntryNHibernateImpl)value; }
        }

        /// <summary>backing property for Value, takes care of attaching/detaching the values</summary>
        public Zetbox.App.Base.AuditEntryNHibernateImpl ValueImpl
        {
            get 
			{ 
				return this.Proxy.Value; 
			}
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value == null)
                    throw new ArgumentNullException("value");
                if (!object.Equals(this.Proxy.Value, value))
                {
					var __oldValue = this.Proxy.Value;
					var __newValue = value;

					NotifyPropertyChanging("Value", __oldValue, __newValue);

					if (this.Proxy.Value != null)
					{ 
						this.Proxy.Value.DetachFromObject(this, "Value");
					}
					__newValue = (Zetbox.App.Base.AuditEntryNHibernateImpl)__newValue.Clone();
					this.Proxy.Value = __newValue;
					this.Proxy.Value.AttachToObject(this, "Value");

					NotifyPropertyChanged("Value", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;
				}
				else
				{
					SetInitializedProperty("Value");
				}
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CompoundObjectPropertyTemplate        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public object ValueObject
        {
            get { return Value; }
            set { Value = (Zetbox.App.Base.AuditEntryNHibernateImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.Parent != null ? OurContext.GetIdFromProxy(this.Proxy.Parent) : (int?)null);
            binStream.Write(this.Value);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_Parent);
            {
                // use backing store to avoid notifications
                this.ValueImpl = binStream.ReadCompoundObject<Zetbox.App.Base.AuditEntryNHibernateImpl>();
                this.ValueImpl.AttachToObject(this, "Value");
            }
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ExportCompoundObject(this.Value, xml, "Value", "Zetbox.App.Projekte");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Projekte|Value":
                XmlStreamer.MergeImportCompoundObject(this.ValueImpl, xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Projekt_AuditJournal_CollectionEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Projekt_AuditJournal_CollectionEntryNHibernateImpl)obj;
            var me = (Projekt_AuditJournal_CollectionEntryNHibernateImpl)this;

            me._fk_Parent = other._fk_Parent;
            if (me.Value == null && other.Value != null) {
                me.Value = (Zetbox.App.Base.AuditEntry)other.Value.Clone();
            } else if (me.Value != null && other.Value == null) {
                me.Value = null;
            } else if (me.Value != null && other.Value != null) {
                me.Value.ApplyChangesFrom(other.Value);
            }
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_Parent.HasValue)
                this.Parent = ((Zetbox.App.Projekte.ProjektNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Projekte.Projekt>(_fk_Parent.Value));
            else
                this.Parent = null;

        }


        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "Parent":
                    {
                        var __oldValue = (Zetbox.App.Projekte.ProjektNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Parent);
                        var __newValue = (Zetbox.App.Projekte.ProjektNHibernateImpl)parentObj;
                        NotifyPropertyChanging("Parent", __oldValue, __newValue);
                        this.Proxy.Parent = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("Parent", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        public override void SaveOrUpdateTo(NHibernate.ISession session)
        {
            // ValueCollectionEntries and CompoundCollectionEntries are saved by cascade
            //base.SaveOrUpdateTo(session);
        }


        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow Parent
            if (this.Parent != null && this.Parent.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.Parent);

            return result;
        }

        public class Projekt_AuditJournal_CollectionEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public Projekt_AuditJournal_CollectionEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(Projekt_AuditJournal_CollectionEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(Projekt_AuditJournal_CollectionEntryProxy); } }

            public virtual Zetbox.App.Projekte.ProjektNHibernateImpl.ProjektProxy Parent { get; set; }

            public virtual bool ValueIsNull { get; set; }

            public virtual Zetbox.App.Base.AuditEntryNHibernateImpl Value { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.ValueCollectionEntry
}

namespace Zetbox.App.Test
{
    // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.ValueCollectionEntry
    [System.Diagnostics.DebuggerDisplay("TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl")]
    public class TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl : Zetbox.DalProvider.NHibernate.CompoundCollectionEntryNHibernateImpl<Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.TestCustomObjectNHibernateImpl, Zetbox.App.Test.TestPhoneCompoundObject, Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl>, TestCustomObject_PhoneNumbersOther_CollectionEntry
    {
        public TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new TestCustomObject_PhoneNumbersOther_CollectionEntryProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl(Func<IFrozenContext> lazyCtx, TestCustomObject_PhoneNumbersOther_CollectionEntryProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
            if (this.Proxy.Value == null)
            {
                this.Proxy.Value = new Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl(this, "Value", lazyCtx, null);
            }
            else
            {
                this.Proxy.Value.AttachToObject(this, "Value");
            }

        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly TestCustomObject_PhoneNumbersOther_CollectionEntryProxy Proxy;
        private static readonly Guid _propertyID = new Guid("0c0c1101-118a-4ce2-806c-d30a03b19dde");
        public override Guid PropertyID { get { return _propertyID; } }


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // fkBackingName=this.Proxy.Parent; fkGuidBackingName=unused;
        // referencedInterface=Zetbox.App.Test.TestCustomObject; moduleNamespace=Zetbox.App.Test;
        // inverse Navigator=PhoneNumbersOther; is list;
        // PositionStorage=none;
        // Target not exportable; does not call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Test.TestCustomObject Parent
        {
            get
            {
                Zetbox.App.Test.TestCustomObjectNHibernateImpl __value = (Zetbox.App.Test.TestCustomObjectNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Parent);


                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.Parent == null)
				{
					SetInitializedProperty("Parent");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Test.TestCustomObjectNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Parent);
                var __newValue = (Zetbox.App.Test.TestCustomObjectNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("Parent");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Parent", __oldValue, __newValue);

                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("PhoneNumbersOther", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("PhoneNumbersOther", null, null);
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.Parent = null;
                }
                else
                {
                    this.Proxy.Parent = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.PhoneNumbersOther as IRelationListSync<TestCustomObject_PhoneNumbersOther_CollectionEntry>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.PhoneNumbersOther as IRelationListSync<TestCustomObject_PhoneNumbersOther_CollectionEntry>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("Parent", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

            }
        }

        /// <summary>Backing store for Parent's id, used on dehydration only</summary>
        private int? _fk_Parent = null;


        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.API.IDataObject ParentObject
        {
            get { return Parent; }
            set { Parent = (Zetbox.App.Test.TestCustomObjectNHibernateImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        public Zetbox.App.Test.TestPhoneCompoundObject Value
        {
            get { return ValueImpl; }
            set { ValueImpl = (Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl)value; }
        }

        /// <summary>backing property for Value, takes care of attaching/detaching the values</summary>
        public Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl ValueImpl
        {
            get 
			{ 
				return this.Proxy.Value; 
			}
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value == null)
                    throw new ArgumentNullException("value");
                if (!object.Equals(this.Proxy.Value, value))
                {
					var __oldValue = this.Proxy.Value;
					var __newValue = value;

					NotifyPropertyChanging("Value", __oldValue, __newValue);

					if (this.Proxy.Value != null)
					{ 
						this.Proxy.Value.DetachFromObject(this, "Value");
					}
					__newValue = (Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl)__newValue.Clone();
					this.Proxy.Value = __newValue;
					this.Proxy.Value.AttachToObject(this, "Value");

					NotifyPropertyChanged("Value", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;
				}
				else
				{
					SetInitializedProperty("Value");
				}
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CompoundObjectPropertyTemplate        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public object ValueObject
        {
            get { return Value; }
            set { Value = (Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.Parent != null ? OurContext.GetIdFromProxy(this.Proxy.Parent) : (int?)null);
            binStream.Write(this.Value);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_Parent);
            {
                // use backing store to avoid notifications
                this.ValueImpl = binStream.ReadCompoundObject<Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl>();
                this.ValueImpl.AttachToObject(this, "Value");
            }
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(TestCustomObject_PhoneNumbersOther_CollectionEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl)obj;
            var me = (TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl)this;

            me._fk_Parent = other._fk_Parent;
            if (me.Value == null && other.Value != null) {
                me.Value = (Zetbox.App.Test.TestPhoneCompoundObject)other.Value.Clone();
            } else if (me.Value != null && other.Value == null) {
                me.Value = null;
            } else if (me.Value != null && other.Value != null) {
                me.Value.ApplyChangesFrom(other.Value);
            }
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_Parent.HasValue)
                this.Parent = ((Zetbox.App.Test.TestCustomObjectNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Test.TestCustomObject>(_fk_Parent.Value));
            else
                this.Parent = null;

        }


        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "Parent":
                    {
                        var __oldValue = (Zetbox.App.Test.TestCustomObjectNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Parent);
                        var __newValue = (Zetbox.App.Test.TestCustomObjectNHibernateImpl)parentObj;
                        NotifyPropertyChanging("Parent", __oldValue, __newValue);
                        this.Proxy.Parent = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("Parent", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        public override void SaveOrUpdateTo(NHibernate.ISession session)
        {
            // ValueCollectionEntries and CompoundCollectionEntries are saved by cascade
            //base.SaveOrUpdateTo(session);
        }


        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow Parent
            if (this.Parent != null && this.Parent.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.Parent);

            return result;
        }

        public class TestCustomObject_PhoneNumbersOther_CollectionEntryProxy
            : IProxyObject, ISortKey<int>
        {
            public TestCustomObject_PhoneNumbersOther_CollectionEntryProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(TestCustomObject_PhoneNumbersOther_CollectionEntryProxy); } }

            public virtual Zetbox.App.Test.TestCustomObjectNHibernateImpl.TestCustomObjectProxy Parent { get; set; }

            public virtual bool ValueIsNull { get; set; }

            public virtual Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl Value { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }    }
    // END Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.ValueCollectionEntry
}
