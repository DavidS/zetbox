// <autogenerated/>

namespace Zetbox.App.Test
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.API.Utils;
    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.NHibernate;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("AnyReferenceTestObject")]
    public class AnyReferenceTestObjectNHibernateImpl : Zetbox.DalProvider.NHibernate.DataObjectNHibernateImpl, AnyReferenceTestObject
    {
        private static readonly Guid _objectClassID = new Guid("3a8d152e-b8d1-4439-bfe4-367731218ce9");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        public AnyReferenceTestObjectNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public AnyReferenceTestObjectNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new AnyReferenceTestObjectProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public AnyReferenceTestObjectNHibernateImpl(Func<IFrozenContext> lazyCtx, AnyReferenceTestObjectProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
            if (this.Proxy.Any == null)
            {
                this.Proxy.Any = new Zetbox.App.Base.AnyReferenceNHibernateImpl(this, "Any", null, null);
            }
            else
            {
                this.Proxy.Any.AttachToObject(this, "Any");
            }

        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly AnyReferenceTestObjectProxy Proxy;

        /// <summary>
        /// 
        /// </summary>
        // CompoundObject property
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        public Zetbox.App.Base.AnyReference Any
        {
            get { return AnyImpl; }
            set { AnyImpl = (Zetbox.App.Base.AnyReferenceNHibernateImpl)value; }
        }

        /// <summary>backing property for Any, takes care of attaching/detaching the values</summary>
        public Zetbox.App.Base.AnyReferenceNHibernateImpl AnyImpl
        {
            get 
			{ 
				return this.Proxy.Any; 
			}
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value == null)
                    throw new ArgumentNullException("value");
                if (!object.Equals(this.Proxy.Any, value))
                {
					var __oldValue = this.Proxy.Any;
					var __newValue = value;

					NotifyPropertyChanging("Any", __oldValue, __newValue);

					if (this.Proxy.Any != null)
					{ 
						this.Proxy.Any.DetachFromObject(this, "Any");
					}
					__newValue = (Zetbox.App.Base.AnyReferenceNHibernateImpl)__newValue.Clone();
					this.Proxy.Any = __newValue;
					this.Proxy.Any.AttachToObject(this, "Any");

					NotifyPropertyChanged("Any", __oldValue, __newValue);
				}
				else
				{
					SetInitializedProperty("Any");
				}
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        public static event PropertyIsValidHandler<Zetbox.App.Test.AnyReferenceTestObject> OnAny_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string DisplayName
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.DisplayName;
                if (OnDisplayName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDisplayName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.DisplayName != value)
                {
                    var __oldValue = Proxy.DisplayName;
                    var __newValue = value;
                    if (OnDisplayName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDisplayName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("DisplayName", __oldValue, __newValue);
                    Proxy.DisplayName = __newValue;
                    NotifyPropertyChanged("DisplayName", __oldValue, __newValue);

                    if (OnDisplayName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDisplayName_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("DisplayName");
				}
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Test.AnyReferenceTestObject, string> OnDisplayName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.AnyReferenceTestObject, string> OnDisplayName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.AnyReferenceTestObject, string> OnDisplayName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.AnyReferenceTestObject> OnDisplayName_IsValid;

        public override Type GetImplementedInterface()
        {
            return typeof(AnyReferenceTestObject);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (AnyReferenceTestObject)obj;
            var otherImpl = (AnyReferenceTestObjectNHibernateImpl)obj;
            var me = (AnyReferenceTestObject)this;

            me.DisplayName = other.DisplayName;
            if (me.Any == null && other.Any != null) {
                me.Any = (Zetbox.App.Base.AnyReference)other.Any.Clone();
            } else if (me.Any != null && other.Any == null) {
                me.Any = null;
            } else if (me.Any != null && other.Any != null) {
                me.Any.ApplyChangesFrom(other.Any);
            }
        }

        public override void AttachToContext(IZetboxContext ctx)
        {
            base.AttachToContext(ctx);
            var nhCtx = (NHibernateContext)ctx;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "Any":
                case "DisplayName":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorNHibernateImpl<AnyReferenceTestObject, Zetbox.App.Base.AnyReference>(
                        lazyCtx,
                        new Guid("de93b394-d1e8-4c17-a1df-30aaff7f27f5"),
                        "Any",
                        null,
                        obj => obj.Any,
                        (obj, val) => obj.Any = val,
						obj => OnAny_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<AnyReferenceTestObject, string>(
                        lazyCtx,
                        new Guid("3e806c0f-5ef0-47d1-b504-47b5d2dd59fb"),
                        "DisplayName",
                        null,
                        obj => obj.DisplayName,
                        (obj, val) => obj.DisplayName = val,
						obj => OnDisplayName_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_AnyReferenceTestObject")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_AnyReferenceTestObject != null)
            {
                OnToString_AnyReferenceTestObject(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<AnyReferenceTestObject> OnToString_AnyReferenceTestObject;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_AnyReferenceTestObject")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.IsValid = b.IsValid;
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_AnyReferenceTestObject != null)
            {
                OnObjectIsValid_AnyReferenceTestObject(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<AnyReferenceTestObject> OnObjectIsValid_AnyReferenceTestObject;

        [EventBasedMethod("OnNotifyPreSave_AnyReferenceTestObject")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_AnyReferenceTestObject != null) OnNotifyPreSave_AnyReferenceTestObject(this);
        }
        public static event ObjectEventHandler<AnyReferenceTestObject> OnNotifyPreSave_AnyReferenceTestObject;

        [EventBasedMethod("OnNotifyPostSave_AnyReferenceTestObject")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_AnyReferenceTestObject != null) OnNotifyPostSave_AnyReferenceTestObject(this);
        }
        public static event ObjectEventHandler<AnyReferenceTestObject> OnNotifyPostSave_AnyReferenceTestObject;

        [EventBasedMethod("OnNotifyCreated_AnyReferenceTestObject")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("Any");
            SetNotInitializedProperty("DisplayName");
            base.NotifyCreated();
            if (OnNotifyCreated_AnyReferenceTestObject != null) OnNotifyCreated_AnyReferenceTestObject(this);
        }
        public static event ObjectEventHandler<AnyReferenceTestObject> OnNotifyCreated_AnyReferenceTestObject;

        [EventBasedMethod("OnNotifyDeleting_AnyReferenceTestObject")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_AnyReferenceTestObject != null) OnNotifyDeleting_AnyReferenceTestObject(this);


        }
        public static event ObjectEventHandler<AnyReferenceTestObject> OnNotifyDeleting_AnyReferenceTestObject;

        #endregion // Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        public class AnyReferenceTestObjectProxy
            : IProxyObject, ISortKey<int>
        {
            public AnyReferenceTestObjectProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(AnyReferenceTestObjectNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(AnyReferenceTestObjectProxy); } }

            public virtual Zetbox.App.Base.AnyReferenceNHibernateImpl Any { get; set; }

            public virtual string DisplayName { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }
        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Any);
            binStream.Write(this.Proxy.DisplayName);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            {
                // use backing store to avoid notifications
                this.AnyImpl = binStream.ReadCompoundObject<Zetbox.App.Base.AnyReferenceNHibernateImpl>();
                this.AnyImpl.AttachToObject(this, "Any");
            }
            this.Proxy.DisplayName = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

    }
}