<%@ CodeTemplate Language="C#" 
	Name="Repositories.FrozenRepository"
	ClassName="Kistl.DalProvider.Frozen.Generator.Repositories.FrozenRepository" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Parameter Name="ctx" Type="Kistl.API.IKistlContext" %>
<%@ Parameter Name="module" Type="Module" %>
// <autogenerated/>

<%
	string classname = "Frozen" + module.Name + "Repository";
    // TODO: remove ToList when IsFrozenObject correctly inherits across meta-data
	var frozenClasses = module.DataTypes.OfType<ObjectClass>().ToList().Where(cls => cls.IsFrozen()).OrderBy(c => c.Name);
%>
using System;
using System.Collections.Generic;
using System.Linq;

using Kistl.API;
using Kistl.API.Utils;

namespace <%= module.Namespace %>
{

	public static class <%= classname %>
	{
		private readonly static log4net.ILog Log = log4net.LogManager.GetLogger("Kistl.Provider.Frozen");
		
<%
	foreach(var cls in frozenClasses)
	{
		string implementationName = Implementation.ObjectClasses.Template.GetClassName(cls);
%>
		/// <summary>Frozen List of all <%= cls.Name %></summary>
		/// <%= cls.Description %>
		public static IQueryable<<%= cls.Name %>> <%= cls.TableName %>
		{ 
			get
			{
				return <%= implementationName %>.DataStore.Values.AsQueryable().Cast<<%= cls.Name %>>();
			}
		}
		
<%
	}
%>

		internal static void CreateInstances()
		{
			using (Log.InfoTraceMethodCall())
			{
<%
	foreach(var cls in frozenClasses)
	{
		string implementationName = Implementation.ObjectClasses.Template.GetClassName(cls);
%>
				<%= implementationName %>.CreateInstances();
<%
	}
%>
			}
		}


		internal static void FillDataStore()
		{
			using (Log.InfoTraceMethodCall())
			{
<%
	foreach(var cls in frozenClasses)
	{
		string implementationName = Implementation.ObjectClasses.Template.GetClassName(cls);
%>
				<%= implementationName %>.FillDataStore();
<%
	}
%>
			}
		}
	}
}