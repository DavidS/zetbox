<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#"
    Name="Properties.CompoundObjectPropertyTemplate"
    ClassName="Zetbox.Generator.Templates.Properties.CompoundObjectPropertyTemplate"
    Inherits="Zetbox.Generator.MemberTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="serializationList" Type="Zetbox.Generator.Templates.Serialization.SerializationMembersList" %>
<%@ Parameter Name="xmlNamespace" Type="string" %>
<%@ Parameter Name="propName" Type="string" %>
<%@ Parameter Name="backingPropertyName" Type="string" %>
<%@ Parameter Name="backingStoreName" Type="string" %>
<%@ Parameter Name="coType" Type="string" %>
<%@ Parameter Name="coImplementationType" Type="string" %>
<%@ Parameter Name="disableExport" Type="bool" %>
        // BEGIN <%= this.GetType() %>
        // implement the user-visible interface
<% DelegatingProperty.Call(Host, ctx, propName, coType, backingPropertyName, coImplementationType); %>

        /// <summary>backing store for <%= UglyXmlEncode(propName) %></summary>
        private <%= coImplementationType %> <%= backingStoreName %>;

        /// <summary>backing property for <%= UglyXmlEncode(propName) %>, takes care of attaching/detaching the values</summary>
        <%= GetModifiers() %> <%= coImplementationType %> <%= backingPropertyName %>
        {
            get 
			{ 
				return <%= backingStoreName %>; 
			}
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value == null)
                    throw new ArgumentNullException("value");
                if (!object.Equals(<%= backingStoreName %>, value))
                {
					var __oldValue = <%= backingStoreName %>;
					var __newValue = value;

					NotifyPropertyChanging("<%= propName %>", __oldValue, __newValue);

					if (<%= backingStoreName %> != null)
					{ 
						<%= backingStoreName %>.DetachFromObject(this, "<%= propName %>");
					}
					__newValue = (<%= coImplementationType %>)__newValue.Clone();
					<%= backingStoreName %> = __newValue;
					<%= backingStoreName %>.AttachToObject(this, "<%= propName %>");

					NotifyPropertyChanged("<%= propName %>", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;
				}
				else
				{
					SetInitializedProperty("<%= propName %>");
				}
            }
        }
<%
        AddSerialization(serializationList, coType, propName, coImplementationType, backingPropertyName);
%>
        // END <%= this.GetType() %>