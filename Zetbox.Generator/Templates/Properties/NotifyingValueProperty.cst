<%@ CodeTemplate Language="C#" 
    Name="Properties.NotifyingValueProperty"
    ClassName="Zetbox.Generator.Templates.Properties.NotifyingValueProperty" 
    Inherits="Zetbox.Generator.MemberTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="serializationList" Type="Serialization.SerializationMembersList" %>
<%@ Parameter Name="type" Type="string" %>
<%@ Parameter Name="name" Type="string" %>
<%@ Parameter Name="modulenamespace" Type="string" %>
<%@ Parameter Name="backingName" Type="string" %>
<%@ Parameter Name="isCalculated" Type="bool" %>
        // BEGIN <%= this.GetType() %>
<%

    ApplyRequisitesTemplate();

    ApplyAttributesTemplate();

%>
        <%= GetModifiers() %> <%= type %> <%= name %>
        {
            get
            {
<% ApplySecurityCheckTemplate(); %>
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = <%= backingName %>;
<% ApplyOnGetTemplate(); %>
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
<% if (!isCalculated) ApplyOnAllSetTemplate(); %>
                if (<%= backingName %> != value)
                {
                    var __oldValue = <%= backingName %>;
                    var __newValue = value;
<% if (!isCalculated) ApplyPreSetTemplate(); %>
                    NotifyPropertyChanging("<%= name %>", __oldValue, __newValue);
                    <%= backingName %> = __newValue;
                    NotifyPropertyChanged("<%= name %>", __oldValue, __newValue);
<% if (isCalculated) { %>
			        <%= backingName %>_IsDirty = false;
<% } %>

<% if (!isCalculated) ApplyPostSetTemplate(); %>
                }
				else 
				{
					SetInitializedProperty("<%= name %>");
				}
            }
        }
<% ApplyBackingStoreDefinition(); %>
<% ApplyBackingStoreIsDirtyDefinition(); %>
<% ApplyTailTemplate(); %>
<% AddSerialization(serializationList, name); %>
        // END <%= this.GetType() %>
