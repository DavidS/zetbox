<%@ CodeTemplate Language="C#"
    Name="ObjectClasses.CustomTypeDescriptor"
    ClassName="Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor"
    Inherits="Kistl.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Import Namespace="Kistl.Generator" %>
<%@ Import Namespace="Kistl.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="cls" Type="ObjectClass" %>
<%@ Parameter Name="ifName" Type="string" %>
<%@ Parameter Name="implName" Type="string" %>
<%@ Parameter Name="propertyDescriptorName" Type="string" %>
        #region <%= this.GetType() %>
<%
    var properties = cls.Properties.OrderBy(p => p.Name).ToList();
    var rels = cls.GetRelations()
        .OrderBy(i => i.A.RoleName).ThenBy(i => i.Verb).ThenBy(i => i.B.RoleName)
        .OrderBy(i => i.A.Type.Name).ThenBy(i => i.B.Type.Name)
        .ThenBy(i => i.ExportGuid)
        .ToList();

    if (properties.Count > 0 || rels.Count > 0)
    {
%>
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
<%
        foreach(var property in properties)
        {
            string propertyName = property.Name;
            if (property.IsAssociation() && !property.IsObjectReferencePropertySingle())
            {
%>
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new <%= propertyDescriptorName %><<%= ifName %>, <%= property.GetPropertyTypeString() %>>(
                        lazyCtx,
                        new Guid("<%= property.ExportGuid %>"),
                        "<%= propertyName %>",
                        null,
                        obj => obj.<%= propertyName %>,
                        null, // lists are read-only properties
                        obj => On<%= propertyName %>_IsValid), 
<%          } else if (property is CalculatedObjectReferenceProperty) { %>
                    // property is CalculatedObjectReferenceProperty
                    new <%= propertyDescriptorName %><<%= ifName %>, <%= property.GetPropertyTypeString() %>>(
                        lazyCtx,
                        new Guid("<%= property.ExportGuid %>"),
                        "<%= propertyName %>",
                        null,
                        obj => obj.<%= propertyName %>,
                        null, // CalculatedObjectReferenceProperty is a read-only property
						null), // no constraints on calculated properties 
<%          } else { %>
<%              var isReadonly = (property is ValueTypeProperty) && ((ValueTypeProperty)property).IsCalculated; %>
                    // else
                    new <%= propertyDescriptorName %><<%= ifName %>, <%= property.GetPropertyTypeString() %>>(
                        lazyCtx,
                        new Guid("<%= property.ExportGuid %>"),
                        "<%= propertyName %>",
                        null,
                        obj => obj.<%= propertyName %>,
<%              if(isReadonly) { %>
                        null, // calculated property
						null), // no constraints on calculated properties
<%              } else { %>
                        (obj, val) => obj.<%= propertyName %> = val,
						obj => On<%= propertyName %>_IsValid), 
<%              } %>
<%          } %>
<%      } %>
<%      if ("Frozen".Equals(Settings["extrasuffix"])) %>
<%      { %>
                    // skipping position columns for frozen context (not implemented)
<%      } else { %>
                    // position columns
<%
            foreach(var rel in rels.Where(r => r.GetRelationType() == RelationType.one_n))
            {
            // only show debugging if there actually is an position column
            if (   (rel.A.Type == cls && rel.A.HasPersistentOrder)
                || (rel.B.Type == cls && rel.B.HasPersistentOrder))
            {
%>
                    // rel: <%= rel.A.RoleName %> <%= rel.Verb %> <%= rel.B.RoleName %> (<%= rel.ExportGuid %>)
<%
            }
            if (rel.A.Type == cls && rel.A.HasPersistentOrder)
            {
                var posColumnName = Construct.ListPositionPropertyName(rel.A);
%>
                    // rel.A.Type == cls && rel.A.HasPersistentOrder
                    new <%= propertyDescriptorName %><<%= implName %>, int?>(
                        lazyCtx,
                        null,
                        "<%= posColumnName %>",
                        null,
                        obj => obj.<%= posColumnName %>,
                        (obj, val) => obj.<%= posColumnName %> = val,
						null),
<%
                }

                if (rel.B.Type == cls && rel.B.HasPersistentOrder)
                {
                    var posColumnName = Construct.ListPositionPropertyName(rel.B);
%>
                    // rel.B.Type == cls && rel.B.HasPersistentOrder
                    new <%= propertyDescriptorName %><<%= implName %>, int?>(
                        lazyCtx,
                        null,
                        "<%= posColumnName %>",
                        null,
                        obj => obj.<%= posColumnName %>,
                        (obj, val) => obj.<%= posColumnName %> = val,
						null),
<%
                }
            }
        }
%>
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
<% } %>
        #endregion // <%= this.GetType() %>
