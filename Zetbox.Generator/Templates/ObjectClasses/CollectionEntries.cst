<%@ CodeTemplate Language="C#" 
	Name="ObjectClasses.CollectionEntries"
	ClassName="Zetbox.Generator.Templates.ObjectClasses.CollectionEntries" 
	Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Templates.CollectionEntries" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
// <autogenerated/>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using System.Xml.Serialization;
using System.Linq;

using Zetbox.API;
using Zetbox.DalProvider.Base.RelationWrappers;
<%
    foreach(string ns in GetAdditionalImports().Distinct().OrderBy(s => s))
    {
%>
using <%= ns %>;
<%
    }

	foreach (var rel in ctx.GetQuery<Relation>()
	    .Where(r => r.Storage == StorageType.Separate)
	    .ToList()
	    .OrderBy(r => r.GetRelationClassName()))
	{

%>

namespace <%= rel.Module.Namespace %>
{
<%
		RelationEntry.Call(Host, ctx, rel);
%>
}
<%
	}
%>
<%
	foreach (var prop in ctx.GetQuery<ValueTypeProperty>()
        .Where(p => p.IsList && !p.IsCalculated)
        .Where(p => p.ObjectClass is ObjectClass)
        .ToList() // NHibernate-on-linux workaround
        .OrderBy(p => p.ObjectClass.Name)
        .ThenBy(p => p.Name))
	{

%>

namespace <%= prop.GetCollectionEntryNamespace() %>
{
<%
		ValueCollectionEntry.Call(Host, ctx, prop);
%>
}
<%
	}
%>
<%
	foreach (var prop in ctx.GetQuery<CompoundObjectProperty>()
        .Where(p => p.IsList) // && !p.IsCalculated)
        .Where(p => p.ObjectClass is ObjectClass)
        .ToList() // NHibernate-on-linux workaround
        .OrderBy(p => p.ObjectClass.Name)
        .ThenBy(p => p.Name))
	{
%>

namespace <%= prop.GetCollectionEntryNamespace() %>
{
<%
		ValueCollectionEntry.Call(Host, ctx, prop);
%>
}
<%
	}
%>