<%@ CodeTemplate Language="C#"
    Name="Serialization.EnumBinarySerialization"
    ClassName="Kistl.Generator.Templates.Serialization.EnumBinarySerialization"
    Inherits="Kistl.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Import Namespace="Kistl.Generator" %>
<%@ Import Namespace="Kistl.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="direction" Type="SerializerDirection" %>
<%@ Parameter Name="streamName" Type="string" %>
<%@ Parameter Name="xmlnamespace" Type="string" %>
<%@ Parameter Name="xmlname" Type="string" %>
<%@ Parameter Name="backingStoreName" Type="string" %>
<%@ Parameter Name="enumerationType" Type="string" %>
<%
    ////
    ////  This class always serializes as int? to avoid complicating the code
    ////

    switch(direction){
        case SerializerDirection.ToStream:
%>
            <%= streamName %>.Write((int?)<%= backingStoreName %>);
<%
            break;
        case SerializerDirection.FromStream:
%>
            <%= backingStoreName %> = (<%= enumerationType %>)<%= streamName %>.ReadNullableInt32();
<%
            break;
        case SerializerDirection.Export:
%>
            if (modules.Contains("*") || modules.Contains("<%= xmlnamespace %>")) XmlStreamer.ToStream((int?)<%= backingStoreName %>, <%= streamName %>, "<%= xmlname %>", "<%= xmlnamespace %>");
<%
            break;
        case SerializerDirection.MergeImport:
%>
            case "<%= xmlnamespace %>|<%= xmlname %>":
                <%= backingStoreName %> = (<%= enumerationType %>)XmlStreamer.ReadNullableInt32(<%= streamName %>);
               break;
<%
            break;
        default:
            throw new ArgumentOutOfRangeException("direction");
    }
%>