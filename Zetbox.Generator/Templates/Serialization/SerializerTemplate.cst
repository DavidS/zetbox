<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#"
    Name="Serialization.SerializerTemplate"
    ClassName="Zetbox.Generator.Templates.Serialization.SerializerTemplate"
    Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="direction" Type="SerializerDirection" %>
<%@ Parameter Name="fields" Type="SerializationMembersList" %>
<%@ Parameter Name="overrideAndCallBase" Type="bool" %>
<%@ Parameter Name="exportGuidBackingStore" Type="string" %>

<%
    string methodName = direction.ToString();
    string argName;
    string argType;
    string additionalArgs = String.Empty;
    string callBaseWithAdditionalArgs = String.Empty;
    SerializerType serType;

    switch(direction)
    {
        case SerializerDirection.ToStream:
            argType = "Zetbox.API.ZetboxStreamWriter";
            argName = "binStream";
            methodName = "ToStream";
            serType = SerializerType.Binary;
            additionalArgs = ", HashSet<IStreamable> auxObjects, bool eagerLoadLists";
            callBaseWithAdditionalArgs = ", auxObjects, eagerLoadLists";
            break;
        case SerializerDirection.FromStream:
            argType = "Zetbox.API.ZetboxStreamReader";
            argName = "binStream";
            methodName = "FromStream";
            serType = SerializerType.Binary;
            break;
        case SerializerDirection.Export:
            argType = "System.Xml.XmlWriter";
            additionalArgs = ", string[] modules";
            callBaseWithAdditionalArgs = ", modules";
            argName = "xml";
            methodName = "Export";
            serType = SerializerType.ImportExport;
            break;
        case SerializerDirection.MergeImport:
            argType = "System.Xml.XmlReader";
            argName = "xml";
            methodName = "MergeImport";
            serType = SerializerType.ImportExport;
            break;
        default:
            throw new ArgumentOutOfRangeException("direction");
    }

    var fieldList = fields.Where(f => (f.SerializerType & serType) == serType).ToList();

    switch(direction)
    {
        case SerializerDirection.ToStream:
        case SerializerDirection.Export:
%>
        public <%= overrideAndCallBase ? "override" : "virtual" %> void <%= methodName %>(<%= argType %> <%= argName %><%= additionalArgs %>)
        {
<% if (overrideAndCallBase) { %>
            base.<%= methodName %>(<%= argName %><%= callBaseWithAdditionalArgs %>);
<% } else if (direction == SerializerDirection.Export && !String.IsNullOrEmpty(exportGuidBackingStore)) { %>
            xml.WriteAttributeString("ExportGuid", <%= exportGuidBackingStore %>.ToString());
<% }                                                                                %>
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
<%  foreach(var serMember in fieldList)        %>
<%  {                                                                                            %>
<%      if (direction == SerializerDirection.Export && serMember.XmlName == "ExportGuid")        %>
<%      {                                                                                        %>
<%          continue;                                                                            %>
<%      }                                                                                        %>
<%      ApplySerializer(direction, serMember, argName);                                            %>
<%  }                                                                                            %>
        }
<%          break;                                                                                %>
<%      case SerializerDirection.MergeImport:                                                    %>
        public <%= overrideAndCallBase ? "override" : "virtual" %> void <%= methodName %>(<%= argType %> <%= argName %><%= additionalArgs %>)
        {
<% if (overrideAndCallBase) {                                                        %>
            base.<%= methodName %>(<%= argName %><%= callBaseWithAdditionalArgs %>);
<% }                                                                                %>
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
<% if(fieldList.Count > 0) {                                                                        %>
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
<%            foreach(var serMember in fieldList)    %>
<%            {                                                                                        %>
<%                ApplySerializer(direction, serMember, argName);                                        %>
<%            }                                                                                        %>
            }
<% }                                                                                                %>
        }
<%          break;                                                                                    %>
<%      case SerializerDirection.FromStream:                                                        %>
        public <%= overrideAndCallBase ? "override" : "virtual" %> IEnumerable<IPersistenceObject> <%= methodName %>(<%= argType %> <%= argName %><%= additionalArgs %>)
        {
<% if (overrideAndCallBase) {                                                        %>
            var baseResult = base.<%= methodName %>(<%= argName %><%= callBaseWithAdditionalArgs %>);
            var result = new List<IPersistenceObject>();
<% } else {                                                                            %>
            object baseResult = null;
            var result = new List<IPersistenceObject>();
<% }                                                                                %>
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
<%            foreach(var serMember in fieldList)    %>
<%            {                                                                                        %>
<%                ApplySerializer(direction, serMember, argName);                                        %>
<%            }                                                                                        %>
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }
<%
            break;
        }
%>
