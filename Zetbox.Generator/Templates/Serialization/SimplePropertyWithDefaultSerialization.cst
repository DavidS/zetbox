<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#"
    Name="Serialization.SimplePropertyWithDefaultSerialization"
    ClassName="Zetbox.Generator.Templates.Serialization.SimplePropertyWithDefaultSerialization"
    Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="direction" Type="SerializerDirection" %>
<%@ Parameter Name="streamName" Type="string" %>
<%@ Parameter Name="xmlnamespace" Type="string" %>
<%@ Parameter Name="xmlname" Type="string" %>
<%@ Parameter Name="memberType" Type="string" %>
<%@ Parameter Name="memberName" Type="string" %>
<%@ Parameter Name="isSetFlagName" Type="string" %>
<%
    switch(direction)
    {
        case SerializerDirection.ToStream:
%>
            <%= streamName %>.Write(this.<%= isSetFlagName %>);
            if (this.<%= isSetFlagName %>) {
                <%= streamName %>.Write(this.<%= memberName %>);
            }
<%
            break;
        case SerializerDirection.FromStream:
%>
            this.<%= isSetFlagName %> = <%= streamName %>.ReadBoolean();
            if (this.<%= isSetFlagName %>) {
                this.<%= memberName %> = <%= streamName %>.<%= memberType.SerializerReadMethod() %>();
            }
<%
            break;
        case SerializerDirection.Export:
%>
            if (modules.Contains("*") || modules.Contains("<%= xmlnamespace %>")) XmlStreamer.ToStream(this.<%= memberName %>, <%= streamName %>, "<%= xmlname %>", "<%= xmlnamespace %>");
<%
            break;
        case SerializerDirection.MergeImport:
%>
            case "<%= xmlnamespace %>|<%= xmlname %>":
                // Import must have default value set
                this.<%= memberName %> = XmlStreamer.<%= memberType.SerializerReadMethod() %>(<%= streamName %>);
                this.<%= isSetFlagName %> = true;
                break;
<%
            break;
        default:
            throw new ArgumentOutOfRangeException("direction");
    }
%>
