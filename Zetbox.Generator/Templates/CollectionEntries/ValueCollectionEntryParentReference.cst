<%@ CodeTemplate Language="C#" 
    Name="CollectionEntries.ValueCollectionEntryParentReference"
    ClassName="Zetbox.Generator.Templates.CollectionEntries.ValueCollectionEntryParentReference" 
    Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="serializationList" Type="Zetbox.Generator.Templates.Serialization.SerializationMembersList" %>
<%@ Parameter Name="referencedInterface" Type="string" %>
<%@ Parameter Name="propertyName" Type="string" %>
<%@ Parameter Name="moduleNamespace" Type="string" %>
<%
    string cacheName = "_" + propertyName + "Cache";
    string fkName = "fk_" + propertyName;
    string backingName = "_" + fkName;
%>
        public <%= referencedInterface %> <%= propertyName %>
        {
            get
            {
                if (<%= cacheName %> != null && <%= cacheName %>.ID == <%= backingName %>)
                    return <%= cacheName %>;

                if (<%= backingName %>.HasValue)
                    <%= cacheName %> = this.Context.Find<<%= referencedInterface %>>(<%= backingName %>.Value);
                else
                    <%= cacheName %> = null;

                return <%= cacheName %>;
            }
            set
            {
                if (value == null && !<%= backingName %>.HasValue)
                    return;
                if (value != null && <%= backingName %>.HasValue && value.ID == <%= backingName %>.Value)
                    return;

                <%= cacheName %> = value;
                if (value != null)
                    <%= fkName %> = value.ID;
                else
                    <%= fkName %> = null;
            }
        }
        private <%= referencedInterface %> <%= cacheName %>;

        public int? <%= fkName %>
        {
            get
            {
                return <%= backingName %>;
            }
            set
            {
                if (<%= backingName %> != value)
                {
                    var __oldValue = <%= backingName %>;
                    NotifyPropertyChanging("<%= propertyName %>", __oldValue, value);
                    <%= backingName %> = value;
                    NotifyPropertyChanged("<%= propertyName %>", __oldValue, value);
                }
            }
        }

        // backing store for serialization
        private int? <%= backingName %>;
<%
    if (serializationList != null)
        serializationList.Add(Serialization.SerializerType.All, moduleNamespace, propertyName, "int?", backingName); // TODO: XML Namespace
%>
