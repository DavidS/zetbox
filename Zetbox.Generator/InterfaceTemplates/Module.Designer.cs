using System;
using System.Collections.Generic;
using System.Linq;
using Zetbox.API;


namespace Zetbox.Generator.InterfaceTemplates
{
    [Arebis.CodeGeneration.TemplateInfo(@"P:\zetbox\Zetbox.Generator\InterfaceTemplates\Module.cst")]
    public partial class Module : Zetbox.Generator.ResourceTemplate
    {
		protected IZetboxContext ctx;
		protected string shortName;


        public static void Call(Arebis.CodeGeneration.IGenerationHost _host, IZetboxContext ctx, string shortName)
        {
            if (_host == null) { throw new global::System.ArgumentNullException("_host"); }

            _host.CallTemplate("Module", ctx, shortName);
        }

        public Module(Arebis.CodeGeneration.IGenerationHost _host, IZetboxContext ctx, string shortName)
            : base(_host)
        {
			this.ctx = ctx;
			this.shortName = shortName;

        }

        public override void Generate()
        {
#line 17 "P:\zetbox\Zetbox.Generator\InterfaceTemplates\Module.cst"
this.WriteObjects("");
#line 27 "P:\zetbox\Zetbox.Generator\InterfaceTemplates\Module.cst"
this.WriteObjects("// <autogenerated/>\n");
this.WriteObjects("\n");
this.WriteObjects("namespace Zetbox.Objects\n");
this.WriteObjects("{\n");
this.WriteObjects("    using System;\n");
this.WriteObjects("    using System.Collections.Generic;\n");
this.WriteObjects("    using System.Linq;\n");
this.WriteObjects("    using System.Text;\n");
this.WriteObjects("    using Autofac;\n");
this.WriteObjects("    using Zetbox.API;\n");
this.WriteObjects("\n");
this.WriteObjects("    public sealed class InterfaceModule\n");
this.WriteObjects("        : Autofac.Module\n");
this.WriteObjects("    {\n");
this.WriteObjects("        protected override void Load(ContainerBuilder builder)\n");
this.WriteObjects("        {\n");
this.WriteObjects("            base.Load(builder);\n");
this.WriteObjects("            builder\n");
this.WriteObjects("                .Register<InterfaceTypeChecker>(c => new InterfaceTypeChecker(c.Resolve<Func<IEnumerable<IImplementationTypeChecker>>>()))\n");
this.WriteObjects("                .As<IInterfaceTypeChecker>()\n");
this.WriteObjects("                .SingleInstance();\n");
this.WriteObjects("\n");
this.WriteObjects("            builder.RegisterInstance(new Zetbox.API.Utils.TypeMapAssembly(typeof(InterfaceModule).Assembly));\n");
this.WriteObjects("        }\n");
this.WriteObjects("    }\n");
this.WriteObjects("\n");
this.WriteObjects("    internal sealed class InterfaceTypeChecker \n");
this.WriteObjects("        : BaseInterfaceTypeChecker, IInterfaceTypeChecker\n");
this.WriteObjects("    {\n");
this.WriteObjects("        internal InterfaceTypeChecker(Func<IEnumerable<IImplementationTypeChecker>> implTypeCheckersFactory)\n");
this.WriteObjects("            : base(implTypeCheckersFactory)\n");
this.WriteObjects("        {\n");
this.WriteObjects("        }\n");
this.WriteObjects("\n");
this.WriteObjects("        protected override System.Reflection.Assembly GetAssembly()\n");
this.WriteObjects("        {\n");
this.WriteObjects("            return typeof(InterfaceTypeChecker).Assembly;\n");
this.WriteObjects("        }\n");
this.WriteObjects("    }\n");
this.WriteObjects("}\n");
this.WriteObjects("\n");

        }

    }
}