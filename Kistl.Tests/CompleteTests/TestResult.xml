<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="E:\Projekte\Kistl\Kistl.Tests\CompleteTests\CompleteTests.nunit" total="421" failures="110" not-run="0" date="2008-05-07" time="09:58:40">
  <environment nunit-version="2.4.7.0" clr-version="2.0.50727.1433" os-version="Microsoft Windows NT 6.0.6000.0" platform="Win32NT" cwd="E:\Program Files\NUnit 2.4.7\bin" machine-name="KISTL" user="david" user-domain="kistl" />
  <culture-info current-culture="de-AT" current-uiculture="de-DE" />
  <test-suite name="E:\Projekte\Kistl\Kistl.Tests\CompleteTests\CompleteTests.nunit" success="False" time="3.370" asserts="0">
    <results>
      <test-suite name="E:\Projekte\Kistl\Kistl.Tests\CompleteTests\bin\Debug\API.Tests.dll" success="False" time="1.622" asserts="0">
        <results>
          <test-suite name="API" success="False" time="1.622" asserts="0">
            <results>
              <test-suite name="Tests" success="False" time="1.591" asserts="0">
                <results>
                  <test-suite name="Tests" success="False" time="0.936" asserts="0">
                    <results>
                      <test-suite name="APIInitTest" success="False" time="0.000" asserts="0">
                        <results>
                          <test-case name="API.Tests.Tests.APIInitTest.SecondInitFail" executed="True" success="False" time="0.000" asserts="0">
                            <failure>
                              <message><![CDATA[System.InvalidOperationException was expected]]></message>
                              <stack-trace />
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite name="AssemblyLoaderTests" success="False" time="0.047" asserts="0">
                        <results>
                          <test-case name="API.Tests.Tests.AssemblyLoaderTests.AssemblyResolve" executed="True" success="True" time="0.016" asserts="0" />
                          <test-case name="API.Tests.Tests.AssemblyLoaderTests.Load" executed="True" success="False" time="0.016" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                              <stack-trace><![CDATA[bei API.Tests.Tests.AssemblyLoaderTests.Load() in E:\Projekte\Kistl\Kistl.Tests\API.Tests\Tests\AssemblyLoaderTests.cs:Zeile 21.
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="API.Tests.Tests.AssemblyLoaderTests.ReflectionOnlyLoadFrom" executed="True" success="False" time="0.016" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                              <stack-trace><![CDATA[bei API.Tests.Tests.AssemblyLoaderTests.ReflectionOnlyLoadFrom() in E:\Projekte\Kistl\Kistl.Tests\API.Tests\Tests\AssemblyLoaderTests.cs:Zeile 28.
]]></stack-trace>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite name="BinarySerializerTests" success="False" time="0.187" asserts="0">
                        <results>
                          <test-case name="API.Tests.Tests.BinarySerializerTests.Bool" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.BoolNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.BoolNullValue" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.DateTime" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.DateTimeNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.Double" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.DoubleNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.DoubleNullValue" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.Enum" executed="True" success="False" time="0.016" asserts="0">
                            <failure>
                              <message><![CDATA[System.InvalidCastException : Das Objekt des Typs System.Int32 kann nicht in Typ System.Enum umgewandelt werden.]]></message>
                              <stack-trace><![CDATA[bei Kistl.API.BinarySerializer.FromBinary(Enum& val, BinaryReader sr) in E:\Projekte\Kistl\Kistl.API\BinarySerializer.cs:Zeile 234.
bei API.Tests.Tests.BinarySerializerTests.Enum() in E:\Projekte\Kistl\Kistl.Tests\API.Tests\Tests\BinarySerializerTests.cs:Zeile 139.
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="API.Tests.Tests.BinarySerializerTests.Float" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.FloatNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.FloatNullValue" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.ICollection_ICollectionEntry" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.ICollection_ObservableCollection_ICollectionEntry" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.IEnumerable_IDataObject" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.Int" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.IntNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.IntNullValue" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.ObjectType" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.ObjectTypeNull" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.SerializableExpression" executed="True" success="True" time="0.094" asserts="2" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.String" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.BinarySerializerTests.StringNull" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CustomActionsManagerFactoryTests" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="API.Tests.Tests.CustomActionsManagerFactoryTests.Init_Fail" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ExpressionFilterTest" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="API.Tests.Tests.ExpressionFilterTest.IllegalExpression" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="API.Tests.Tests.ExpressionFilterTest.IllegalExpressionClass_UnknownToString" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="API.Tests.Tests.ExpressionFilterTest.LegalExpression" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ExpressionTreeVisitorTests" success="True" time="0.062" asserts="0">
                        <results>
                          <test-case name="API.Tests.Tests.ExpressionTreeVisitorTests.Visit" executed="True" success="True" time="0.062" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ExtensionHelpersTest" success="True" time="0.390" asserts="0">
                        <results>
                          <test-case name="API.Tests.Tests.ExtensionHelpersTest.Clone_List" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="API.Tests.Tests.ExtensionHelpersTest.Clone_NotifyingObservableCollection" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.ExtensionHelpersTest.Clone_ObservableCollection" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.ExtensionHelpersTest.ForEach_IEnumerable" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.ExtensionHelpersTest.ForEach_ObservableCollection" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.ExtensionHelpersTest.GetPropertyValue" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="API.Tests.Tests.ExtensionHelpersTest.GetPropertyValue_InvalidPropertyName" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="API.Tests.Tests.ExtensionHelpersTest.In" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.ExtensionHelpersTest.InFalse" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.ExtensionHelpersTest.SetPropertyValue" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="API.Tests.Tests.ExtensionHelpersTest.SetPropertyValue_InvalidPropertyName" executed="True" success="True" time="0.016" asserts="0" />
                          <test-case name="API.Tests.Tests.ExtensionHelpersTest.XmlString" executed="True" success="True" time="0.343" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="KistlConfigTests" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="API.Tests.Tests.KistlConfigTests.Current" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="API.Tests.Tests.KistlConfigTests.FromStream" executed="True" success="True" time="0.000" asserts="9" />
                          <test-case name="API.Tests.Tests.KistlConfigTests.FromTextReader" executed="True" success="True" time="0.000" asserts="9" />
                          <test-case name="API.Tests.Tests.KistlConfigTests.ToFile" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="API.Tests.Tests.KistlConfigTests.ToStream" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="KistlServiceStreamsMessageTests" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="API.Tests.Tests.KistlServiceStreamsMessageTests.Stream" executed="True" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="LinqExtensionsTests" success="False" time="0.125" asserts="0">
                        <results>
                          <test-case name="API.Tests.Tests.LinqExtensionsTests.AddEqualityCondition" executed="True" success="True" time="0.047" asserts="1" />
                          <test-case name="API.Tests.Tests.LinqExtensionsTests.AddEqualityCondition_InvalidProperty" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="API.Tests.Tests.LinqExtensionsTests.AddEqualityCondition_InvalidType" executed="True" success="True" time="0.031" asserts="0" />
                          <test-case name="API.Tests.Tests.LinqExtensionsTests.AddFilter" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="API.Tests.Tests.LinqExtensionsTests.AddFilter_IllegalExpression" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="API.Tests.Tests.LinqExtensionsTests.AddOrderBy" executed="True" success="False" time="0.016" asserts="0">
                            <failure>
                              <message><![CDATA[System.InvalidOperationException : Der Index war außerhalb des Arraybereichs.
NodeType: Lambda
Type: System.Func`2[API.Tests.TestDataObject,System.String]
GenericArgument[0][1]: ]]></message>
                              <stack-trace><![CDATA[bei Kistl.API.LinqExtensions.AddOrderBy[T](IQueryable`1 queryable, Expression orderBy) in E:\Projekte\Kistl\Kistl.API\LinqExtensions.cs:Zeile 66.
bei API.Tests.Tests.LinqExtensionsTests.AddOrderBy() in E:\Projekte\Kistl\Kistl.Tests\API.Tests\Tests\LinqExtensionsTests.cs:Zeile 71.
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="API.Tests.Tests.LinqExtensionsTests.AddOrderBy_WithQuote" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="API.Tests.Tests.LinqExtensionsTests.GetExpressionValue_Constant" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.LinqExtensionsTests.GetExpressionValue_LambdaExpression" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="API.Tests.Tests.LinqExtensionsTests.GetExpressionValue_MemberExpression_Field" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.LinqExtensionsTests.GetExpressionValue_MemberExpression_Property" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="NotifyingObservableCollectionTests" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="API.Tests.Tests.NotifyingObservableCollectionTests.Event" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.NotifyingObservableCollectionTests.List" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.NotifyingObservableCollectionTests.SetItem" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ObjectTypeTests" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="API.Tests.Tests.ObjectTypeTests.Constructor_Empty" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="API.Tests.Tests.ObjectTypeTests.Constructor_IDataObject" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="API.Tests.Tests.ObjectTypeTests.Constructor_Namespace_Classname" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="API.Tests.Tests.ObjectTypeTests.Constructor_String" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="API.Tests.Tests.ObjectTypeTests.Constructor_Type" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="API.Tests.Tests.ObjectTypeTests.HashCode" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.ObjectTypeTests.InitAssembly" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.ObjectTypeTests.InitFail" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="API.Tests.Tests.ObjectTypeTests.InitString" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.ObjectTypeTests.NewDataObject" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="API.Tests.Tests.ObjectTypeTests.NewDataObject_Empty" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="API.Tests.Tests.ObjectTypeTests.NewDataObject_TypeNotFound" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="API.Tests.Tests.ObjectTypeTests.NewDataObject_TypeNotIDataObject" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="SerializableExpressionTests" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="API.Tests.Tests.SerializableExpressionTests.FromExpression_Null" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="API.Tests.Tests.SerializableExpressionTests.SerializableType_InvalidType" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="API.Tests.Tests.SerializableExpressionTests.SerializableType_InvalidType_Generic" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="API.Tests.Tests.SerializableExpressionTests.SerializableType_Valid" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite name="E:\Projekte\Kistl\Kistl.Tests\CompleteTests\bin\Debug\API.Server.Tests.dll" success="False" time="0.094" asserts="0">
        <results>
          <test-suite name="API" success="False" time="0.094" asserts="0">
            <results>
              <test-suite name="Server" success="False" time="0.094" asserts="0">
                <results>
                  <test-suite name="Tests" success="False" time="0.078" asserts="0">
                    <failure>
                      <message><![CDATA[System.InvalidOperationException : ICustomActionsManager.Init() was called twice]]></message>
                      <stack-trace><![CDATA[bei Kistl.API.CustomActionsManagerFactory.Init(ICustomActionsManager manager) in E:\Projekte\Kistl\Kistl.API\ICustomActions.cs:Zeile 44.
bei API.Server.Tests.SetUp.Init() in E:\Projekte\Kistl\Kistl.Tests\API.Server.Tests\SetUp.cs:Zeile 24.
]]></stack-trace>
                    </failure>
                    <results>
                      <test-case name="API.Server.Tests.Tests.BaseServerCollectionEntryTests.Clone" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerCollectionEntryTests.CopyTo" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerCollectionEntryTests.CopyTo_Null" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerCollectionEntryTests.FromStream_Null_Context" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerCollectionEntryTests.FromStream_Null_StreamReader" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerCollectionEntryTests.NotifyPropertyChanged_ing" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerCollectionEntryTests.Stream" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerCollectionEntryTests.ToStream_Null" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-suite name="API.Server.Tests.Tests.BaseServerCollectionEntryTests" success="False" time="0.000" asserts="0">
                        <results />
                      </test-suite>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.AttachToContext" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.Clone" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.CopyTo" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.CopyTo_Null" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.DetachFromContext" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.EventAttached" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.FromStream_Null_Context" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.FromStream_Null_StreamReader" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.FromStream_WrongType" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.NotifyChange" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.NotifyPropertyChanged_ing" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.ObjectState_CreatedObject" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.ObjectState_CreatedObject_Modified" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.ObjectState_New_then_UnModified" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.ObjectState_ObjectWithID" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.ObjectState_ObjectWithID_Modified" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.Stream" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.ToStream_Null" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.BaseServerDataObjectTests.Type" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-suite name="API.Server.Tests.Tests.BaseServerDataObjectTests" success="False" time="0.000" asserts="0">
                        <results />
                      </test-suite>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.Attach_ICollectionEntry" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.Attach_IDataObject_Existing" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.Attach_IDataObject_New" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.CleanUpSession" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.Create_Generic" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.Create_ObjectType" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.Create_Type" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.Delete_ICollectionEntry" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.Delete_IDataObject" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.Detach_ICollectionEntry" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.Detach_IDataObject" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.Detach_IDataObject_Failed" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.GetContext" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.GetListOf" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.GetListOf_ObjType" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.GetListOf_WrongPropertyName" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.GetQuery" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.GetQuery_ObjType" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.InitSession" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.InitSessionTwice" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.NoSession" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.SelectSomeData" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.SelectSomeData_Collection" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.UpdateSomeData_SaveChanges" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="API.Server.Tests.Tests.KistlDataContextTests.UpdateSomeData_SubmitChanges" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-suite name="API.Server.Tests.Tests.KistlDataContextTests" success="False" time="0.000" asserts="0">
                        <results />
                      </test-suite>
                      <test-suite name="API.Server.Tests.Tests" success="False" time="0.000" asserts="0">
                        <results />
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite name="E:\Projekte\Kistl\Kistl.Tests\CompleteTests\bin\Debug\Integration.Tests.dll" success="False" time="0.874" asserts="0">
        <results>
          <test-suite name="Integration" success="False" time="0.874" asserts="0">
            <results>
              <test-suite name="Tests" success="False" time="0.858" asserts="0">
                <failure>
                  <message><![CDATA[System.IO.FileNotFoundException : Die Datei oder Assembly Kistl.Server oder eine Abhängigkeit davon wurde nicht gefunden. Das System kann die angegebene Datei nicht finden.]]></message>
                  <stack-trace><![CDATA[bei System.Reflection.Assembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, Assembly locationHint, StackCrawlMark& stackMark, Boolean throwOnFileNotFound, Boolean forIntrospection)
bei System.Reflection.Assembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, Assembly locationHint, StackCrawlMark& stackMark, Boolean throwOnFileNotFound, Boolean forIntrospection)
bei System.Reflection.Assembly.InternalLoad(AssemblyName assemblyRef, Evidence assemblySecurity, StackCrawlMark& stackMark, Boolean forIntrospection)
bei System.Reflection.Assembly.InternalLoad(String assemblyString, Evidence assemblySecurity, StackCrawlMark& stackMark, Boolean forIntrospection)
bei System.Activator.CreateInstance(String assemblyName, String typeName, Boolean ignoreCase, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes, Evidence securityInfo, StackCrawlMark& stackMark)
bei System.Activator.CreateInstance(String assemblyName, String typeName)
bei System.AppDomain.CreateInstance(String assemblyName, String typeName)
bei System.AppDomain.CreateInstanceAndUnwrap(String assemblyName, String typeName)
bei System.AppDomain.CreateInstanceAndUnwrap(String assemblyName, String typeName)
bei Kistl.Client.Client.Start() in E:\Projekte\Kistl\Kistl.Client\Client.cs:Zeile 50.
bei Integration.Tests.SetUp.Init() in E:\Projekte\Kistl\Kistl.Tests\Integration.Tests\SetUp.cs:Zeile 26.
]]></stack-trace>
                </failure>
                <results>
                  <test-case name="Integration.Tests.Tests.GeneratorTests.Generate" executed="True" success="False" time="0.000" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                      <stack-trace />
                    </failure>
                  </test-case>
                  <test-suite name="Integration.Tests.Tests.GeneratorTests" success="False" time="0.000" asserts="0">
                    <results />
                  </test-suite>
                  <test-case name="Integration.Tests.Tests.GetListTests.GetList" executed="True" success="False" time="0.000" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                      <stack-trace />
                    </failure>
                  </test-case>
                  <test-case name="Integration.Tests.Tests.GetListTests.GetListWithOrderBy" executed="True" success="False" time="0.000" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                      <stack-trace />
                    </failure>
                  </test-case>
                  <test-case name="Integration.Tests.Tests.GetListTests.GetListWithParameterIllegal" executed="True" success="False" time="0.000" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                      <stack-trace />
                    </failure>
                  </test-case>
                  <test-case name="Integration.Tests.Tests.GetListTests.GetListWithParameterLegal" executed="True" success="False" time="0.000" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                      <stack-trace />
                    </failure>
                  </test-case>
                  <test-case name="Integration.Tests.Tests.GetListTests.GetListWithTop10" executed="True" success="False" time="0.000" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                      <stack-trace />
                    </failure>
                  </test-case>
                  <test-suite name="Integration.Tests.Tests.GetListTests" success="False" time="0.000" asserts="0">
                    <results />
                  </test-suite>
                  <test-case name="Integration.Tests.Tests.InheritanceTests.GetListOfInheritedObjects" executed="True" success="False" time="0.000" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                      <stack-trace />
                    </failure>
                  </test-case>
                  <test-case name="Integration.Tests.Tests.InheritanceTests.UpdateInheritedObject" executed="True" success="False" time="0.000" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                      <stack-trace />
                    </failure>
                  </test-case>
                  <test-suite name="Integration.Tests.Tests.InheritanceTests" success="False" time="0.000" asserts="0">
                    <results />
                  </test-suite>
                  <test-case name="Integration.Tests.Tests.ListPropetiesTests.AddStringListPropertyContent" executed="True" success="False" time="0.000" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                      <stack-trace />
                    </failure>
                  </test-case>
                  <test-case name="Integration.Tests.Tests.ListPropetiesTests.GetPointerListPropertyContent" executed="True" success="False" time="0.000" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                      <stack-trace />
                    </failure>
                  </test-case>
                  <test-case name="Integration.Tests.Tests.ListPropetiesTests.GetStringListPropertyContent" executed="True" success="False" time="0.000" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                      <stack-trace />
                    </failure>
                  </test-case>
                  <test-suite name="Integration.Tests.Tests.ListPropetiesTests" success="False" time="0.000" asserts="0">
                    <results />
                  </test-suite>
                  <test-case name="Integration.Tests.Tests.ObjectTests.GetListOf" executed="True" success="False" time="0.000" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                      <stack-trace />
                    </failure>
                  </test-case>
                  <test-case name="Integration.Tests.Tests.ObjectTests.GetListOf_List" executed="True" success="False" time="0.000" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                      <stack-trace />
                    </failure>
                  </test-case>
                  <test-case name="Integration.Tests.Tests.ObjectTests.GetObject" executed="True" success="False" time="0.000" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                      <stack-trace />
                    </failure>
                  </test-case>
                  <test-case name="Integration.Tests.Tests.ObjectTests.NewObject" executed="True" success="False" time="0.000" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                      <stack-trace />
                    </failure>
                  </test-case>
                  <test-case name="Integration.Tests.Tests.ObjectTests.SetObject" executed="True" success="False" time="0.000" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                      <stack-trace />
                    </failure>
                  </test-case>
                  <test-suite name="Integration.Tests.Tests.ObjectTests" success="False" time="0.000" asserts="0">
                    <results />
                  </test-suite>
                  <test-suite name="Integration.Tests.Tests" success="False" time="0.000" asserts="0">
                    <results />
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite name="E:\Projekte\Kistl\Kistl.Tests\CompleteTests\bin\Debug\Kistl.Client.Tests.dll" success="False" time="0.094" asserts="0">
        <results>
          <test-suite name="Kistl" success="False" time="0.078" asserts="0">
            <results>
              <test-suite name="Client" success="False" time="0.078" asserts="0">
                <results>
                  <test-suite name="Tests" success="False" time="0.078" asserts="0">
                    <failure>
                      <message><![CDATA[System.InvalidOperationException : ICustomActionsManager.Init() was called twice]]></message>
                      <stack-trace><![CDATA[bei Kistl.API.CustomActionsManagerFactory.Init(ICustomActionsManager manager) in E:\Projekte\Kistl\Kistl.API\ICustomActions.cs:Zeile 44.
bei Kistl.Client.Tests.SetUp.Init() in E:\Projekte\Kistl\Kistl.Tests\Kistl.Client.Tests\Tests\SetUp.cs:Zeile 26.
]]></stack-trace>
                    </failure>
                    <results>
                      <test-case name="Kistl.Client.Tests.BackReferencePresenterTests.HandleNoUserInput" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.BackReferencePresenterTests.ReInit" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-suite name="Kistl.Client.Tests.BackReferencePresenterTests" success="False" time="0.000" asserts="0">
                        <results />
                      </test-suite>
                      <test-case name="Kistl.Client.Tests.BoolPresenterTests.HandleFalseUserInput" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.BoolPresenterTests.HandleNoUserInput" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.BoolPresenterTests.HandleNullUserInput" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.BoolPresenterTests.HandleTrueUserInput" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.BoolPresenterTests.ReInit" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-suite name="Kistl.Client.Tests.BoolPresenterTests" success="False" time="0.000" asserts="0">
                        <results />
                      </test-suite>
                      <test-case name="Kistl.Client.Tests.DateTimePresenterTests.HandleConstant" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.DateTimePresenterTests.HandleExtrema" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.DateTimePresenterTests.HandleNoUserInput" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.DateTimePresenterTests.HandleNullUserInput" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.DateTimePresenterTests.ReInit" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-suite name="Kistl.Client.Tests.DateTimePresenterTests" success="False" time="0.000" asserts="0">
                        <results />
                      </test-suite>
                      <test-case name="Kistl.Client.Tests.DoublePresenterTests.HandleNoUserInput" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.DoublePresenterTests.HandleNullUserInput" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.DoublePresenterTests.HandleValues" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.DoublePresenterTests.ReInit" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-suite name="Kistl.Client.Tests.DoublePresenterTests" success="False" time="0.000" asserts="0">
                        <results />
                      </test-suite>
                      <test-case name="Kistl.Client.Tests.GuiDbTests.CreateControl" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.GuiDbTests.CreatePresenter" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.GuiDbTests.CreatePresenterFailNoInfo" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.GuiDbTests.CreatePresenterFailNoObject" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.GuiDbTests.CreatePresenterFailNoVisual" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.GuiDbTests.CreatePresenterFailNoWidget" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.GuiDbTests.FindControlInfo" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.GuiDbTests.FindPresenterInfo" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.GuiDbTests.ReInit" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-suite name="Kistl.Client.Tests.GuiDbTests" success="False" time="0.000" asserts="0">
                        <results />
                      </test-suite>
                      <test-case name="Kistl.Client.Tests.IntPresenterTests.HandleNoUserInput" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.IntPresenterTests.HandleNullUserInput" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.IntPresenterTests.HandleValues" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.IntPresenterTests.ReInit" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-suite name="Kistl.Client.Tests.IntPresenterTests" success="False" time="0.000" asserts="0">
                        <results />
                      </test-suite>
                      <test-case name="Kistl.Client.Tests.ObjectReferencePresenterTests.HandleNoUserInput" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.ObjectReferencePresenterTests.ReInit" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-suite name="Kistl.Client.Tests.ObjectReferencePresenterTests" success="False" time="0.000" asserts="0">
                        <results />
                      </test-suite>
                      <test-case name="Kistl.Client.Tests.StringPresenterTests.HandleEmptyString" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.StringPresenterTests.HandleNoUserInput" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.StringPresenterTests.HandleNullUserInput" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.StringPresenterTests.HandleNumbers" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.StringPresenterTests.HandleStrings" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-case name="Kistl.Client.Tests.StringPresenterTests.ReInit" executed="True" success="False" time="0.000" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in SetUp]]></message>
                          <stack-trace />
                        </failure>
                      </test-case>
                      <test-suite name="Kistl.Client.Tests.StringPresenterTests" success="False" time="0.000" asserts="0">
                        <results />
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite name="E:\Projekte\Kistl\Kistl.Tests\CompleteTests\bin\Debug\NMock2.AcceptanceTests.dll" success="True" time="0.218" asserts="0">
        <results>
          <test-suite name="NMock2" success="True" time="0.218" asserts="0">
            <results>
              <test-suite name="AcceptanceTests" success="True" time="0.218" asserts="0">
                <results>
                  <test-suite name="ArgumentMatchingAcceptanceTest" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NMock2.AcceptanceTests.ArgumentMatchingAcceptanceTest.CanMixMatcherAndNonMatcherExpectedArguments" executed="True" success="True" time="0.016" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="ErrorCheckingAcceptanceTest" success="True" time="0.047" asserts="0">
                    <results>
                      <test-case name="NMock2.AcceptanceTests.ErrorCheckingAcceptanceTest.CannotExpectAddToNonexistentEvent" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ErrorCheckingAcceptanceTest.CannotExpectAMethodOnAnRealObject" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ErrorCheckingAcceptanceTest.CannotExpectAMethodThatDoesNotExistInTheMockedType" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ErrorCheckingAcceptanceTest.CannotExpectAMethodWithAnInvalidName" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ErrorCheckingAcceptanceTest.CannotExpectGetOfAnInvalidProperty" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ErrorCheckingAcceptanceTest.CannotExpectGetOfIndexerIfNoIndexerInMockedType" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ErrorCheckingAcceptanceTest.CannotExpectRemoveFromNonexistentEvent" executed="True" success="True" time="0.016" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ErrorCheckingAcceptanceTest.CannotExpectSetOfAnInvalidProperty" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ErrorCheckingAcceptanceTest.CannotExpectSetOfIndexerIfNoIndexerInMockedType" executed="True" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="ErrorMessageDemo" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NMock2.AcceptanceTests.ErrorMessageDemo.EventAdd" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ErrorMessageDemo.IndexerSet" executed="True" success="True" time="0.016" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ErrorMessageDemo.UnexpectedInvocation" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ErrorMessageDemo.VerifyFailure" executed="True" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="EventsAcceptanceTest" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NMock2.AcceptanceTests.EventsAcceptanceTest.CanExpectEventAdd" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.EventsAcceptanceTest.CanExpectEventRemove" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.EventsAcceptanceTest.DelegatesCanBeComparedToEquality" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.AcceptanceTests.EventsAcceptanceTest.EventHandlersCanBeRemovedDuringEventHandling" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.EventsAcceptanceTest.EventHandlingByMocksRespectsAdditionAndRemovalOfListeners" executed="True" success="True" time="0.000" asserts="3" />
                      <test-case name="NMock2.AcceptanceTests.EventsAcceptanceTest.EventsCanBeRaisedDuringTests" executed="True" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite name="Example" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NMock2.AcceptanceTests.Example.KnockKnockJoke" executed="True" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="ExpectationsAcceptanceTest" success="True" time="0.047" asserts="0">
                    <results>
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.ExpectationsCanOverrideStubs" executed="True" success="True" time="0.016" asserts="2" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.FailsTestIfMethodExpectedAtLeastNTimesButCalledLessThanNTimes" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.FailsTestIfMethodExpectedAtMostNTimesAndCalledMoreThanNTimes" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.FailsTestIfMethodExpectedBetweenNAndMTimesAndCalledMoreThanMTimes" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.FailsTestIfMethodExpectedBetweenNAndMTimesButCalledLessThanNTimes" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.FailsTestIfMethodExpectedOnceButCalledTwice" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.FailsTestIfMethodExpectedOnceButNotCalled" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.FailsTestIfMethodNeverExpectedIsActuallyCalled" executed="True" success="True" time="0.016" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.FailsTestIfMethodNeverExpectedIsCalled" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.PassesTestIfMethodExpectedAtLeastNTimesAndCalledMoreThanNTimes" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.PassesTestIfMethodExpectedAtLeastNTimesAndCalledNTimes" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.PassesTestIfMethodExpectedAtMostNTimesAndCalledLessThanNTimes" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.PassesTestIfMethodExpectedAtMostNTimesAndCalledNTimes" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.PassesTestIfMethodExpectedBetweenNAndMTimesAndCalledBetweenNAndMTimes" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.PassesTestIfMethodExpectedOnceAndCalled" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.PassesTestIfMethodNeverExpectedIsNeverCalled" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.TestShouldFailIfExpectedExactlyNTimesAndCalledLessThanNTimes" executed="True" success="True" time="0.016" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.TestShouldFailIfExpectedExactlyNTimesAndCalledMoreThanNTimes" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.ExpectationsAcceptanceTest.TestShouldPassIfExpectedExactlyNTimesAndCalledNTimes" executed="True" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="IndexersAcceptanceTest" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NMock2.AcceptanceTests.IndexersAcceptanceTest.CanExpectIndexedGetter" executed="True" success="True" time="0.000" asserts="2" />
                      <test-case name="NMock2.AcceptanceTests.IndexersAcceptanceTest.CanExpectIndexedSetter" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.IndexersAcceptanceTest.ErrorMessagesContainNameOfIndexedGetterNotHiddenMethod" executed="True" success="True" time="0.000" asserts="3" />
                      <test-case name="NMock2.AcceptanceTests.IndexersAcceptanceTest.ErrorMessagesContainNameOfPropertySetterNotHiddenMethod" executed="True" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite name="MockeryAcceptanceTest" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NMock2.AcceptanceTests.MockeryAcceptanceTest.CallingVerifyOnMockeryShouldEnableMockeryToBeUsedSuccessfullyForOtherTests" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.AcceptanceTests.MockeryAcceptanceTest.MockEmptyInterface" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.AcceptanceTests.MockeryAcceptanceTest.MockGenericInterfaceWithArgs1" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.AcceptanceTests.MockeryAcceptanceTest.MockGenericInterfaceWithArgs2" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.AcceptanceTests.MockeryAcceptanceTest.MockGenericInterfaceWithArgs3" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.AcceptanceTests.MockeryAcceptanceTest.MockGenericInterfaceWithArgs4" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.AcceptanceTests.MockeryAcceptanceTest.MockGenericInterfaceWithArgs5" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.AcceptanceTests.MockeryAcceptanceTest.MockGenericInterfaceWithArgs6" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.AcceptanceTests.MockeryAcceptanceTest.MockMixedInterface" executed="True" success="True" time="0.000" asserts="2" />
                      <test-case name="NMock2.AcceptanceTests.MockeryAcceptanceTest.MockObjectsMayBePlacedIntoServiceContainers" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.AcceptanceTests.MockeryAcceptanceTest.MockSimpleGenericInterface" executed="True" success="True" time="0.000" asserts="2" />
                      <test-case name="NMock2.AcceptanceTests.MockeryAcceptanceTest.MockSimpleGenericInterfaceWithArgs" executed="True" success="True" time="0.000" asserts="2" />
                      <test-case name="NMock2.AcceptanceTests.MockeryAcceptanceTest.MockSimpleInterface" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.AcceptanceTests.MockeryAcceptanceTest.MockSimpleInterfaceWithArgs" executed="True" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite name="OrderedCallsAcceptanceTest" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NMock2.AcceptanceTests.OrderedCallsAcceptanceTest.AllowsCallsIfCalledInSameOrderAsExpectedWithinAnInOrderBlock" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.OrderedCallsAcceptanceTest.CallsInOrderedBlocksThatAreNotMatchedFailVerification" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.OrderedCallsAcceptanceTest.CallsWithinAnInOrderedBlockCanBeExpectedMoreThanOnce" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.OrderedCallsAcceptanceTest.CanExpectUnorderedCallsWithinAnOrderedSequence" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.OrderedCallsAcceptanceTest.DoesNotEnforceTheOrderOfCallsByDefault" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.OrderedCallsAcceptanceTest.EnforcesTheOrderOfCallsWithinAnInOrderBlock" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.OrderedCallsAcceptanceTest.UnorderedCallsWithinAnInOrderedBlockCannotBeCalledAfterTheEndOfTheUnorderedExpectations" executed="True" success="True" time="0.016" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.OrderedCallsAcceptanceTest.UnorderedCallsWithinAnInOrderedBlockCannotBeCalledBeforeTheStartOfTheUnorderedExpectations" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.OrderedCallsAcceptanceTest.UnorderedExpectationsMatchInOrderOfSpecification" executed="True" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite name="PropertiesAcceptanceTest" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NMock2.AcceptanceTests.PropertiesAcceptanceTest.CanExpectPropertyGetter" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.PropertiesAcceptanceTest.CanExpectPropertySetter" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.PropertiesAcceptanceTest.ErrorMessagesContainNameOfPropertyGetterNotHiddenMethod" executed="True" success="True" time="0.000" asserts="4" />
                      <test-case name="NMock2.AcceptanceTests.PropertiesAcceptanceTest.ErrorMessagesContainNameOfPropertySetterNotHiddenMethod" executed="True" success="True" time="0.000" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite name="StubAcceptanceTest" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NMock2.AcceptanceTests.StubAcceptanceTest.StubsCanBeCalledAnyNumberOfTimes" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.StubAcceptanceTest.StubsDoNotHaveToBeCalled" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.AcceptanceTests.StubAcceptanceTest.StubsMatchArgumentsAndPerformActionsJustLikeAnExpectation" executed="True" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="UsingBlockAcceptanceTest" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NMock2.AcceptanceTests.UsingBlockAcceptanceTest.AssertsExpectationsAreMetAtEndOfUsingBlock" executed="True" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite name="E:\Projekte\Kistl\Kistl.Tests\CompleteTests\bin\Debug\NMock2.Test.dll" success="True" time="0.359" asserts="0">
        <results>
          <test-suite name="NMock2" success="True" time="0.328" asserts="0">
            <results>
              <test-suite name="Internal" success="True" time="0.016" asserts="0">
                <results>
                  <test-suite name="Test" success="True" time="0.016" asserts="0">
                    <results>
                      <test-suite name="BuildableExpectationTest" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NMock2.Internal.Test.BuildableExpectationTest.ChecksCallCountToAssertThatItHasBeenMet" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NMock2.Internal.Test.BuildableExpectationTest.DoesNotMatchIfAnyMatcherDoesNotMatch" executed="True" success="True" time="0.000" asserts="63" />
                          <test-case name="NMock2.Internal.Test.BuildableExpectationTest.HasReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Internal.Test.BuildableExpectationTest.InvokesAListOfActionsToPerformAnInvocation" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NMock2.Internal.Test.BuildableExpectationTest.MatchesCallCountWhenMatchingInvocation" executed="True" success="True" time="0.016" asserts="10" />
                          <test-case name="NMock2.Internal.Test.BuildableExpectationTest.MatchesIfAllMatchersMatch" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Internal.Test.BuildableExpectationTest.WillNotPrintAPeriodBetweenReceiverAndMethodIfToldToDescribeItselfAsAnIndexer" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="DescriptionWriterTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Internal.Test.DescriptionWriterTest.FormatsNullAsNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Internal.Test.DescriptionWriterTest.FormatsStringsInCSharpSyntaxWhenWrittenAsObject" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Internal.Test.DescriptionWriterTest.HighlightsOtherValuesWhenWrittenAsObject" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite name="Test" success="True" time="0.296" asserts="0">
                <results>
                  <test-suite name="Actions" success="True" time="0.047" asserts="0">
                    <results>
                      <test-suite name="CollectActionTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Actions.CollectActionTest.CollectsParameterValueAtSpecifiedIndex" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Actions.CollectActionTest.HasAReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Actions.CollectActionTest.ReturnsParameterValueFromMostRecentOfMultipleCalls" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="FireActionTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Actions.FireActionTest.FiresEventOnInvocationReceiver" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Actions.FireActionTest.HasAReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ResultSynthesizerTest" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Actions.ResultSynthesizerTest.CanOverrideDefaultResultForType" executed="True" success="True" time="0.016" asserts="0" />
                          <test-case name="NMock2.Test.Actions.ResultSynthesizerTest.CanSpecifyResultForOtherType" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NMock2.Test.Actions.ResultSynthesizerTest.CreatesDefaultValuesForBasicTypes" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NMock2.Test.Actions.ResultSynthesizerTest.DoesNotTryToSetResultForVoidReturnType" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NMock2.Test.Actions.ResultSynthesizerTest.HasAReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Actions.ResultSynthesizerTest.ReturnsADifferentCollectionOnEachInvocation" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NMock2.Test.Actions.ResultSynthesizerTest.ReturnsDefaultValueOfValueTypes" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NMock2.Test.Actions.ResultSynthesizerTest.ReturnsEmptyCollections" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NMock2.Test.Actions.ResultSynthesizerTest.ReturnsZeroLengthArrays" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NMock2.Test.Actions.ResultSynthesizerTest.ThrowsExceptionIfTriesToReturnValueForUnsupportedResultType" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="ReturnActionTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Actions.ReturnActionTest.HasAReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Actions.ReturnActionTest.SetsReturnValueOfInvocation" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ReturnCloneActionTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Actions.ReturnCloneActionTest.HasAReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Actions.ReturnCloneActionTest.ReturnsCloneOfPrototypeObject" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="SetIndexedParameterActionTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Actions.SetIndexedParameterActionTest.HasReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Actions.SetIndexedParameterActionTest.SetsIndexedParameterOnInvocation" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="SetNamedParameterActionTest" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Actions.SetNamedParameterActionTest.HasReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Actions.SetNamedParameterActionTest.SetsNamedParameterOnInvocation" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ThrowActionTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Actions.ThrowActionTest.HasReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Actions.ThrowActionTest.SetsExceptionOfInvocation" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite name="Matchers" success="True" time="0.125" asserts="0">
                    <results>
                      <test-suite name="AlwaysMatcherTest" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Matchers.AlwaysMatcherTest.AlwaysReturnsFixedBooleanValueFromMatchesMethod" executed="True" success="True" time="0.000" asserts="12" />
                          <test-case name="NMock2.Test.Matchers.AlwaysMatcherTest.IsGivenADescription" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AndMatcherTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Matchers.AndMatcherTest.CalculatesLogicalConjunctionOfTwoMatchers" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NMock2.Test.Matchers.AndMatcherTest.CanUseOperatorOverloadingAsSyntacticSugar" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NMock2.Test.Matchers.AndMatcherTest.HasAReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ArgumentsMatcherTest" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Matchers.ArgumentsMatcherTest.DescribesAsIndexGetterArguments" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.ArgumentsMatcherTest.DescribesAsIndexSetterArguments" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.ArgumentsMatcherTest.DoesNotMatchAndDoesNotThrowExceptionIfValueSpecifiedForOutputParameter" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.ArgumentsMatcherTest.DoesNotMatchAnObjectThatIsNotAnInvocation" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.ArgumentsMatcherTest.DoesNotMatchIfValueMatchersDoNotMatchArgumentValues" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NMock2.Test.Matchers.ArgumentsMatcherTest.DoesNotMatchInvocationWithDifferentNumberOfArguments" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NMock2.Test.Matchers.ArgumentsMatcherTest.FormatsDescriptionToLookSimilarToAnArgumentList" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.ArgumentsMatcherTest.MatchesInvocationWithSameNumberOfArgumentsAsMatcherHasValueMatchersAndValueMatchersMatch" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.ArgumentsMatcherTest.MatchesOutputParametersWithSpecialMatcherClass" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.ArgumentsMatcherTest.ShowsOutputParametersInDescription" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ComparisonMatcherTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Matchers.ComparisonMatcherTest.CannotCreateComparisonThatMatchesAnything" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NMock2.Test.Matchers.ComparisonMatcherTest.CanSpecifyMinAndMaxComparisonResultInAnyOrder" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NMock2.Test.Matchers.ComparisonMatcherTest.DoesNotMatchObjectOfDifferentType" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.ComparisonMatcherTest.HasReadableDescription" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NMock2.Test.Matchers.ComparisonMatcherTest.MatchesAComparisonOfAComparableValue" executed="True" success="True" time="0.000" asserts="9" />
                        </results>
                      </test-suite>
                      <test-suite name="DescriptionOverrideTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Matchers.DescriptionOverrideTest.DelegatesMatchingToAnotherMatcher" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NMock2.Test.Matchers.DescriptionOverrideTest.OverridesDescriptionOfOtherMatcherWithThatPassedToConstructor" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="ElementMatcherTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Matchers.ElementMatcherTest.HasAReadableDescription" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NMock2.Test.Matchers.ElementMatcherTest.IsNullSafe" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NMock2.Test.Matchers.ElementMatcherTest.MatchesIfArgumentInCollection" executed="True" success="True" time="0.000" asserts="5" />
                        </results>
                      </test-suite>
                      <test-suite name="EqualMatcherTest" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Matchers.EqualMatcherTest.CanCompareAutoboxedValues" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NMock2.Test.Matchers.EqualMatcherTest.ComparesArgumentForEqualityToExpectedObject" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NMock2.Test.Matchers.EqualMatcherTest.ComparesArraysForEqualityByContents" executed="True" success="True" time="0.000" asserts="7" />
                          <test-case name="NMock2.Test.Matchers.EqualMatcherTest.ComparesMultidimensionalArraysForEquality" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NMock2.Test.Matchers.EqualMatcherTest.HasAReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.EqualMatcherTest.IsNullSafe" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NMock2.Test.Matchers.EqualMatcherTest.RecursivelyComparesArrayContentsOfNestedArrays" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NMock2.Test.Matchers.EqualMatcherTest.RecursivelyComparesContentsOfNestedLists" executed="True" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="FieldMatcherTest" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Matchers.FieldMatcherTest.DoesNotMatchNonPublicField" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NMock2.Test.Matchers.FieldMatcherTest.DoesNotMatchObjectIfItDoesNotHaveNamedField" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.FieldMatcherTest.DoesNotMatchObjectIfValueMatcherDoesNotMatch" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.FieldMatcherTest.DoesNotMatchStaticField" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.FieldMatcherTest.HasAReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.FieldMatcherTest.MatchesObjectWithMatchingField" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="MethodNameMatcherTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Matchers.MethodNameMatcherTest.DoesNotMatchObjectsThatAreNotMethodInfo" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.MethodNameMatcherTest.MatchesMethodsWithAGivenName" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NMock2.Test.Matchers.MethodNameMatcherTest.UsesMethodNameAsDescription" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="NotMatcherTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Matchers.NotMatcherTest.CalculatesTheLogicalNegationOfAMatcher" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NMock2.Test.Matchers.NotMatcherTest.CanUseOperatorOverloadingAsSyntacticSugar" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NMock2.Test.Matchers.NotMatcherTest.HasAReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="NullMatcherTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Matchers.NullMatcherTest.MatchesNullReferences" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NMock2.Test.Matchers.NullMatcherTest.ProvidesAReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="OrMatcherTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Matchers.OrMatcherTest.CalculatesLogicalDisjunctionOfTwoMatchers" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NMock2.Test.Matchers.OrMatcherTest.CanUseOperatorOverloadingAsSyntacticSugar" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NMock2.Test.Matchers.OrMatcherTest.HasAReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="PropertyMatcherTest" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Matchers.PropertyMatcherTest.DoesNotMatchObjectIfItDoesNotHaveNamedProperty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.PropertyMatcherTest.DoesNotMatchObjectIfPropertyMatcherDoesNotMatch" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.PropertyMatcherTest.DoesNotMatchPrivateProperty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.PropertyMatcherTest.DoesNotMatchWriteOnlyProperty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.PropertyMatcherTest.HasAReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.PropertyMatcherTest.MatchesObjectWithNamedPropertyAndMatchingPropertyValue" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="SameMatcherTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Matchers.SameMatcherTest.HasAReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.SameMatcherTest.IsNullSafe" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NMock2.Test.Matchers.SameMatcherTest.MatchesSameObject" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="StringContainsMatcherTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Matchers.StringContainsMatcherTest.HasAReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Matchers.StringContainsMatcherTest.MatchesIfStringArgumentContainsGivenSubstring" executed="True" success="True" time="0.000" asserts="7" />
                        </results>
                      </test-suite>
                      <test-suite name="ToStringMatcherTest" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Matchers.ToStringMatcherTest.PassesResultOfToStringToOtherMatcher" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NMock2.Test.Matchers.ToStringMatcherTest.ReturnsAReadableDescription" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TypeMatcherTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Matchers.TypeMatcherTest.DoesNotMatchValueOfNonAssignableType" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NMock2.Test.Matchers.TypeMatcherTest.MatchesValueOfAssignableType" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite name="MockeryTest" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="NMock2.Test.MockeryTest.AssertionExceptionThrownWhenNoExpectationsMatchContainsDescriptionOfActiveExpectations" executed="True" success="True" time="0.000" asserts="10" />
                      <test-case name="NMock2.Test.MockeryTest.AssertionExceptionThrownWhenSomeExpectationsHaveNotBeenMetContainsDescriptionOfUnMetExpectations" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.Test.MockeryTest.CanCreateMockWithoutCastingBySpecifingTypeAsGenericParameter" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.Test.MockeryTest.CreatedMockComparesReferenceIdentityWithEqualsMethod" executed="True" success="True" time="0.000" asserts="2" />
                      <test-case name="NMock2.Test.MockeryTest.CreatedMockReturnsNameFromToString" executed="True" success="True" time="0.000" asserts="2" />
                      <test-case name="NMock2.Test.MockeryTest.CreatesMocksThatCanBeCastToIMockObject" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.Test.MockeryTest.CreatesMocksThatCanBeCastToMockedType" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.Test.MockeryTest.DetectsWhenFirstExpectationHasNotBeenMet" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.Test.MockeryTest.DetectsWhenSecondExpectationHasNotBeenMet" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.Test.MockeryTest.DispatchesInvocationBySearchingForMatchingExpectationInOrderOfAddition" executed="True" success="True" time="0.000" asserts="19" />
                      <test-case name="NMock2.Test.MockeryTest.FailsTestIfNoExpectationsMatch" executed="True" success="True" time="0.000" asserts="6" />
                      <test-case name="NMock2.Test.MockeryTest.GenericMockCanSpecifyName" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.Test.MockeryTest.GivesMocksDefaultNameIfNoNameSpecified" executed="True" success="True" time="0.000" asserts="4" />
                      <test-case name="NMock2.Test.MockeryTest.MockReturnsNameFromToString" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.Test.MockeryTest.ShouldBeAbleToInvokeMethodOnInheritedInterface" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.Test.MockeryTest.StopsSearchingForMatchingExpectationAsSoonAsOneMatches" executed="True" success="True" time="0.000" asserts="13" />
                      <test-case name="NMock2.Test.MockeryTest.VerifiesWhenAllExpectationsHaveBeenMet" executed="True" success="True" time="0.000" asserts="0" />
                      <test-case name="NMock2.Test.MockeryTest.VerifyExpectationsReportsOnUnexpectedInvocationsWhoseExceptionsWereCaughtElsewhere" executed="True" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="Monitoring" success="True" time="0.078" asserts="0">
                    <results>
                      <test-suite name="InvocationSemanticsTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Monitoring.InvocationSemanticsTest.OutParametersAreSetAfterExceptionThrown" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="InvocationTest" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.AllowsNullResultForMethodThatReturnsANullableType" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.AllowsSettingNullResultOfVoidMethod" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.CanBeInvokedOnAnotherObject" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.DescriptionOfEventAdderDoesNotShowSugaredMethod" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.DescriptionOfEventRemoverDoesNotShowSugaredMethod" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.DescriptionOfInvocationOfIndexerGetterDoesNotShowSugaredMethod" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.DescriptionOfInvocationOfIndexerSetterDoesNotShowSugaredMethod" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.DescriptionOfInvocationOfPropertyGetterDoesNotShowSugaredMethod" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.DescriptionOfInvocationOfPropertySetterDoesNotShowSugaredMethod" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.DoesNotAllowNullException" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.DoesNotAllowNullResultForMethodThatReturnsAValueType" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.DoesNotAllowSettingIncompatibleResultType" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.DoesNotAllowSettingNonNullResultOfVoidMethod" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.SettingExceptionClearsResult" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.SettingResultClearsException" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.StoresExceptionToThrow" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.StoresResultToReturn" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NMock2.Test.Monitoring.InvocationTest.TrapsExceptionsWhenInvokedOnAnotherObject" executed="True" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="InvokerTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Monitoring.InvokerTest.ForwardsInvocationsToNextIfMethodIsNotDeclaredInSpecifiedType" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NMock2.Test.Monitoring.InvokerTest.InvokesMethodOnObjectIfMethodIsDeclaredInSpecifiedType" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="MultiInterfaceFactoryTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Monitoring.MultiInterfaceFactoryTest.AvoidsNameClash" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Monitoring.MultiInterfaceFactoryTest.CreatesTypeInfoObjectsThatRepresentAnInterfaceThatExtendsAllParameterInterfaces" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NMock2.Test.Monitoring.MultiInterfaceFactoryTest.ReturnsTheSameTypeWhenPassedTheSameArguments" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NMock2.Test.Monitoring.MultiInterfaceFactoryTest.ReturnsTheSameTypeWhenPassedTheSameArgumentsInDifferentOrder" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ParameterListTest" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Monitoring.ParameterListTest.CanSetValuesOfOutAndRefParameters" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NMock2.Test.Monitoring.ParameterListTest.DoesNotAllowAccessToValuesOfUnsetOutParameters" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Monitoring.ParameterListTest.DoesNotAllowValuesOfInputParametersToBeChanged" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NMock2.Test.Monitoring.ParameterListTest.ReturnsNumberOfParameters" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Monitoring.ParameterListTest.ReturnsValuesOfInParameters" executed="True" success="True" time="0.000" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite name="ProxiedObjectIdentityTest" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Monitoring.ProxiedObjectIdentityTest.ForwardsGetHashCodeToIdentityProvider" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Monitoring.ProxiedObjectIdentityTest.ForwardsInvocationsOfOtherMethodsToNextInChain" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NMock2.Test.Monitoring.ProxiedObjectIdentityTest.ForwardsToStringToIdentityProvider" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Monitoring.ProxiedObjectIdentityTest.ImplementsEqualsByComparingInvocationReceiversForIdentity" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="ProxyInvokableAdapterTest" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NMock2.Test.Monitoring.ProxyInvokableAdapterTest.CapturesInvocationsOnTransparentProxyAndForwardsToInvokableObject" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NMock2.Test.Monitoring.ProxyInvokableAdapterTest.PassesExceptionThrownByInvokableToCallerOfProxy" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NMock2.Test.Monitoring.ProxyInvokableAdapterTest.ReturnsOutAndRefParametersFromInvocationToCallerOfProxy" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NMock2.Test.Monitoring.ProxyInvokableAdapterTest.ReturnsResultFromInvocationToCallerOfProxy" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NMock2.Test.Monitoring.ProxyInvokableAdapterTest.ThrowsExceptionFromInvocationToCallerOfProxy" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite name="VerifyTest" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NMock2.Test.VerifyTest.CanPrependCustomMessageToDescriptionOfFailure" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.Test.VerifyTest.VerifyThatFailsIfMatcherDoesNotMatchValue" executed="True" success="True" time="0.000" asserts="1" />
                      <test-case name="NMock2.Test.VerifyTest.VerifyThatPassesIfMatcherMatchesValue" executed="True" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>