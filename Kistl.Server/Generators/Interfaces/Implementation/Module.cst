<%@ CodeTemplate Language="C#" 
    Name="Implementation.Module"
    ClassName="Kistl.Server.Generators.Interfaces.Implementation.Module" 
    Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="shortName" Type="string" %>
<%@ Parameter Name="extraSuffix" Type="string" %>
// <autogenerated/>

namespace Kistl.Objects
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Autofac;
    using Kistl.API;

    public sealed class InterfaceModule
        : Autofac.Module
    {
        protected override void Load(ContainerBuilder builder)
        {
            base.Load(builder);
            builder
                .RegisterType<InterfaceTypeChecker>()
                .As<IInterfaceTypeChecker>()
                .SingleInstance();
        }
    }

    public sealed class InterfaceTypeChecker 
        : BaseInterfaceTypeChecker, IInterfaceTypeChecker
    {
        public InterfaceTypeChecker(Func<IEnumerable<IImplementationTypeChecker>> implTypeCheckersFactory)
            : base(implTypeCheckersFactory)
        {
        }

        protected override System.Reflection.Assembly GetAssembly()
        {
            return this.GetType().Assembly;
        }
    }
}

