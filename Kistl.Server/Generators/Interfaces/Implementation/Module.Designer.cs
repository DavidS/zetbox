using System;
using System.Collections.Generic;
using System.Linq;
using Kistl.API;


namespace Kistl.Server.Generators.Interfaces.Implementation
{
    [Arebis.CodeGeneration.TemplateInfo(@"P:\Kistl\Kistl.Server\Generators\Interfaces\Implementation\Module.cst")]
    public partial class Module : Kistl.Server.Generators.KistlCodeTemplate
    {
		protected IKistlContext ctx;
		protected string shortName;
		protected string extraSuffix;


        public Module(Arebis.CodeGeneration.IGenerationHost _host, IKistlContext ctx, string shortName, string extraSuffix)
            : base(_host)
        {
			this.ctx = ctx;
			this.shortName = shortName;
			this.extraSuffix = extraSuffix;

        }
        
        public override void Generate()
        {
#line 12 "P:\Kistl\Kistl.Server\Generators\Interfaces\Implementation\Module.cst"
this.WriteObjects("// <autogenerated/>\r\n");
this.WriteObjects("\r\n");
this.WriteObjects("namespace Kistl.Objects\r\n");
this.WriteObjects("{\r\n");
this.WriteObjects("    using System;\r\n");
this.WriteObjects("    using System.Collections.Generic;\r\n");
this.WriteObjects("    using System.Linq;\r\n");
this.WriteObjects("    using System.Text;\r\n");
this.WriteObjects("    using Autofac;\r\n");
this.WriteObjects("    using Kistl.API;\r\n");
this.WriteObjects("\r\n");
this.WriteObjects("    public sealed class InterfaceModule\r\n");
this.WriteObjects("        : Autofac.Module\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("        protected override void Load(ContainerBuilder builder)\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("            base.Load(builder);\r\n");
this.WriteObjects("            builder\r\n");
this.WriteObjects("                .RegisterType<InterfaceTypeChecker>()\r\n");
this.WriteObjects("                .As<IInterfaceTypeChecker>()\r\n");
this.WriteObjects("                .SingleInstance();\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects("\r\n");
this.WriteObjects("    public sealed class InterfaceTypeChecker \r\n");
this.WriteObjects("        : BaseInterfaceTypeChecker, IInterfaceTypeChecker\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("        public InterfaceTypeChecker(Func<IEnumerable<IImplementationTypeChecker>> implTypeCheckersFactory)\r\n");
this.WriteObjects("            : base(implTypeCheckersFactory)\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects("\r\n");
this.WriteObjects("        protected override System.Reflection.Assembly GetAssembly()\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("            return this.GetType().Assembly;\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects("}\r\n");
this.WriteObjects("\r\n");

        }



    }
}