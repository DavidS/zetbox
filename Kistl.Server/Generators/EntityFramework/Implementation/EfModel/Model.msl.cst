<%@ CodeTemplate Language="C#" 
	Name="Implementation.EfModel.ModelMsl"
	CodeFile="Implementation.EfModel.ModelMsl.cs" 
	ClassName="Kistl.Server.Generators.EntityFramework.Implementation.EfModel.ModelMsl" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<?xml version="1.0" encoding="utf-8"?>
<Mapping Space="C-S" xmlns="urn:schemas-microsoft-com:windows:storage:mapping:CS">
  <EntityContainerMapping StorageEntityContainer="dbo" CdmEntityContainer="Entities">
    
    <!-- EntitySetMappings for classes -->
<%
	foreach(var cls in ctx.GetBaseClasses())
	{
%>
    <EntitySetMapping Name="<%= cls.ClassName %>">
<% ApplyEntityTypeMapping(cls); %>
    </EntitySetMapping>
<%
	}
%>


    <!-- EntitySetMappings for collections -->
<%
	foreach(var prop in ctx.GetObjectListPropertiesWithStorage())
	{
		var info = AssociationInfo.CreateInfo(ctx, prop);
%>
    <EntitySetMapping Name="<%= info.BSide.Type.ClassName %>">
      <EntityTypeMapping TypeName="IsTypeOf(Model.<%= info.BSide.Type.ClassName %>)">
        <MappingFragment StoreEntitySet="<%= info.BSide.Type.ClassName %>">
          <ScalarProperty Name="ID" ColumnName="ID" />
<%
	if (prop is ValueTypeProperty)
	{
%>
          <ScalarProperty Name="Value" ColumnName="<%= prop.PropertyName %>" />
<%	}

	if (prop.NeedsPositionColumn())
	{
%>
          <ScalarProperty Name="ValueIndex" ColumnName="<%= Construct.ListPositionColumnName(prop, "") %>" />
<%	}

	if (prop.IsIndexed)
	{
%>
          <ScalarProperty Name="ValueIndex" ColumnName="<%= Construct.ListPositionColumnName(prop.ObjectClass) %>" />
<%	}
%>
        </MappingFragment>
      </EntityTypeMapping>
    </EntitySetMapping>
<%
	}
	
%>


    <!-- AssociationSetMappings -->
<%
	foreach(var prop in ctx.GetAssociationPropertiesWithStorage())
	{
		var info = AssociationInfo.CreateInfo(ctx, prop);
		var colName = prop.IsList ? prop.ObjectClass.ClassName : prop.PropertyName;
%>
    <!-- <%= info.GetType().Name %> -->
    <AssociationSetMapping Name="<%= info.AssociationName %>" TypeName="Model.<%= info.AssociationName %>" StoreEntitySet="<%= info.BSide.StorageEntitySet %>" >
      <EndProperty Name="<%= info.ASide.RoleName %>">
        <ScalarProperty Name="ID" ColumnName="fk_<%= colName %>"/>
      </EndProperty>
      <EndProperty Name="<%= info.BSide.RoleName %>">
        <ScalarProperty Name="ID" ColumnName="ID"/>
      </EndProperty>
      <Condition ColumnName="fk_<%= colName %>" IsNull="false"/>
    </AssociationSetMapping>
<%	}
%>
  </EntityContainerMapping>
</Mapping>