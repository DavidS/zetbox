<%@ CodeTemplate Language="C#" 
	Name="Implementation.EfModel.ModelMsl"
	CodeFile="Implementation.EfModel.ModelMsl.cs" 
	ClassName="Kistl.Server.Generators.EntityFramework.Implementation.EfModel.ModelMsl" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Import Namespace="Kistl.Server.Movables" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<?xml version="1.0" encoding="utf-8"?>
<Mapping Space="C-S" xmlns="urn:schemas-microsoft-com:windows:storage:mapping:CS">
  <EntityContainerMapping StorageEntityContainer="dbo" CdmEntityContainer="Entities">
    
    <!-- EntitySetMappings for classes -->
<%
	foreach(var cls in ctx.GetBaseClasses())
	{
%>
    <EntitySetMapping Name="<%= cls.ClassName %>">
<% ApplyEntityTypeMapping(cls); %>
    </EntitySetMapping>
<%
	}
%>


    <!-- EntitySetMappings and AssociationSetMappings for object-object relations with a CollectionEntry -->
<%
	foreach(var rel in NewRelation.GetAll(ctx)
        .Where(r => r.GetPreferredStorage() == StorageHint.Separate)
        .OrderBy(r => r.GetAssociationName()))
	{
		string fkAName = rel.GetCollectionEntryFkaColumnName();
		string fkBName = rel.GetCollectionEntryFkbColumnName();
%>
    <!--
<%
	CallTemplate("Implementation.RelationDebugTemplate", ctx, rel);
%>
    -->
    <EntitySetMapping Name="<%= rel.GetCollectionEntryClassName() %>">
      <EntityTypeMapping TypeName="IsTypeOf(Model.<%= rel.GetCollectionEntryClassName() %>)">
        <MappingFragment StoreEntitySet="<%= rel.GetCollectionEntryClassName() %>">
          <ScalarProperty Name="ID" ColumnName="ID" />
<%
	if (rel.A.HasPersistentOrder)
	{
%>
          <ScalarProperty Name="A<%= Kistl.API.Helper.PositionSuffix %>" ColumnName="<%= fkAName %><%= Kistl.API.Helper.PositionSuffix %>" />
<%
	}

	if (rel.B.HasPersistentOrder)
	{
%>
          <ScalarProperty Name="B<%= Kistl.API.Helper.PositionSuffix %>" ColumnName="<%= fkBName %><%= Kistl.API.Helper.PositionSuffix %>" />
<%
	}
%>
        </MappingFragment>
      </EntityTypeMapping>
    </EntitySetMapping>
    <!-- A to CollectionEntry -->
    <AssociationSetMapping Name="<%= rel.GetCollectionEntryAssociationName(rel.A) %>"
                           TypeName="Model.<%= rel.GetCollectionEntryAssociationName(rel.A) %>"
                           StoreEntitySet="<%= rel.GetCollectionEntryClassName() %>" >
      <EndProperty Name="<%= rel.A.RoleName %>">
        <ScalarProperty Name="ID" ColumnName="<%= fkAName %>"/>
      </EndProperty>
      <EndProperty Name="CollectionEntry">
        <ScalarProperty Name="ID" ColumnName="ID"/>
      </EndProperty>
      <Condition ColumnName="<%= fkAName %>" IsNull="false"/>
    </AssociationSetMapping>
    <!-- B to CollectionEntry -->
    <AssociationSetMapping Name="<%= rel.GetCollectionEntryAssociationName(rel.B) %>"
                           TypeName="Model.<%= rel.GetCollectionEntryAssociationName(rel.B) %>"
                           StoreEntitySet="<%= rel.GetCollectionEntryClassName() %>" >
      <EndProperty Name="<%= rel.B.RoleName %>">
        <ScalarProperty Name="ID" ColumnName="<%= fkBName %>"/>
      </EndProperty>
      <EndProperty Name="CollectionEntry">
        <ScalarProperty Name="ID" ColumnName="ID"/>
      </EndProperty>
      <Condition ColumnName="<%= fkBName %>" IsNull="false"/>
    </AssociationSetMapping>

<%
	}
	
%>


    <!-- AssociationSetMappings for direct object-object relations without a CollectionEntry -->
<%
	foreach(var rel in NewRelation.GetAll(ctx)
        .Where(r => r.GetPreferredStorage() != StorageHint.Separate)
        .OrderBy(r => r.GetAssociationName()))
	{
		RelationEnd principal, dependent;
	
		switch(rel.GetPreferredStorage())
		{
			case StorageHint.MergeA:
				principal = rel.B;
				dependent = rel.A;
				break;
			case StorageHint.MergeB:
				principal = rel.A;
				dependent = rel.B;
				break;
			default:
				throw new NotImplementedException();
		}
%>
    <!--
<%
	CallTemplate("Implementation.RelationDebugTemplate", ctx, rel);
%>
    -->
    <AssociationSetMapping Name="<%= rel.GetAssociationName() %>"
                           TypeName="Model.<%= rel.GetAssociationName() %>"
                           StoreEntitySet="<%= dependent.Type.ClassName %>" >
      <EndProperty Name="<%= principal.RoleName %>">
        <ScalarProperty Name="ID" ColumnName="fk_<%= principal.RoleName %>"/>
      </EndProperty>
      <EndProperty Name="<%= dependent.RoleName %>">
        <ScalarProperty Name="ID" ColumnName="ID"/>
      </EndProperty>
      <Condition ColumnName="fk_<%= principal.RoleName %>" IsNull="false"/>
    </AssociationSetMapping>
<%
	}
	
%>

    <!-- EntitySetMappings and AssociationSetMappings for ValueType lists -->
<%
	foreach(var prop in ctx.GetQuery<ValueTypeProperty>()
        .Where(p => p.IsList)
        .OrderBy(p => p.ObjectClass.ClassName)
        .OrderBy(p => p.PropertyName))
	{ 
%>
    <EntitySetMapping Name="<%= prop.GetCollectionEntryClassName() %>">
      <EntityTypeMapping TypeName="IsTypeOf(Model.<%= prop.GetCollectionEntryClassName() %>)">
        <MappingFragment StoreEntitySet="<%= prop.GetCollectionEntryClassName() %>">
          <ScalarProperty Name="ID" ColumnName="ID" />
          <ScalarProperty Name="B" ColumnName="<%= prop.PropertyName %>" />
<%
	if (prop.IsIndexed)
	{
%>
          <ScalarProperty Name="B<%= Kistl.API.Helper.PositionSuffix %>" ColumnName="BIndex" />
<%
	}
%>
        </MappingFragment>
      </EntityTypeMapping>
    </EntitySetMapping>
    <AssociationSetMapping Name="<%= prop.GetAssociationName() %>"
                           TypeName="Model.<%= prop.GetAssociationName() %>"
                           StoreEntitySet="<%= prop.GetCollectionEntryClassName() %>" >
      <EndProperty Name="<%= prop.ObjectClass.ClassName %>">
        <ScalarProperty Name="ID" ColumnName="fk_<%= prop.ObjectClass.ClassName %>"/>
      </EndProperty>
      <EndProperty Name="CollectionEntry">
        <ScalarProperty Name="ID" ColumnName="ID"/>
      </EndProperty>
      <Condition ColumnName="fk_<%= prop.ObjectClass.ClassName %>" IsNull="false"/>
    </AssociationSetMapping>
<%
	}
	
%>

  </EntityContainerMapping>
</Mapping>