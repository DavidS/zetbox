<%@ CodeTemplate Language="C#" 
	Name="Implementation.EfModel.ModelMsl"
	CodeFile="Implementation.EfModel.ModelMsl.cs" 
	ClassName="Kistl.Server.Generators.EntityFramework.Implementation.EfModel.ModelMsl" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Import Namespace="Kistl.Server.Movables" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<?xml version="1.0" encoding="utf-8"?>
<Mapping Space="C-S" xmlns="urn:schemas-microsoft-com:windows:storage:mapping:CS">
  <EntityContainerMapping StorageEntityContainer="dbo" CdmEntityContainer="Entities">
    
    <!-- EntitySetMappings for classes -->
<%
	foreach(var cls in ctx.GetBaseClasses())
	{
%>
    <EntitySetMapping Name="<%= cls.ClassName %>">
<% ApplyEntityTypeMapping(cls); %>
    </EntitySetMapping>
<%
	}
%>


    <!-- EntitySetMappings for relations -->
<%
	foreach(var rel in NewRelation.GetAll(ctx).OrderBy(r => r.GetAssociationName()))
	{
%>
    <!--
<%
	CallTemplate("Implementation.RelationDebugTemplate", ctx, rel);
%>
    -->
    <EntitySetMapping Name="<%= rel.GetCollectionEntryClassName() %>">
      <EntityTypeMapping TypeName="IsTypeOf(Model.<%= rel.GetCollectionEntryClassName() %>)">
        <MappingFragment StoreEntitySet="<%= rel.GetCollectionEntryClassName() %>">
          <ScalarProperty Name="ID" ColumnName="ID" />
<%
	if (rel.A.HasPersistentOrder)
	{
%>
          <ScalarProperty Name="AIndex" ColumnName="AIndex" />
<%
	}

	if (rel.B.HasPersistentOrder)
	{
%>
          <ScalarProperty Name="BIndex" ColumnName="BIndex" />
<%
	}
%>
        </MappingFragment>
      </EntityTypeMapping>
    </EntitySetMapping>
    <!-- A to CollectionEntry -->
    <AssociationSetMapping Name="<%= rel.GetAssociationName() %>"
                           TypeName="Model.<%= rel.GetAssociationName() %>"
                           StoreEntitySet="<%= rel.GetCollectionEntryClassName() %>" >
      <EndProperty Name="<%= rel.A.RoleName %>">
        <ScalarProperty Name="ID" ColumnName="fk_A"/>
      </EndProperty>
      <EndProperty Name="A">
        <ScalarProperty Name="ID" ColumnName="ID"/>
      </EndProperty>
      <Condition ColumnName="fk_A" IsNull="false"/>
    </AssociationSetMapping>
    <!-- B to CollectionEntry -->
    <AssociationSetMapping Name="<%= rel.GetAssociationName() %>"
                           TypeName="Model.<%= rel.GetAssociationName() %>"
                           StoreEntitySet="<%= rel.GetCollectionEntryClassName() %>" >
      <EndProperty Name="<%= rel.A.RoleName %>">
        <ScalarProperty Name="ID" ColumnName="fk_A"/>
      </EndProperty>
      <EndProperty Name="<%= rel.B.RoleName %>">
        <ScalarProperty Name="ID" ColumnName="ID"/>
      </EndProperty>
      <Condition ColumnName="fk_A" IsNull="false"/>
    </AssociationSetMapping>

<%
	}
	
%>

    <!-- EntitySetMappings for ValueType lists -->
<%
	foreach(var prop in ctx.GetQuery<ValueTypeProperty>()
		.Where(p => p.IsList))
	{ 
	#if false // TODO
%>
    <EntitySetMapping Name="<%= rel.GetCollectionEntryClassName() %>">
      <EntityTypeMapping TypeName="IsTypeOf(Model.<%= rel.GetCollectionEntryClassName() %>)">
        <MappingFragment StoreEntitySet="<%= rel.GetCollectionEntryClassName() %>">
          <ScalarProperty Name="ID" ColumnName="ID" />
<%
	if (rel.A.HasPersistentOrder)
	{
%>
          <ScalarProperty Name="AIndex" ColumnName="AIndex" />
<%
	}

	if (rel.B.HasPersistentOrder)
	{
%>
          <ScalarProperty Name="BIndex" ColumnName="BIndex" />
<%
	}
%>
        </MappingFragment>
      </EntityTypeMapping>
    </EntitySetMapping>
<%
	#endif
	}
	
%>

  </EntityContainerMapping>
</Mapping>