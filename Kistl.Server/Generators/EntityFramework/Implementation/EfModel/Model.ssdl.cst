<%@ CodeTemplate Language="C#" 
	Name="Implementation.EfModel.ModelSsdl"
	CodeFile="Implementation.EfModel.ModelSsdl.cs" 
	ClassName="Kistl.Server.Generators.EntityFramework.Implementation.EfModel.ModelSsdl" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<?xml version="1.0" encoding="utf-8"?>
<Schema xmlns="http://schemas.microsoft.com/ado/2006/04/edm/ssdl"
        Namespace="Model.Store"
        Alias="Self"
        Provider="System.Data.SqlClient"
        ProviderManifestToken="2005" >
  <EntityContainer Name="dbo">

    <!-- EntitySets for all Base Classes -->
<%	
	foreach(var cls in ctx.GetBaseClasses())
	{
%>
    <EntitySet Name="<%= cls.ClassName %>" EntityType="Model.Store.<%= cls.ClassName %>" Table="<%= cls.TableName %>"/>
<%	}
%>

    <!-- EntitySets for all derived classes and their inheritance AssociationSets -->
<%	
	foreach(var cls in ctx.GetDerivedClasses())
	{
		var info = new InheritanceStorageAssociationInfo(cls);
%>
    <EntitySet Name="<%= cls.ClassName %>" EntityType="Model.Store.<%= cls.ClassName %>" Table="<%= cls.TableName %>"/>
    <AssociationSet Name="<%= info.AssociationName %>" Association="Model.Store.<%= info.AssociationName %>" >
      <End Role="<%= info.ParentRoleName %>" EntitySet="<%= info.ParentEntitySetName %>" />
      <End Role="<%= info.ChildRoleName %>" EntitySet="<%= info.ChildEntitySetName %>" />
    </AssociationSet>
    
<%	}
%>

    <!-- EntitySets for all CollectionEntrys -->
<%
	foreach(var prop in ctx.GetObjectListPropertiesWithStorage())
	{
		string entityName = Construct.PropertyCollectionEntryType(prop).ClassName;
%>
    <EntitySet Name="<%= entityName %>" EntityType="Model.Store.<%= entityName %>" />
<%	}
%>

    <!-- AssociationSets -->
<%
	foreach(var prop in ctx.GetAssociationPropertiesWithStorage())
	{
		var info = AssociationInfo.CreateInfo(ctx, prop);
%>
    <AssociationSet Name="<%= info.AssociationName %>" Association="Model.Store.<%= info.AssociationName %>" >
      <End Role="<%= info.ASide.RoleName %>" EntitySet="<%= info.ASide.StorageEntitySet %>" />
      <End Role="<%= info.BSide.RoleName %>" EntitySet="<%= info.BSide.StorageEntitySet %>" />
    </AssociationSet>
<%	}
%>
  </EntityContainer>

  <!-- EntityTypes for all classes -->
<%
	foreach(var cls in ctx.GetQuery<ObjectClass>())
	{
%>	
  <EntityType Name="<%= cls.ClassName %>">
    <Key>
      <PropertyRef Name="ID" />
    </Key>
    <Property Name="ID" Type="int" Nullable="false" <%= (cls.BaseObjectClass == null) ? "StoreGeneratedPattern=\"Identity\" " : "" %>/>
<%
		ApplyEntityTypeColumnDefs(cls.Properties.OfType<Property>().ToList().Where(p => p.IsList == false && p.HasStorage()));
%>
  </EntityType>
<%	}
%>

  <!-- EntityTypes for all CollectionEntrys -->
<%
	foreach(var p in ctx.GetObjectListPropertiesWithStorage())
	{
		TypeMoniker otherType = Construct.PropertyCollectionEntryType(p);
%>	
  <EntityType Name="<%= otherType.ClassName %>">
    <Key>
      <PropertyRef Name="ID" />
    </Key>
    <Property Name="ID" Type="int" Nullable="false" StoreGeneratedPattern="Identity" />
    <Property Name="<%= Construct.ForeignKeyColumnNameReferencing(p.ObjectClass) %>" Type="int" Nullable="true" />
<%
		if (p.IsIndexed)
		{
%>
    <Property Name="<%= Construct.ForeignListPositionColumnName(p.ObjectClass) %>" Type="int" Nullable="true" />
<%
		}
	
		ApplyEntityTypeColumnDefs(new List<Property>() { p } );
%>
  </EntityType>
<%	}


	// define associations between entities
	
%>


  <!-- First, all derived->base ObjectClass references -->
<%
	foreach(var cls in ctx.GetDerivedClasses())
	{
		TypeMoniker parentType = cls.BaseObjectClass.GetTypeMoniker();
		TypeMoniker childType = cls.GetTypeMoniker();
		
		string parentRoleName = Construct.AssociationParentRoleName(parentType);
		string childRoleName = Construct.AssociationChildRoleName(childType);
%>
  <Association Name="<%= Construct.AssociationName(parentType, childType, "ID") %>">
    <End Role="<%= parentRoleName %>" Type="Model.Store.<%= parentType.ClassName %>" Multiplicity="1" />
    <End Role="<%= childRoleName %>" Type="Model.Store.<%= childType.ClassName %>" Multiplicity="0..1" />
    <ReferentialConstraint>
      <Principal Role="<%= parentRoleName %>">
        <PropertyRef Name="ID" />
      </Principal>
      <Dependent Role="<%= childRoleName %>">
        <PropertyRef Name="ID" />
      </Dependent>
    </ReferentialConstraint>
  </Association>
<%	}
%>


  <!-- then all 1:n ObjectReferences -->
<%
	foreach(var p in ctx.GetObjectReferencePropertiesWithStorage()) 
	{
		var info = AssociationInfo.CreateInfo(ctx, p);
%>
  <Association Name="<%= info.AssociationName %>">
    <End Role="<%= info.Parent.RoleName %>" Type="Model.Store.<%= info.Parent.Type.ClassName %>" Multiplicity="1" />
    <End Role="<%= info.Child.RoleName %>" Type="Model.Store.<%= info.Child.Type.ClassName %>" Multiplicity="0..1" />
    <ReferentialConstraint>
      <Principal Role="<%= info.Parent.RoleName %>">
        <PropertyRef Name="ID" />
      </Principal>
      <Dependent Role="<%= info.Child.RoleName %>">
        <PropertyRef Name="<%= Construct.ForeignKeyColumnName(p) %>" />
      </Dependent>
    </ReferentialConstraint>
  </Association>
<%	}
%>


  <!-- and finally all n:n ObjectReference lists -->
<%
	foreach(var p in ctx.GetObjectListPropertiesWithStorage()) 
	{
		var info = AssociationInfo.CreateInfo(ctx, p);
%>
  <Association Name="<%= info.AssociationName %>">
    <End Role="<%= info.Parent.RoleName %>" Type="Model.Store.<%= info.Parent.Type.ClassName %>" Multiplicity="1" />
    <End Role="<%= info.Child.RoleName %>" Type="Model.Store.<%= info.Child.Type.ClassName %>" Multiplicity="0..1" />
    <ReferentialConstraint>
      <Principal Role="<%= info.Parent.RoleName %>">
        <PropertyRef Name="ID" />
      </Principal>
      <Dependent Role="<%= info.Child.RoleName %>">
        <PropertyRef Name="<%= Construct.ForeignKeyColumnNameReferencing(p.ObjectClass) %>" />
      </Dependent>
    </ReferentialConstraint>
  </Association>
<%	} %>
</Schema>