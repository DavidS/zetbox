<%@ CodeTemplate Language="C#" 
	Name="Implementation.EfModel.ModelSsdl"
	CodeFile="Implementation.EfModel.ModelSsdl.cs" 
	ClassName="Kistl.Server.Generators.EntityFramework.Implementation.EfModel.ModelSsdl" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<?xml version="1.0" encoding="utf-8"?>
<Schema xmlns="http://schemas.microsoft.com/ado/2006/04/edm/ssdl"
        Namespace="Model.Store"
        Alias="Self"
        Provider="System.Data.SqlClient"
        ProviderManifestToken="2005" >
  <EntityContainer Name="dbo">
<%	
	// EntitySets for all Base Classes
	foreach(var cls in ctx.GetBaseClasses())
	{
%>
    <EntitySet Name="<%= cls.ClassName %>" EntityType="Model.<%= cls.ClassName %>" Table="<%= cls.TableName %>"/>
<%	}

	// EntitySets for all CollectionEntrys and associated AssociationSets
	foreach(var prop in ctx.GetObjectListPropertiesWithStorage())
	{
		string entityName = Construct.PropertyCollectionEntryType(prop).ClassName;
%>
    <EntitySet Name="<%= entityName %>" EntityType="Model.<%= entityName %>" />
<%
		TypeMoniker parentType = prop.ObjectClass.GetTypeMoniker();
		TypeMoniker childType = Construct.PropertyCollectionEntryType(prop);
		string associationName = Construct.AssociationName(parentType, childType, "fk_Parent");
%>
    <AssociationSet Name="<%= associationName %>" Association="Model.<%= associationName %>" >
      <End Role="<%= Construct.AssociationParentRoleName(parentType) %>" EntitySet="<%= ((ObjectClass)prop.ObjectClass).GetRootClass().ClassName %>" />
      <End Role="<%= Construct.AssociationChildRoleName(childType) %>" EntitySet="<%= Construct.AssociationChildEntitySetName(prop) %>" />
    </AssociationSet>
<%	}
	
	// AssociationSets for ObjectReferenceProperties
	foreach(var prop in ctx.GetObjectReferencePropertiesWithStorage())
	{
		TypeMoniker parentType = new TypeMoniker(prop.GetPropertyTypeString());
		TypeMoniker childType = Construct.AssociationChildType(prop);
		string name = Construct.AssociationName(parentType, childType, prop.PropertyName);
%>
    <AssociationSet Name="<%= name %>" Association="Model.<%= name %>">
      <End Role="<%= Construct.AssociationParentRoleName(parentType) %>" EntitySet="<%= prop.ReferenceObjectClass.GetRootClass().ClassName %>" />
      <End Role="<%= Construct.AssociationChildRoleName(childType) %>" EntitySet="<%= Construct.AssociationChildEntitySetName(prop) %>" />
    </AssociationSet>
<%	}
%>
  </EntityContainer>
<%
	// EntityTypes for all classes
	foreach(var cls in ctx.GetQuery<ObjectClass>())
	{
%>	
  <EntityType Name="<%= cls.ClassName %>">
    <Key>
      <PropertyRef Name="ID" />
    </Key>
    <Property Name="ID" Type="int" Nullable="false" <%= (cls.BaseObjectClass == null) ? "StoreGeneratedPattern=\"Identity\" " : "" %>/>
<%
		ApplyEntityTypeColumnDefs(cls.Properties.OfType<Property>().ToList().Where(p => p.IsList == false && p.HasStorage()));
%>
  </EntityType>
<%	}

	// EntityTypes for all CollectionEntrys
	foreach(var p in ctx.GetObjectListPropertiesWithStorage())
	{
		TypeMoniker otherType = Construct.PropertyCollectionEntryType(p);
%>	
  <EntityType Name="<%= otherType.ClassName %>">
    <Key>
      <PropertyRef Name="ID" />
    </Key>
    <Property Name="ID" Type="int" Nullable="false" StoreGeneratedPattern="Identity" />
    <Property Name="<%= Construct.ForeignKeyColumnNameReferencing(p.ObjectClass) %>" Type="int" Nullable="true" />
<%
		if (p.IsIndexed)
		{
%>
    <Property Name="<%= Construct.ListPositionColumnName(p) %>" Type="int" Nullable="true" />
<%
		}
	
		ApplyEntityTypeColumnDefs(new List<Property>() { p } );
%>
  </EntityType>
<%	}


	// define associations between entities
	
	// First, all derived->base ObjectClass references
	foreach(var cls in ctx.GetDerivedClasses())
	{
		TypeMoniker parentType = cls.BaseObjectClass.GetTypeMoniker();
		TypeMoniker childType = cls.GetTypeMoniker();
		
		string parentRoleName = Construct.AssociationParentRoleName(parentType);
		string childRoleName = Construct.AssociationChildRoleName(childType);
%>
  <Association Name="<%= Construct.AssociationName(parentType, childType, "ID") %>">
    <End Role="<%= parentRoleName %>" Type="Model.Store.<%= parentType.ClassName %>" Multiplicity="1" />
    <End Role="<%= childRoleName %>" Type="Model.Store.<%= childType.ClassName %>" Multiplicity="0..1" />
    <ReferentialConstraint>
      <Principal Role="<%= parentRoleName %>">
        <PropertyRef Name="ID" />
      </Principal>
      <Dependent Role="<%= childRoleName %>">
        <PropertyRef Name="ID" />
      </Dependent>
    </ReferentialConstraint>
  </Association>
<%	}

	// then all 1:n ObjectReferences
	foreach(var p in ctx.GetObjectReferencePropertiesWithStorage()) 
	{
		TypeMoniker parentType = new TypeMoniker(p.GetPropertyTypeString());
		TypeMoniker childType = Construct.AssociationChildType(p);

		string parentRoleName = Construct.AssociationParentRoleName(parentType);
		string childRoleName = Construct.AssociationChildRoleName(childType);
%>
  <Association Name="<%= Construct.AssociationName(parentType, childType, p.PropertyName) %>">
    <End Role="<%= parentRoleName %>" Type="Model.Store.<%= parentType.ClassName %>" Multiplicity="1" />
    <End Role="<%= childRoleName %>" Type="Model.Store.<%= childType.ClassName %>" Multiplicity="0..1" />
    <ReferentialConstraint>
      <Principal Role="<%= parentRoleName %>">
        <PropertyRef Name="ID" />
      </Principal>
      <Dependent Role="<%= childRoleName %>">
        <PropertyRef Name="<%= Construct.ForeignKeyColumnName(p) %>" />
      </Dependent>
    </ReferentialConstraint>
  </Association>
<%	}

	// and finally all n:n ObjectReference lists
	foreach(var p in ctx.GetObjectListPropertiesWithStorage()) 
	{
		TypeMoniker parentType = p.ObjectClass.GetTypeMoniker();
		TypeMoniker childType = Construct.PropertyCollectionEntryType(p);

		string parentRoleName = Construct.AssociationParentRoleName(parentType);
		string childRoleName = Construct.AssociationChildRoleName(childType);
%>
  <Association Name="<%= Construct.AssociationName(parentType, childType, "fk_Parent") %>">
    <End Role="<%= parentRoleName %>" Type="Model.Store.<%= parentType.ClassName %>" Multiplicity="1" />
    <End Role="<%= childRoleName %>" Type="Model.Store.<%= childType.ClassName %>" Multiplicity="0..1" />
    <ReferentialConstraint>
      <Principal Role="<%= parentRoleName %>">
        <PropertyRef Name="ID" />
      </Principal>
      <Dependent Role="<%= childRoleName %>">
        <PropertyRef Name="<%= Construct.ForeignKeyColumnNameReferencing(p.ObjectClass) %>" />
      </Dependent>
    </ReferentialConstraint>
  </Association>
<%	} %>
</Schema>