<%@ CodeTemplate Language="C#" 
	Name="Implementation.EfModel.ModelCsdl"
	CodeFile="Implementation.EfModel.ModelCsdl.cs" 
	ClassName="Kistl.Server.Generators.EntityFramework.Implementation.EfModel.ModelCsdl" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Import Namespace="Kistl.Server.Movables" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<?xml version="1.0" encoding="utf-8"?>
<Schema Namespace="Model" Alias="Self" xmlns="http://schemas.microsoft.com/ado/2006/04/edm">
  <EntityContainer Name="Entities">
  
    <!-- EntitySets for all classes -->
<%
	foreach(var name in ctx.GetQuery<ObjectClass>().Select(cls => cls.ClassName))
	{
%>
    <EntitySet Name="<%= name %>" EntityType="Model.<%= name %>" />
<%	}

%>
    <!-- EntitySets for all CollectionEntrys -->
<%
	foreach(var rel in NewRelation.GetAll(ctx).OrderBy(r => r.GetAssociationName()))
	{
		string entityName = rel.GetCollectionEntryClassName();
%>
    <EntitySet Name="<%= entityName %>" EntityType="Model.<%= entityName %>" />
<%
	}
%>


    <!-- AssociationSets -->
<%
	ApplyAssociationSets();
%>
  </EntityContainer>
  
  <!-- EntityTypes for all base classes -->
<%
	foreach(var cls in ctx.GetBaseClasses())
	{
%>
  <EntityType Name="<%= cls.ClassName %>">
    <Key>
      <PropertyRef Name="ID" />
    </Key>
    <Property Name="ID" Type="Int32" Nullable="false" />
<% ApplyEntityTypeFieldDefs(cls.Properties.Cast<Property>()); %>
  </EntityType>
<%
	}
%>

  <!-- EntityTypes for all other classes -->
<%
	foreach(var cls in ctx.GetDerivedClasses())
	{
%>
  <EntityType Name="<%= cls.ClassName %>" BaseType="Model.<%= cls.BaseObjectClass.ClassName %>" >
<% ApplyEntityTypeFieldDefs(cls.Properties.Cast<Property>()); %>
  </EntityType>
<%
	}
%>

  <!-- EntityTypes for all CollectionEntrys -->
<%
#if false
	foreach(var rel in NewRelation.GetAll(ctx).Where(r => r.GetPreferredStorage() == StorageHint.Separate).OrderBy(r => r.GetAssociationName()))
	{

%>
  <!--
    NewRelation: <%= rel.GetAssociationName() %> 
    Right: <%= rel.Right.Referenced.ClassName %>.<%= rel.Right.Navigator != null ? rel.Right.Navigator.PropertyName : "" %>  (<%= rel.Right.Multiplicity %>) (site: <%= rel.Right.DebugCreationSite %>)
    Left: <%= rel.Left.Referenced.ClassName %>.<%= rel.Left.Navigator != null ? rel.Left.Navigator.PropertyName : "" %> (<%= rel.Left.Multiplicity %>) (site: <%= rel.Left.DebugCreationSite %>)
  -->
  <EntityType Name="<%= rel.GetCollectionEntryClassName() %>" >
    <Key>
      <PropertyRef Name="ID" />
    </Key>
    <Property Name="ID" Type="Int32" Nullable="false" />
<%
		{
			// Right
%>
    <NavigationProperty Name="RightImpl"
                        Relationship="Model.<%= rel.GetRightToCollectionEntryAssociationName() %>"
                        FromRole="Right"
                        ToRole="<%= rel.Right.RoleName %>" />
<%
			if (prop.IsIndexed)
			{
%>
    <Property Name="ParentIndex" Type="Int32" Nullable="false" />
<%
			}
		}
		
		// Left
		if (prop is ObjectReferenceProperty)
		{
			// ObjectReferenceProperty
			// TODO: IsNullable??
			var info = AssociationInfo.CreateInfo(ctx, prop);
%>
    <NavigationProperty Name="ValueImpl"
                        Relationship="Model.<%= info.AssociationName %>"
                        FromRole="<%= info.Child.RoleName %>"
                        ToRole="<%= info.Parent.RoleName %>" />
<%
		}
		else if (prop is ValueTypeProperty)
		{
			string maxlength = "";
			if (prop is StringProperty)
				maxlength = String.Format("MaxLength=\"{0}\" ", ((StringProperty)prop).Length.ToString());
%>
    <Property Name="Value" Type="<%= Type.GetType(prop.GetPropertyTypeString()).Name %>" <%= maxlength %>Nullable="<%= prop.IsNullable.ToString().ToLowerInvariant() %>" />
<%
		}

		if (prop.NeedsPositionColumn())
		{
%>
    <Property Name="ValueIndex" Type="Int32" Nullable="false" />
<%
		}
%>
  </EntityType>
<%	}
#endif
%>

  <!-- ComplexTypes for all structs -->
<%
	foreach(var cls in ctx.GetQuery<Struct>())
	{
%>
  <ComplexType Name="<%= cls.ClassName %>" >
<% ApplyEntityTypeFieldDefs(cls.Properties.Cast<Property>()); %>
  </ComplexType>
<%	}

%>

  <!-- Associations -->
<%
	foreach(var prop in ctx.GetAssociationPropertiesWithStorage())
	{
		var info = AssociationInfo.CreateInfo(ctx, prop);
%>
  <!-- <%= prop.GetType().Name %>: <%= prop.ObjectClass.ClassName %>.<%= prop.PropertyName %> -->
  <Association Name="<%= info.AssociationName %>" >
    <End Role="<%= info.Parent.RoleName %>"
         Type="Model.<%= info.Parent.Type.ClassName %>"
         Multiplicity="<%= info.Parent.ConceptualMultiplicity %>" />
    <End Role="<%= info.Child.RoleName %>"
         Type="Model.<%= info.Child.Type.ClassName %>"
         Multiplicity="<%= info.Child.ConceptualMultiplicity %>" />
  </Association>
<%
		// construct reverse mapping
		if (prop is ObjectReferenceProperty && prop.IsList)
		{
			var refClass = ((ObjectReferenceProperty)prop).ReferenceObjectClass;
			var refType = new TypeMoniker(refClass.GetDataTypeString());
%>
  <!-- Reverse of <%= prop.GetType().Name %>: <%= prop.ObjectClass.ClassName %>.<%= prop.PropertyName %> -->
  <Association Name="<%= Construct.AssociationName(refType, info.CollectionEntry, prop.PropertyName) %>" >
    <End Role="<%= Construct.AssociationParentRoleName(refClass) %>"
         Type="Model.<%= refType.ClassName %>"
         Multiplicity="0..1" />
    <End Role="<%= info.Child.RoleName %>"
         Type="Model.<%= info.Child.Type.ClassName %>"
         Multiplicity="*" />
  </Association>
<%
		}
	}
%>
</Schema>
