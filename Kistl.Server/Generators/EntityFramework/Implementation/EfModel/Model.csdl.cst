<%@ CodeTemplate Language="C#" 
	Name="Implementation.EfModel.ModelCsdl"
	CodeFile="Implementation.EfModel.ModelCsdl.cs" 
	ClassName="Kistl.Server.Generators.EntityFramework.Implementation.EfModel.ModelCsdl" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Import Namespace="Kistl.Server.Movables" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<?xml version="1.0" encoding="utf-8"?>
<Schema Namespace="Model" Alias="Self" xmlns="http://schemas.microsoft.com/ado/2006/04/edm">
  <EntityContainer Name="Entities">
  
    <!-- EntitySets for all classes -->
<%
	foreach(var name in ctx.GetQuery<ObjectClass>().Select(cls => cls.ClassName))
	{
%>
    <EntitySet Name="<%= name %>" EntityType="Model.<%= name %>" />
<%	}

%>
    <!-- EntitySets for all CollectionEntrys -->
<%
	foreach(var rel in NewRelation.GetAll(ctx).ToList()
		.Where(r => r.GetPreferredStorage() == StorageHint.Separate)
		.OrderBy(r => r.GetAssociationName()))
	{
		string entityName = rel.GetCollectionEntryClassName();
%>
    <EntitySet Name="<%= entityName %>" EntityType="Model.<%= entityName %>" />
<%
	}
%>


    <!-- AssociationSets -->
<%
	ApplyAssociationSets();
%>
  </EntityContainer>
  
  <!-- EntityTypes for all base classes -->
<%
	foreach(var cls in ctx.GetBaseClasses())
	{
%>
  <EntityType Name="<%= cls.ClassName %>">
    <Key>
      <PropertyRef Name="ID" />
    </Key>
    <Property Name="ID" Type="Int32" Nullable="false" />
<% ApplyEntityTypeFieldDefs(cls.Properties.Cast<Property>()); %>
  </EntityType>
<%
	}
%>

  <!-- EntityTypes for all other classes -->
<%
	foreach(var cls in ctx.GetDerivedClasses())
	{
%>
  <EntityType Name="<%= cls.ClassName %>" BaseType="Model.<%= cls.BaseObjectClass.ClassName %>" >
<% ApplyEntityTypeFieldDefs(cls.Properties.Cast<Property>()); %>
  </EntityType>
<%
	}
%>

  <!-- EntityTypes for all CollectionEntrys with separate storage -->
<%
	foreach(var rel in NewRelation.GetAll(ctx).ToList()
		.Where(r => r.GetPreferredStorage() == StorageHint.Separate)
		.OrderBy(r => r.GetAssociationName()))
	{

%>
  <!--
<%
	CallTemplate("Implementation.RelationDebugTemplate", ctx, rel);
%>
  -->
  <EntityType Name="<%= rel.GetCollectionEntryClassName() %>" >
    <Key>
      <PropertyRef Name="ID" />
    </Key>
    <Property Name="ID" Type="Int32" Nullable="false" />
    
    <!-- A -->
    <NavigationProperty Name="AImpl"
                        Relationship="Model.<%= rel.GetCollectionEntryAssociationName(rel.A) %>"
                        FromRole="CollectionEntry"
                        ToRole="<%= rel.A.RoleName %>" />
<%
		if (rel.A.HasPersistentOrder)
		{
%>
    <Property Name="AIndex" Type="Int32" Nullable="false" />
<%
		}
%>

    <!-- B -->
    <NavigationProperty Name="BImpl"
                        Relationship="Model.<%= rel.GetCollectionEntryAssociationName(rel.B) %>"
                        FromRole="CollectionEntry"
                        ToRole="<%= rel.B.RoleName %>" />
<%
		if (rel.B.HasPersistentOrder)
		{
%>
    <Property Name="BIndex" Type="Int32" Nullable="false" />
<%
		}
%>
  </EntityType>
<%
	}
%>

  <!-- ComplexTypes for all structs -->
<%
	foreach(var cls in ctx.GetQuery<Struct>())
	{
%>
  <ComplexType Name="<%= cls.ClassName %>" >
<% ApplyEntityTypeFieldDefs(cls.Properties.Cast<Property>()); %>
  </ComplexType>
<%	}

%>

  <!-- Associations -->
<%
	ApplyAssociations();
%>
</Schema>
