<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.CollectionEntries"
	CodeFile="Implementation.ObjectClasses.CollectionEntries.cs" 
	ClassName="Kistl.Server.Generators.EntityFramework.Implementation.ObjectClasses.CollectionEntries" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Import Namespace="Kistl.Server.Movables" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
using System.Collections;
using System.Collections.Generic;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Xml;
using System.Xml.Serialization;

using Kistl.API;
using Kistl.DALProvider.EF;

<%

	foreach (var rel in NewRelation.GetAll(ctx)
		.Where(rel => rel.GetPreferredStorage() == StorageHint.Separate)
		.OrderBy(rel => rel.GetAssociationName()))
	{

%>

namespace <%= rel.A.Type.Namespace %>
{
<%
		if (rel.A.Type.Namespace != rel.B.Type.Namespace)
		{
%>
	using <%= rel.B.Type.Namespace %>;
<%
		}

		this.CallTemplate("Implementation.ObjectClasses.CollectionEntry", ctx, rel);
%>
}
<%
	}


	foreach (var prop in ctx.GetQuery<ValueTypeProperty>()
        .Where(p => p.IsList)
        .OrderBy(p => p.ObjectClass.ClassName)
        .OrderBy(p => p.PropertyName))
	{

%>

namespace <%= prop.ObjectClass.Module.Namespace %>
{
<%
		this.CallTemplate("Implementation.ObjectClasses.ValueCollectionEntry", ctx, prop);
%>
}
<%
	}
%>