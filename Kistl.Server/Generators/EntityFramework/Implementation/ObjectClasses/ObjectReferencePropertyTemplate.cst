<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.ObjectReferencePropertyTemplate"
	ClassName="Kistl.Server.Generators.EntityFramework.Implementation.ObjectClasses.ObjectReferencePropertyTemplate" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="serializationList" Type="Templates.Implementation.SerializationMembersList" %>
<%@ Parameter Name="name" Type="String" %>
<%@ Parameter Name="associationName" Type="String" %>
<%@ Parameter Name="targetRoleName" Type="String" %>
<%@ Parameter Name="referencedInterface" Type="String" %>
<%@ Parameter Name="referencedImplementation" Type="String" %>
<%@ Parameter Name="hasPositionStorage" Type="bool" %>
<%@ Parameter Name="relDataTypeExportable" Type="bool" %>
<%@ Parameter Name="moduleNamespace" Type="string" %>
<%@ Parameter Name="eagerLoading" Type="bool" %>
<%@ Parameter Name="callGetterSetterEvents" Type="bool" %>
<%@ Parameter Name="isReloadable" Type="bool" %>
<%

	string efName = name + Kistl.API.Helper.ImplementationSuffix;
	string fkBackingName = "_fk_" + name;
	string fGuidkBackingName = "_fk_guid_" + name;
	string eventName = "On" + name;

%>
   		// <%= this.GetType() %>
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public <%= referencedInterface %> <%= name %>
        {
            get
            {
                return <%= efName %>;
            }
            set
            {
                // TODO: NotifyPropertyChanged()
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                <%= efName %> = (<%= referencedImplementation %>)value;
            }
        }
        
        private int? <%= fkBackingName %>;
<%
        if (isReloadable)
        {
%>
        private Guid? <%= fGuidkBackingName %> = null;
<%
		}
		
        AddSerialization(serializationList, name);
%>
        // EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "<%= associationName %>", "<%= targetRoleName %>")]
        public <%= referencedImplementation %> <%= efName %>
        {
            get
            {
                EntityReference<<%= referencedImplementation %>> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<<%= referencedImplementation %>>(
                        "Model.<%= associationName %>",
                        "<%= targetRoleName %>");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                    if(r.Value != null) r.Value.AttachToContext(this.Context);
                }
                var __value = r.Value;
<%
				if(callGetterSetterEvents)
				{
%>
				if(<%= eventName %>_Getter != null)
				{
					var e = new PropertyGetterEventArgs<<%= referencedInterface %>>(__value);
					<%= eventName %>_Getter(this, e);
					__value = (<%= referencedImplementation %>)e.Result;
				}
<%
				}
%>
                return __value;
            }
            set
            {
                EntityReference<<%= referencedImplementation %>> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<<%= referencedImplementation %>>(
                        "Model.<%= associationName %>",
                        "<%= targetRoleName %>");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load(); 
                }
                <%= referencedInterface %> __oldValue = (<%= referencedInterface %>)r.Value;
                <%= referencedInterface %> __newValue = (<%= referencedInterface %>)value;

<%
				if(callGetterSetterEvents)
				{
%>
                if(<%= eventName %>_PreSetter != null)
                {
					var e = new PropertyPreSetterEventArgs<<%= referencedInterface %>>(__oldValue, __newValue);
					<%= eventName %>_PreSetter(this, e);
					__newValue = e.Result;
                }
<%
				}
%>
                r.Value = (<%= referencedImplementation %>)__newValue;
<%
				if(callGetterSetterEvents)
				{
%>
                if(<%= eventName %>_PostSetter != null)
                {
					var e = new PropertyPostSetterEventArgs<<%= referencedInterface %>>(__oldValue, __newValue);
					<%= eventName %>_PostSetter(this, e);
                }
<%
				}
%>                                
            }
        }
        
<%
	string posStorageName = name + Kistl.API.Helper.PositionSuffix;

	if (hasPositionStorage)
	{
		Templates.Implementation.ObjectClasses.NotifyingValueProperty.Call(Host, ctx,
		    serializationList,
			"int?", posStorageName, moduleNamespace);
	}
%>
        
