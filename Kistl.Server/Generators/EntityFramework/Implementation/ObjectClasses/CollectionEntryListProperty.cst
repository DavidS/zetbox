<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.CollectionEntryListProperty"
	CodeFile="Implementation.ObjectClasses.CollectionEntryListProperty.cs" 
	ClassName="Kistl.Server.Generators.EntityFramework.Implementation.ObjectClasses.CollectionEntryListProperty" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Import Namespace="Kistl.Server.Movables" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="serializationList" Type="Templates.Implementation.SerializationMembersList" %>
<%@ Parameter Name="relEnd" Type="RelationEnd" %>
<%

	NewRelation rel = relEnd.Container;

	// the name of the property to create
	string name = relEnd.Other.RoleName;
	// the ef-visible property's name
	string efName = name + Kistl.API.Helper.ImplementationSuffix;
	// the name of the private backing store for the conversion wrapper list
	string wrapperName = "_" + name + "Wrapper";
	// the name of the wrapper class for wrapping the other end
	string wrapperClass = "Entity" + (relEnd.Other.HasPersistentOrder ? "List" : "Collection") + relEnd.Other.Role + "SideWrapper";

	// the name of the CollectionEntry type
	string ceName = rel.GetCollectionEntryFullName() + Kistl.API.Helper.ImplementationSuffix;

	// the name of the EF association to the CollectionEntry
	string assocName = rel.GetCollectionEntryAssociationName(relEnd);
	// this class' role name in this association
	string roleName = relEnd.RoleName;
	// this targeted role name 
	string targetRoleName = "CollectionEntry";

	// which generic interface to use for the collection
	string exposedListType = relEnd.Other.HasPersistentOrder ? "IList" : "ICollection";

	// which Kistl interface this is 
	string thisInterface = relEnd.Type.NameDataObject;
	// which Kistl interface this list contains
	string referencedInterface = relEnd.Other.Type.NameDataObject;
	// the actual implementation class of the list's elements
	string referencedImplementation = relEnd.Other.Type.NameDataObject + Kistl.API.Helper.ImplementationSuffix;

	
%>
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public <%= exposedListType %><<%= referencedInterface %>> <%= name %>
        {
            get
            {
                if (<%= wrapperName %> == null)
                {
                    <%= wrapperName %> = new <%= wrapperClass %><<%= rel.A.Type.NameDataObject %>, <%= rel.B.Type.NameDataObject %>, <%= ceName %>>(
                            this,
                            <%= efName %>);
                }
                return <%= wrapperName %>;
            }
        }
        
        [EdmRelationshipNavigationProperty("Model", "<%= assocName %>", "<%= targetRoleName %>")]
        public EntityCollection<<%= ceName %>> <%= efName %>
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<<%= ceName %>>(
                        "Model.<%= assocName %>",
                        "<%= targetRoleName %>");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                return c;
            }
        }
        private <%= wrapperClass %><<%= rel.A.Type.NameDataObject %>, <%= rel.B.Type.NameDataObject %>, <%= ceName %>> <%= wrapperName %>;
        
<%
        AddSerialization(serializationList, efName);
%>
