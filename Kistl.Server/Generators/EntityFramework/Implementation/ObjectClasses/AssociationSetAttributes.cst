<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.AssociationSetAttributes"
	CodeFile="Implementation.ObjectClasses.AssociationSetAttributes.cs" 
	ClassName="Kistl.Server.Generators.EntityFramework.Implementation.ObjectClasses.AssociationSetAttributes" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Xml;
using System.Xml.Serialization;

using Kistl.API;
using Kistl.DalProvider.EF;

<%
	foreach (var rel in ctx.GetQuery<Relation>().ToList().OrderBy(r => r.GetAssociationName()))
	{
%>

	/*
<%
	Implementation.RelationDebugTemplate.Call(Host, ctx, rel);
%>
	*/
<%
		switch (rel.Storage)
		{
			case StorageType.MergeIntoA:
			case StorageType.MergeIntoB:
			case StorageType.Replicate:
%>

// basic association
[assembly: EdmRelationship(
    "Model", "<%= rel.GetAssociationName() %>",
    "<%= rel.A.RoleName %>", RelationshipMultiplicity.<%= rel.A.Multiplicity.ToCsdlRelationshipMultiplicity() %>, typeof(<%= rel.A.Type.GetDataTypeString() + Kistl.API.Helper.ImplementationSuffix %>),
    "<%= rel.B.RoleName %>", RelationshipMultiplicity.<%= rel.B.Multiplicity.ToCsdlRelationshipMultiplicity() %>, typeof(<%= rel.B.Type.GetDataTypeString() + Kistl.API.Helper.ImplementationSuffix %>)
    )]

<%
				break;
			case StorageType.Separate:
%>

// The association from A to the CollectionEntry
[assembly: EdmRelationship("Model", "<%= rel.GetRelationAssociationName(RelationEndRole.A) %>",
    "<%= rel.A.RoleName %>", RelationshipMultiplicity.ZeroOrOne, typeof(<%= rel.A.Type.GetDataTypeString() + Kistl.API.Helper.ImplementationSuffix %>),
    "CollectionEntry", RelationshipMultiplicity.Many, typeof(<%= rel.GetRelationFullName() + Kistl.API.Helper.ImplementationSuffix %>)
    )]
// The association from B to the CollectionEntry
[assembly: EdmRelationship("Model", "<%= rel.GetRelationAssociationName(RelationEndRole.B) %>",
    "<%= rel.B.RoleName %>", RelationshipMultiplicity.ZeroOrOne, typeof(<%= rel.B.Type.GetDataTypeString() + Kistl.API.Helper.ImplementationSuffix %>),
    "CollectionEntry", RelationshipMultiplicity.Many, typeof(<%= rel.GetRelationFullName() + Kistl.API.Helper.ImplementationSuffix %>)
    )]
<%
				break;
			default:
				throw new NotImplementedException(String.Format("Unknown StorageHint.{0} preference", rel.Storage));
		}
	}

%>

<%
	foreach (var prop in ctx.GetQuery<ValueTypeProperty>()
		.Where(p => p.IsList)
		.OrderBy(p => p.ObjectClass.ClassName)
		.ThenBy(p => p.PropertyName))
	{
%>

// object-value association
[assembly: EdmRelationship(
    "Model", "<%= prop.GetAssociationName() %>",
    "<%= prop.ObjectClass.ClassName %>", RelationshipMultiplicity.ZeroOrOne, typeof(<%= prop.ObjectClass.Module.Namespace + "." + prop.ObjectClass.ClassName + Kistl.API.Helper.ImplementationSuffix %>),
    "CollectionEntry", RelationshipMultiplicity.Many, typeof(<%= prop.GetCollectionEntryFullName() + Kistl.API.Helper.ImplementationSuffix %>)
    )]

<%
	}
%>