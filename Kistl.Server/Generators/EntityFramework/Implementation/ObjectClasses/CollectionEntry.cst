<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.CollectionEntry"
	CodeFile="Implementation.ObjectClasses.CollectionEntry.cs" 
	ClassName="Kistl.Server.Generators.EntityFramework.Implementation.ObjectClasses.CollectionEntry" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Import Namespace="Kistl.Server.Movables" %>

<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="rel" Type="FullRelation" %>
<%
	
	string leftType = rel.Left.Referenced.ClassName;
	string rightType = rel.Right.Referenced.ClassName;

%>


    [System.Diagnostics.DebuggerDisplay("<%= rel.GetCollectionEntryClassName() %>")]
    [EdmEntityType(NamespaceName="Model", Name="<%= rel.GetCollectionEntryClassName() %>")]
    public class <%= rel.GetCollectionEntryClassName() %><%= Kistl.API.Helper.ImplementationSuffix %>
        : BaseServerCollectionEntry_EntityFramework, INewCollectionEntry<<%= leftType %>, <%= rightType %>>
    {
    
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                return _ID;
            }
            set
            {
                _ID = value;
            }
        }
        private int _ID;
        
<%
		CallTemplate("Implementation.ObjectClasses.ObjectReferencePropertyTemplate", ctx,
			"Right", rel.GetRightToCollectionEntryAssociationName(), "Right",
			rel.Right.Referenced.ClassName, rel.Right.Referenced.ClassName + Kistl.API.Helper.ImplementationSuffix);
			
		CallTemplate("Implementation.ObjectClasses.ObjectReferencePropertyTemplate", ctx,
			"Left", rel.GetLeftToCollectionEntryAssociationName(), "Left",
			rel.Left.Referenced.ClassName, rel.Left.Referenced.ClassName + Kistl.API.Helper.ImplementationSuffix);
%>

        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this._fk_Left, sw);
            BinarySerializer.ToBinary(this._fk_Right, sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._fk_Left, sr);
            BinarySerializer.FromBinary(out this._fk_Right, sr);
        }
        
    }

