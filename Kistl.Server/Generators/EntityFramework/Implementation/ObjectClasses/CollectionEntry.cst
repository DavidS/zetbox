<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.CollectionEntry"
	CodeFile="Implementation.ObjectClasses.CollectionEntry.cs" 
	ClassName="Kistl.Server.Generators.EntityFramework.Implementation.ObjectClasses.CollectionEntry" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Import Namespace="Kistl.Server.Movables" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="rel" Type="NewRelation" %>
<%

	bool isList = rel.A.HasPersistentOrder || rel.B.HasPersistentOrder;
	string ceInterface = isList ? "INewListEntry" : "INewCollectionEntry";
	string ceName = rel.GetCollectionEntryClassName() + Kistl.API.Helper.ImplementationSuffix;
	
	List <string> fields = new List<string>();
%>

    [System.Diagnostics.DebuggerDisplay("<%= rel.GetCollectionEntryClassName() %>")]
    [EdmEntityType(NamespaceName="Model", Name="<%= rel.GetCollectionEntryClassName() %>")]
    public class <%= ceName %>
        : BaseServerCollectionEntry_EntityFramework, <%= ceInterface %><<%= rel.A.Type.ClassName %>, <%= rel.B.Type.ClassName %>>
    {
    
<%
		CallTemplate("Implementation.ObjectClasses.IdProperty", ctx);
%>

		/// <summary>
		/// Reference to A part of this relation
		/// </summary>
<%
		CallTemplate("Implementation.ObjectClasses.ObjectReferencePropertyTemplate", ctx,
			"A", rel.GetCollectionEntryAssociationName(rel.A), rel.A.RoleName,
			rel.A.Type.NameDataObject, rel.A.Type.NameDataObject + Kistl.API.Helper.ImplementationSuffix,
			rel.A.HasPersistentOrder);
		
		fields.Add("_fk_A");

		if (rel.A.HasPersistentOrder)
		{
			fields.Add("_A" + Kistl.API.Helper.PositionSuffix);
%>
		public int? AIndex { get { return A<%= Kistl.API.Helper.PositionSuffix %>; } set { A<%= Kistl.API.Helper.PositionSuffix %> = value; } }
<%
		}
		else if (isList)
		{
%>
		/// <summary>ignored implementation for INewListEntry</summary>
		public int? AIndex { get { return null; } set { } }
<%
		}

%>

		/// <summary>
		/// Reference to B part of this relation
		/// </summary>
<%
		CallTemplate("Implementation.ObjectClasses.ObjectReferencePropertyTemplate", ctx,
			"B", rel.GetCollectionEntryAssociationName(rel.B), rel.B.RoleName,
			rel.B.Type.NameDataObject, rel.B.Type.NameDataObject + Kistl.API.Helper.ImplementationSuffix,
			rel.B.HasPersistentOrder);
		
		fields.Add("_fk_B");

		if (rel.B.HasPersistentOrder)
		{
			fields.Add("_B" + Kistl.API.Helper.PositionSuffix);
%>
		public int? BIndex { get { return B<%= Kistl.API.Helper.PositionSuffix %>; } set { B<%= Kistl.API.Helper.PositionSuffix %> = value; } }
<%
		}
		else if (isList)
		{
%>
		/// <summary>ignored implementation for INewListEntry</summary>
		public int? BIndex { get { return null; } set { } }
<%
		}

%>


#region Serializer

<%
		CallTemplate("Implementation.ObjectClasses.SerializerTemplate", ctx,
			SerializerDirection.ToStream, fields);
		
		CallTemplate("Implementation.ObjectClasses.SerializerTemplate", ctx,
			SerializerDirection.FromStream, fields);
%>

#endregion
        
    }
