<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.ValueCollectionEntry"
	CodeFile="Implementation.ObjectClasses.ValueCollectionEntry.cs" 
	ClassName="Kistl.Server.Generators.EntityFramework.Implementation.ObjectClasses.ValueCollectionEntry" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="prop" Type="ValueTypeProperty" %>
<%

	bool isList = prop.IsIndexed;
	string ceInterface = isList ? "INewListEntry" : "INewCollectionEntry";
	string ceInterfaceFullName = String.Format("{0}<{1}, {2}>", 
		ceInterface, 
		prop.ObjectClass.ClassName,
		prop.GetPropertyTypeString());
	string ceName = prop.GetCollectionEntryClassName() + Kistl.API.Helper.ImplementationSuffix;
	
	string assocName = prop.GetAssociationName();
	
	List <string> fields = new List<string>();
%>

    [System.Diagnostics.DebuggerDisplay("<%= prop.GetCollectionEntryClassName() %>")]
    [EdmEntityType(NamespaceName="Model", Name="<%= prop.GetCollectionEntryClassName() %>")]
    public class <%= ceName %>
        : BaseServerCollectionEntry_EntityFramework, <%= ceInterfaceFullName %>
    {
    
<%
		CallTemplate("Implementation.ObjectClasses.IdProperty", ctx);
%>

		/// <summary>
		/// Reference to the container of this CollectionEntry
		/// </summary>
<%
		CallTemplate("Implementation.ObjectClasses.ObjectReferencePropertyTemplate", ctx,
			"A", assocName, "CollectionEntry",
			prop.ObjectClass.ClassName, prop.ObjectClass.ClassName + Kistl.API.Helper.ImplementationSuffix);
		
		fields.Add("_fk_A");
		
		
		
		if (isList)
		{
%>

		/// <summary>
		/// Index on the A-side list of this relation, always ignored because 
		/// the other side cannot have a navigator and therefore no order
		/// </summary>
		int? <%= ceInterfaceFullName %>.AIndex { get { return null; } set { } }
		
<%
		}
%>
		/// <summary>
		/// the value
		/// </summary>
<%
		CallTemplate("Implementation.ObjectClasses.NotifyingValueProperty", ctx,
			prop.GetPropertyType(), prop.PropertyName);
		
		fields.Add("_" + prop.PropertyName);


		if (isList)
		{
%>

		/// <summary>
		/// Index for ordering Values
		/// </summary>
<%
			CallTemplate("Implementation.ObjectClasses.NotifyingValueProperty", ctx,
				typeof(int?), prop.PropertyName + "Index");
		
			fields.Add("_" + prop.PropertyName + "Index");
		}
%>

		// TODO: implement by redirecting with EF instead
		/// <summary>
		/// Implement interface by forwarding to actual property
		/// </summary>
		<%= prop.GetPropertyType() %> <%= ceInterfaceFullName %>.B {
			get { return <%= prop.PropertyName %>; } 
			set { <%= prop.PropertyName %> = value; }
		}
<%

		if (isList)
		{
%>
		/// <summary>
		/// Implement interface by forwarding to actual property
		/// </summary>
		int? <%= ceInterfaceFullName %>.BIndex {
			get { return <%= prop.PropertyName %>Index; } 
			set { <%= prop.PropertyName %>Index = value; }
		}
<%
		}
%>

#region Serializer

<%
		CallTemplate("Implementation.ObjectClasses.SerializerTemplate", ctx,
			SerializerDirection.ToStream, fields);
		
		CallTemplate("Implementation.ObjectClasses.SerializerTemplate", ctx,
			SerializerDirection.FromStream, fields);
%>

#endregion
        
    }
