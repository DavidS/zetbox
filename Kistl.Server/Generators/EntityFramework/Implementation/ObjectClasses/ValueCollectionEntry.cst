<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.ValueCollectionEntry"
	CodeFile="Implementation.ObjectClasses.ValueCollectionEntry.cs" 
	ClassName="Kistl.Server.Generators.EntityFramework.Implementation.ObjectClasses.ValueCollectionEntry" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>

<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="Property" Type="ValueTypeProperty" %>
<%
	var info = AssociationInfo.CreateInfo(ctx, this.Property);
	string valueType = this.Property.GetPropertyTypeString();
%>
    [System.Diagnostics.DebuggerDisplay("<%= info.CollectionEntry.ClassName %>")]
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="<%= info.CollectionEntry.ClassName %>")]
    public class <%= info.CollectionEntry.ClassName %><%= Kistl.API.Helper.ImplementationSuffix %>
        : BaseServerCollectionEntry_EntityFramework, ICollectionEntry<<%= valueType %>, <%= info.Parent.Type.NameDataObject %>>
    {
    
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                return _ID;
            }
            set
            {
                _ID = value;
            }
        }
        private int _ID;

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarPropertyAttribute()]
        public <%= valueType %> Value
        {
            get
            {
                return _Value;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (Value != value)
                {
                    NotifyPropertyChanging("Value"); 
                    _Value = value;
                    NotifyPropertyChanged("Value");;
                }
            }
        }
        private <%= valueType %> _Value;
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public <%= info.Parent.Type.NameDataObject %> Parent
        {
            get
            {
                return ParentImpl;
            }
            set
            {
                ParentImpl = (<%= info.Parent.Type.NameDataObject %><%= Kistl.API.Helper.ImplementationSuffix %>)value;
            }
        }
                
        public int fk_Parent
        {
            get
            {
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && Parent != null)
                {
                    _fk_Parent = Parent.ID;
                }
                return _fk_Parent;
            }
            set
            {
                _fk_Parent = value;
            }
        }
        private int _fk_Parent;
                
        [EdmRelationshipNavigationPropertyAttribute("Model", "<%= info.AssociationName %>", "<%= info.Parent.RoleName %>")]
        public <%= info.Parent.Type.NameDataObject %><%= Kistl.API.Helper.ImplementationSuffix %> ParentImpl
        {
            get
            {
                EntityReference<<%= info.Parent.Type.NameDataObject %><%= Kistl.API.Helper.ImplementationSuffix %>> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<<%= info.Parent.Type.NameDataObject %><%= Kistl.API.Helper.ImplementationSuffix %>>(
                        "Model.<%= info.AssociationName %>",
                        "<%= info.Parent.RoleName %>");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && !r.IsLoaded)
                    r.Load(); 
                return r.Value;
            }
            set
            {
                EntityReference<<%= info.Parent.Type.NameDataObject %><%= Kistl.API.Helper.ImplementationSuffix %>> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<<%= info.Parent.Type.NameDataObject %><%= Kistl.API.Helper.ImplementationSuffix %>>(
                    "Model.<%= info.AssociationName %>",
                    "<%= info.Parent.RoleName %>");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged) && !r.IsLoaded)
                    r.Load(); 
                r.Value = (<%= info.Parent.Type.NameDataObject %><%= Kistl.API.Helper.ImplementationSuffix %>)value;
            }
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this.Value, sw);
            BinarySerializer.ToBinary(this.fk_Parent, sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._Value, sr);
            BinarySerializer.FromBinary(out this._fk_Parent, sr);
        }
        
    }

