<%@ CodeTemplate Language="C#" 
	Name="Repositories.FrozenRepository"
	ClassName="Kistl.Server.Generators.FrozenObjects.Repositories.FrozenRepository" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Parameter Name="ctx" Type="Kistl.API.IKistlContext" %>
<%@ Parameter Name="module" Type="Module" %>
<%
	string classname = "Frozen" + module.ModuleName + "Repository";
    // TODO: remove ToList when IsFrozenObject correctly inherits across meta-data
	var frozenClasses = module.DataTypes.OfType<ObjectClass>().ToList().Where(cls => cls.IsFrozen());
%>
using System;
using System.Collections.Generic;
using System.Linq;

using Kistl.API;

namespace <%= module.Namespace %>
{

	public static class <%= classname %>
	{
		
<%
	foreach(var cls in frozenClasses)
	{
		string implementationName = Implementation.ObjectClasses.Template.GetClassName(cls);
%>
		/// <summary>Frozen List of all <%= cls.ClassName %></summary>
		/// <%= cls.Description %>
		public static IQueryable<<%= cls.ClassName %>> <%= cls.TableName %>
		{ 
			get
			{
				return <%= implementationName %>.DataStore.Values.AsQueryable().Cast<<%= cls.ClassName %>>();
			}
		}
		
<%
	}
%>

		internal static void CreateInstances()
		{
<%
	foreach(var cls in frozenClasses)
	{
		string implementationName = Implementation.ObjectClasses.Template.GetClassName(cls);
%>
				<%= implementationName %>.CreateInstances();
<%
	}
%>
		}


		internal static void FillDataStore()
		{
<%
	foreach(var cls in frozenClasses)
	{
		string implementationName = Implementation.ObjectClasses.Template.GetClassName(cls);
%>
				<%= implementationName %>.FillDataStore();
<%
	}
%>
		}
	}
	
}