<%@ CodeTemplate Language="C#" 
	Name="Repositories.FrozenContextImplementation"
	ClassName="Kistl.Server.Generators.FrozenObjects.Repositories.FrozenContextImplementation" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Parameter Name="ctx" Type="Kistl.API.IKistlContext" %>
<%@ Parameter Name="modulesWithFrozenClasses" Type="List<Module>" %>
// <autogenerated/>

using System;
using System.Collections.Generic;
using System.Linq;

using Kistl.API;

namespace Kistl.DalProvider.Frozen
{

	public class FrozenContextImplementation
		: BaseFrozenContext
	{
		static FrozenContextImplementation()
		{
<%
	foreach(var module in modulesWithFrozenClasses)
	{
%>
				<%= module.Namespace %>.Frozen<%= module.ModuleName %>Repository.CreateInstances();
<%
	}
%>

<%
	foreach(var module in modulesWithFrozenClasses)
	{
%>
				<%= module.Namespace %>.Frozen<%= module.ModuleName %>Repository.FillDataStore();
<%
	}
%>
		}
		
		public override IQueryable<T> GetQuery<T>()
		{
			return GetQuery(new InterfaceType(typeof(T))).Cast<T>();
		}

		public override IQueryable<IDataObject> GetQuery(InterfaceType ifType)
		{
<%
	foreach(var module in modulesWithFrozenClasses)
	{
	    // TODO: remove ToList when IsFrozenObject correctly inherits across meta-data
		foreach(var frozenCls in module.DataTypes.OfType<ObjectClass>().ToList().Where(cls => cls.IsFrozen()).OrderBy(c => c.ClassName))
		{
%>
			if (ifType == typeof(<%= frozenCls.Module.Namespace %>.<%= frozenCls.ClassName %>))
				return <%= frozenCls.Module.Namespace %>.<%= Implementation.ObjectClasses.Template.GetClassName(frozenCls) %>.DataStore.Values.AsQueryable().Cast<IDataObject>();
<%
		}
	}
%>
			throw new NotImplementedException();
		}
		
        public override IEnumerable<IPersistenceObject> AttachedObjects
        {
			get
			{
				return new List<IPersistenceObject>(0)
<%
	foreach(var module in modulesWithFrozenClasses)
	{
		// TODO: remove ToList when IsFrozenObject correctly inherits across meta-data
        foreach(var frozenCls in module.DataTypes.OfType<ObjectClass>().ToList().Where(cls => cls.IsFrozen()).OrderBy(c => c.ClassName))
		{
%>
					.Concat(GetQuery<<%= frozenCls.Module.Namespace %>.<%= frozenCls.ClassName %>>().Cast<IPersistenceObject>())
<%
		}
	}
%>;
			}
		}

        public override IDataObject Find(InterfaceType ifType, int ID)
		{
<%
	foreach(var module in modulesWithFrozenClasses)
	{
		// TODO: remove ToList when IsFrozenObject correctly inherits across meta-data
		foreach(var frozenCls in module.DataTypes.OfType<ObjectClass>().ToList().Where(cls => cls.IsFrozen()).OrderBy(c => c.ClassName))
		{
%>
			if (ifType == typeof(<%= frozenCls.Module.Namespace %>.<%= frozenCls.ClassName %>))
				return <%= frozenCls.Module.Namespace %>.<%= Implementation.ObjectClasses.Template.GetClassName(frozenCls) %>.DataStore[ID];
<%
		}
	}
%>
			throw new NotImplementedException();
		}

        public override T Find<T>(int ID)
        {
			return (T)Find(new InterfaceType(typeof(T)), ID);
        }
	}
}