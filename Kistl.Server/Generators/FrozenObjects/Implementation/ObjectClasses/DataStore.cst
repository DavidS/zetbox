<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.DataStore"
	ClassName="Kistl.Server.Generators.FrozenObjects.Implementation.ObjectClasses.DataStore" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Parameter Name="ctx" Type="Kistl.API.IKistlContext" %>
<%@ Parameter Name="cls" Type="ObjectClass" %>
<%

	Type t = Type.GetType(cls.Module.Namespace + "." + cls.ClassName + ", Kistl.Objects", true);
	
	var testList = ctx.GetQuery(typeof(ObjectClass)).ToList();
	
	var dataType = cls.Module.Namespace + "." + cls.ClassName;
		
	// list of all instances of exactly this class
	var instanceList = ctx.GetQuery(t)
	    .ToList()
	    .Where(o => o.GetInterfaceType().FullName == dataType);
%>


		internal <%= cls.BaseObjectClass == null ? "" : "new " %>static Dictionary<int, <%= Template.GetClassName(cls) %>> DataStore = new Dictionary<int, <%= Template.GetClassName(cls) %>>(<%= instanceList.Count() %>);
		internal <%= cls.BaseObjectClass == null ? "" : "new " %>static void CreateInstances()
		{
<%

	string classname = Template.GetClassName(cls);
	foreach(var obj in instanceList) 
	{
		// store inherited objects also in base class' DataStore to short-circuit polymorphic queries.
		var baseCls = cls.BaseObjectClass;
		var parents = new List<ObjectClass>();
		while (baseCls != null)
		{
			parents.Add(baseCls);
			baseCls = baseCls.BaseObjectClass;
		}
		// to get "right" type order, the root class has to be the "left-most", i.e. first, assigned one
		parents.Reverse();
		foreach(var parent in parents)
		{
%>
			<%= parent.Module.Namespace %>.<%= Template.GetClassName(parent) %>.DataStore[<%= obj.ID %>] = 
<%
		}
%>
			DataStore[<%= obj.ID %>] = new <%= classname %>(<%= obj.ID %>);

<%
	}
%>
		}

		internal <%= cls.BaseObjectClass == null ? "" : "new " %>static void FillDataStore() {
<%
	foreach(var obj in instanceList) 
	{
		foreach(var baseCls in cls.GetObjectHierarchie()) {
			foreach(var prop in baseCls.Properties.Cast<Property>())
			{
				string value = GetPropertyValueAsCSharp(obj, prop);
				if (!String.IsNullOrEmpty(value))
				{
%>
			DataStore[<%= obj.ID %>].<%= prop.PropertyName %> = <%= value %>;
<%
				}
			}
		}
%>
			DataStore[<%= obj.ID %>].Seal();
<%
	}
%>
	
		}