<%@ CodeTemplate Language="C#" 
	Name="Server.ObjectClasses.MethodBody"
	CodeFile="Server.ObjectClasses.MethodBody.cs" 
	ClassName="Kistl.Server.Generators.Templates.Server.ObjectClasses.MethodBody" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>

<%@ Parameter Name="m" Type="Kistl.App.Base.Method" %>
		{
		    // blah
		}
<%
string delegateName = m.MethodName + "_Handler";
string eventName = "On" + m.MethodName + "_" + m.ObjectClass.ClassName;
%>
		public event <%= delegateName %><<%= m.ObjectClass.ClassName %>> <%= eventName %>;
<%

string parameterDefs = m.GetParameterDefinitions();
if (!String.IsNullOrEmpty(parameterDefs))
{
    // add leading comma for later usage
	parameterDefs = ", " + parameterDefs;	
}

var ret = m.GetReturnParameter();
if (ret == null)
{
%>
		public delegate void <%= delegateName %><T>(T obj<%= parameterDefs %>);
<%
}
else
{
%>
		public delegate void <%= delegateName %><T>(T obj, MethodReturnArgs<<%= ret.GetParameterType().FullName %>><%= parameterDefs %>);
<%
}
%>
