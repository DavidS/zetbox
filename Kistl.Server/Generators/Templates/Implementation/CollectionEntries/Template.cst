<%@ CodeTemplate Language="C#" 
    Name="Implementation.CollectionEntries.Template"
    ClassName="Kistl.Server.Generators.Templates.Implementation.CollectionEntries.Template" 
    Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%
    ApplyClassAttributeTemplate();
%>
    [System.Diagnostics.DebuggerDisplay("<%= GetCeClassName() %>")]
    public class <%= GetCeClassName() %> <%= GetInheritance() %>
    {
    
<%
    ApplyIdPropertyTemplate();
	if(ImplementsIExportable())
	{
		ApplyExportGuidPropertyTemplate();
    }
    ApplyRelationIdPropertyTemplate();
    ApplyObjectGetterTemplate();
%>

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
<%
    ApplyAPropertyTemplate();
%>
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
<%
    ApplyBPropertyTemplate();



    if (IsOrdered())
    {
%>



        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
<%
        ApplyAIndexPropertyTemplate();
%>

        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
<%
        ApplyBIndexPropertyTemplate();
    }
%>

#region Serializer

<%
    Implementation.ObjectClasses.SerializerTemplate.Call(Host, ctx,
        Templates.Implementation.SerializerDirection.ToStream, this.MembersToSerialize, true, false);
    
    Implementation.ObjectClasses.SerializerTemplate.Call(Host, ctx,
        Templates.Implementation.SerializerDirection.FromStream, this.MembersToSerialize, true, false);

    Implementation.ObjectClasses.SerializerTemplate.Call(Host, ctx,
        Templates.Implementation.SerializerDirection.ToXmlStream, this.MembersToSerialize, true, false);
    
    Implementation.ObjectClasses.SerializerTemplate.Call(Host, ctx,
        Templates.Implementation.SerializerDirection.FromXmlStream, this.MembersToSerialize, true, false);

	if(ImplementsIExportable())
	{
		Implementation.ObjectClasses.SerializerTemplate.Call(Host, ctx,
			Templates.Implementation.SerializerDirection.Export, this.MembersToSerialize, false, HasExportGuid());
	    
		Implementation.ObjectClasses.SerializerTemplate.Call(Host, ctx,
			Templates.Implementation.SerializerDirection.MergeImport, this.MembersToSerialize, false, HasExportGuid());
	}
%>

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(<%= GetCeInterface() %>);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
<%
    ApplyReloadReferenceBody();
%>
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (<%= GetCeClassName() %>)obj;
			var me = (<%= GetCeClassName() %>)this;
			
<%
			ApplyChangesFromBody();
%>
		}		
		
		
<%
    ApplyClassTailTemplate();
%>

    }
