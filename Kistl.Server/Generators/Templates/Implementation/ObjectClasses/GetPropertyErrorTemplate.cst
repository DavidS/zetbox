<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.GetPropertyErrorTemplate"
	ClassName="Kistl.Server.Generators.Templates.Implementation.ObjectClasses.GetPropertyErrorTemplate" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="cls" Type="ObjectClass" %>

<%
	var properties = cls.Properties.OrderBy(p => p.Name).ToList();
	if (properties.Count > 0) {
%>
		private static readonly System.ComponentModel.PropertyDescriptor[] _properties = new System.ComponentModel.PropertyDescriptor[] {
<%
		foreach(var property in properties)
		{
			string propertyName = property.Name;
			if (property.IsAssociation() && !property.IsObjectReferencePropertySingle())
			{
%>
			new CustomPropertyDescriptor<<%= cls.Name %>, <%= property.GetCollectionTypeString() %>>(
				new Guid("<%= property.ExportGuid %>"),
				"<%= propertyName %>",
				null,
				obj => obj.<%= propertyName %>,
				null), // lists are read-only properties
<%
			}
			else if (property is CalculatedObjectReferenceProperty) {
%>
			new CustomPropertyDescriptor<<%= cls.Name %>, <%= property.ReferencedTypeAsCSharp() %>>(
				new Guid("<%= property.ExportGuid %>"),
				"<%= propertyName %>",
				null,
				obj => obj.<%= propertyName %>,
				null), // CalculatedObjectReferenceProperty is a read-only property
<%
			} else {
%>
			new CustomPropertyDescriptor<<%= cls.Name %>, <%= property.ReferencedTypeAsCSharp() %>>(
				new Guid("<%= property.ExportGuid %>"),
				"<%= propertyName %>",
				null,
				obj => obj.<%= propertyName %>,
				(obj, val) => obj.<%= propertyName %> = val),
<%
			}
		}
%>
		};
		
		protected override void CollectProperties(List<System.ComponentModel.PropertyDescriptor> props)
		{
			props.AddRange(_properties);
		}
<%
	}
%>
	
