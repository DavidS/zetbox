<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.NotifyingValueProperty"
	ClassName="Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="serializationList" Type="SerializationMembersList" %>
<%@ Parameter Name="type" Type="string" %>
<%@ Parameter Name="name" Type="String" %>
<%@ Parameter Name="callGetterSetterEvents" Type="bool" %>
<%@ Parameter Name="modulenamespace" Type="String" %>
<%

	ApplyRequisitesTemplate();

	ApplyAttributesTemplate();

	string backingName = BackingMemberFromName(name);
	string eventName = "On" + name;

%>
   		// <%= this.GetType() %>
        <%= GetModifiers() %> <%= type %> <%= name %>
        {
            get
            {
<%
				if(callGetterSetterEvents)
				{
%>
				var __value = <%= backingName %>;
				if(<%= eventName %>_Getter != null)
				{
					var e = new PropertyGetterEventArgs<<%= type %>>(__value);
					<%= eventName %>_Getter(this, e);
					__value = e.Result;
				}
                return __value;
<% 
				}
				else
				{
%>
				return <%= backingName %>;
<%
				}
%>
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (<%= backingName %> != value)
                {
					var __oldValue = <%= backingName %>;
					var __newValue = value;
<%
					if(callGetterSetterEvents)
					{
%>
                    if(<%= eventName %>_PreSetter != null)
                    {
						var e = new PropertyPreSetterEventArgs<<%= type %>>(__oldValue, __newValue);
						<%= eventName %>_PreSetter(this, e);
						__newValue = e.Result;
                    }
<%
					}
%>
                    NotifyPropertyChanging("<%= name %>", __oldValue, __newValue);
                    <%= backingName %> = __newValue;
                    NotifyPropertyChanged("<%= name %>", __oldValue, __newValue);

<%
					if(callGetterSetterEvents)
					{
%>
                    if(<%= eventName %>_PostSetter != null)
                    {
						var e = new PropertyPostSetterEventArgs<<%= type %>>(__oldValue, __newValue);
						<%= eventName %>_PostSetter(this, e);
                    }
<%
					}
%>
                }
            }
        }
        private <%= type %> <%= backingName %>;
<%
	AddSerialization(serializationList, name);
%>