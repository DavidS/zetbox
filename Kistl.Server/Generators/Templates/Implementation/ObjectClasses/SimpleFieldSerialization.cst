<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.SimpleFieldSerialization"
	ClassName="Kistl.Server.Generators.Templates.Implementation.ObjectClasses.SimpleFieldSerialization" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="direction" Type="SerializerDirection" %>
<%@ Parameter Name="streamName" Type="string" %>
<%@ Parameter Name="xmlnamespace" Type="string" %>
<%@ Parameter Name="xmlname" Type="string" %>
<%@ Parameter Name="memberName" Type="string" %>
<%
	switch(direction)
	{
		case SerializerDirection.ToStream:
%>
            BinarySerializer.ToStream(this.<%= memberName %>, <%= streamName %>);
<%
			break;
		case SerializerDirection.FromStream:
%>
            BinarySerializer.FromStream(out this.<%= memberName %>, <%= streamName %>);
<%
			break;
		case SerializerDirection.ToXmlStream:
%>
            XmlStreamer.ToStream(this.<%= memberName %>, <%= streamName %>, "<%= xmlname %>", "<%= xmlnamespace %>");
<%		
            break;
		case SerializerDirection.FromXmlStream:
		case SerializerDirection.MergeImport:
%>
            XmlStreamer.FromStream(ref this.<%= memberName %>, <%= streamName %>, "<%= xmlname %>", "<%= xmlnamespace %>");
<%			
            break;
		case SerializerDirection.Export:
%>	
            if (modules.Contains("*") || modules.Contains("<%= xmlnamespace %>")) XmlStreamer.ToStream(this.<%= memberName %>, <%= streamName %>, "<%= xmlname %>", "<%= xmlnamespace %>");
<%			
			break;
		default:
			throw new ArgumentOutOfRangeException("direction");
	}
%>
