<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.Tail"
	ClassName="Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="cls" Type="ObjectClass" %>

        // tail template
   		// <%= this.GetType() %>

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_<%= cls.Name %>")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_<%= cls.Name %> != null)
            {
                OnToString_<%= cls.Name %>(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<<%= cls.Name %>> OnToString_<%= cls.Name %>;

        [EventBasedMethod("OnPreSave_<%= cls.Name %>")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_<%= cls.Name %> != null) OnPreSave_<%= cls.Name %>(this);
        }
        public static event ObjectEventHandler<<%= cls.Name %>> OnPreSave_<%= cls.Name %>;

        [EventBasedMethod("OnPostSave_<%= cls.Name %>")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_<%= cls.Name %> != null) OnPostSave_<%= cls.Name %>(this);
        }
        public static event ObjectEventHandler<<%= cls.Name %>> OnPostSave_<%= cls.Name %>;

        [EventBasedMethod("OnCreated_<%= cls.Name %>")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_<%= cls.Name %> != null) OnCreated_<%= cls.Name %>(this);
        }
        public static event ObjectEventHandler<<%= cls.Name %>> OnCreated_<%= cls.Name %>;

        [EventBasedMethod("OnDeleting_<%= cls.Name %>")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_<%= cls.Name %> != null) OnDeleting_<%= cls.Name %>(this);
        }
        public static event ObjectEventHandler<<%= cls.Name %>> OnDeleting_<%= cls.Name %>;

<%
	Implementation.ObjectClasses.CustomTypeDescriptor.Call(Host, ctx, cls);
%>