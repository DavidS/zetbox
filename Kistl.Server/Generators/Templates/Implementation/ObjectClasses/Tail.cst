<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.Tail"
	ClassName="Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="cls" Type="ObjectClass" %>

        // tail template
   		// <%= this.GetType() %>

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_<%= cls.ClassName %>")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_<%= cls.ClassName %> != null)
            {
                OnToString_<%= cls.ClassName %>(this, e);
            }
            return e.Result;
        }
        public event ToStringHandler<<%= cls.ClassName %>> OnToString_<%= cls.ClassName %>;

        [EventBasedMethod("OnPreSave_<%= cls.ClassName %>")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_<%= cls.ClassName %> != null) OnPreSave_<%= cls.ClassName %>(this);
        }
        public event ObjectEventHandler<<%= cls.ClassName %>> OnPreSave_<%= cls.ClassName %>;

        [EventBasedMethod("OnPostSave_<%= cls.ClassName %>")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_<%= cls.ClassName %> != null) OnPostSave_<%= cls.ClassName %>(this);
        }
        public event ObjectEventHandler<<%= cls.ClassName %>> OnPostSave_<%= cls.ClassName %>;

        [EventBasedMethod("OnCreated_<%= cls.ClassName %>")]
        public override void NotifyCreated()
        {
<%			if(cls.Properties.Count(p => p.DefaultValue != null) > 0)
			{
%>
            try
            {
<%
				foreach (var prop in cls.Properties.Where(p => p.DefaultValue != null))
				{
%>
				this.<%= prop.PropertyName %> = (<%= prop.ReferencedTypeAsCSharp() %>)FrozenContext.Single.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("<%= prop.ExportGuid %>")).DefaultValue.GetDefaultValue();
<%
				}
%>
            }
            catch (TypeLoadException)
            {
                // TODO: Find a better way to ignore bootstrap errors.
                // During bootstrapping no MethodInvocation is registred
            }
            catch (NotImplementedException)
            {
                // TODO: Find a better way to ignore bootstrap errors.
                // During bootstrapping no MethodInvocation is registred
            }
<%
			}
%>
            base.NotifyCreated();
            if (OnCreated_<%= cls.ClassName %> != null) OnCreated_<%= cls.ClassName %>(this);
        }
        public event ObjectEventHandler<<%= cls.ClassName %>> OnCreated_<%= cls.ClassName %>;

        [EventBasedMethod("OnDeleting_<%= cls.ClassName %>")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_<%= cls.ClassName %> != null) OnDeleting_<%= cls.ClassName %>(this);
        }
        public event ObjectEventHandler<<%= cls.ClassName %>> OnDeleting_<%= cls.ClassName %>;

<%
	Implementation.ObjectClasses.GetPropertyErrorTemplate.Call(Host, ctx, cls);
%>