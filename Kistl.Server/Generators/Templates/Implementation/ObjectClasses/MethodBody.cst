<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.MethodBody"
	ClassName="Kistl.Server.Generators.Templates.Implementation.ObjectClasses.MethodBody" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>

<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="dt" Type="Kistl.App.Base.DataType" %>
<%@ Parameter Name="m" Type="Kistl.App.Base.Method" %>
<%@ Parameter Name="index" Type="int" %>
<%

	string indexSuffix = index == 0 ? String.Empty : index.ToString();
	string delegateName = m.Name + indexSuffix + "_Handler";
	string eventName = "On" + m.Name + indexSuffix + "_" + dt.Name;
	var returnParam = m.Parameter.SingleOrDefault(parameter => parameter.IsReturnParameter);

	string parameterDefs = m.GetParameterDefinitions();
	if (!String.IsNullOrEmpty(parameterDefs))
	{
	    // add leading comma for later usage
		parameterDefs = ", " + parameterDefs;	
	}

	string argumentDefs = m.GetArguments();
	if (!String.IsNullOrEmpty(argumentDefs))
	{
	    // add leading comma for later usage
		argumentDefs = ", " + argumentDefs;	
	}
	

	if (returnParam == null)
	{
%>
		{
            // base.<%= m.Name %>();
            if (<%= eventName %> != null)
            {
				<%= eventName %>(this<%= argumentDefs %>);
			}
			else
			{
<%
        if (m.ObjectClass == dt || !(dt is ObjectClass))
        {
%>
                throw new NotImplementedException("No handler registered on <%= m.ObjectClass.Name %>.<%= m.Name %>");
<%
        }
        else
        {
%>
			    base.<%= m.Name %>(<%= m.GetArguments() %>);
<%
        }
%>
			}
        }
<%
		// define delegate type only on base class
		if (this.m.ObjectClass == this.dt)
		{
%>
		public delegate void <%= delegateName %><T>(T obj<%= parameterDefs %>);
<%
		}
	}
	else
	{

		string returnArgsType = String.Format("MethodReturnEventArgs<{0}>", returnParam.ReturnedTypeAsCSharp());
%>
        {
            var e = new <%= returnArgsType %>();
            if (<%= eventName %> != null)
            {
                <%= eventName %>(this, e<%= argumentDefs %>);
            }
            else
            {
<%
        if (m.ObjectClass == dt || !(dt is ObjectClass))
        {
%>
                throw new NotImplementedException("No handler registered on <%= m.ObjectClass.Name %>.<%= m.Name %>");
<%
        }
        else
        {
%>
                e.Result = base.<%= m.Name %>(<%= m.GetArguments() %>);
<%
        }
%>
            }
            return e.Result;
        }
<%

		// define delegate type only on base class
		if (this.m.ObjectClass == this.dt)
		{
%>
		public delegate void <%= delegateName %><T>(T obj, <%= returnArgsType %> ret<%= parameterDefs %>);
<%
		}
	}

%>
		public static event <%= delegateName %><<%= dt.Name %>> <%= eventName %>;


