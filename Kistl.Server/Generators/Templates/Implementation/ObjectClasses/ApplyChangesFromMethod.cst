<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.ApplyChangesFromMethod"
	ClassName="Kistl.Server.Generators.Templates.Implementation.ObjectClasses.ApplyChangesFromMethod" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="cls" Type="ObjectClass" %>

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (<%= cls.Name %>)obj;
			var otherImpl = (<%= cls.Name + Kistl.API.Helper.ImplementationSuffix %>)obj;
			var me = (<%= cls.Name %>)this;

<%			
			foreach(var prop in cls.Properties.OfType<ValueTypeProperty>().Where(p => !p.IsList).OrderBy(p => p.Name))
			{
%>
			me.<%= prop.Name %> = other.<%= prop.Name %>;
<%
			}

			foreach(var prop in cls.Properties.OfType<CompoundObjectProperty>().Where(p => !p.IsList).OrderBy(p => p.Name))
			{
%>
			me.<%= prop.Name %> = other.<%= prop.Name %> != null ? (<%= prop.GetPropertyTypeString() %>)other.<%= prop.Name %>.Clone() : null;
<%
			}

			foreach(var prop in cls.Properties.OfType<ObjectReferenceProperty>().Where(p => !p.IsList()).OrderBy(p => p.Name))
			{
				if (prop.RelationEnd.HasPersistentOrder) {
					var positionPropertyName = Construct.ListPositionPropertyName(prop.RelationEnd);
%>
			this.<%= positionPropertyName %> = otherImpl.<%= positionPropertyName %>;
<%
				}
%>
			this._fk_<%= prop.Name %> = otherImpl._fk_<%= prop.Name %>;
<%
			}
%>
		}
