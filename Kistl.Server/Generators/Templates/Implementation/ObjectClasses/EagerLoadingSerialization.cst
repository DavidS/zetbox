<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.EagerLoadingSerialization"
	ClassName="Kistl.Server.Generators.Templates.Implementation.ObjectClasses.EagerLoadingSerialization" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="direction" Type="Templates.Implementation.SerializerDirection" %>
<%@ Parameter Name="streamName" Type="string" %>
<%@ Parameter Name="xmlnamespace" Type="string" %>
<%@ Parameter Name="xmlname" Type="string" %>
<%@ Parameter Name="collectionName" Type="string" %>
<%@ Parameter Name="serializeIds" Type="bool" %>
<%

	switch(direction)
	{
		case SerializerDirection.ToStream:
%>
			{
<% if (serializeIds) { %>
				BinarySerializer.ToStream(<%= collectionName %>.Count, <%= streamName %>);
<% } %>
				foreach(var obj in <%= collectionName %>)
				{
					auxObjects.Add(obj);
<% if (serializeIds) { %>
					BinarySerializer.ToStream(obj.ID, <%= streamName %>);
<% } %>
				}
			}
<%
			break;
		case SerializerDirection.FromStream:
			if (serializeIds)
			{ 
%>
			{
				int numElements;
				BinarySerializer.FromStream(out numElements, <%= streamName %>);
				<%= collectionName %>Ids = new List<int>(numElements);
				while (numElements-- > 0) 
				{
					int id;
					BinarySerializer.FromStream(out id, <%= streamName %>);
					<%= collectionName %>Ids.Add(id);
				}
			}

<%
			}
			break;
		default:
			throw new ArgumentOutOfRangeException("direction");
	}
%>