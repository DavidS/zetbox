<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.EnumBinarySerialization"
	ClassName="Kistl.Server.Generators.Templates.Implementation.ObjectClasses.EnumBinarySerialization" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Import Namespace="Kistl.Server.Movables" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="direction" Type="SerializerDirection" %>
<%@ Parameter Name="streamName" Type="string" %>
<%@ Parameter Name="prop" Type="EnumerationProperty" %>
<%
	// always use the interface to get the "right" property
	string interfaceName = prop.ObjectClass.ClassName;
    string memberName = prop.PropertyName;
    string enumName =  prop.Enumeration.Module.Namespace + "." +  prop.Enumeration.ClassName;
	string methodName = direction.ToString();
	
	switch(direction){
		case SerializerDirection.ToStream:
%>
            BinarySerializer.<%= methodName %>((int)((<%= interfaceName %>)this).<%= memberName %>, <%= streamName %>);
<%
			break;
		case SerializerDirection.FromStream:
%>
            BinarySerializer.<%= methodName %>Converter(v => ((<%= interfaceName %>)this).<%= memberName %> = (<%= enumName %>)v, <%= streamName %>);
<%
			break;
		default:
			throw new ArgumentOutOfRangeException("direction");
	}
%>