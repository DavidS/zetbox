<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.SimpleBinarySerialization"
	ClassName="Kistl.Server.Generators.Templates.Implementation.ObjectClasses.SimpleBinarySerialization" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="direction" Type="SerializerDirection" %>
<%@ Parameter Name="streamName" Type="string" %>
<%@ Parameter Name="xmlnamespace" Type="string" %>
<%@ Parameter Name="xmlname" Type="string" %>
<%@ Parameter Name="memberName" Type="string" %>
<%
	if(direction == SerializerDirection.ToStream || direction == SerializerDirection.FromStream)
	{
		string methodName = direction.ToString();
		string modifier;
		
		switch(direction){
			case SerializerDirection.ToStream:
				modifier = "";
				break;
			case SerializerDirection.FromStream:
				modifier = "out ";
				break;
			default:
				throw new ArgumentOutOfRangeException("direction");
		}
	
%>
            BinarySerializer.<%= methodName %>(<%= modifier %>this.<%= memberName %>, <%= streamName %>);
<%	
	}
	else if(direction.In(SerializerDirection.ToXmlStream, SerializerDirection.Export))
	{
%>
            XmlStreamer.ToStream(this.<%= memberName %>, <%= streamName %>, "<%= xmlname %>", "<%= xmlnamespace %>");
<%			
	}
	else if(direction.In(SerializerDirection.FromXmlStream, SerializerDirection.MergeImport))
	{
%>
            XmlStreamer.FromStream(ref this.<%= memberName %>, <%= streamName %>, "<%= xmlname %>", "<%= xmlnamespace %>");
<%			
	}
	else
	{
		throw new ArgumentOutOfRangeException("direction");
	}
%>