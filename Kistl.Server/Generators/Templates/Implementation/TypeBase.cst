<%@ CodeTemplate Language="C#" 
    Name="Implementation.TypeBase"
    ClassName="Kistl.Server.Generators.Templates.Implementation.TypeBase" 
    Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="DataType" Type="DataType" %>
// <autogenerated/>

<%

ApplyGlobalPreambleTemplate();

%>

namespace <%= DataType.Module.Namespace %>
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

<%
    foreach(string ns in GetAdditionalImports().OrderBy(s => s))
    {
%>
    using <%= ns %>;
<%
    }
    
    ApplyNamespacePreambleTemplate();
%>

    /// <summary>
    /// <%= DataType.Description %>
    /// </summary>
<%

    var mungedClassName = GetTypeName();

    ApplyClassAttributeTemplate();
%>
    [System.Diagnostics.DebuggerDisplay("<%= DataType.ClassName %>")]
    public class <%= mungedClassName %> <%= GetInheritance() %>
    {
    
		public <%= mungedClassName %>()
		{
<%
            ApplyConstructorTemplate();
%>
        }

<%
        ApplyIDPropertyTemplate();

		// TODO: decouple serializing format from PropertyName order
        foreach(Property p in DataType.Properties.OrderBy(p => p.PropertyName))
        {
%>

        /// <summary>
        /// <%= p.Description %>
        /// </summary>
<%
            ApplyPropertyTemplate(p);
        }

        foreach(var mg in MethodsToGenerate().GroupBy(m => m.MethodName).OrderBy(mg => mg.Key))
        {
			int index = 0;
			foreach(var m in mg.OrderByDefault())
			{
%>

        /// <summary>
        /// <%= m.Description %>
        /// </summary>
<%
				ApplyMethodTemplate(m, index++);
			}
        }
%>

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(<%= DataType.ClassName %>));
		}
<%
		ApplyApplyChangesFromMethod();
		ApplyAttachToContextMethod();
        ApplyClassTailTemplate();
%>

#region Serializer

<%
		Implementation.ObjectClasses.SerializerTemplate.Call(Host, ctx,
			SerializerDirection.ToStream, this.MembersToSerialize, true, false);
		
		Implementation.ObjectClasses.SerializerTemplate.Call(Host, ctx,
			SerializerDirection.FromStream, this.MembersToSerialize, true, false);

		Implementation.ObjectClasses.SerializerTemplate.Call(Host, ctx,
			SerializerDirection.ToXmlStream, this.MembersToSerialize, true, false);
		
		Implementation.ObjectClasses.SerializerTemplate.Call(Host, ctx,
			SerializerDirection.FromXmlStream, this.MembersToSerialize, true, false);

		if((DataType is ObjectClass) && ((ObjectClass)DataType).ImplementsIExportable())
		{
			ObjectClass cls = (ObjectClass)DataType;			
			Implementation.ObjectClasses.SerializerTemplate.Call(Host, ctx,
				SerializerDirection.Export, this.MembersToSerialize, cls.BaseObjectClass != null, true);
			
			Implementation.ObjectClasses.SerializerTemplate.Call(Host, ctx,
				SerializerDirection.MergeImport, this.MembersToSerialize, cls.BaseObjectClass != null, true);
		}
%>

#endregion

    }

<%    
        ApplyNamespaceTailTemplate();
%>

}