<%@ CodeTemplate Language="C#" 
    Name="Implementation.Module"
    ClassName="Kistl.Server.Generators.Templates.Implementation.Module" 
    Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="shortName" Type="string" %>
<%@ Parameter Name="extraSuffix" Type="string" %>
// <autogenerated/>

namespace Kistl.Objects
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Autofac;
    using Kistl.API;
    using Kistl.App.Extensions;
    using Kistl.DalProvider.<%= shortName %>;

    public class <%= shortName %>Module
        : Autofac.Module
    {
        protected override void Load(ContainerBuilder builder)
        {
            base.Load(builder);

            builder
                .Register<<%= shortName %>ImplementationTypeChecker>(
                    c => new <%= shortName %>ImplementationTypeChecker(
                        c.Resolve<Func<IEnumerable<IImplementationTypeChecker>>>()))
                .As<I<%= shortName %>ImplementationTypeChecker>()
                .As<IImplementationTypeChecker>()
                .InstancePerDependency();
                
            builder
                .Register<<%= shortName %>ActionsManager>(
                    c => new <%= shortName %>ActionsManager(
                        c.Resolve<IDeploymentRestrictor>()))
                .As<I<%= shortName %>ActionsManager>()
                .InstancePerLifetimeScope();
        }
    }

    internal sealed class <%= shortName %>ImplementationTypeChecker
        : BaseImplementationTypeChecker, I<%= shortName %>ImplementationTypeChecker
    {
        public <%= shortName %>ImplementationTypeChecker(Func<IEnumerable<IImplementationTypeChecker>> implTypeCheckersFactory)
            : base(implTypeCheckersFactory)
        {
        }

        protected override System.Reflection.Assembly GetAssembly()
        {
            return this.GetType().Assembly;
        }
    }

    // marker class to provide stable and correct assembly reference
    internal sealed class <%= shortName %>ActionsManager
        : BaseCustomActionsManager, I<%= shortName %>ActionsManager
    {
        public <%= shortName %>ActionsManager(IDeploymentRestrictor restrictor)
            : base(restrictor, "<%= extraSuffix %>")
        {
        }
    }
}
