<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.CompoundObjectPropertyTemplate"
	ClassName="Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.CompoundObjectPropertyTemplate" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="serializationList" Type="Templates.Implementation.SerializationMembersList" %>
<%@ Parameter Name="prop" Type="CompoundObjectProperty" %>
<%@ Parameter Name="propName" Type="string" %>
<%@ Parameter Name="backingPropertyName" Type="string" %>
<%@ Parameter Name="backingStoreName" Type="string" %>
<%@ Parameter Name="coType" Type="string" %>
<%@ Parameter Name="coImplementationType" Type="string" %>
		// <%= this.GetType() %>
        // implement the user-visible interface
        public <%= coType %> <%= propName %>
        {
            get { return <%= backingPropertyName %>; }
            set { <%= backingPropertyName %> = (<%= coImplementationType %>)value; }
        }
        
        /// <summary>backing store for <%= propName %></summary>
        private <%= coImplementationType %> <%= backingStoreName %>;
        
        /// <summary>backing property for <%= propName %>, takes care of attaching/detaching the values</summary>
        private <%= coImplementationType %> <%= backingPropertyName %> {
            get { return <%= backingStoreName %>; }
            set {
<%				if(!prop.IsNullable())
				{
%>				            
                if (value == null)
					throw new ArgumentNullException("value");
<%
				}                
%>
                var __oldValue = <%= backingStoreName %>;
                var __newValue = value;

                NotifyPropertyChanging("<%= propName %>", __oldValue, __newValue);
                
				if (<%= backingStoreName %> != null) <%= backingStoreName %>.DetachFromObject(this, "<%= propName %>");
                <%= backingStoreName %> = value != null ? (<%= coImplementationType %>)value.Clone() : null;
				if (<%= backingStoreName %> != null) <%= backingStoreName %>.AttachToObject(this, "<%= propName %>");

                NotifyPropertyChanged("<%= propName %>", __oldValue, __newValue);
            }
		}
<%
        AddSerialization(serializationList, propName, backingPropertyName);
%>  