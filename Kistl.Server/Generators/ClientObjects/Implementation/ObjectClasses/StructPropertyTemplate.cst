<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.StructPropertyTemplate"
	ClassName="Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.StructPropertyTemplate" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="serializationList" Type="Templates.Implementation.SerializationMembersList" %>
<%@ Parameter Name="prop" Type="StructProperty" %>
<%

	string name = prop.PropertyName;
	string backingPropertyName = "_" + name;
	string backingStoreName = "_" + name + "Store";
	
	string structType = prop.GetPropertyTypeString();
	string structImplementationType = structType + Kistl.API.Helper.ImplementationSuffix;

%>
		// <%= this.GetType() %>
        // implement the user-visible interface
        public <%= structType %> <%= name %>
        {
            get { return <%= backingPropertyName %>; }
        }
        
        /// <summary>backing store for <%= name %></summary>
        private <%= structImplementationType %> <%= backingStoreName %>;
        
        /// <summary>backing property for <%= name %>, takes care of attaching/detaching the values</summary>
        private <%= structImplementationType %> <%= backingPropertyName %> {
            get { return <%= backingStoreName %>; }
            set {
				if (<%= backingStoreName %> != null)
				{
	                <%= backingStoreName %>.DetachFromObject(this, "<%= name %>");
				}
                <%= backingStoreName %> = (<%= structImplementationType %>)value;
                <%= backingStoreName %>.AttachToObject(this, "<%= name %>");
            }
		}
<%
        AddSerialization(serializationList, backingPropertyName);
%>  