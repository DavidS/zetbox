<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.ObjectListProperty"
	ClassName="Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.ObjectListProperty" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Import Namespace="Kistl.Server.Movables" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="serializationList" Type="Templates.Implementation.SerializationMembersList" %>
<%@ Parameter Name="prop" Type="ObjectReferenceProperty" %>
<%

    Debug.Assert(prop.IsList);

    var rel = NewRelation.Lookup(ctx, prop);
    var relEnd = rel.GetEnd(prop);
    var otherEnd = relEnd.Other;
    var otherName = otherEnd.Navigator == null ? relEnd.RoleName : otherEnd.Navigator.PropertyName;

	// the name of the property to create
	string name = prop.PropertyName;
	// the name of the private backing store for the conversion wrapper list
	string wrapperName = "_" + name + "Wrapper";
	// the name of the wrapper class for wrapping the EntityCollection
	string wrapperClass = "BackReferenceCollection";
	
	// which generic interface to use for the collection
	string exposedListType = prop.IsIndexed ? "IList" : "ICollection";

	// which Kistl interface this list contains
	string referencedInterface = otherEnd.Type.NameDataObject;

	
%>
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public <%= exposedListType %><<%= referencedInterface %>> <%= name %>
        {
            get
            {
                if (<%= wrapperName %> == null)
                {
                    List<<%= referencedInterface %>> serverList;
                    if (Helper.IsPersistedObject(this))
                        serverList = Context.GetListOf<<%= referencedInterface %>>(this, "<%= name %>");
                    else
                        serverList = new List<<%= referencedInterface %>>();
                        
                    <%= wrapperName %> = new <%= wrapperClass %><<%= referencedInterface %>>(
                        "<%= otherName %>",
                        this,
                        serverList);
                }
                return <%= wrapperName %>;
            }
        }
        
        private <%= wrapperClass %><<%= referencedInterface %>> <%= wrapperName %>;
