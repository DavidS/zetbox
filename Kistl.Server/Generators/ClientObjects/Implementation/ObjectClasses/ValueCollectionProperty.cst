<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.ValueCollectionProperty"
	ClassName="Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.ValueCollectionProperty" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="serializationList" Type="Templates.Implementation.SerializationMembersList" %>
<%@ Parameter Name="prop" Type="ValueTypeProperty" %>
<%

    Debug.Assert(prop.IsList);


	// the name of the property to create
	string name = prop.PropertyName;
	// the name of the private backing store for the conversion wrapper list
	string wrapperName = "_" + name + "Wrapper";
	// the name of the wrapper class for wrapping the EntityCollection
	string wrapperClass = "NewListPropertyCollection";

	// which generic interface to use for the collection
	string exposedListType = prop.IsIndexed ? "IList" : "ICollection";

	// which Kistl interface this is 
	string thisInterface = prop.ObjectClass.ClassName;
	// which type this list contains
	string referencedType = prop.ReferencedTypeAsCSharp();
	// collection entries in this list
	string referencedCollectionEntry = prop.GetCollectionEntryClassName() + Kistl.API.Helper.ImplementationSuffix;

    AddSerialization(serializationList, wrapperName);

%>
        public <%= exposedListType %><<%= referencedType %>> <%= name %>
        {
            get
            {
                if (<%= wrapperName %> == null)
                {
                    <%= wrapperName %> = new <%= wrapperClass %><<%= thisInterface %>, <%= referencedType %>, <%= referencedCollectionEntry %>>(
                        this,
                        "<%= name %>");
                }
                return <%= wrapperName %>;
            }
        }
        private <%= wrapperClass %><<%= thisInterface %>, <%= referencedType %>, <%= referencedCollectionEntry %>> <%= wrapperName %>;
