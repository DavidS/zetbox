// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections.Generic;

    using Zetbox.API;

    /// <summary>
    /// This class models a reference to a specific, concrete Type. Generic Types have all parameters filled.
    /// </summary>
    [Zetbox.API.DefinitionGuid("87766ae2-89a4-4c37-ab25-583a710c55e5")]
    public interface TypeRef : IDataObject, Zetbox.App.Base.IChangedBy, Zetbox.App.Base.IExportable 
    {

        /// <summary>
        /// The assembly containing the referenced Type.
        /// </summary>
        [Zetbox.API.DefinitionGuid("885bfa97-3d43-48bb-a0aa-1049298714ff")]
        Zetbox.App.Base.Assembly Assembly {
            get;
            set;
        }

        /// <summary>
        /// If the TypeRef could not be found in the containing assembly this property is set to true, otherwise to null
        /// </summary>
        [Zetbox.API.DefinitionGuid("aa1a4c98-2ae0-45d9-a343-7db43ca6430e")]
        bool? Deleted {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        [Zetbox.API.DefinitionGuid("e418e513-e623-4a8f-bcbd-8572a29b7c82")]
        string FullName {
            get;
            set;
        }

        /// <summary>
        /// list of type arguments
        /// </summary>

        [Zetbox.API.DefinitionGuid("443e3370-b1f4-46e8-9779-1a8d9ba1c8a6")]
        IList<Zetbox.App.Base.TypeRef> GenericArguments { get; }

        /// <summary>
        /// The TypeRef of the BaseClass of the referenced Type
        /// </summary>
        [Zetbox.API.DefinitionGuid("f7ed21a0-9a41-40eb-b3ab-b35591f2edd7")]
        Zetbox.App.Base.TypeRef Parent {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        [Zetbox.API.DefinitionGuid("7887ad1c-654c-46fb-b7eb-bde9de04184a")]
        string ToStringCache {
            get;
            set;
        }

        /// <summary>
        /// get the referenced &lt;see cref=&quot;Type&quot;/&gt;
        /// </summary>
        System.Type AsType(bool throwOnError);

        /// <summary>
        /// 
        /// </summary>
        string ToTypeName();

        /// <summary>
        /// Update the Parent property to the currently loaded assemblies&apos; state
        /// </summary>
        void UpdateParent();

        /// <summary>
        /// 
        /// </summary>
        void UpdateToStringCache();
    }
}
