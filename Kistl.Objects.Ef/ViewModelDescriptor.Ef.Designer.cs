// <autogenerated/>

namespace Kistl.App.GUI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;
    using Kistl.DalProvider.Base.RelationWrappers;

    using Kistl.API.Server;
    using Kistl.DalProvider.Ef;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="ViewModelDescriptor")]
    [System.Diagnostics.DebuggerDisplay("ViewModelDescriptor")]
    public class ViewModelDescriptorEfImpl : BaseServerDataObject_EntityFramework, Kistl.API.IExportableInternal, ViewModelDescriptor
    {
        [Obsolete]
        public ViewModelDescriptorEfImpl()
            : base(null)
        {
        }

        public ViewModelDescriptorEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// The default ControlKind to use for displaying this Presentable readonly. Defaults to DefaultKind with editing disabled.
        /// </summary>
    /*
    Relation: FK_ViewModel_displayed_by_DefaultDisplayKind
    A: ZeroOrMore ViewModelDescriptor as ViewModel
    B: ZeroOrOne ControlKind as DefaultDisplayKind
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultDisplayKind
        // fkBackingName=_fk_DefaultDisplayKind; fkGuidBackingName=_fk_guid_DefaultDisplayKind;
        // referencedInterface=Kistl.App.GUI.ControlKind; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ControlKind DefaultDisplayKind
        {
            get { return DefaultDisplayKindImpl; }
            set { DefaultDisplayKindImpl = (Kistl.App.GUI.ControlKindEfImpl)value; }
        }

        private int? _fk_DefaultDisplayKind;

        private Guid? _fk_guid_DefaultDisplayKind = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ViewModel_displayed_by_DefaultDisplayKind", "DefaultDisplayKind")]
        public Kistl.App.GUI.ControlKindEfImpl DefaultDisplayKindImpl
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return null;
                Kistl.App.GUI.ControlKindEfImpl __value;
                EntityReference<Kistl.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewModel_displayed_by_DefaultDisplayKind",
                        "DefaultDisplayKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnDefaultDisplayKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.ControlKind>(__value);
                    OnDefaultDisplayKind_Getter(this, e);
                    __value = (Kistl.App.GUI.ControlKindEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewModel_displayed_by_DefaultDisplayKind",
                        "DefaultDisplayKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.ControlKindEfImpl __oldValue = (Kistl.App.GUI.ControlKindEfImpl)r.Value;
                Kistl.App.GUI.ControlKindEfImpl __newValue = (Kistl.App.GUI.ControlKindEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("DefaultDisplayKind", null, __oldValue, __newValue);

                if (OnDefaultDisplayKind_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultDisplayKind_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.ControlKindEfImpl)e.Result;
                }

                r.Value = (Kistl.App.GUI.ControlKindEfImpl)__newValue;

                if (OnDefaultDisplayKind_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultDisplayKind_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("DefaultDisplayKind", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultDisplayKind
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultDisplayKind_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultDisplayKind_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultDisplayKind_PostSetter;

        /// <summary>
        /// The default ControlKind to use for this Presentable.
        /// </summary>
    /*
    Relation: FK_Presentable_has_DefaultKind
    A: ZeroOrMore ViewModelDescriptor as Presentable
    B: ZeroOrOne ControlKind as DefaultKind
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultEditorKind
        // fkBackingName=_fk_DefaultEditorKind; fkGuidBackingName=_fk_guid_DefaultEditorKind;
        // referencedInterface=Kistl.App.GUI.ControlKind; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ControlKind DefaultEditorKind
        {
            get { return DefaultEditorKindImpl; }
            set { DefaultEditorKindImpl = (Kistl.App.GUI.ControlKindEfImpl)value; }
        }

        private int? _fk_DefaultEditorKind;

        private Guid? _fk_guid_DefaultEditorKind = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Presentable_has_DefaultKind", "DefaultKind")]
        public Kistl.App.GUI.ControlKindEfImpl DefaultEditorKindImpl
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return null;
                Kistl.App.GUI.ControlKindEfImpl __value;
                EntityReference<Kistl.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>(
                        "Model.FK_Presentable_has_DefaultKind",
                        "DefaultKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnDefaultEditorKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.ControlKind>(__value);
                    OnDefaultEditorKind_Getter(this, e);
                    __value = (Kistl.App.GUI.ControlKindEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>(
                        "Model.FK_Presentable_has_DefaultKind",
                        "DefaultKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.ControlKindEfImpl __oldValue = (Kistl.App.GUI.ControlKindEfImpl)r.Value;
                Kistl.App.GUI.ControlKindEfImpl __newValue = (Kistl.App.GUI.ControlKindEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("DefaultEditorKind", null, __oldValue, __newValue);

                if (OnDefaultEditorKind_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultEditorKind_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.ControlKindEfImpl)e.Result;
                }

                r.Value = (Kistl.App.GUI.ControlKindEfImpl)__newValue;

                if (OnDefaultEditorKind_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultEditorKind_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("DefaultEditorKind", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultEditorKind
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultEditorKind_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultEditorKind_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultEditorKind_PostSetter;

        /// <summary>
        /// The default ControlKind to use for displaying this Presentable readonly in a GridCell. Defaults to DefaultDisplayKind.
        /// </summary>
    /*
    Relation: FK_ViewModel_displayed_by_DefaultGridDisplayKind
    A: ZeroOrMore ViewModelDescriptor as ViewModel
    B: ZeroOrOne ControlKind as DefaultGridDisplayKind
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellDisplayKind
        // fkBackingName=_fk_DefaultGridCellDisplayKind; fkGuidBackingName=_fk_guid_DefaultGridCellDisplayKind;
        // referencedInterface=Kistl.App.GUI.ControlKind; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ControlKind DefaultGridCellDisplayKind
        {
            get { return DefaultGridCellDisplayKindImpl; }
            set { DefaultGridCellDisplayKindImpl = (Kistl.App.GUI.ControlKindEfImpl)value; }
        }

        private int? _fk_DefaultGridCellDisplayKind;

        private Guid? _fk_guid_DefaultGridCellDisplayKind = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ViewModel_displayed_by_DefaultGridDisplayKind", "DefaultGridDisplayKind")]
        public Kistl.App.GUI.ControlKindEfImpl DefaultGridCellDisplayKindImpl
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return null;
                Kistl.App.GUI.ControlKindEfImpl __value;
                EntityReference<Kistl.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewModel_displayed_by_DefaultGridDisplayKind",
                        "DefaultGridDisplayKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnDefaultGridCellDisplayKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.ControlKind>(__value);
                    OnDefaultGridCellDisplayKind_Getter(this, e);
                    __value = (Kistl.App.GUI.ControlKindEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewModel_displayed_by_DefaultGridDisplayKind",
                        "DefaultGridDisplayKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.ControlKindEfImpl __oldValue = (Kistl.App.GUI.ControlKindEfImpl)r.Value;
                Kistl.App.GUI.ControlKindEfImpl __newValue = (Kistl.App.GUI.ControlKindEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("DefaultGridCellDisplayKind", null, __oldValue, __newValue);

                if (OnDefaultGridCellDisplayKind_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellDisplayKind_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.ControlKindEfImpl)e.Result;
                }

                r.Value = (Kistl.App.GUI.ControlKindEfImpl)__newValue;

                if (OnDefaultGridCellDisplayKind_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellDisplayKind_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("DefaultGridCellDisplayKind", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellDisplayKind
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellDisplayKind_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellDisplayKind_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellDisplayKind_PostSetter;

        /// <summary>
        /// The default ControlKind for displaying this model in a GridCell in editing mode. Defaults to DefaultKind.
        /// </summary>
    /*
    Relation: FK_ViewModel_displayed_by_DefaultGridCellEditorKind
    A: ZeroOrMore ViewModelDescriptor as ViewModel
    B: ZeroOrOne ControlKind as DefaultGridCellEditorKind
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellEditorKind
        // fkBackingName=_fk_DefaultGridCellEditorKind; fkGuidBackingName=_fk_guid_DefaultGridCellEditorKind;
        // referencedInterface=Kistl.App.GUI.ControlKind; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ControlKind DefaultGridCellEditorKind
        {
            get { return DefaultGridCellEditorKindImpl; }
            set { DefaultGridCellEditorKindImpl = (Kistl.App.GUI.ControlKindEfImpl)value; }
        }

        private int? _fk_DefaultGridCellEditorKind;

        private Guid? _fk_guid_DefaultGridCellEditorKind = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ViewModel_displayed_by_DefaultGridCellEditorKind", "DefaultGridCellEditorKind")]
        public Kistl.App.GUI.ControlKindEfImpl DefaultGridCellEditorKindImpl
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return null;
                Kistl.App.GUI.ControlKindEfImpl __value;
                EntityReference<Kistl.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewModel_displayed_by_DefaultGridCellEditorKind",
                        "DefaultGridCellEditorKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnDefaultGridCellEditorKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.ControlKind>(__value);
                    OnDefaultGridCellEditorKind_Getter(this, e);
                    __value = (Kistl.App.GUI.ControlKindEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewModel_displayed_by_DefaultGridCellEditorKind",
                        "DefaultGridCellEditorKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.ControlKindEfImpl __oldValue = (Kistl.App.GUI.ControlKindEfImpl)r.Value;
                Kistl.App.GUI.ControlKindEfImpl __newValue = (Kistl.App.GUI.ControlKindEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("DefaultGridCellEditorKind", null, __oldValue, __newValue);

                if (OnDefaultGridCellEditorKind_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellEditorKind_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.ControlKindEfImpl)e.Result;
                }

                r.Value = (Kistl.App.GUI.ControlKindEfImpl)__newValue;

                if (OnDefaultGridCellEditorKind_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellEditorKind_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("DefaultGridCellEditorKind", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellEditorKind
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellEditorKind_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellEditorKind_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellEditorKind_PostSetter;

        /// <summary>
        /// .The default ControlKind for displaying this model in a GridCell befor editing starts. Defaults to DefaultGridCellDisplayKind.
        /// </summary>
    /*
    Relation: FK_ViewModelDescriptor_displayedInGridBy_DefaultGridCellKind
    A: ZeroOrMore ViewModelDescriptor as ViewModelDescriptor
    B: ZeroOrOne ControlKind as DefaultGridCellKind
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellPreEditorKind
        // fkBackingName=_fk_DefaultGridCellPreEditorKind; fkGuidBackingName=_fk_guid_DefaultGridCellPreEditorKind;
        // referencedInterface=Kistl.App.GUI.ControlKind; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ControlKind DefaultGridCellPreEditorKind
        {
            get { return DefaultGridCellPreEditorKindImpl; }
            set { DefaultGridCellPreEditorKindImpl = (Kistl.App.GUI.ControlKindEfImpl)value; }
        }

        private int? _fk_DefaultGridCellPreEditorKind;

        private Guid? _fk_guid_DefaultGridCellPreEditorKind = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ViewModelDescriptor_displayedInGridBy_DefaultGridCellKind", "DefaultGridCellKind")]
        public Kistl.App.GUI.ControlKindEfImpl DefaultGridCellPreEditorKindImpl
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return null;
                Kistl.App.GUI.ControlKindEfImpl __value;
                EntityReference<Kistl.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewModelDescriptor_displayedInGridBy_DefaultGridCellKind",
                        "DefaultGridCellKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnDefaultGridCellPreEditorKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.ControlKind>(__value);
                    OnDefaultGridCellPreEditorKind_Getter(this, e);
                    __value = (Kistl.App.GUI.ControlKindEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewModelDescriptor_displayedInGridBy_DefaultGridCellKind",
                        "DefaultGridCellKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.ControlKindEfImpl __oldValue = (Kistl.App.GUI.ControlKindEfImpl)r.Value;
                Kistl.App.GUI.ControlKindEfImpl __newValue = (Kistl.App.GUI.ControlKindEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("DefaultGridCellPreEditorKind", null, __oldValue, __newValue);

                if (OnDefaultGridCellPreEditorKind_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellPreEditorKind_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.ControlKindEfImpl)e.Result;
                }

                r.Value = (Kistl.App.GUI.ControlKindEfImpl)__newValue;

                if (OnDefaultGridCellPreEditorKind_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellPreEditorKind_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("DefaultGridCellPreEditorKind", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellPreEditorKind
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellPreEditorKind_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellPreEditorKind_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellPreEditorKind_PostSetter;

        /// <summary>
        /// describe this ViewModel
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Description
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Description;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, string> OnDescription_PostSetter;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("77ce1e5b-f244-4279-af13-b3e75b55f933"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'ViewModelDescriptor.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
            }
        }
        private Guid _ExportGuid;
        private bool _isExportGuidSet = false;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Guid> OnExportGuid_PostSetter;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_ViewModelDescriptor_has_Module
    A: ZeroOrMore ViewModelDescriptor as ViewModelDescriptor
    B: One Module as Module
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=_fk_Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Kistl.App.Base.Module; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Module Module
        {
            get { return ModuleImpl; }
            set { ModuleImpl = (Kistl.App.Base.ModuleEfImpl)value; }
        }

        private int? _fk_Module;

        private Guid? _fk_guid_Module = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ViewModelDescriptor_has_Module", "Module")]
        public Kistl.App.Base.ModuleEfImpl ModuleImpl
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return null;
                Kistl.App.Base.ModuleEfImpl __value;
                EntityReference<Kistl.App.Base.ModuleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.ModuleEfImpl>(
                        "Model.FK_ViewModelDescriptor_has_Module",
                        "Module");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Module>(__value);
                    OnModule_Getter(this, e);
                    __value = (Kistl.App.Base.ModuleEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.ModuleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.ModuleEfImpl>(
                        "Model.FK_ViewModelDescriptor_has_Module",
                        "Module");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.ModuleEfImpl __oldValue = (Kistl.App.Base.ModuleEfImpl)r.Value;
                Kistl.App.Base.ModuleEfImpl __newValue = (Kistl.App.Base.ModuleEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("Module", null, __oldValue, __newValue);

                if (OnModule_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.ModuleEfImpl)e.Result;
                }

                r.Value = (Kistl.App.Base.ModuleEfImpl)__newValue;

                if (OnModule_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("Module", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.Base.Module> OnModule_PostSetter;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_Presentable_displayedBy_SecondaryControlKinds
    A: ZeroOrMore ViewModelDescriptor as Presentable
    B: ZeroOrMore ControlKind as SecondaryControlKinds
    Preferred Storage: Separate
    */
        // collection reference property
        // Kistl.DalProvider.Ef.Generator.Templates.Properties.CollectionEntryListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.GUI.ControlKind> SecondaryControlKinds
        {
            get
            {
                if (_SecondaryControlKinds == null)
                {
                    _SecondaryControlKinds = new BSideCollectionWrapper<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind, Kistl.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryEfImpl, EntityCollection<Kistl.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryEfImpl>>(
                            this,
                            SecondaryControlKindsImpl);
                }
                return _SecondaryControlKinds;
            }
        }
        
        [EdmRelationshipNavigationProperty("Model", "FK_Presentable_displayedBy_SecondaryControlKinds_A", "CollectionEntry")]
        public EntityCollection<Kistl.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryEfImpl> SecondaryControlKindsImpl
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Kistl.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryEfImpl>(
                        "Model.FK_Presentable_displayedBy_SecondaryControlKinds_A",
                        "CollectionEntry");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                c.ForEach(i => i.AttachToContext(Context));
                return c;
            }
        }
        private BSideCollectionWrapper<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind, Kistl.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryEfImpl, EntityCollection<Kistl.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryEfImpl>> _SecondaryControlKinds;

        /// <summary>
        /// The described CLR class&amp;apos; reference
        /// </summary>
    /*
    Relation: FK_Descriptor_has_ViewModelRef
    A: ZeroOrMore ViewModelDescriptor as Descriptor
    B: One TypeRef as ViewModelRef
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ViewModelRef
        // fkBackingName=_fk_ViewModelRef; fkGuidBackingName=_fk_guid_ViewModelRef;
        // referencedInterface=Kistl.App.Base.TypeRef; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.TypeRef ViewModelRef
        {
            get { return ViewModelRefImpl; }
            set { ViewModelRefImpl = (Kistl.App.Base.TypeRefEfImpl)value; }
        }

        private int? _fk_ViewModelRef;

        private Guid? _fk_guid_ViewModelRef = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Descriptor_has_ViewModelRef", "ViewModelRef")]
        public Kistl.App.Base.TypeRefEfImpl ViewModelRefImpl
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return null;
                Kistl.App.Base.TypeRefEfImpl __value;
                EntityReference<Kistl.App.Base.TypeRefEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRefEfImpl>(
                        "Model.FK_Descriptor_has_ViewModelRef",
                        "ViewModelRef");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnViewModelRef_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.TypeRef>(__value);
                    OnViewModelRef_Getter(this, e);
                    __value = (Kistl.App.Base.TypeRefEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.TypeRefEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRefEfImpl>(
                        "Model.FK_Descriptor_has_ViewModelRef",
                        "ViewModelRef");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.TypeRefEfImpl __oldValue = (Kistl.App.Base.TypeRefEfImpl)r.Value;
                Kistl.App.Base.TypeRefEfImpl __newValue = (Kistl.App.Base.TypeRefEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("ViewModelRef", null, __oldValue, __newValue);

                if (OnViewModelRef_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.TypeRef>(__oldValue, __newValue);
                    OnViewModelRef_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.TypeRefEfImpl)e.Result;
                }

                r.Value = (Kistl.App.Base.TypeRefEfImpl)__newValue;

                if (OnViewModelRef_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.TypeRef>(__oldValue, __newValue);
                    OnViewModelRef_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("ViewModelRef", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ViewModelRef
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.Base.TypeRef> OnViewModelRef_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.Base.TypeRef> OnViewModelRef_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.Base.TypeRef> OnViewModelRef_PostSetter;

        public override Type GetImplementedInterface()
        {
            return typeof(ViewModelDescriptor);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ViewModelDescriptor)obj;
            var otherImpl = (ViewModelDescriptorEfImpl)obj;
            var me = (ViewModelDescriptor)this;

            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            this._fk_DefaultDisplayKind = otherImpl._fk_DefaultDisplayKind;
            this._fk_DefaultEditorKind = otherImpl._fk_DefaultEditorKind;
            this._fk_DefaultGridCellDisplayKind = otherImpl._fk_DefaultGridCellDisplayKind;
            this._fk_DefaultGridCellEditorKind = otherImpl._fk_DefaultGridCellEditorKind;
            this._fk_DefaultGridCellPreEditorKind = otherImpl._fk_DefaultGridCellPreEditorKind;
            this._fk_Module = otherImpl._fk_Module;
            this._fk_ViewModelRef = otherImpl._fk_ViewModelRef;
        }

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }

		public override void UpdateParent(string propertyName, int? id)
		{
			int? __oldValue, __newValue = id;
			
			switch(propertyName)
			{
                case "DefaultDisplayKind":
                    __oldValue = _fk_DefaultDisplayKind;
                    NotifyPropertyChanging("DefaultDisplayKind", __oldValue, __newValue);
                    _fk_DefaultDisplayKind = __newValue;
                    NotifyPropertyChanged("DefaultDisplayKind", __oldValue, __newValue);
                    break;
                case "DefaultEditorKind":
                    __oldValue = _fk_DefaultEditorKind;
                    NotifyPropertyChanging("DefaultEditorKind", __oldValue, __newValue);
                    _fk_DefaultEditorKind = __newValue;
                    NotifyPropertyChanged("DefaultEditorKind", __oldValue, __newValue);
                    break;
                case "DefaultGridCellDisplayKind":
                    __oldValue = _fk_DefaultGridCellDisplayKind;
                    NotifyPropertyChanging("DefaultGridCellDisplayKind", __oldValue, __newValue);
                    _fk_DefaultGridCellDisplayKind = __newValue;
                    NotifyPropertyChanged("DefaultGridCellDisplayKind", __oldValue, __newValue);
                    break;
                case "DefaultGridCellEditorKind":
                    __oldValue = _fk_DefaultGridCellEditorKind;
                    NotifyPropertyChanging("DefaultGridCellEditorKind", __oldValue, __newValue);
                    _fk_DefaultGridCellEditorKind = __newValue;
                    NotifyPropertyChanged("DefaultGridCellEditorKind", __oldValue, __newValue);
                    break;
                case "DefaultGridCellPreEditorKind":
                    __oldValue = _fk_DefaultGridCellPreEditorKind;
                    NotifyPropertyChanging("DefaultGridCellPreEditorKind", __oldValue, __newValue);
                    _fk_DefaultGridCellPreEditorKind = __newValue;
                    NotifyPropertyChanged("DefaultGridCellPreEditorKind", __oldValue, __newValue);
                    break;
                case "Module":
                    __oldValue = _fk_Module;
                    NotifyPropertyChanging("Module", __oldValue, __newValue);
                    _fk_Module = __newValue;
                    NotifyPropertyChanged("Module", __oldValue, __newValue);
                    break;
                case "ViewModelRef":
                    __oldValue = _fk_ViewModelRef;
                    NotifyPropertyChanging("ViewModelRef", __oldValue, __newValue);
                    _fk_ViewModelRef = __newValue;
                    NotifyPropertyChanged("ViewModelRef", __oldValue, __newValue);
                    break;
				default:
					base.UpdateParent(propertyName, id);
					break;
			}
		}

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_DefaultDisplayKind.HasValue)
                DefaultDisplayKindImpl = (Kistl.App.GUI.ControlKindEfImpl)Context.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_guid_DefaultDisplayKind.Value);
            else
            if (_fk_DefaultDisplayKind.HasValue)
                DefaultDisplayKindImpl = (Kistl.App.GUI.ControlKindEfImpl)Context.Find<Kistl.App.GUI.ControlKind>(_fk_DefaultDisplayKind.Value);
            else
                DefaultDisplayKindImpl = null;

            if (_fk_guid_DefaultEditorKind.HasValue)
                DefaultEditorKindImpl = (Kistl.App.GUI.ControlKindEfImpl)Context.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_guid_DefaultEditorKind.Value);
            else
            if (_fk_DefaultEditorKind.HasValue)
                DefaultEditorKindImpl = (Kistl.App.GUI.ControlKindEfImpl)Context.Find<Kistl.App.GUI.ControlKind>(_fk_DefaultEditorKind.Value);
            else
                DefaultEditorKindImpl = null;

            if (_fk_guid_DefaultGridCellDisplayKind.HasValue)
                DefaultGridCellDisplayKindImpl = (Kistl.App.GUI.ControlKindEfImpl)Context.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_guid_DefaultGridCellDisplayKind.Value);
            else
            if (_fk_DefaultGridCellDisplayKind.HasValue)
                DefaultGridCellDisplayKindImpl = (Kistl.App.GUI.ControlKindEfImpl)Context.Find<Kistl.App.GUI.ControlKind>(_fk_DefaultGridCellDisplayKind.Value);
            else
                DefaultGridCellDisplayKindImpl = null;

            if (_fk_guid_DefaultGridCellEditorKind.HasValue)
                DefaultGridCellEditorKindImpl = (Kistl.App.GUI.ControlKindEfImpl)Context.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_guid_DefaultGridCellEditorKind.Value);
            else
            if (_fk_DefaultGridCellEditorKind.HasValue)
                DefaultGridCellEditorKindImpl = (Kistl.App.GUI.ControlKindEfImpl)Context.Find<Kistl.App.GUI.ControlKind>(_fk_DefaultGridCellEditorKind.Value);
            else
                DefaultGridCellEditorKindImpl = null;

            if (_fk_guid_DefaultGridCellPreEditorKind.HasValue)
                DefaultGridCellPreEditorKindImpl = (Kistl.App.GUI.ControlKindEfImpl)Context.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_guid_DefaultGridCellPreEditorKind.Value);
            else
            if (_fk_DefaultGridCellPreEditorKind.HasValue)
                DefaultGridCellPreEditorKindImpl = (Kistl.App.GUI.ControlKindEfImpl)Context.Find<Kistl.App.GUI.ControlKind>(_fk_DefaultGridCellPreEditorKind.Value);
            else
                DefaultGridCellPreEditorKindImpl = null;

            if (_fk_guid_Module.HasValue)
                ModuleImpl = (Kistl.App.Base.ModuleEfImpl)Context.FindPersistenceObject<Kistl.App.Base.Module>(_fk_guid_Module.Value);
            else
            if (_fk_Module.HasValue)
                ModuleImpl = (Kistl.App.Base.ModuleEfImpl)Context.Find<Kistl.App.Base.Module>(_fk_Module.Value);
            else
                ModuleImpl = null;

            if (_fk_guid_ViewModelRef.HasValue)
                ViewModelRefImpl = (Kistl.App.Base.TypeRefEfImpl)Context.FindPersistenceObject<Kistl.App.Base.TypeRef>(_fk_guid_ViewModelRef.Value);
            else
            if (_fk_ViewModelRef.HasValue)
                ViewModelRefImpl = (Kistl.App.Base.TypeRefEfImpl)Context.Find<Kistl.App.Base.TypeRef>(_fk_ViewModelRef.Value);
            else
                ViewModelRefImpl = null;
        }
        #region Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptorEfImpl, Kistl.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("067ed744-cd2c-4c8b-9829-cf7d0b16df60"),
                        "DefaultDisplayKind",
                        null,
                        obj => obj.DefaultDisplayKind,
                        (obj, val) => obj.DefaultDisplayKind = val),
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptorEfImpl, Kistl.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("b535115c-b847-479d-bdea-a7994ae6eeca"),
                        "DefaultEditorKind",
                        null,
                        obj => obj.DefaultEditorKind,
                        (obj, val) => obj.DefaultEditorKind = val),
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptorEfImpl, Kistl.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("20fb1478-5e20-48e3-b418-c101397d15d1"),
                        "DefaultGridCellDisplayKind",
                        null,
                        obj => obj.DefaultGridCellDisplayKind,
                        (obj, val) => obj.DefaultGridCellDisplayKind = val),
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptorEfImpl, Kistl.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("7a093e89-a9ea-46ca-aeb6-cd3a1740714a"),
                        "DefaultGridCellEditorKind",
                        null,
                        obj => obj.DefaultGridCellEditorKind,
                        (obj, val) => obj.DefaultGridCellEditorKind = val),
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptorEfImpl, Kistl.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("6c744476-35e0-4cef-a221-f02abc81566c"),
                        "DefaultGridCellPreEditorKind",
                        null,
                        obj => obj.DefaultGridCellPreEditorKind,
                        (obj, val) => obj.DefaultGridCellPreEditorKind = val),
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptorEfImpl, string>(
                        lazyCtx,
                        new Guid("93e25648-50f9-40d8-8753-e5dadab68e1d"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val),
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptorEfImpl, Guid>(
                        lazyCtx,
                        new Guid("77ce1e5b-f244-4279-af13-b3e75b55f933"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val),
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptorEfImpl, Kistl.App.Base.Module>(
                        lazyCtx,
                        new Guid("0b7135d3-dedc-4091-a0c4-690c1b4a2b6d"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val),
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<ViewModelDescriptorEfImpl, ICollection<Kistl.App.GUI.ControlKind>>(
                        lazyCtx,
                        new Guid("5e2e007c-2e90-4ba6-9c9d-46e62b662ff9"),
                        "SecondaryControlKinds",
                        null,
                        obj => obj.SecondaryControlKinds,
                        null), // lists are read-only properties
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptorEfImpl, Kistl.App.Base.TypeRef>(
                        lazyCtx,
                        new Guid("554288d1-f5f4-4b22-908b-01525a1d0f9b"),
                        "ViewModelRef",
                        null,
                        obj => obj.ViewModelRef,
                        (obj, val) => obj.ViewModelRef = val),
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_ViewModelDescriptor")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_ViewModelDescriptor != null)
            {
                OnToString_ViewModelDescriptor(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<ViewModelDescriptor> OnToString_ViewModelDescriptor;

        [EventBasedMethod("OnPreSave_ViewModelDescriptor")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_ViewModelDescriptor != null) OnPreSave_ViewModelDescriptor(this);
        }
        public static event ObjectEventHandler<ViewModelDescriptor> OnPreSave_ViewModelDescriptor;

        [EventBasedMethod("OnPostSave_ViewModelDescriptor")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_ViewModelDescriptor != null) OnPostSave_ViewModelDescriptor(this);
        }
        public static event ObjectEventHandler<ViewModelDescriptor> OnPostSave_ViewModelDescriptor;

        [EventBasedMethod("OnCreated_ViewModelDescriptor")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_ViewModelDescriptor != null) OnCreated_ViewModelDescriptor(this);
        }
        public static event ObjectEventHandler<ViewModelDescriptor> OnCreated_ViewModelDescriptor;

        [EventBasedMethod("OnDeleting_ViewModelDescriptor")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_ViewModelDescriptor != null) OnDeleting_ViewModelDescriptor(this);
        }
        public static event ObjectEventHandler<ViewModelDescriptor> OnDeleting_ViewModelDescriptor;

        #endregion // Kistl.Generator.Templates.ObjectClasses.DefaultMethods
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return default(int);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>("Model.FK_ViewModel_displayed_by_DefaultDisplayKind", "DefaultDisplayKind").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>("Model.FK_Presentable_has_DefaultKind", "DefaultKind").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
			if (auxObjects != null) {
				auxObjects.Add(DefaultEditorKind);
			}
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>("Model.FK_ViewModel_displayed_by_DefaultGridDisplayKind", "DefaultGridDisplayKind").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>("Model.FK_ViewModel_displayed_by_DefaultGridCellEditorKind", "DefaultGridCellEditorKind").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>("Model.FK_ViewModelDescriptor_displayedInGridBy_DefaultGridCellKind", "DefaultGridCellKind").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
			if (auxObjects != null) {
				auxObjects.Add(DefaultGridCellPreEditorKind);
			}
            BinarySerializer.ToStream(this._Description, binStream);
            BinarySerializer.ToStream(this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.ToStream(this._ExportGuid, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.ModuleEfImpl>("Model.FK_ViewModelDescriptor_has_Module", "Module").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRefEfImpl>("Model.FK_Descriptor_has_ViewModelRef", "ViewModelRef").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
			if (auxObjects != null) {
				auxObjects.Add(ViewModelRef);
			}
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            BinarySerializer.FromStream(out this._fk_DefaultDisplayKind, binStream);
            BinarySerializer.FromStream(out this._fk_DefaultEditorKind, binStream);
            BinarySerializer.FromStream(out this._fk_DefaultGridCellDisplayKind, binStream);
            BinarySerializer.FromStream(out this._fk_DefaultGridCellEditorKind, binStream);
            BinarySerializer.FromStream(out this._fk_DefaultGridCellPreEditorKind, binStream);
            BinarySerializer.FromStream(out this._Description, binStream);
            BinarySerializer.FromStream(out this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.FromStream(out this._ExportGuid, binStream);
            }
            BinarySerializer.FromStream(out this._fk_Module, binStream);
            BinarySerializer.FromStream(out this._fk_ViewModelRef, binStream);
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>("Model.FK_ViewModel_displayed_by_DefaultDisplayKind", "DefaultDisplayKind").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "DefaultDisplayKind", "Kistl.App.GUI");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>("Model.FK_Presentable_has_DefaultKind", "DefaultKind").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "DefaultEditorKind", "Kistl.App.GUI");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>("Model.FK_ViewModel_displayed_by_DefaultGridDisplayKind", "DefaultGridDisplayKind").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "DefaultGridCellDisplayKind", "Kistl.App.GUI");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>("Model.FK_ViewModel_displayed_by_DefaultGridCellEditorKind", "DefaultGridCellEditorKind").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "DefaultGridCellEditorKind", "Kistl.App.GUI");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>("Model.FK_ViewModelDescriptor_displayedInGridBy_DefaultGridCellKind", "DefaultGridCellKind").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "DefaultGridCellPreEditorKind", "Kistl.App.GUI");
            }
            XmlStreamer.ToStream(this._Description, xml, "Description", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.GUI");
            if (this._isExportGuidSet) {
                XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "Kistl.App.GUI");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.ModuleEfImpl>("Model.FK_ViewModelDescriptor_has_Module", "Module").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "Module", "Kistl.App.GUI");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRefEfImpl>("Model.FK_Descriptor_has_ViewModelRef", "ViewModelRef").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "ViewModelRef", "Kistl.App.GUI");
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            XmlStreamer.FromStream(ref this._fk_DefaultDisplayKind, xml, "DefaultDisplayKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_DefaultEditorKind, xml, "DefaultEditorKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_DefaultGridCellDisplayKind, xml, "DefaultGridCellDisplayKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_DefaultGridCellEditorKind, xml, "DefaultGridCellEditorKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_DefaultGridCellPreEditorKind, xml, "DefaultGridCellPreEditorKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.GUI");
            if (this._isExportGuidSet) {
                XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "Kistl.App.GUI");
            }
            XmlStreamer.FromStream(ref this._fk_Module, xml, "Module", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_ViewModelRef, xml, "ViewModelRef", "Kistl.App.GUI");
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(DefaultDisplayKind != null ? DefaultDisplayKind.ExportGuid : (Guid?)null, xml, "DefaultDisplayKind", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(DefaultEditorKind != null ? DefaultEditorKind.ExportGuid : (Guid?)null, xml, "DefaultEditorKind", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(DefaultGridCellDisplayKind != null ? DefaultGridCellDisplayKind.ExportGuid : (Guid?)null, xml, "DefaultGridCellDisplayKind", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(DefaultGridCellEditorKind != null ? DefaultGridCellEditorKind.ExportGuid : (Guid?)null, xml, "DefaultGridCellEditorKind", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(DefaultGridCellPreEditorKind != null ? DefaultGridCellPreEditorKind.ExportGuid : (Guid?)null, xml, "DefaultGridCellPreEditorKind", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._Description, xml, "Description", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(Module != null ? Module.ExportGuid : (Guid?)null, xml, "Module", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(ViewModelRef != null ? ViewModelRef.ExportGuid : (Guid?)null, xml, "ViewModelRef", "Kistl.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._fk_guid_DefaultDisplayKind, xml, "DefaultDisplayKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_DefaultEditorKind, xml, "DefaultEditorKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_DefaultGridCellDisplayKind, xml, "DefaultGridCellDisplayKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_DefaultGridCellEditorKind, xml, "DefaultGridCellEditorKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_DefaultGridCellPreEditorKind, xml, "DefaultGridCellPreEditorKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "Kistl.App.GUI");
            // Import must have default value set
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "Kistl.App.GUI");
            this._isExportGuidSet = true;
            XmlStreamer.FromStream(ref this._fk_guid_Module, xml, "Module", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_ViewModelRef, xml, "ViewModelRef", "Kistl.App.GUI");
        }

        #endregion

    }
}