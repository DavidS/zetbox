// <autogenerated/>

namespace Kistl.App.GUI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;
    using Kistl.DalProvider.Base.RelationWrappers;

    using Kistl.API.Server;
    using Kistl.DalProvider.Ef;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// Navigation screen for searching objects
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="NavigationSearchScreen")]
    [System.Diagnostics.DebuggerDisplay("NavigationSearchScreen")]
    public class NavigationSearchScreenEfImpl : Kistl.App.GUI.NavigationScreenEfImpl, NavigationSearchScreen
    {
        private static readonly Guid _objectClassID = new Guid("cccc4b79-4e6d-449b-8866-c1827c4dcdc1");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public NavigationSearchScreenEfImpl()
            : base(null)
        {
        }

        public NavigationSearchScreenEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool? AllowAddNew
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _AllowAddNew;
                if (OnAllowAddNew_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnAllowAddNew_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_AllowAddNew != value)
                {
                    var __oldValue = _AllowAddNew;
                    var __newValue = value;
                    if (OnAllowAddNew_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowAddNew_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("AllowAddNew", __oldValue, __newValue);
                    _AllowAddNew = __newValue;
                    NotifyPropertyChanged("AllowAddNew", __oldValue, __newValue);

                    if (OnAllowAddNew_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowAddNew_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("AllowAddNew");
				}
            }
        }
        private bool? _AllowAddNew;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnAllowAddNew_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnAllowAddNew_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnAllowAddNew_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnAllowAddNew_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool? AllowDelete
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _AllowDelete;
                if (OnAllowDelete_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnAllowDelete_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_AllowDelete != value)
                {
                    var __oldValue = _AllowDelete;
                    var __newValue = value;
                    if (OnAllowDelete_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowDelete_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("AllowDelete", __oldValue, __newValue);
                    _AllowDelete = __newValue;
                    NotifyPropertyChanged("AllowDelete", __oldValue, __newValue);

                    if (OnAllowDelete_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowDelete_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("AllowDelete");
				}
            }
        }
        private bool? _AllowDelete;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnAllowDelete_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnAllowDelete_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnAllowDelete_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnAllowDelete_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool? AllowSelectColumns
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _AllowSelectColumns;
                if (OnAllowSelectColumns_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnAllowSelectColumns_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_AllowSelectColumns != value)
                {
                    var __oldValue = _AllowSelectColumns;
                    var __newValue = value;
                    if (OnAllowSelectColumns_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowSelectColumns_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("AllowSelectColumns", __oldValue, __newValue);
                    _AllowSelectColumns = __newValue;
                    NotifyPropertyChanged("AllowSelectColumns", __oldValue, __newValue);

                    if (OnAllowSelectColumns_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowSelectColumns_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("AllowSelectColumns");
				}
            }
        }
        private bool? _AllowSelectColumns;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnAllowSelectColumns_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnAllowSelectColumns_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnAllowSelectColumns_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnAllowSelectColumns_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool? AllowUserFilter
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _AllowUserFilter;
                if (OnAllowUserFilter_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnAllowUserFilter_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_AllowUserFilter != value)
                {
                    var __oldValue = _AllowUserFilter;
                    var __newValue = value;
                    if (OnAllowUserFilter_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowUserFilter_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("AllowUserFilter", __oldValue, __newValue);
                    _AllowUserFilter = __newValue;
                    NotifyPropertyChanged("AllowUserFilter", __oldValue, __newValue);

                    if (OnAllowUserFilter_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowUserFilter_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("AllowUserFilter");
				}
            }
        }
        private bool? _AllowUserFilter;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnAllowUserFilter_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnAllowUserFilter_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnAllowUserFilter_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnAllowUserFilter_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool? EnableAutoFilter
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _EnableAutoFilter;
                if (OnEnableAutoFilter_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnEnableAutoFilter_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_EnableAutoFilter != value)
                {
                    var __oldValue = _EnableAutoFilter;
                    var __newValue = value;
                    if (OnEnableAutoFilter_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnEnableAutoFilter_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("EnableAutoFilter", __oldValue, __newValue);
                    _EnableAutoFilter = __newValue;
                    NotifyPropertyChanged("EnableAutoFilter", __oldValue, __newValue);

                    if (OnEnableAutoFilter_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnEnableAutoFilter_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("EnableAutoFilter");
				}
            }
        }
        private bool? _EnableAutoFilter;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnEnableAutoFilter_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnEnableAutoFilter_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnEnableAutoFilter_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnEnableAutoFilter_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string InitialSort
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _InitialSort;
                if (OnInitialSort_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnInitialSort_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_InitialSort != value)
                {
                    var __oldValue = _InitialSort;
                    var __newValue = value;
                    if (OnInitialSort_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnInitialSort_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("InitialSort", __oldValue, __newValue);
                    _InitialSort = __newValue;
                    NotifyPropertyChanged("InitialSort", __oldValue, __newValue);

                    if (OnInitialSort_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnInitialSort_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("InitialSort");
				}
            }
        }
        private string _InitialSort;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, string> OnInitialSort_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, string> OnInitialSort_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, string> OnInitialSort_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnInitialSort_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
   		// Kistl.DalProvider.Ef.Generator.Templates.Properties.EnumerationPropertyTemplate
        // implement the user-visible interface
        public Kistl.App.GUI.ListSortDirection? InitialSortDirection
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Kistl.App.GUI.ListSortDirection?);
				var __value = _InitialSortDirection;
				if(OnInitialSortDirection_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.GUI.ListSortDirection?>(__value);
					OnInitialSortDirection_Getter(this, e);
					__value = e.Result;
				}
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (_InitialSortDirection != value)
                {
					var __oldValue = _InitialSortDirection;
					var __newValue = value;
                    if(OnInitialSortDirection_PreSetter != null)
                    {
						var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ListSortDirection?>(__oldValue, __newValue);
						OnInitialSortDirection_PreSetter(this, e);
						__newValue = e.Result;
                    }
					
                    NotifyPropertyChanging("InitialSortDirection", "InitialSortDirectionImpl", __oldValue, __newValue);
                    _InitialSortDirection = value;
                    NotifyPropertyChanged("InitialSortDirection", "InitialSortDirectionImpl", __oldValue, __newValue);
                    if(OnInitialSortDirection_PostSetter != null)
                    {
						var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ListSortDirection?>(__oldValue, __newValue);
						OnInitialSortDirection_PostSetter(this, e);
                    }
                    
                }
            }
        }
        
        /// <summary>backing store for InitialSortDirection</summary>
        private Kistl.App.GUI.ListSortDirection? _InitialSortDirection;
        
        /// <summary>EF sees only this property, for InitialSortDirection</summary>
        [XmlIgnore()]
        [EdmScalarProperty()]
        public int? InitialSortDirectionImpl
        {
            get
            {
                return (int?)this.InitialSortDirection;
            }
            set
            {
                this.InitialSortDirection = (Kistl.App.GUI.ListSortDirection?)value;
            }
        }
        
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, Kistl.App.GUI.ListSortDirection?> OnInitialSortDirection_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, Kistl.App.GUI.ListSortDirection?> OnInitialSortDirection_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, Kistl.App.GUI.ListSortDirection?> OnInitialSortDirection_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnInitialSortDirection_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool? IsEditable
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsEditable;
                if (OnIsEditable_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnIsEditable_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_IsEditable != value)
                {
                    var __oldValue = _IsEditable;
                    var __newValue = value;
                    if (OnIsEditable_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnIsEditable_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsEditable", __oldValue, __newValue);
                    _IsEditable = __newValue;
                    NotifyPropertyChanged("IsEditable", __oldValue, __newValue);

                    if (OnIsEditable_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnIsEditable_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("IsEditable");
				}
            }
        }
        private bool? _IsEditable;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnIsEditable_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnIsEditable_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnIsEditable_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnIsEditable_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool? IsMultiselect
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsMultiselect;
                if (OnIsMultiselect_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnIsMultiselect_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_IsMultiselect != value)
                {
                    var __oldValue = _IsMultiselect;
                    var __newValue = value;
                    if (OnIsMultiselect_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnIsMultiselect_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsMultiselect", __oldValue, __newValue);
                    _IsMultiselect = __newValue;
                    NotifyPropertyChanged("IsMultiselect", __oldValue, __newValue);

                    if (OnIsMultiselect_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnIsMultiselect_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("IsMultiselect");
				}
            }
        }
        private bool? _IsMultiselect;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnIsMultiselect_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnIsMultiselect_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnIsMultiselect_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnIsMultiselect_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_Search_has_RequestedEditorKind
    A: ZeroOrMore NavigationSearchScreen as Search
    B: ZeroOrOne ControlKind as RequestedEditorKind
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedEditorKind
        // fkBackingName=_fk_RequestedEditorKind; fkGuidBackingName=_fk_guid_RequestedEditorKind;
        // referencedInterface=Kistl.App.GUI.ControlKind; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ControlKind RequestedEditorKind
        {
            get { return RequestedEditorKindImpl; }
            set { RequestedEditorKindImpl = (Kistl.App.GUI.ControlKindEfImpl)value; }
        }

        private int? _fk_RequestedEditorKind;

        private Guid? _fk_guid_RequestedEditorKind = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Search_has_RequestedEditorKind", "RequestedEditorKind")]
        public Kistl.App.GUI.ControlKindEfImpl RequestedEditorKindImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.ControlKindEfImpl __value;
                EntityReference<Kistl.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>(
                        "Model.FK_Search_has_RequestedEditorKind",
                        "RequestedEditorKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnRequestedEditorKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.ControlKind>(__value);
                    OnRequestedEditorKind_Getter(this, e);
                    __value = (Kistl.App.GUI.ControlKindEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>(
                        "Model.FK_Search_has_RequestedEditorKind",
                        "RequestedEditorKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.ControlKindEfImpl __oldValue = (Kistl.App.GUI.ControlKindEfImpl)r.Value;
                Kistl.App.GUI.ControlKindEfImpl __newValue = (Kistl.App.GUI.ControlKindEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("RequestedEditorKind", null, __oldValue, __newValue);

                if (OnRequestedEditorKind_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedEditorKind_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.ControlKindEfImpl)e.Result;
                }

                r.Value = (Kistl.App.GUI.ControlKindEfImpl)__newValue;

                if (OnRequestedEditorKind_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedEditorKind_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("RequestedEditorKind", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedEditorKind
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, Kistl.App.GUI.ControlKind> OnRequestedEditorKind_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, Kistl.App.GUI.ControlKind> OnRequestedEditorKind_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, Kistl.App.GUI.ControlKind> OnRequestedEditorKind_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnRequestedEditorKind_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_Search_has_RequestedWorkspaceKind
    A: ZeroOrMore NavigationSearchScreen as Search
    B: ZeroOrOne ControlKind as RequestedWorkspaceKind
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedWorkspaceKind
        // fkBackingName=_fk_RequestedWorkspaceKind; fkGuidBackingName=_fk_guid_RequestedWorkspaceKind;
        // referencedInterface=Kistl.App.GUI.ControlKind; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ControlKind RequestedWorkspaceKind
        {
            get { return RequestedWorkspaceKindImpl; }
            set { RequestedWorkspaceKindImpl = (Kistl.App.GUI.ControlKindEfImpl)value; }
        }

        private int? _fk_RequestedWorkspaceKind;

        private Guid? _fk_guid_RequestedWorkspaceKind = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Search_has_RequestedWorkspaceKind", "RequestedWorkspaceKind")]
        public Kistl.App.GUI.ControlKindEfImpl RequestedWorkspaceKindImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.ControlKindEfImpl __value;
                EntityReference<Kistl.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>(
                        "Model.FK_Search_has_RequestedWorkspaceKind",
                        "RequestedWorkspaceKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnRequestedWorkspaceKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.ControlKind>(__value);
                    OnRequestedWorkspaceKind_Getter(this, e);
                    __value = (Kistl.App.GUI.ControlKindEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>(
                        "Model.FK_Search_has_RequestedWorkspaceKind",
                        "RequestedWorkspaceKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.ControlKindEfImpl __oldValue = (Kistl.App.GUI.ControlKindEfImpl)r.Value;
                Kistl.App.GUI.ControlKindEfImpl __newValue = (Kistl.App.GUI.ControlKindEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("RequestedWorkspaceKind", null, __oldValue, __newValue);

                if (OnRequestedWorkspaceKind_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedWorkspaceKind_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.ControlKindEfImpl)e.Result;
                }

                r.Value = (Kistl.App.GUI.ControlKindEfImpl)__newValue;

                if (OnRequestedWorkspaceKind_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedWorkspaceKind_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("RequestedWorkspaceKind", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedWorkspaceKind
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, Kistl.App.GUI.ControlKind> OnRequestedWorkspaceKind_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, Kistl.App.GUI.ControlKind> OnRequestedWorkspaceKind_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, Kistl.App.GUI.ControlKind> OnRequestedWorkspaceKind_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnRequestedWorkspaceKind_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool? RespectRequiredFilter
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _RespectRequiredFilter;
                if (OnRespectRequiredFilter_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnRespectRequiredFilter_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_RespectRequiredFilter != value)
                {
                    var __oldValue = _RespectRequiredFilter;
                    var __newValue = value;
                    if (OnRespectRequiredFilter_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnRespectRequiredFilter_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("RespectRequiredFilter", __oldValue, __newValue);
                    _RespectRequiredFilter = __newValue;
                    NotifyPropertyChanged("RespectRequiredFilter", __oldValue, __newValue);

                    if (OnRespectRequiredFilter_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnRespectRequiredFilter_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("RespectRequiredFilter");
				}
            }
        }
        private bool? _RespectRequiredFilter;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnRespectRequiredFilter_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnRespectRequiredFilter_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnRespectRequiredFilter_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnRespectRequiredFilter_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool? ShowFilter
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ShowFilter;
                if (OnShowFilter_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnShowFilter_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ShowFilter != value)
                {
                    var __oldValue = _ShowFilter;
                    var __newValue = value;
                    if (OnShowFilter_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnShowFilter_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowFilter", __oldValue, __newValue);
                    _ShowFilter = __newValue;
                    NotifyPropertyChanged("ShowFilter", __oldValue, __newValue);

                    if (OnShowFilter_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnShowFilter_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ShowFilter");
				}
            }
        }
        private bool? _ShowFilter;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnShowFilter_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnShowFilter_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnShowFilter_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnShowFilter_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool? ShowMasterDetail
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ShowMasterDetail;
                if (OnShowMasterDetail_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnShowMasterDetail_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ShowMasterDetail != value)
                {
                    var __oldValue = _ShowMasterDetail;
                    var __newValue = value;
                    if (OnShowMasterDetail_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnShowMasterDetail_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowMasterDetail", __oldValue, __newValue);
                    _ShowMasterDetail = __newValue;
                    NotifyPropertyChanged("ShowMasterDetail", __oldValue, __newValue);

                    if (OnShowMasterDetail_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnShowMasterDetail_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ShowMasterDetail");
				}
            }
        }
        private bool? _ShowMasterDetail;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnShowMasterDetail_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnShowMasterDetail_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnShowMasterDetail_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnShowMasterDetail_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool? ShowOpenCommand
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ShowOpenCommand;
                if (OnShowOpenCommand_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnShowOpenCommand_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ShowOpenCommand != value)
                {
                    var __oldValue = _ShowOpenCommand;
                    var __newValue = value;
                    if (OnShowOpenCommand_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnShowOpenCommand_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowOpenCommand", __oldValue, __newValue);
                    _ShowOpenCommand = __newValue;
                    NotifyPropertyChanged("ShowOpenCommand", __oldValue, __newValue);

                    if (OnShowOpenCommand_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnShowOpenCommand_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ShowOpenCommand");
				}
            }
        }
        private bool? _ShowOpenCommand;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnShowOpenCommand_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnShowOpenCommand_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnShowOpenCommand_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnShowOpenCommand_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool? ShowRefreshCommand
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ShowRefreshCommand;
                if (OnShowRefreshCommand_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnShowRefreshCommand_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ShowRefreshCommand != value)
                {
                    var __oldValue = _ShowRefreshCommand;
                    var __newValue = value;
                    if (OnShowRefreshCommand_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnShowRefreshCommand_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowRefreshCommand", __oldValue, __newValue);
                    _ShowRefreshCommand = __newValue;
                    NotifyPropertyChanged("ShowRefreshCommand", __oldValue, __newValue);

                    if (OnShowRefreshCommand_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnShowRefreshCommand_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ShowRefreshCommand");
				}
            }
        }
        private bool? _ShowRefreshCommand;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnShowRefreshCommand_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnShowRefreshCommand_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, bool?> OnShowRefreshCommand_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnShowRefreshCommand_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_SearchScreen_of_Type
    A: ZeroOrMore NavigationSearchScreen as SearchScreen
    B: ZeroOrOne ObjectClass as Type
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Type
        // fkBackingName=_fk_Type; fkGuidBackingName=_fk_guid_Type;
        // referencedInterface=Kistl.App.Base.ObjectClass; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.ObjectClass Type
        {
            get { return TypeImpl; }
            set { TypeImpl = (Kistl.App.Base.ObjectClassEfImpl)value; }
        }

        private int? _fk_Type;

        private Guid? _fk_guid_Type = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_SearchScreen_of_Type", "Type")]
        public Kistl.App.Base.ObjectClassEfImpl TypeImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.ObjectClassEfImpl __value;
                EntityReference<Kistl.App.Base.ObjectClassEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.ObjectClassEfImpl>(
                        "Model.FK_SearchScreen_of_Type",
                        "Type");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnType_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.ObjectClass>(__value);
                    OnType_Getter(this, e);
                    __value = (Kistl.App.Base.ObjectClassEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.ObjectClassEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.ObjectClassEfImpl>(
                        "Model.FK_SearchScreen_of_Type",
                        "Type");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.ObjectClassEfImpl __oldValue = (Kistl.App.Base.ObjectClassEfImpl)r.Value;
                Kistl.App.Base.ObjectClassEfImpl __newValue = (Kistl.App.Base.ObjectClassEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("Type", null, __oldValue, __newValue);

                if (OnType_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.ObjectClass>(__oldValue, __newValue);
                    OnType_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.ObjectClassEfImpl)e.Result;
                }

                r.Value = (Kistl.App.Base.ObjectClassEfImpl)__newValue;

                if (OnType_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.ObjectClass>(__oldValue, __newValue);
                    OnType_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("Type", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Type
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, Kistl.App.Base.ObjectClass> OnType_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, Kistl.App.Base.ObjectClass> OnType_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, Kistl.App.Base.ObjectClass> OnType_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnType_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
   		// Kistl.DalProvider.Ef.Generator.Templates.Properties.EnumerationPropertyTemplate
        // implement the user-visible interface
        public Kistl.App.GUI.InstanceListViewMethod? ViewMethod
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Kistl.App.GUI.InstanceListViewMethod?);
				var __value = _ViewMethod;
				if(OnViewMethod_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.GUI.InstanceListViewMethod?>(__value);
					OnViewMethod_Getter(this, e);
					__value = e.Result;
				}
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (_ViewMethod != value)
                {
					var __oldValue = _ViewMethod;
					var __newValue = value;
                    if(OnViewMethod_PreSetter != null)
                    {
						var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.InstanceListViewMethod?>(__oldValue, __newValue);
						OnViewMethod_PreSetter(this, e);
						__newValue = e.Result;
                    }
					
                    NotifyPropertyChanging("ViewMethod", "ViewMethodImpl", __oldValue, __newValue);
                    _ViewMethod = value;
                    NotifyPropertyChanged("ViewMethod", "ViewMethodImpl", __oldValue, __newValue);
                    if(OnViewMethod_PostSetter != null)
                    {
						var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.InstanceListViewMethod?>(__oldValue, __newValue);
						OnViewMethod_PostSetter(this, e);
                    }
                    
                }
            }
        }
        
        /// <summary>backing store for ViewMethod</summary>
        private Kistl.App.GUI.InstanceListViewMethod? _ViewMethod;
        
        /// <summary>EF sees only this property, for ViewMethod</summary>
        [XmlIgnore()]
        [EdmScalarProperty()]
        public int? ViewMethodImpl
        {
            get
            {
                return (int?)this.ViewMethod;
            }
            set
            {
                this.ViewMethod = (Kistl.App.GUI.InstanceListViewMethod?)value;
            }
        }
        
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationSearchScreen, Kistl.App.GUI.InstanceListViewMethod?> OnViewMethod_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationSearchScreen, Kistl.App.GUI.InstanceListViewMethod?> OnViewMethod_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationSearchScreen, Kistl.App.GUI.InstanceListViewMethod?> OnViewMethod_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.GUI.NavigationSearchScreen> OnViewMethod_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDefaultViewModel_NavigationSearchScreen")]
        public override System.Object GetDefaultViewModel(Kistl.API.IKistlContext dataCtx, System.Object parent)
        {
            var e = new MethodReturnEventArgs<System.Object>();
            if (OnGetDefaultViewModel_NavigationSearchScreen != null)
            {
                OnGetDefaultViewModel_NavigationSearchScreen(this, e, dataCtx, parent);
            }
            else
            {
                e.Result = base.GetDefaultViewModel(dataCtx, parent);
            }
            return e.Result;
        }
        public static event GetDefaultViewModel_Handler<NavigationSearchScreen> OnGetDefaultViewModel_NavigationSearchScreen;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<NavigationSearchScreen> OnGetDefaultViewModel_NavigationSearchScreen_CanExec;

        [EventBasedMethod("OnGetDefaultViewModel_NavigationSearchScreen_CanExec")]
        public override bool GetDefaultViewModelCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetDefaultViewModel_NavigationSearchScreen_CanExec != null)
				{
					OnGetDefaultViewModel_NavigationSearchScreen_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetDefaultViewModelCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<NavigationSearchScreen> OnGetDefaultViewModel_NavigationSearchScreen_CanExecReason;

        [EventBasedMethod("OnGetDefaultViewModel_NavigationSearchScreen_CanExecReason")]
        public override string GetDefaultViewModelCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetDefaultViewModel_NavigationSearchScreen_CanExecReason != null)
				{
					OnGetDefaultViewModel_NavigationSearchScreen_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetDefaultViewModelCanExecReason;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(NavigationSearchScreen);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (NavigationSearchScreen)obj;
            var otherImpl = (NavigationSearchScreenEfImpl)obj;
            var me = (NavigationSearchScreen)this;

            me.AllowAddNew = other.AllowAddNew;
            me.AllowDelete = other.AllowDelete;
            me.AllowSelectColumns = other.AllowSelectColumns;
            me.AllowUserFilter = other.AllowUserFilter;
            me.EnableAutoFilter = other.EnableAutoFilter;
            me.InitialSort = other.InitialSort;
            me.InitialSortDirection = other.InitialSortDirection;
            me.IsEditable = other.IsEditable;
            me.IsMultiselect = other.IsMultiselect;
            me.RespectRequiredFilter = other.RespectRequiredFilter;
            me.ShowFilter = other.ShowFilter;
            me.ShowMasterDetail = other.ShowMasterDetail;
            me.ShowOpenCommand = other.ShowOpenCommand;
            me.ShowRefreshCommand = other.ShowRefreshCommand;
            me.ViewMethod = other.ViewMethod;
            this._fk_RequestedEditorKind = otherImpl._fk_RequestedEditorKind;
            this._fk_RequestedWorkspaceKind = otherImpl._fk_RequestedWorkspaceKind;
            this._fk_Type = otherImpl._fk_Type;
        }

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_RequestedEditorKind.HasValue)
                RequestedEditorKindImpl = (Kistl.App.GUI.ControlKindEfImpl)Context.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_guid_RequestedEditorKind.Value);
            else
            if (_fk_RequestedEditorKind.HasValue)
                RequestedEditorKindImpl = (Kistl.App.GUI.ControlKindEfImpl)Context.Find<Kistl.App.GUI.ControlKind>(_fk_RequestedEditorKind.Value);
            else
                RequestedEditorKindImpl = null;

            if (_fk_guid_RequestedWorkspaceKind.HasValue)
                RequestedWorkspaceKindImpl = (Kistl.App.GUI.ControlKindEfImpl)Context.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_guid_RequestedWorkspaceKind.Value);
            else
            if (_fk_RequestedWorkspaceKind.HasValue)
                RequestedWorkspaceKindImpl = (Kistl.App.GUI.ControlKindEfImpl)Context.Find<Kistl.App.GUI.ControlKind>(_fk_RequestedWorkspaceKind.Value);
            else
                RequestedWorkspaceKindImpl = null;

            if (_fk_guid_Type.HasValue)
                TypeImpl = (Kistl.App.Base.ObjectClassEfImpl)Context.FindPersistenceObject<Kistl.App.Base.ObjectClass>(_fk_guid_Type.Value);
            else
            if (_fk_Type.HasValue)
                TypeImpl = (Kistl.App.Base.ObjectClassEfImpl)Context.Find<Kistl.App.Base.ObjectClass>(_fk_Type.Value);
            else
                TypeImpl = null;
        }
        #region Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("e21de4ba-0ee2-446c-9758-3ca35c2f1845"),
                        "AllowAddNew",
                        null,
                        obj => obj.AllowAddNew,
                        (obj, val) => obj.AllowAddNew = val,
						obj => OnAllowAddNew_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("965b1750-5b17-458f-8824-b42df92d4635"),
                        "AllowDelete",
                        null,
                        obj => obj.AllowDelete,
                        (obj, val) => obj.AllowDelete = val,
						obj => OnAllowDelete_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("372dd9f8-3a34-473d-9c1b-b0712623abe0"),
                        "AllowSelectColumns",
                        null,
                        obj => obj.AllowSelectColumns,
                        (obj, val) => obj.AllowSelectColumns = val,
						obj => OnAllowSelectColumns_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("54ddf503-c60a-4cc8-a8cc-80ab682dfc02"),
                        "AllowUserFilter",
                        null,
                        obj => obj.AllowUserFilter,
                        (obj, val) => obj.AllowUserFilter = val,
						obj => OnAllowUserFilter_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("720bda5a-7bfd-4594-8571-a6ebeea074e7"),
                        "EnableAutoFilter",
                        null,
                        obj => obj.EnableAutoFilter,
                        (obj, val) => obj.EnableAutoFilter = val,
						obj => OnEnableAutoFilter_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, string>(
                        lazyCtx,
                        new Guid("632994f1-9e97-4045-b2e8-92aa12ac80be"),
                        "InitialSort",
                        null,
                        obj => obj.InitialSort,
                        (obj, val) => obj.InitialSort = val,
						obj => OnInitialSort_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, Kistl.App.GUI.ListSortDirection?>(
                        lazyCtx,
                        new Guid("b43b05fe-e036-44b1-a8a6-43f4826df116"),
                        "InitialSortDirection",
                        null,
                        obj => obj.InitialSortDirection,
                        (obj, val) => obj.InitialSortDirection = val,
						obj => OnInitialSortDirection_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("0e71d44f-2373-4cfe-b902-c49373761cbe"),
                        "IsEditable",
                        null,
                        obj => obj.IsEditable,
                        (obj, val) => obj.IsEditable = val,
						obj => OnIsEditable_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("6e27c254-f0b6-45df-97b3-053636864df8"),
                        "IsMultiselect",
                        null,
                        obj => obj.IsMultiselect,
                        (obj, val) => obj.IsMultiselect = val,
						obj => OnIsMultiselect_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, Kistl.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("80987e44-841a-4d56-88d2-92c28efb70a1"),
                        "RequestedEditorKind",
                        null,
                        obj => obj.RequestedEditorKind,
                        (obj, val) => obj.RequestedEditorKind = val,
						obj => OnRequestedEditorKind_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, Kistl.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("e0a94b30-5225-45e6-9dfc-c88dbf0648f5"),
                        "RequestedWorkspaceKind",
                        null,
                        obj => obj.RequestedWorkspaceKind,
                        (obj, val) => obj.RequestedWorkspaceKind = val,
						obj => OnRequestedWorkspaceKind_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("9323c1cf-f8d6-4b29-b854-41ceb509b57e"),
                        "RespectRequiredFilter",
                        null,
                        obj => obj.RespectRequiredFilter,
                        (obj, val) => obj.RespectRequiredFilter = val,
						obj => OnRespectRequiredFilter_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("055fd120-c058-436b-9f9e-e6a2a0fec2e5"),
                        "ShowFilter",
                        null,
                        obj => obj.ShowFilter,
                        (obj, val) => obj.ShowFilter = val,
						obj => OnShowFilter_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("c7978c7d-92cc-46a4-a8e8-bd9c24597dda"),
                        "ShowMasterDetail",
                        null,
                        obj => obj.ShowMasterDetail,
                        (obj, val) => obj.ShowMasterDetail = val,
						obj => OnShowMasterDetail_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("84a66c05-9f95-475e-aa9d-a341a0de0ba6"),
                        "ShowOpenCommand",
                        null,
                        obj => obj.ShowOpenCommand,
                        (obj, val) => obj.ShowOpenCommand = val,
						obj => OnShowOpenCommand_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("13e637ea-d461-46da-a153-ae8af5b0b724"),
                        "ShowRefreshCommand",
                        null,
                        obj => obj.ShowRefreshCommand,
                        (obj, val) => obj.ShowRefreshCommand = val,
						obj => OnShowRefreshCommand_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, Kistl.App.Base.ObjectClass>(
                        lazyCtx,
                        new Guid("0bbea63f-f609-4fc2-848e-7464bef87fb4"),
                        "Type",
                        null,
                        obj => obj.Type,
                        (obj, val) => obj.Type = val,
						obj => OnType_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<NavigationSearchScreen, Kistl.App.GUI.InstanceListViewMethod?>(
                        lazyCtx,
                        new Guid("3b671e20-eb7e-4f24-b183-19bdf2666651"),
                        "ViewMethod",
                        null,
                        obj => obj.ViewMethod,
                        (obj, val) => obj.ViewMethod = val,
						obj => OnViewMethod_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_NavigationSearchScreen")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_NavigationSearchScreen != null)
            {
                OnToString_NavigationSearchScreen(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<NavigationSearchScreen> OnToString_NavigationSearchScreen;

		[System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_NavigationSearchScreen")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
			var b = base.ObjectIsValid();
            e.IsValid = b.IsValid;
			e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_NavigationSearchScreen != null)
            {
                OnObjectIsValid_NavigationSearchScreen(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<NavigationSearchScreen> OnObjectIsValid_NavigationSearchScreen;

        [EventBasedMethod("OnNotifyPreSave_NavigationSearchScreen")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_NavigationSearchScreen != null) OnNotifyPreSave_NavigationSearchScreen(this);
        }
        public static event ObjectEventHandler<NavigationSearchScreen> OnNotifyPreSave_NavigationSearchScreen;

        [EventBasedMethod("OnNotifyPostSave_NavigationSearchScreen")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_NavigationSearchScreen != null) OnNotifyPostSave_NavigationSearchScreen(this);
        }
        public static event ObjectEventHandler<NavigationSearchScreen> OnNotifyPostSave_NavigationSearchScreen;

        [EventBasedMethod("OnNotifyCreated_NavigationSearchScreen")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("AllowAddNew");
            SetNotInitializedProperty("AllowDelete");
            SetNotInitializedProperty("AllowSelectColumns");
            SetNotInitializedProperty("AllowUserFilter");
            SetNotInitializedProperty("EnableAutoFilter");
            SetNotInitializedProperty("InitialSort");
            SetNotInitializedProperty("InitialSortDirection");
            SetNotInitializedProperty("IsEditable");
            SetNotInitializedProperty("IsMultiselect");
            SetNotInitializedProperty("RequestedEditorKind");
            SetNotInitializedProperty("RequestedWorkspaceKind");
            SetNotInitializedProperty("RespectRequiredFilter");
            SetNotInitializedProperty("ShowFilter");
            SetNotInitializedProperty("ShowMasterDetail");
            SetNotInitializedProperty("ShowOpenCommand");
            SetNotInitializedProperty("ShowRefreshCommand");
            SetNotInitializedProperty("Type");
            SetNotInitializedProperty("ViewMethod");
            base.NotifyCreated();
            if (OnNotifyCreated_NavigationSearchScreen != null) OnNotifyCreated_NavigationSearchScreen(this);
        }
        public static event ObjectEventHandler<NavigationSearchScreen> OnNotifyCreated_NavigationSearchScreen;

        [EventBasedMethod("OnNotifyDeleting_NavigationSearchScreen")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_NavigationSearchScreen != null) OnNotifyDeleting_NavigationSearchScreen(this);
        }
        public static event ObjectEventHandler<NavigationSearchScreen> OnNotifyDeleting_NavigationSearchScreen;

        #endregion // Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this._AllowAddNew, binStream);
            BinarySerializer.ToStream(this._AllowDelete, binStream);
            BinarySerializer.ToStream(this._AllowSelectColumns, binStream);
            BinarySerializer.ToStream(this._AllowUserFilter, binStream);
            BinarySerializer.ToStream(this._EnableAutoFilter, binStream);
            BinarySerializer.ToStream(this._InitialSort, binStream);
            BinarySerializer.ToStream((int?)((Kistl.App.GUI.NavigationSearchScreen)this).InitialSortDirection, binStream);
            BinarySerializer.ToStream(this._IsEditable, binStream);
            BinarySerializer.ToStream(this._IsMultiselect, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>("Model.FK_Search_has_RequestedEditorKind", "RequestedEditorKind").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>("Model.FK_Search_has_RequestedWorkspaceKind", "RequestedWorkspaceKind").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._RespectRequiredFilter, binStream);
            BinarySerializer.ToStream(this._ShowFilter, binStream);
            BinarySerializer.ToStream(this._ShowMasterDetail, binStream);
            BinarySerializer.ToStream(this._ShowOpenCommand, binStream);
            BinarySerializer.ToStream(this._ShowRefreshCommand, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.ObjectClassEfImpl>("Model.FK_SearchScreen_of_Type", "Type").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream((int?)((Kistl.App.GUI.NavigationSearchScreen)this).ViewMethod, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._AllowAddNew, binStream);
            BinarySerializer.FromStream(out this._AllowDelete, binStream);
            BinarySerializer.FromStream(out this._AllowSelectColumns, binStream);
            BinarySerializer.FromStream(out this._AllowUserFilter, binStream);
            BinarySerializer.FromStream(out this._EnableAutoFilter, binStream);
            BinarySerializer.FromStream(out this._InitialSort, binStream);
            {
                int? baseValue;
                BinarySerializer.FromStream(out baseValue, binStream);
                ((Kistl.App.GUI.NavigationSearchScreen)this).InitialSortDirection = (Kistl.App.GUI.ListSortDirection?)baseValue;
            }
            BinarySerializer.FromStream(out this._IsEditable, binStream);
            BinarySerializer.FromStream(out this._IsMultiselect, binStream);
            BinarySerializer.FromStream(out this._fk_RequestedEditorKind, binStream);
            BinarySerializer.FromStream(out this._fk_RequestedWorkspaceKind, binStream);
            BinarySerializer.FromStream(out this._RespectRequiredFilter, binStream);
            BinarySerializer.FromStream(out this._ShowFilter, binStream);
            BinarySerializer.FromStream(out this._ShowMasterDetail, binStream);
            BinarySerializer.FromStream(out this._ShowOpenCommand, binStream);
            BinarySerializer.FromStream(out this._ShowRefreshCommand, binStream);
            BinarySerializer.FromStream(out this._fk_Type, binStream);
            {
                int? baseValue;
                BinarySerializer.FromStream(out baseValue, binStream);
                ((Kistl.App.GUI.NavigationSearchScreen)this).ViewMethod = (Kistl.App.GUI.InstanceListViewMethod?)baseValue;
            }
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this._AllowAddNew, xml, "AllowAddNew", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._AllowDelete, xml, "AllowDelete", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._AllowSelectColumns, xml, "AllowSelectColumns", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._AllowUserFilter, xml, "AllowUserFilter", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._EnableAutoFilter, xml, "EnableAutoFilter", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._InitialSort, xml, "InitialSort", "Kistl.App.GUI");
            XmlStreamer.ToStream((int?)((Kistl.App.GUI.NavigationSearchScreen)this).InitialSortDirection, xml, "InitialSortDirection", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._IsEditable, xml, "IsEditable", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._IsMultiselect, xml, "IsMultiselect", "Kistl.App.GUI");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>("Model.FK_Search_has_RequestedEditorKind", "RequestedEditorKind").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "RequestedEditorKind", "Kistl.App.GUI");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>("Model.FK_Search_has_RequestedWorkspaceKind", "RequestedWorkspaceKind").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "RequestedWorkspaceKind", "Kistl.App.GUI");
            }
            XmlStreamer.ToStream(this._RespectRequiredFilter, xml, "RespectRequiredFilter", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._ShowFilter, xml, "ShowFilter", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._ShowMasterDetail, xml, "ShowMasterDetail", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._ShowOpenCommand, xml, "ShowOpenCommand", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._ShowRefreshCommand, xml, "ShowRefreshCommand", "Kistl.App.GUI");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.ObjectClassEfImpl>("Model.FK_SearchScreen_of_Type", "Type").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "Type", "Kistl.App.GUI");
            }
            XmlStreamer.ToStream((int?)((Kistl.App.GUI.NavigationSearchScreen)this).ViewMethod, xml, "ViewMethod", "Kistl.App.GUI");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._AllowAddNew, xml, "AllowAddNew", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._AllowDelete, xml, "AllowDelete", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._AllowSelectColumns, xml, "AllowSelectColumns", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._AllowUserFilter, xml, "AllowUserFilter", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._EnableAutoFilter, xml, "EnableAutoFilter", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._InitialSort, xml, "InitialSort", "Kistl.App.GUI");
            XmlStreamer.FromStreamConverter(v => ((Kistl.App.GUI.NavigationSearchScreen)this).InitialSortDirection = (Kistl.App.GUI.ListSortDirection?)v, xml, "InitialSortDirection", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._IsEditable, xml, "IsEditable", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._IsMultiselect, xml, "IsMultiselect", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_RequestedEditorKind, xml, "RequestedEditorKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_RequestedWorkspaceKind, xml, "RequestedWorkspaceKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._RespectRequiredFilter, xml, "RespectRequiredFilter", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowFilter, xml, "ShowFilter", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowMasterDetail, xml, "ShowMasterDetail", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowOpenCommand, xml, "ShowOpenCommand", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowRefreshCommand, xml, "ShowRefreshCommand", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_Type, xml, "Type", "Kistl.App.GUI");
            XmlStreamer.FromStreamConverter(v => ((Kistl.App.GUI.NavigationSearchScreen)this).ViewMethod = (Kistl.App.GUI.InstanceListViewMethod?)v, xml, "ViewMethod", "Kistl.App.GUI");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            base.Export(xml, modules);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._AllowAddNew, xml, "AllowAddNew", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._AllowDelete, xml, "AllowDelete", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._AllowSelectColumns, xml, "AllowSelectColumns", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._AllowUserFilter, xml, "AllowUserFilter", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._EnableAutoFilter, xml, "EnableAutoFilter", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._InitialSort, xml, "InitialSort", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream((int?)((Kistl.App.GUI.NavigationSearchScreen)this).InitialSortDirection, xml, "InitialSortDirection", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._IsEditable, xml, "IsEditable", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._IsMultiselect, xml, "IsMultiselect", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(RequestedEditorKind != null ? RequestedEditorKind.ExportGuid : (Guid?)null, xml, "RequestedEditorKind", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(RequestedWorkspaceKind != null ? RequestedWorkspaceKind.ExportGuid : (Guid?)null, xml, "RequestedWorkspaceKind", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._RespectRequiredFilter, xml, "RespectRequiredFilter", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._ShowFilter, xml, "ShowFilter", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._ShowMasterDetail, xml, "ShowMasterDetail", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._ShowOpenCommand, xml, "ShowOpenCommand", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._ShowRefreshCommand, xml, "ShowRefreshCommand", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(Type != null ? Type.ExportGuid : (Guid?)null, xml, "Type", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream((int?)((Kistl.App.GUI.NavigationSearchScreen)this).ViewMethod, xml, "ViewMethod", "Kistl.App.GUI");
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            base.MergeImport(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.FromStream(ref this._AllowAddNew, xml, "AllowAddNew", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._AllowDelete, xml, "AllowDelete", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._AllowSelectColumns, xml, "AllowSelectColumns", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._AllowUserFilter, xml, "AllowUserFilter", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._EnableAutoFilter, xml, "EnableAutoFilter", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._InitialSort, xml, "InitialSort", "Kistl.App.GUI");
            XmlStreamer.FromStreamConverter(v => ((Kistl.App.GUI.NavigationSearchScreen)this).InitialSortDirection = (Kistl.App.GUI.ListSortDirection?)v, xml, "InitialSortDirection", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._IsEditable, xml, "IsEditable", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._IsMultiselect, xml, "IsMultiselect", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_RequestedEditorKind, xml, "RequestedEditorKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_RequestedWorkspaceKind, xml, "RequestedWorkspaceKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._RespectRequiredFilter, xml, "RespectRequiredFilter", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowFilter, xml, "ShowFilter", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowMasterDetail, xml, "ShowMasterDetail", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowOpenCommand, xml, "ShowOpenCommand", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowRefreshCommand, xml, "ShowRefreshCommand", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_Type, xml, "Type", "Kistl.App.GUI");
            XmlStreamer.FromStreamConverter(v => ((Kistl.App.GUI.NavigationSearchScreen)this).ViewMethod = (Kistl.App.GUI.InstanceListViewMethod?)v, xml, "ViewMethod", "Kistl.App.GUI");
        }

        #endregion

    }
}