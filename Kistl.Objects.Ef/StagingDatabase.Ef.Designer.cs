// <autogenerated/>

namespace ZBox.App.SchemaMigration
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;
    using Kistl.DalProvider.Base.RelationWrappers;

    using Kistl.API.Server;
    using Kistl.DalProvider.Ef;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="StagingDatabase")]
    [System.Diagnostics.DebuggerDisplay("StagingDatabase")]
    public class StagingDatabaseEfImpl : BaseServerDataObject_EntityFramework, Kistl.API.IExportableInternal, StagingDatabase
    {
        [Obsolete]
        public StagingDatabaseEfImpl()
            : base(null)
        {
        }

        public StagingDatabaseEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// Identity which changed this object
        /// </summary>
    /*
    Relation: FK_StagingDatabase_was_ChangedBy
    A: ZeroOrMore StagingDatabase as StagingDatabase
    B: ZeroOrOne Identity as ChangedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=ZBox.App.SchemaMigration;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Kistl.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_ChangedBy;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_StagingDatabase_was_ChangedBy", "ChangedBy")]
        public Kistl.App.Base.IdentityEfImpl ChangedByImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.IdentityEfImpl __value;
                EntityReference<Kistl.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>(
                        "Model.FK_StagingDatabase_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>(
                        "Model.FK_StagingDatabase_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.IdentityEfImpl __oldValue = (Kistl.App.Base.IdentityEfImpl)r.Value;
                Kistl.App.Base.IdentityEfImpl __newValue = (Kistl.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("ChangedBy", null, __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityEfImpl)e.Result;
                }

                r.Value = (Kistl.App.Base.IdentityEfImpl)__newValue;

                if (OnChangedBy_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("ChangedBy", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Kistl.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Kistl.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Kistl.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime ChangedOn
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(DateTime);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("16652536-fb87-4b1b-866e-ec2fb68a8ae2"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'StagingDatabase.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ChangedOn");
				}
            }
        }
        private DateTime _ChangedOn;
        private bool _isChangedOnSet = false;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnChangedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string ConnectionStringKey
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ConnectionStringKey;
                if (OnConnectionStringKey_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnConnectionStringKey_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ConnectionStringKey != value)
                {
                    var __oldValue = _ConnectionStringKey;
                    var __newValue = value;
                    if (OnConnectionStringKey_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnConnectionStringKey_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ConnectionStringKey", __oldValue, __newValue);
                    _ConnectionStringKey = __newValue;
                    NotifyPropertyChanged("ConnectionStringKey", __oldValue, __newValue);

                    if (OnConnectionStringKey_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnConnectionStringKey_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ConnectionStringKey");
				}
            }
        }
        private string _ConnectionStringKey;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnConnectionStringKey_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnConnectionStringKey_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnConnectionStringKey_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnConnectionStringKey_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
    /*
    Relation: FK_StagingDatabase_was_CreatedBy
    A: ZeroOrMore StagingDatabase as StagingDatabase
    B: ZeroOrOne Identity as CreatedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=ZBox.App.SchemaMigration;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Kistl.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_CreatedBy;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_StagingDatabase_was_CreatedBy", "CreatedBy")]
        public Kistl.App.Base.IdentityEfImpl CreatedByImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.IdentityEfImpl __value;
                EntityReference<Kistl.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>(
                        "Model.FK_StagingDatabase_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>(
                        "Model.FK_StagingDatabase_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.IdentityEfImpl __oldValue = (Kistl.App.Base.IdentityEfImpl)r.Value;
                Kistl.App.Base.IdentityEfImpl __newValue = (Kistl.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("CreatedBy", null, __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityEfImpl)e.Result;
                }

                r.Value = (Kistl.App.Base.IdentityEfImpl)__newValue;

                if (OnCreatedBy_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("CreatedBy", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Kistl.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Kistl.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Kistl.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime CreatedOn
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(DateTime);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("d402f8a4-dc92-4041-a295-50257057e656"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'StagingDatabase.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("CreatedOn");
				}
            }
        }
        private DateTime _CreatedOn;
        private bool _isCreatedOnSet = false;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnCreatedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Description
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);

                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("Description");
				}
            }
        }
        private string _Description;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnDescription_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnDescription_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("6bc56e55-16c4-4c94-8c20-12861844e053"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'StagingDatabase.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }
        private Guid _ExportGuid;
        private bool _isExportGuidSet = false;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_MigrationProject_reads_from_StagingDatabases
    A: One MigrationProject as MigrationProject
    B: ZeroOrMore StagingDatabase as StagingDatabases
    Preferred Storage: MergeIntoB
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for MigrationProject
        // fkBackingName=_fk_MigrationProject; fkGuidBackingName=_fk_guid_MigrationProject;
        // referencedInterface=ZBox.App.SchemaMigration.MigrationProject; moduleNamespace=ZBox.App.SchemaMigration;
        // inverse Navigator=StagingDatabases; is list;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ZBox.App.SchemaMigration.MigrationProject MigrationProject
        {
            get { return MigrationProjectImpl; }
            set { MigrationProjectImpl = (ZBox.App.SchemaMigration.MigrationProjectEfImpl)value; }
        }

        private int? _fk_MigrationProject;

        private Guid? _fk_guid_MigrationProject = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_MigrationProject_reads_from_StagingDatabases", "MigrationProject")]
        public ZBox.App.SchemaMigration.MigrationProjectEfImpl MigrationProjectImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                ZBox.App.SchemaMigration.MigrationProjectEfImpl __value;
                EntityReference<ZBox.App.SchemaMigration.MigrationProjectEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.MigrationProjectEfImpl>(
                        "Model.FK_MigrationProject_reads_from_StagingDatabases",
                        "MigrationProject");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnMigrationProject_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<ZBox.App.SchemaMigration.MigrationProject>(__value);
                    OnMigrationProject_Getter(this, e);
                    __value = (ZBox.App.SchemaMigration.MigrationProjectEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<ZBox.App.SchemaMigration.MigrationProjectEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.MigrationProjectEfImpl>(
                        "Model.FK_MigrationProject_reads_from_StagingDatabases",
                        "MigrationProject");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                ZBox.App.SchemaMigration.MigrationProjectEfImpl __oldValue = (ZBox.App.SchemaMigration.MigrationProjectEfImpl)r.Value;
                ZBox.App.SchemaMigration.MigrationProjectEfImpl __newValue = (ZBox.App.SchemaMigration.MigrationProjectEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("MigrationProject", null, __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("StagingDatabases", null, null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("StagingDatabases", null, null, null);
                }

                if (OnMigrationProject_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<ZBox.App.SchemaMigration.MigrationProject>(__oldValue, __newValue);
                    OnMigrationProject_PreSetter(this, e);
                    __newValue = (ZBox.App.SchemaMigration.MigrationProjectEfImpl)e.Result;
                }

                r.Value = (ZBox.App.SchemaMigration.MigrationProjectEfImpl)__newValue;

                if (OnMigrationProject_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<ZBox.App.SchemaMigration.MigrationProject>(__oldValue, __newValue);
                    OnMigrationProject_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("MigrationProject", null, __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("StagingDatabases", null, null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("StagingDatabases", null, null, null);
                }
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for MigrationProject
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, ZBox.App.SchemaMigration.MigrationProject> OnMigrationProject_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, ZBox.App.SchemaMigration.MigrationProject> OnMigrationProject_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, ZBox.App.SchemaMigration.MigrationProject> OnMigrationProject_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnMigrationProject_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string OriginConnectionStringKey
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _OriginConnectionStringKey;
                if (OnOriginConnectionStringKey_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnOriginConnectionStringKey_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_OriginConnectionStringKey != value)
                {
                    var __oldValue = _OriginConnectionStringKey;
                    var __newValue = value;
                    if (OnOriginConnectionStringKey_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnOriginConnectionStringKey_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("OriginConnectionStringKey", __oldValue, __newValue);
                    _OriginConnectionStringKey = __newValue;
                    NotifyPropertyChanged("OriginConnectionStringKey", __oldValue, __newValue);

                    if (OnOriginConnectionStringKey_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnOriginConnectionStringKey_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("OriginConnectionStringKey");
				}
            }
        }
        private string _OriginConnectionStringKey;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnOriginConnectionStringKey_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnOriginConnectionStringKey_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnOriginConnectionStringKey_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnOriginConnectionStringKey_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Schema
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Schema;
                if (OnSchema_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnSchema_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Schema != value)
                {
                    var __oldValue = _Schema;
                    var __newValue = value;
                    if (OnSchema_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnSchema_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Schema", __oldValue, __newValue);
                    _Schema = __newValue;
                    NotifyPropertyChanged("Schema", __oldValue, __newValue);

                    if (OnSchema_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnSchema_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("Schema");
				}
            }
        }
        private string _Schema;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnSchema_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnSchema_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnSchema_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnSchema_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_SourceTables_are_contained_in_StagingDatabase
    A: ZeroOrMore SourceTable as SourceTables
    B: One StagingDatabase as StagingDatabase
    Preferred Storage: MergeIntoA
    */
        // object list property
        // object list property
           // Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<ZBox.App.SchemaMigration.SourceTable> SourceTables
        {
            get
            {
                if (_SourceTables == null)
                {
                    _SourceTables = new EntityCollectionWrapper<ZBox.App.SchemaMigration.SourceTable, ZBox.App.SchemaMigration.SourceTableEfImpl>(
                            this.Context, SourceTablesImpl,
                            () => this.NotifyPropertyChanging("SourceTables", null, null, null),
                            () => { this.NotifyPropertyChanged("SourceTables", null, null, null); if(OnSourceTables_PostSetter != null && IsAttached) OnSourceTables_PostSetter(this); },
                            (item) => item.NotifyPropertyChanging("StagingDatabase", null, null, null),
                            (item) => item.NotifyPropertyChanged("StagingDatabase", null, null, null));
                }
                return _SourceTables;
            }
        }
    
        [EdmRelationshipNavigationProperty("Model", "FK_SourceTables_are_contained_in_StagingDatabase", "SourceTables")]
        public EntityCollection<ZBox.App.SchemaMigration.SourceTableEfImpl> SourceTablesImpl
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<ZBox.App.SchemaMigration.SourceTableEfImpl>(
                        "Model.FK_SourceTables_are_contained_in_StagingDatabase",
                        "SourceTables");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                c.ForEach(i => i.AttachToContext(Context));
                return c;
            }
        }
        private EntityCollectionWrapper<ZBox.App.SchemaMigration.SourceTable, ZBox.App.SchemaMigration.SourceTableEfImpl> _SourceTables;


public static event PropertyListChangedHandler<ZBox.App.SchemaMigration.StagingDatabase> OnSourceTables_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnSourceTables_IsValid;

        public override Type GetImplementedInterface()
        {
            return typeof(StagingDatabase);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (StagingDatabase)obj;
            var otherImpl = (StagingDatabaseEfImpl)obj;
            var me = (StagingDatabase)this;

            me.ChangedOn = other.ChangedOn;
            me.ConnectionStringKey = other.ConnectionStringKey;
            me.CreatedOn = other.CreatedOn;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.OriginConnectionStringKey = other.OriginConnectionStringKey;
            me.Schema = other.Schema;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_MigrationProject = otherImpl._fk_MigrationProject;
        }

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Kistl.App.Base.IdentityEfImpl)Context.Find<Kistl.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Kistl.App.Base.IdentityEfImpl)Context.Find<Kistl.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;

            if (_fk_guid_MigrationProject.HasValue)
                MigrationProjectImpl = (ZBox.App.SchemaMigration.MigrationProjectEfImpl)Context.FindPersistenceObject<ZBox.App.SchemaMigration.MigrationProject>(_fk_guid_MigrationProject.Value);
            else
            if (_fk_MigrationProject.HasValue)
                MigrationProjectImpl = (ZBox.App.SchemaMigration.MigrationProjectEfImpl)Context.Find<ZBox.App.SchemaMigration.MigrationProject>(_fk_MigrationProject.Value);
            else
                MigrationProjectImpl = null;
        }
        #region Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorEfImpl<StagingDatabase, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("ee3476a8-1715-4dc2-a2b2-13e4a2a27e10"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<StagingDatabase, DateTime>(
                        lazyCtx,
                        new Guid("16652536-fb87-4b1b-866e-ec2fb68a8ae2"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<StagingDatabase, string>(
                        lazyCtx,
                        new Guid("6aa09a38-a4be-4095-bf8d-9799bd56a14d"),
                        "ConnectionStringKey",
                        null,
                        obj => obj.ConnectionStringKey,
                        (obj, val) => obj.ConnectionStringKey = val,
						obj => OnConnectionStringKey_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<StagingDatabase, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("9db15b1e-a55e-444c-9fa7-9dd66d9b13f6"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<StagingDatabase, DateTime>(
                        lazyCtx,
                        new Guid("d402f8a4-dc92-4041-a295-50257057e656"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<StagingDatabase, string>(
                        lazyCtx,
                        new Guid("157ecaf4-3ee5-4d78-8148-ab936de50523"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val,
						obj => OnDescription_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<StagingDatabase, Guid>(
                        lazyCtx,
                        new Guid("6bc56e55-16c4-4c94-8c20-12861844e053"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<StagingDatabase, ZBox.App.SchemaMigration.MigrationProject>(
                        lazyCtx,
                        new Guid("8edc845c-6d39-45f7-ae28-434f0a1ef503"),
                        "MigrationProject",
                        null,
                        obj => obj.MigrationProject,
                        (obj, val) => obj.MigrationProject = val,
						obj => OnMigrationProject_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<StagingDatabase, string>(
                        lazyCtx,
                        new Guid("f82f3e1f-3275-4fcf-a362-71f7175f40f1"),
                        "OriginConnectionStringKey",
                        null,
                        obj => obj.OriginConnectionStringKey,
                        (obj, val) => obj.OriginConnectionStringKey = val,
						obj => OnOriginConnectionStringKey_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<StagingDatabase, string>(
                        lazyCtx,
                        new Guid("601a0dc6-ec58-4092-a53c-c902fcc85379"),
                        "Schema",
                        null,
                        obj => obj.Schema,
                        (obj, val) => obj.Schema = val,
						obj => OnSchema_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<StagingDatabase, ICollection<ZBox.App.SchemaMigration.SourceTable>>(
                        lazyCtx,
                        new Guid("e468c835-8c9c-4776-83ce-f54b1f4634a4"),
                        "SourceTables",
                        null,
                        obj => obj.SourceTables,
                        null, // lists are read-only properties
                        obj => OnSourceTables_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_StagingDatabase")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_StagingDatabase != null)
            {
                OnToString_StagingDatabase(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<StagingDatabase> OnToString_StagingDatabase;

		[System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_StagingDatabase")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
			var b = base.ObjectIsValid();
            e.IsValid = b.IsValid;
			e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_StagingDatabase != null)
            {
                OnObjectIsValid_StagingDatabase(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<StagingDatabase> OnObjectIsValid_StagingDatabase;

        [EventBasedMethod("OnNotifyPreSave_StagingDatabase")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_StagingDatabase != null) OnNotifyPreSave_StagingDatabase(this);
        }
        public static event ObjectEventHandler<StagingDatabase> OnNotifyPreSave_StagingDatabase;

        [EventBasedMethod("OnNotifyPostSave_StagingDatabase")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_StagingDatabase != null) OnNotifyPostSave_StagingDatabase(this);
        }
        public static event ObjectEventHandler<StagingDatabase> OnNotifyPostSave_StagingDatabase;

        [EventBasedMethod("OnNotifyCreated_StagingDatabase")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("ConnectionStringKey");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("Description");
            SetNotInitializedProperty("MigrationProject");
            SetNotInitializedProperty("OriginConnectionStringKey");
            SetNotInitializedProperty("Schema");
            base.NotifyCreated();
            if (OnNotifyCreated_StagingDatabase != null) OnNotifyCreated_StagingDatabase(this);
        }
        public static event ObjectEventHandler<StagingDatabase> OnNotifyCreated_StagingDatabase;

        [EventBasedMethod("OnNotifyDeleting_StagingDatabase")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_StagingDatabase != null) OnNotifyDeleting_StagingDatabase(this);
        }
        public static event ObjectEventHandler<StagingDatabase> OnNotifyDeleting_StagingDatabase;

        #endregion // Kistl.Generator.Templates.ObjectClasses.DefaultMethods
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);

                }
				else 
				{
					SetInitializedProperty("ID");
				}
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>("Model.FK_StagingDatabase_was_ChangedBy", "ChangedBy").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                BinarySerializer.ToStream(this._ChangedOn, binStream);
            }
            BinarySerializer.ToStream(this._ConnectionStringKey, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>("Model.FK_StagingDatabase_was_CreatedBy", "CreatedBy").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                BinarySerializer.ToStream(this._CreatedOn, binStream);
            }
            BinarySerializer.ToStream(this._Description, binStream);
            BinarySerializer.ToStream(this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.ToStream(this._ExportGuid, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.MigrationProjectEfImpl>("Model.FK_MigrationProject_reads_from_StagingDatabases", "MigrationProject").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._OriginConnectionStringKey, binStream);
            BinarySerializer.ToStream(this._Schema, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._fk_ChangedBy, binStream);
            BinarySerializer.FromStream(out this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                BinarySerializer.FromStream(out this._ChangedOn, binStream);
            }
            BinarySerializer.FromStream(out this._ConnectionStringKey, binStream);
            BinarySerializer.FromStream(out this._fk_CreatedBy, binStream);
            BinarySerializer.FromStream(out this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                BinarySerializer.FromStream(out this._CreatedOn, binStream);
            }
            BinarySerializer.FromStream(out this._Description, binStream);
            BinarySerializer.FromStream(out this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.FromStream(out this._ExportGuid, binStream);
            }
            BinarySerializer.FromStream(out this._fk_MigrationProject, binStream);
            BinarySerializer.FromStream(out this._OriginConnectionStringKey, binStream);
            BinarySerializer.FromStream(out this._Schema, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>("Model.FK_StagingDatabase_was_ChangedBy", "ChangedBy").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "ChangedBy", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream(this._isChangedOnSet, xml, "IsChangedOnSet", "ZBox.App.SchemaMigration");
            if (this._isChangedOnSet) {
                XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream(this._ConnectionStringKey, xml, "ConnectionStringKey", "ZBox.App.SchemaMigration");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>("Model.FK_StagingDatabase_was_CreatedBy", "CreatedBy").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "CreatedBy", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream(this._isCreatedOnSet, xml, "IsCreatedOnSet", "ZBox.App.SchemaMigration");
            if (this._isCreatedOnSet) {
                XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream(this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._isExportGuidSet, xml, "IsExportGuidSet", "ZBox.App.SchemaMigration");
            if (this._isExportGuidSet) {
                XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "ZBox.App.SchemaMigration");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.MigrationProjectEfImpl>("Model.FK_MigrationProject_reads_from_StagingDatabases", "MigrationProject").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "MigrationProject", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream(this._OriginConnectionStringKey, xml, "OriginConnectionStringKey", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._Schema, xml, "Schema", "ZBox.App.SchemaMigration");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._fk_ChangedBy, xml, "ChangedBy", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._isChangedOnSet, xml, "IsChangedOnSet", "ZBox.App.SchemaMigration");
            if (this._isChangedOnSet) {
                XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.FromStream(ref this._ConnectionStringKey, xml, "ConnectionStringKey", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._fk_CreatedBy, xml, "CreatedBy", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._isCreatedOnSet, xml, "IsCreatedOnSet", "ZBox.App.SchemaMigration");
            if (this._isCreatedOnSet) {
                XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._isExportGuidSet, xml, "IsExportGuidSet", "ZBox.App.SchemaMigration");
            if (this._isExportGuidSet) {
                XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.FromStream(ref this._fk_MigrationProject, xml, "MigrationProject", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._OriginConnectionStringKey, xml, "OriginConnectionStringKey", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._Schema, xml, "Schema", "ZBox.App.SchemaMigration");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            System.Diagnostics.Debug.Assert(this._isChangedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._ConnectionStringKey, xml, "ConnectionStringKey", "ZBox.App.SchemaMigration");
            System.Diagnostics.Debug.Assert(this._isCreatedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(MigrationProject != null ? MigrationProject.ExportGuid : (Guid?)null, xml, "MigrationProject", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._OriginConnectionStringKey, xml, "OriginConnectionStringKey", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._Schema, xml, "Schema", "ZBox.App.SchemaMigration");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            // Import must have default value set
            XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "ZBox.App.SchemaMigration");
            this._isChangedOnSet = true;
            XmlStreamer.FromStream(ref this._ConnectionStringKey, xml, "ConnectionStringKey", "ZBox.App.SchemaMigration");
            // Import must have default value set
            XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "ZBox.App.SchemaMigration");
            this._isCreatedOnSet = true;
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            // Import must have default value set
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "ZBox.App.SchemaMigration");
            this._isExportGuidSet = true;
            XmlStreamer.FromStream(ref this._fk_guid_MigrationProject, xml, "MigrationProject", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._OriginConnectionStringKey, xml, "OriginConnectionStringKey", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._Schema, xml, "Schema", "ZBox.App.SchemaMigration");
        }

        #endregion

    }
}