// <autogenerated/>

namespace ZBox.App.SchemaMigration
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;
    using Kistl.DalProvider.Base.RelationWrappers;

    using Kistl.API.Server;
    using Kistl.DalProvider.Ef;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="SourceColumn")]
    [System.Diagnostics.DebuggerDisplay("SourceColumn")]
    public class SourceColumnEfImpl : BaseServerDataObject_EntityFramework, Kistl.API.IExportableInternal, SourceColumn
    {
        [Obsolete]
        public SourceColumnEfImpl()
            : base(null)
        {
        }

        public SourceColumnEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// Identity which changed this object
        /// </summary>
    /*
    Relation: FK_SourceColumn_was_ChangedBy
    A: ZeroOrMore SourceColumn as SourceColumn
    B: ZeroOrOne Identity as ChangedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=ZBox.App.SchemaMigration;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Kistl.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_ChangedBy;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_SourceColumn_was_ChangedBy", "ChangedBy")]
        public Kistl.App.Base.IdentityEfImpl ChangedByImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.IdentityEfImpl __value;
                EntityReference<Kistl.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>(
                        "Model.FK_SourceColumn_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>(
                        "Model.FK_SourceColumn_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.IdentityEfImpl __oldValue = (Kistl.App.Base.IdentityEfImpl)r.Value;
                Kistl.App.Base.IdentityEfImpl __newValue = (Kistl.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("ChangedBy", null, __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityEfImpl)e.Result;
                }

                r.Value = (Kistl.App.Base.IdentityEfImpl)__newValue;

                if (OnChangedBy_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("ChangedBy", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, Kistl.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, Kistl.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, Kistl.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime ChangedOn
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(DateTime);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("ddd4df6a-e085-45fe-b900-f3995dcb1845"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'SourceColumn.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ChangedOn");
				}
            }
        }
        private DateTime _ChangedOn;
        private bool _isChangedOnSet = false;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnChangedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Comment
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Comment;
                if (OnComment_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnComment_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Comment != value)
                {
                    var __oldValue = _Comment;
                    var __newValue = value;
                    if (OnComment_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnComment_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Comment", __oldValue, __newValue);
                    _Comment = __newValue;
                    NotifyPropertyChanged("Comment", __oldValue, __newValue);

                    if (OnComment_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnComment_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("Comment");
				}
            }
        }
        private string _Comment;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnComment_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnComment_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnComment_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnComment_IsValid;

        /// <summary>
        /// In some cases, when joining across source tables, nulls should be compared as equals, instead of not. This is especially true, when &quot;null&quot; is used as a domain value.
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool CompareNulls
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CompareNulls;
                if (!_isCompareNullsSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("09607800-4b5c-4d8a-a0cf-b508986c2f17"));
                    if (__p != null) {
                        _isCompareNullsSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CompareNulls = (bool)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'SourceColumn.CompareNulls'");
                    }
                }
                if (OnCompareNulls_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnCompareNulls_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCompareNullsSet = true;
                if (_CompareNulls != value)
                {
                    var __oldValue = _CompareNulls;
                    var __newValue = value;
                    if (OnCompareNulls_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnCompareNulls_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CompareNulls", __oldValue, __newValue);
                    _CompareNulls = __newValue;
                    NotifyPropertyChanged("CompareNulls", __oldValue, __newValue);

                    if (OnCompareNulls_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnCompareNulls_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("CompareNulls");
				}
            }
        }
        private bool _CompareNulls;
        private bool _isCompareNullsSet = false;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, bool> OnCompareNulls_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, bool> OnCompareNulls_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, bool> OnCompareNulls_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnCompareNulls_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
    /*
    Relation: FK_SourceColumn_was_CreatedBy
    A: ZeroOrMore SourceColumn as SourceColumn
    B: ZeroOrOne Identity as CreatedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=ZBox.App.SchemaMigration;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Kistl.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_CreatedBy;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_SourceColumn_was_CreatedBy", "CreatedBy")]
        public Kistl.App.Base.IdentityEfImpl CreatedByImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.IdentityEfImpl __value;
                EntityReference<Kistl.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>(
                        "Model.FK_SourceColumn_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>(
                        "Model.FK_SourceColumn_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.IdentityEfImpl __oldValue = (Kistl.App.Base.IdentityEfImpl)r.Value;
                Kistl.App.Base.IdentityEfImpl __newValue = (Kistl.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("CreatedBy", null, __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityEfImpl)e.Result;
                }

                r.Value = (Kistl.App.Base.IdentityEfImpl)__newValue;

                if (OnCreatedBy_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("CreatedBy", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, Kistl.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, Kistl.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, Kistl.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime CreatedOn
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(DateTime);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("bb5f31d0-072d-45ec-a455-0234ccc31867"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'SourceColumn.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("CreatedOn");
				}
            }
        }
        private DateTime _CreatedOn;
        private bool _isCreatedOnSet = false;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnCreatedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
   		// Kistl.DalProvider.Ef.Generator.Templates.Properties.EnumerationPropertyTemplate
        // implement the user-visible interface
        public ZBox.App.SchemaMigration.ColumnType DbType
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(ZBox.App.SchemaMigration.ColumnType);
				var __value = _DbType;
				if(OnDbType_Getter != null)
				{
					var e = new PropertyGetterEventArgs<ZBox.App.SchemaMigration.ColumnType>(__value);
					OnDbType_Getter(this, e);
					__value = e.Result;
				}
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (_DbType != value)
                {
					var __oldValue = _DbType;
					var __newValue = value;
                    if(OnDbType_PreSetter != null)
                    {
						var e = new PropertyPreSetterEventArgs<ZBox.App.SchemaMigration.ColumnType>(__oldValue, __newValue);
						OnDbType_PreSetter(this, e);
						__newValue = e.Result;
                    }
					
                    NotifyPropertyChanging("DbType", "DbTypeImpl", __oldValue, __newValue);
                    _DbType = value;
                    NotifyPropertyChanged("DbType", "DbTypeImpl", __oldValue, __newValue);
                    if(OnDbType_PostSetter != null)
                    {
						var e = new PropertyPostSetterEventArgs<ZBox.App.SchemaMigration.ColumnType>(__oldValue, __newValue);
						OnDbType_PostSetter(this, e);
                    }
                    
                }
            }
        }
        
        /// <summary>backing store for DbType</summary>
        private ZBox.App.SchemaMigration.ColumnType _DbType;
        
        /// <summary>EF sees only this property, for DbType</summary>
        [XmlIgnore()]
        [EdmScalarProperty()]
        public int DbTypeImpl
        {
            get
            {
                return (int)this.DbType;
            }
            set
            {
                this.DbType = (ZBox.App.SchemaMigration.ColumnType)value;
            }
        }
        
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.ColumnType> OnDbType_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.ColumnType> OnDbType_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.ColumnType> OnDbType_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnDbType_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Description
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);

                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("Description");
				}
            }
        }
        private string _Description;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnDescription_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnDescription_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_SourceColumn_created_Property
    A: ZeroOrMore SourceColumn as SourceColumn
    B: ZeroOrMore Property as Property
    Preferred Storage: Separate
    */
        // collection reference property
        // Kistl.DalProvider.Ef.Generator.Templates.Properties.CollectionEntryListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public IList<Kistl.App.Base.Property> DestinationProperty
        {
            get
            {
                if (_DestinationProperty == null)
                {
                    _DestinationProperty = new BSideListWrapper<ZBox.App.SchemaMigration.SourceColumn, Kistl.App.Base.Property, ZBox.App.SchemaMigration.SourceColumn_created_Property_RelationEntryEfImpl, EntityCollection<ZBox.App.SchemaMigration.SourceColumn_created_Property_RelationEntryEfImpl>>(
                            this,
                            DestinationPropertyImpl);
                }
                return _DestinationProperty;
            }
        }
        
        [EdmRelationshipNavigationProperty("Model", "FK_SourceColumn_created_Property_A", "CollectionEntry")]
        public EntityCollection<ZBox.App.SchemaMigration.SourceColumn_created_Property_RelationEntryEfImpl> DestinationPropertyImpl
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<ZBox.App.SchemaMigration.SourceColumn_created_Property_RelationEntryEfImpl>(
                        "Model.FK_SourceColumn_created_Property_A",
                        "CollectionEntry");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                c.ForEach(i => i.AttachToContext(Context));
                return c;
            }
        }
        private BSideListWrapper<ZBox.App.SchemaMigration.SourceColumn, Kistl.App.Base.Property, ZBox.App.SchemaMigration.SourceColumn_created_Property_RelationEntryEfImpl, EntityCollection<ZBox.App.SchemaMigration.SourceColumn_created_Property_RelationEntryEfImpl>> _DestinationProperty;
        private bool DestinationProperty_was_eagerLoaded = false;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnDestinationProperty_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_SourceColumn_may_have_EnumEntries
    A: One SourceColumn as SourceColumn
    B: ZeroOrMore SourceEnum as EnumEntries
    Preferred Storage: MergeIntoB
    */
        // object list property
        // object list property
           // Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<ZBox.App.SchemaMigration.SourceEnum> EnumEntries
        {
            get
            {
                if (_EnumEntries == null)
                {
                    _EnumEntries = new EntityCollectionWrapper<ZBox.App.SchemaMigration.SourceEnum, ZBox.App.SchemaMigration.SourceEnumEfImpl>(
                            this.Context, EnumEntriesImpl,
                            () => this.NotifyPropertyChanging("EnumEntries", null, null, null),
                            () => { this.NotifyPropertyChanged("EnumEntries", null, null, null); if(OnEnumEntries_PostSetter != null && IsAttached) OnEnumEntries_PostSetter(this); },
                            (item) => item.NotifyPropertyChanging("SourceColumn", null, null, null),
                            (item) => item.NotifyPropertyChanged("SourceColumn", null, null, null));
                }
                return _EnumEntries;
            }
        }
    
        [EdmRelationshipNavigationProperty("Model", "FK_SourceColumn_may_have_EnumEntries", "EnumEntries")]
        public EntityCollection<ZBox.App.SchemaMigration.SourceEnumEfImpl> EnumEntriesImpl
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<ZBox.App.SchemaMigration.SourceEnumEfImpl>(
                        "Model.FK_SourceColumn_may_have_EnumEntries",
                        "EnumEntries");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                c.ForEach(i => i.AttachToContext(Context));
                return c;
            }
        }
        private EntityCollectionWrapper<ZBox.App.SchemaMigration.SourceEnum, ZBox.App.SchemaMigration.SourceEnumEfImpl> _EnumEntries;


public static event PropertyListChangedHandler<ZBox.App.SchemaMigration.SourceColumn> OnEnumEntries_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnEnumEntries_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("52ba9fcd-dbeb-42da-9146-6f40976c1c83"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'SourceColumn.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }
        private Guid _ExportGuid;
        private bool _isExportGuidSet = false;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool? IsNullable
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsNullable;
                if (OnIsNullable_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnIsNullable_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_IsNullable != value)
                {
                    var __oldValue = _IsNullable;
                    var __newValue = value;
                    if (OnIsNullable_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnIsNullable_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsNullable", __oldValue, __newValue);
                    _IsNullable = __newValue;
                    NotifyPropertyChanged("IsNullable", __oldValue, __newValue);

                    if (OnIsNullable_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnIsNullable_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("IsNullable");
				}
            }
        }
        private bool? _IsNullable;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, bool?> OnIsNullable_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, bool?> OnIsNullable_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, bool?> OnIsNullable_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnIsNullable_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Name
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("Name");
				}
            }
        }
        private string _Name;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnName_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnName_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_FK_Column_references_PK_Column
    A: ZeroOrMore SourceColumn as FK_Column
    B: ZeroOrOne SourceColumn as PK_Column
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for References
        // fkBackingName=_fk_References; fkGuidBackingName=_fk_guid_References;
        // referencedInterface=ZBox.App.SchemaMigration.SourceColumn; moduleNamespace=ZBox.App.SchemaMigration;
        // inverse Navigator=Referers; is list;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ZBox.App.SchemaMigration.SourceColumn References
        {
            get { return ReferencesImpl; }
            set { ReferencesImpl = (ZBox.App.SchemaMigration.SourceColumnEfImpl)value; }
        }

        private int? _fk_References;

        private Guid? _fk_guid_References = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_FK_Column_references_PK_Column", "PK_Column")]
        public ZBox.App.SchemaMigration.SourceColumnEfImpl ReferencesImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                ZBox.App.SchemaMigration.SourceColumnEfImpl __value;
                EntityReference<ZBox.App.SchemaMigration.SourceColumnEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.SourceColumnEfImpl>(
                        "Model.FK_FK_Column_references_PK_Column",
                        "PK_Column");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnReferences_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<ZBox.App.SchemaMigration.SourceColumn>(__value);
                    OnReferences_Getter(this, e);
                    __value = (ZBox.App.SchemaMigration.SourceColumnEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<ZBox.App.SchemaMigration.SourceColumnEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.SourceColumnEfImpl>(
                        "Model.FK_FK_Column_references_PK_Column",
                        "PK_Column");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                ZBox.App.SchemaMigration.SourceColumnEfImpl __oldValue = (ZBox.App.SchemaMigration.SourceColumnEfImpl)r.Value;
                ZBox.App.SchemaMigration.SourceColumnEfImpl __newValue = (ZBox.App.SchemaMigration.SourceColumnEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("References", null, __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("Referers", null, null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("Referers", null, null, null);
                }

                if (OnReferences_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<ZBox.App.SchemaMigration.SourceColumn>(__oldValue, __newValue);
                    OnReferences_PreSetter(this, e);
                    __newValue = (ZBox.App.SchemaMigration.SourceColumnEfImpl)e.Result;
                }

                r.Value = (ZBox.App.SchemaMigration.SourceColumnEfImpl)__newValue;

                if (OnReferences_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<ZBox.App.SchemaMigration.SourceColumn>(__oldValue, __newValue);
                    OnReferences_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("References", null, __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("Referers", null, null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("Referers", null, null, null);
                }
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for References
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceColumn> OnReferences_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceColumn> OnReferences_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceColumn> OnReferences_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnReferences_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_FK_Column_references_PK_Column
    A: ZeroOrMore SourceColumn as FK_Column
    B: ZeroOrOne SourceColumn as PK_Column
    Preferred Storage: MergeIntoA
    */
        // object list property
        // object list property
           // Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<ZBox.App.SchemaMigration.SourceColumn> Referers
        {
            get
            {
                if (_Referers == null)
                {
                    _Referers = new EntityCollectionWrapper<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceColumnEfImpl>(
                            this.Context, ReferersImpl,
                            () => this.NotifyPropertyChanging("Referers", null, null, null),
                            () => { this.NotifyPropertyChanged("Referers", null, null, null); if(OnReferers_PostSetter != null && IsAttached) OnReferers_PostSetter(this); },
                            (item) => item.NotifyPropertyChanging("References", null, null, null),
                            (item) => item.NotifyPropertyChanged("References", null, null, null));
                }
                return _Referers;
            }
        }
    
        [EdmRelationshipNavigationProperty("Model", "FK_FK_Column_references_PK_Column", "FK_Column")]
        public EntityCollection<ZBox.App.SchemaMigration.SourceColumnEfImpl> ReferersImpl
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<ZBox.App.SchemaMigration.SourceColumnEfImpl>(
                        "Model.FK_FK_Column_references_PK_Column",
                        "FK_Column");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                c.ForEach(i => i.AttachToContext(Context));
                return c;
            }
        }
        private EntityCollectionWrapper<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceColumnEfImpl> _Referers;


public static event PropertyListChangedHandler<ZBox.App.SchemaMigration.SourceColumn> OnReferers_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnReferers_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? Size
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(int?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Size;
                if (OnSize_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<int?>(__result);
                    OnSize_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Size != value)
                {
                    var __oldValue = _Size;
                    var __newValue = value;
                    if (OnSize_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<int?>(__oldValue, __newValue);
                        OnSize_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Size", __oldValue, __newValue);
                    _Size = __newValue;
                    NotifyPropertyChanged("Size", __oldValue, __newValue);

                    if (OnSize_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<int?>(__oldValue, __newValue);
                        OnSize_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("Size");
				}
            }
        }
        private int? _Size;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, int?> OnSize_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, int?> OnSize_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, int?> OnSize_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnSize_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_SourceColumn_belongs_to_SourceTable
    A: ZeroOrMore SourceColumn as SourceColumn
    B: One SourceTable as SourceTable
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for SourceTable
        // fkBackingName=_fk_SourceTable; fkGuidBackingName=_fk_guid_SourceTable;
        // referencedInterface=ZBox.App.SchemaMigration.SourceTable; moduleNamespace=ZBox.App.SchemaMigration;
        // inverse Navigator=SourceColumn; is list;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ZBox.App.SchemaMigration.SourceTable SourceTable
        {
            get { return SourceTableImpl; }
            set { SourceTableImpl = (ZBox.App.SchemaMigration.SourceTableEfImpl)value; }
        }

        private int? _fk_SourceTable;

        private Guid? _fk_guid_SourceTable = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_SourceColumn_belongs_to_SourceTable", "SourceTable")]
        public ZBox.App.SchemaMigration.SourceTableEfImpl SourceTableImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                ZBox.App.SchemaMigration.SourceTableEfImpl __value;
                EntityReference<ZBox.App.SchemaMigration.SourceTableEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.SourceTableEfImpl>(
                        "Model.FK_SourceColumn_belongs_to_SourceTable",
                        "SourceTable");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnSourceTable_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<ZBox.App.SchemaMigration.SourceTable>(__value);
                    OnSourceTable_Getter(this, e);
                    __value = (ZBox.App.SchemaMigration.SourceTableEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<ZBox.App.SchemaMigration.SourceTableEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.SourceTableEfImpl>(
                        "Model.FK_SourceColumn_belongs_to_SourceTable",
                        "SourceTable");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                ZBox.App.SchemaMigration.SourceTableEfImpl __oldValue = (ZBox.App.SchemaMigration.SourceTableEfImpl)r.Value;
                ZBox.App.SchemaMigration.SourceTableEfImpl __newValue = (ZBox.App.SchemaMigration.SourceTableEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("SourceTable", null, __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("SourceColumn", null, null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("SourceColumn", null, null, null);
                }

                if (OnSourceTable_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<ZBox.App.SchemaMigration.SourceTable>(__oldValue, __newValue);
                    OnSourceTable_PreSetter(this, e);
                    __newValue = (ZBox.App.SchemaMigration.SourceTableEfImpl)e.Result;
                }

                r.Value = (ZBox.App.SchemaMigration.SourceTableEfImpl)__newValue;

                if (OnSourceTable_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<ZBox.App.SchemaMigration.SourceTable>(__oldValue, __newValue);
                    OnSourceTable_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("SourceTable", null, __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("SourceColumn", null, null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("SourceColumn", null, null, null);
                }
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for SourceTable
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceTable> OnSourceTable_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceTable> OnSourceTable_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceTable> OnSourceTable_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnSourceTable_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
   		// Kistl.DalProvider.Ef.Generator.Templates.Properties.EnumerationPropertyTemplate
        // implement the user-visible interface
        public ZBox.App.SchemaMigration.MappingStatus? Status
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(ZBox.App.SchemaMigration.MappingStatus?);
				var __value = _Status;
				if(OnStatus_Getter != null)
				{
					var e = new PropertyGetterEventArgs<ZBox.App.SchemaMigration.MappingStatus?>(__value);
					OnStatus_Getter(this, e);
					__value = e.Result;
				}
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (_Status != value)
                {
					var __oldValue = _Status;
					var __newValue = value;
                    if(OnStatus_PreSetter != null)
                    {
						var e = new PropertyPreSetterEventArgs<ZBox.App.SchemaMigration.MappingStatus?>(__oldValue, __newValue);
						OnStatus_PreSetter(this, e);
						__newValue = e.Result;
                    }
					
                    NotifyPropertyChanging("Status", "StatusImpl", __oldValue, __newValue);
                    _Status = value;
                    NotifyPropertyChanged("Status", "StatusImpl", __oldValue, __newValue);
                    if(OnStatus_PostSetter != null)
                    {
						var e = new PropertyPostSetterEventArgs<ZBox.App.SchemaMigration.MappingStatus?>(__oldValue, __newValue);
						OnStatus_PostSetter(this, e);
                    }
                    
                }
            }
        }
        
        /// <summary>backing store for Status</summary>
        private ZBox.App.SchemaMigration.MappingStatus? _Status;
        
        /// <summary>EF sees only this property, for Status</summary>
        [XmlIgnore()]
        [EdmScalarProperty()]
        public int? StatusImpl
        {
            get
            {
                return (int?)this.Status;
            }
            set
            {
                this.Status = (ZBox.App.SchemaMigration.MappingStatus?)value;
            }
        }
        
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.MappingStatus?> OnStatus_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.MappingStatus?> OnStatus_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.MappingStatus?> OnStatus_PostSetter;

        public static event PropertyIsValidHandler<ZBox.App.SchemaMigration.SourceColumn> OnStatus_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnCreateProperty_SourceColumn")]
        public virtual void CreateProperty()
        {
            // base.CreateProperty();
            if (OnCreateProperty_SourceColumn != null)
            {
                OnCreateProperty_SourceColumn(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method SourceColumn.CreateProperty");
            }
        }
        public delegate void CreateProperty_Handler<T>(T obj);
        public static event CreateProperty_Handler<SourceColumn> OnCreateProperty_SourceColumn;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<SourceColumn> OnCreateProperty_SourceColumn_CanExec;

        [EventBasedMethod("OnCreateProperty_SourceColumn_CanExec")]
        public virtual bool CreatePropertyCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnCreateProperty_SourceColumn_CanExec != null)
				{
					OnCreateProperty_SourceColumn_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<SourceColumn> OnCreateProperty_SourceColumn_CanExecReason;

        [EventBasedMethod("OnCreateProperty_SourceColumn_CanExecReason")]
        public virtual string CreatePropertyCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnCreateProperty_SourceColumn_CanExecReason != null)
				{
					OnCreateProperty_SourceColumn_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(SourceColumn);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (SourceColumn)obj;
            var otherImpl = (SourceColumnEfImpl)obj;
            var me = (SourceColumn)this;

            me.ChangedOn = other.ChangedOn;
            me.Comment = other.Comment;
            me.CompareNulls = other.CompareNulls;
            me.CreatedOn = other.CreatedOn;
            me.DbType = other.DbType;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.IsNullable = other.IsNullable;
            me.Name = other.Name;
            me.Size = other.Size;
            me.Status = other.Status;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_References = otherImpl._fk_References;
            this._fk_SourceTable = otherImpl._fk_SourceTable;
        }

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Kistl.App.Base.IdentityEfImpl)Context.Find<Kistl.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Kistl.App.Base.IdentityEfImpl)Context.Find<Kistl.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;

            if (_fk_guid_References.HasValue)
                ReferencesImpl = (ZBox.App.SchemaMigration.SourceColumnEfImpl)Context.FindPersistenceObject<ZBox.App.SchemaMigration.SourceColumn>(_fk_guid_References.Value);
            else
            if (_fk_References.HasValue)
                ReferencesImpl = (ZBox.App.SchemaMigration.SourceColumnEfImpl)Context.Find<ZBox.App.SchemaMigration.SourceColumn>(_fk_References.Value);
            else
                ReferencesImpl = null;

            if (_fk_guid_SourceTable.HasValue)
                SourceTableImpl = (ZBox.App.SchemaMigration.SourceTableEfImpl)Context.FindPersistenceObject<ZBox.App.SchemaMigration.SourceTable>(_fk_guid_SourceTable.Value);
            else
            if (_fk_SourceTable.HasValue)
                SourceTableImpl = (ZBox.App.SchemaMigration.SourceTableEfImpl)Context.Find<ZBox.App.SchemaMigration.SourceTable>(_fk_SourceTable.Value);
            else
                SourceTableImpl = null;
        }
        #region Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorEfImpl<SourceColumn, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("4f2f1af0-f33b-4d98-89bb-2a386e11a29a"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceColumn, DateTime>(
                        lazyCtx,
                        new Guid("ddd4df6a-e085-45fe-b900-f3995dcb1845"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceColumn, string>(
                        lazyCtx,
                        new Guid("66bcca34-2297-4e06-84e8-ff19c5d4af35"),
                        "Comment",
                        null,
                        obj => obj.Comment,
                        (obj, val) => obj.Comment = val,
						obj => OnComment_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceColumn, bool>(
                        lazyCtx,
                        new Guid("09607800-4b5c-4d8a-a0cf-b508986c2f17"),
                        "CompareNulls",
                        null,
                        obj => obj.CompareNulls,
                        (obj, val) => obj.CompareNulls = val,
						obj => OnCompareNulls_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceColumn, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("6c0d8f0c-2937-4d6a-972a-299c085e8b5d"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceColumn, DateTime>(
                        lazyCtx,
                        new Guid("bb5f31d0-072d-45ec-a455-0234ccc31867"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceColumn, ZBox.App.SchemaMigration.ColumnType>(
                        lazyCtx,
                        new Guid("78873431-d503-4192-b658-5c5bc6442180"),
                        "DbType",
                        null,
                        obj => obj.DbType,
                        (obj, val) => obj.DbType = val,
						obj => OnDbType_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceColumn, string>(
                        lazyCtx,
                        new Guid("6273444e-5309-4481-8d2a-99a7a8a1b059"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val,
						obj => OnDescription_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<SourceColumn, IList<Kistl.App.Base.Property>>(
                        lazyCtx,
                        new Guid("38dce431-bb65-44c5-b67a-1f28202e51d9"),
                        "DestinationProperty",
                        null,
                        obj => obj.DestinationProperty,
                        null, // lists are read-only properties
                        obj => OnDestinationProperty_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<SourceColumn, ICollection<ZBox.App.SchemaMigration.SourceEnum>>(
                        lazyCtx,
                        new Guid("a040ea6b-c105-4815-815b-e36f0778e4cb"),
                        "EnumEntries",
                        null,
                        obj => obj.EnumEntries,
                        null, // lists are read-only properties
                        obj => OnEnumEntries_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceColumn, Guid>(
                        lazyCtx,
                        new Guid("52ba9fcd-dbeb-42da-9146-6f40976c1c83"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceColumn, bool?>(
                        lazyCtx,
                        new Guid("817ccb79-7051-4b09-8386-941a21575bfc"),
                        "IsNullable",
                        null,
                        obj => obj.IsNullable,
                        (obj, val) => obj.IsNullable = val,
						obj => OnIsNullable_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceColumn, string>(
                        lazyCtx,
                        new Guid("a27f7d36-fd56-4271-bac0-88e22bc65027"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceColumn, ZBox.App.SchemaMigration.SourceColumn>(
                        lazyCtx,
                        new Guid("4d6faa25-d610-4e23-b12f-7ee4c78da70b"),
                        "References",
                        null,
                        obj => obj.References,
                        (obj, val) => obj.References = val,
						obj => OnReferences_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<SourceColumn, ICollection<ZBox.App.SchemaMigration.SourceColumn>>(
                        lazyCtx,
                        new Guid("71bed80f-57ec-4038-a9a4-9aabc0c2f60d"),
                        "Referers",
                        null,
                        obj => obj.Referers,
                        null, // lists are read-only properties
                        obj => OnReferers_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceColumn, int?>(
                        lazyCtx,
                        new Guid("5a1dc7f1-7743-4603-9b65-1b31ca17d55d"),
                        "Size",
                        null,
                        obj => obj.Size,
                        (obj, val) => obj.Size = val,
						obj => OnSize_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceColumn, ZBox.App.SchemaMigration.SourceTable>(
                        lazyCtx,
                        new Guid("d1dca069-f6b5-4da1-beee-a51853c109ba"),
                        "SourceTable",
                        null,
                        obj => obj.SourceTable,
                        (obj, val) => obj.SourceTable = val,
						obj => OnSourceTable_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceColumn, ZBox.App.SchemaMigration.MappingStatus?>(
                        lazyCtx,
                        new Guid("bba3aa19-0097-4692-b649-d51fbc626182"),
                        "Status",
                        null,
                        obj => obj.Status,
                        (obj, val) => obj.Status = val,
						obj => OnStatus_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_SourceColumn")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_SourceColumn != null)
            {
                OnToString_SourceColumn(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<SourceColumn> OnToString_SourceColumn;

		[System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_SourceColumn")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
			var b = base.ObjectIsValid();
            e.IsValid = b.IsValid;
			e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_SourceColumn != null)
            {
                OnObjectIsValid_SourceColumn(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<SourceColumn> OnObjectIsValid_SourceColumn;

        [EventBasedMethod("OnNotifyPreSave_SourceColumn")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_SourceColumn != null) OnNotifyPreSave_SourceColumn(this);
        }
        public static event ObjectEventHandler<SourceColumn> OnNotifyPreSave_SourceColumn;

        [EventBasedMethod("OnNotifyPostSave_SourceColumn")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_SourceColumn != null) OnNotifyPostSave_SourceColumn(this);
        }
        public static event ObjectEventHandler<SourceColumn> OnNotifyPostSave_SourceColumn;

        [EventBasedMethod("OnNotifyCreated_SourceColumn")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("Comment");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("DbType");
            SetNotInitializedProperty("Description");
            SetNotInitializedProperty("IsNullable");
            SetNotInitializedProperty("Name");
            SetNotInitializedProperty("References");
            SetNotInitializedProperty("Size");
            SetNotInitializedProperty("SourceTable");
            SetNotInitializedProperty("Status");
            base.NotifyCreated();
            if (OnNotifyCreated_SourceColumn != null) OnNotifyCreated_SourceColumn(this);
        }
        public static event ObjectEventHandler<SourceColumn> OnNotifyCreated_SourceColumn;

        [EventBasedMethod("OnNotifyDeleting_SourceColumn")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_SourceColumn != null) OnNotifyDeleting_SourceColumn(this);
        }
        public static event ObjectEventHandler<SourceColumn> OnNotifyDeleting_SourceColumn;

        #endregion // Kistl.Generator.Templates.ObjectClasses.DefaultMethods
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);

                }
				else 
				{
					SetInitializedProperty("ID");
				}
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>("Model.FK_SourceColumn_was_ChangedBy", "ChangedBy").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                BinarySerializer.ToStream(this._ChangedOn, binStream);
            }
            BinarySerializer.ToStream(this._Comment, binStream);
            BinarySerializer.ToStream(this._isCompareNullsSet, binStream);
            if (this._isCompareNullsSet) {
                BinarySerializer.ToStream(this._CompareNulls, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>("Model.FK_SourceColumn_was_CreatedBy", "CreatedBy").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                BinarySerializer.ToStream(this._CreatedOn, binStream);
            }
            BinarySerializer.ToStream((int?)((ZBox.App.SchemaMigration.SourceColumn)this).DbType, binStream);
            BinarySerializer.ToStream(this._Description, binStream);

			BinarySerializer.ToStream(eagerLoadLists, binStream);
			if (eagerLoadLists && auxObjects != null)
			{
				foreach(var obj in DestinationProperty)
				{
					auxObjects.Add(obj);
				}
				foreach(var relEntry in DestinationPropertyImpl)
				{
					auxObjects.Add(relEntry);
				}
			}
            BinarySerializer.ToStream(this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.ToStream(this._ExportGuid, binStream);
            }
            BinarySerializer.ToStream(this._IsNullable, binStream);
            BinarySerializer.ToStream(this._Name, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.SourceColumnEfImpl>("Model.FK_FK_Column_references_PK_Column", "PK_Column").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
			if (auxObjects != null) {
				auxObjects.Add(References);
			}
            BinarySerializer.ToStream(this._Size, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.SourceTableEfImpl>("Model.FK_SourceColumn_belongs_to_SourceTable", "SourceTable").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream((int?)((ZBox.App.SchemaMigration.SourceColumn)this).Status, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._fk_ChangedBy, binStream);
            BinarySerializer.FromStream(out this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                BinarySerializer.FromStream(out this._ChangedOn, binStream);
            }
            BinarySerializer.FromStream(out this._Comment, binStream);
            BinarySerializer.FromStream(out this._isCompareNullsSet, binStream);
            if (this._isCompareNullsSet) {
                BinarySerializer.FromStream(out this._CompareNulls, binStream);
            }
            BinarySerializer.FromStream(out this._fk_CreatedBy, binStream);
            BinarySerializer.FromStream(out this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                BinarySerializer.FromStream(out this._CreatedOn, binStream);
            }
            {
                int? baseValue;
                BinarySerializer.FromStream(out baseValue, binStream);
                ((ZBox.App.SchemaMigration.SourceColumn)this).DbType = (ZBox.App.SchemaMigration.ColumnType)baseValue;
            }
            BinarySerializer.FromStream(out this._Description, binStream);

			BinarySerializer.FromStream(out DestinationProperty_was_eagerLoaded, binStream);
            BinarySerializer.FromStream(out this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.FromStream(out this._ExportGuid, binStream);
            }
            BinarySerializer.FromStream(out this._IsNullable, binStream);
            BinarySerializer.FromStream(out this._Name, binStream);
            BinarySerializer.FromStream(out this._fk_References, binStream);
            BinarySerializer.FromStream(out this._Size, binStream);
            BinarySerializer.FromStream(out this._fk_SourceTable, binStream);
            {
                int? baseValue;
                BinarySerializer.FromStream(out baseValue, binStream);
                ((ZBox.App.SchemaMigration.SourceColumn)this).Status = (ZBox.App.SchemaMigration.MappingStatus?)baseValue;
            }
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>("Model.FK_SourceColumn_was_ChangedBy", "ChangedBy").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "ChangedBy", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream(this._isChangedOnSet, xml, "IsChangedOnSet", "ZBox.App.SchemaMigration");
            if (this._isChangedOnSet) {
                XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream(this._Comment, xml, "Comment", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._isCompareNullsSet, xml, "IsCompareNullsSet", "ZBox.App.SchemaMigration");
            if (this._isCompareNullsSet) {
                XmlStreamer.ToStream(this._CompareNulls, xml, "CompareNulls", "ZBox.App.SchemaMigration");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>("Model.FK_SourceColumn_was_CreatedBy", "CreatedBy").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "CreatedBy", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream(this._isCreatedOnSet, xml, "IsCreatedOnSet", "ZBox.App.SchemaMigration");
            if (this._isCreatedOnSet) {
                XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream((int?)((ZBox.App.SchemaMigration.SourceColumn)this).DbType, xml, "DbType", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._isExportGuidSet, xml, "IsExportGuidSet", "ZBox.App.SchemaMigration");
            if (this._isExportGuidSet) {
                XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream(this._IsNullable, xml, "IsNullable", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._Name, xml, "Name", "ZBox.App.SchemaMigration");
            {
                var key = this.RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.SourceColumnEfImpl>("Model.FK_FK_Column_references_PK_Column", "PK_Column").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "References", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream(this._Size, xml, "Size", "ZBox.App.SchemaMigration");
            {
                var key = this.RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.SourceTableEfImpl>("Model.FK_SourceColumn_belongs_to_SourceTable", "SourceTable").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "SourceTable", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream((int?)((ZBox.App.SchemaMigration.SourceColumn)this).Status, xml, "Status", "ZBox.App.SchemaMigration");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._fk_ChangedBy, xml, "ChangedBy", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._isChangedOnSet, xml, "IsChangedOnSet", "ZBox.App.SchemaMigration");
            if (this._isChangedOnSet) {
                XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.FromStream(ref this._Comment, xml, "Comment", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._isCompareNullsSet, xml, "IsCompareNullsSet", "ZBox.App.SchemaMigration");
            if (this._isCompareNullsSet) {
                XmlStreamer.FromStream(ref this._CompareNulls, xml, "CompareNulls", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.FromStream(ref this._fk_CreatedBy, xml, "CreatedBy", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._isCreatedOnSet, xml, "IsCreatedOnSet", "ZBox.App.SchemaMigration");
            if (this._isCreatedOnSet) {
                XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.FromStreamConverter(v => ((ZBox.App.SchemaMigration.SourceColumn)this).DbType = (ZBox.App.SchemaMigration.ColumnType)v, xml, "DbType", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._isExportGuidSet, xml, "IsExportGuidSet", "ZBox.App.SchemaMigration");
            if (this._isExportGuidSet) {
                XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.FromStream(ref this._IsNullable, xml, "IsNullable", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._Name, xml, "Name", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._fk_References, xml, "References", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._Size, xml, "Size", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._fk_SourceTable, xml, "SourceTable", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStreamConverter(v => ((ZBox.App.SchemaMigration.SourceColumn)this).Status = (ZBox.App.SchemaMigration.MappingStatus?)v, xml, "Status", "ZBox.App.SchemaMigration");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            System.Diagnostics.Debug.Assert(this._isChangedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._Comment, xml, "Comment", "ZBox.App.SchemaMigration");
            System.Diagnostics.Debug.Assert(this._isCompareNullsSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._CompareNulls, xml, "CompareNulls", "ZBox.App.SchemaMigration");
            System.Diagnostics.Debug.Assert(this._isCreatedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream((int?)((ZBox.App.SchemaMigration.SourceColumn)this).DbType, xml, "DbType", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._IsNullable, xml, "IsNullable", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._Name, xml, "Name", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(References != null ? References.ExportGuid : (Guid?)null, xml, "References", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._Size, xml, "Size", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(SourceTable != null ? SourceTable.ExportGuid : (Guid?)null, xml, "SourceTable", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream((int?)((ZBox.App.SchemaMigration.SourceColumn)this).Status, xml, "Status", "ZBox.App.SchemaMigration");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            // Import must have default value set
            XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "ZBox.App.SchemaMigration");
            this._isChangedOnSet = true;
            XmlStreamer.FromStream(ref this._Comment, xml, "Comment", "ZBox.App.SchemaMigration");
            // Import must have default value set
            XmlStreamer.FromStream(ref this._CompareNulls, xml, "CompareNulls", "ZBox.App.SchemaMigration");
            this._isCompareNullsSet = true;
            // Import must have default value set
            XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "ZBox.App.SchemaMigration");
            this._isCreatedOnSet = true;
            XmlStreamer.FromStreamConverter(v => ((ZBox.App.SchemaMigration.SourceColumn)this).DbType = (ZBox.App.SchemaMigration.ColumnType)v, xml, "DbType", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            // Import must have default value set
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "ZBox.App.SchemaMigration");
            this._isExportGuidSet = true;
            XmlStreamer.FromStream(ref this._IsNullable, xml, "IsNullable", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._Name, xml, "Name", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._fk_guid_References, xml, "References", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._Size, xml, "Size", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._fk_guid_SourceTable, xml, "SourceTable", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStreamConverter(v => ((ZBox.App.SchemaMigration.SourceColumn)this).Status = (ZBox.App.SchemaMigration.MappingStatus?)v, xml, "Status", "ZBox.App.SchemaMigration");
        }

        #endregion

    }
}