// <autogenerated/>

namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;
    using Kistl.DalProvider.Base.RelationWrappers;

    using Kistl.API.Server;
    using Kistl.DalProvider.Ef;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;

    /// <summary>
    /// Metadefinition Object for Methods.
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="Method")]
    [System.Diagnostics.DebuggerDisplay("Method")]
    public class MethodEfImpl : BaseServerDataObject_EntityFramework, Kistl.API.IExportableInternal, Method
    {
        private static readonly Guid _objectClassID = new Guid("ef79c0b9-55e0-45ad-8233-1ff8f852661f");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public MethodEfImpl()
            : base(null)
        {
        }

        public MethodEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string CategoryTags
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CategoryTags;
                if (OnCategoryTags_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnCategoryTags_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_CategoryTags != value)
                {
                    var __oldValue = _CategoryTags;
                    var __newValue = value;
                    if (OnCategoryTags_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnCategoryTags_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CategoryTags", __oldValue, __newValue);
                    _CategoryTags = __newValue;
                    NotifyPropertyChanged("CategoryTags", __oldValue, __newValue);

                    if (OnCategoryTags_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnCategoryTags_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("CategoryTags");
				}
            }
        }
        private string _CategoryTags;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Method, string> OnCategoryTags_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Method, string> OnCategoryTags_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Method, string> OnCategoryTags_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Method> OnCategoryTags_IsValid;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
    /*
    Relation: FK_Method_was_ChangedBy
    A: ZeroOrMore Method as Method
    B: ZeroOrOne Identity as ChangedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Kistl.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_ChangedBy;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Method_was_ChangedBy", "ChangedBy")]
        public Kistl.App.Base.IdentityEfImpl ChangedByImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.IdentityEfImpl __value;
                EntityReference<Kistl.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>(
                        "Model.FK_Method_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>(
                        "Model.FK_Method_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.IdentityEfImpl __oldValue = (Kistl.App.Base.IdentityEfImpl)r.Value;
                Kistl.App.Base.IdentityEfImpl __newValue = (Kistl.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("ChangedBy", null, __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityEfImpl)e.Result;
                }

                r.Value = (Kistl.App.Base.IdentityEfImpl)__newValue;

                if (OnChangedBy_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("ChangedBy", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Kistl.App.Base.Method, Kistl.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Method, Kistl.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Method, Kistl.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Method> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime ChangedOn
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(DateTime);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("3df96dd2-8cfa-4b37-bf19-792d8c3fc90d"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Method.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ChangedOn");
				}
            }
        }
        private DateTime _ChangedOn;
        private bool _isChangedOnSet = false;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Method, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Method, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Method, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Method> OnChangedOn_IsValid;

        /// <summary>
        /// Provides a code template for the method
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string CodeTemplate
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CodeTemplate;
                if (_CodeTemplate_IsDirty && OnCodeTemplate_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnCodeTemplate_Getter(this, __e);
                    _CodeTemplate_IsDirty = false;
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_CodeTemplate != value)
                {
                    var __oldValue = _CodeTemplate;
                    var __newValue = value;
                    NotifyPropertyChanging("CodeTemplate", __oldValue, __newValue);
                    _CodeTemplate = __newValue;
                    NotifyPropertyChanged("CodeTemplate", __oldValue, __newValue);
			        _CodeTemplate_IsDirty = false;

                }
				else 
				{
					SetInitializedProperty("CodeTemplate");
				}
            }
        }
        private string _CodeTemplate;
        private bool _CodeTemplate_IsDirty = false;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Method, string> OnCodeTemplate_Getter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Method> OnCodeTemplate_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
    /*
    Relation: FK_Method_was_CreatedBy
    A: ZeroOrMore Method as Method
    B: ZeroOrOne Identity as CreatedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Kistl.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_CreatedBy;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Method_was_CreatedBy", "CreatedBy")]
        public Kistl.App.Base.IdentityEfImpl CreatedByImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.IdentityEfImpl __value;
                EntityReference<Kistl.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>(
                        "Model.FK_Method_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>(
                        "Model.FK_Method_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.IdentityEfImpl __oldValue = (Kistl.App.Base.IdentityEfImpl)r.Value;
                Kistl.App.Base.IdentityEfImpl __newValue = (Kistl.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("CreatedBy", null, __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityEfImpl)e.Result;
                }

                r.Value = (Kistl.App.Base.IdentityEfImpl)__newValue;

                if (OnCreatedBy_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("CreatedBy", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Kistl.App.Base.Method, Kistl.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Method, Kistl.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Method, Kistl.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Method> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime CreatedOn
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(DateTime);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("4bfb09a2-bcd3-4983-b57d-d1bfcf15a343"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Method.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("CreatedOn");
				}
            }
        }
        private DateTime _CreatedOn;
        private bool _isCreatedOnSet = false;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Method, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Method, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Method, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Method> OnCreatedOn_IsValid;

        /// <summary>
        /// Description of this Method
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Description
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);

                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("Description");
				}
            }
        }
        private string _Description;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Method, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Method, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Method, string> OnDescription_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Method> OnDescription_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("842eb3fc-3c8f-47d6-a59f-225c75ec2439"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Method.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }
        private Guid _ExportGuid;
        private bool _isExportGuidSet = false;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Method, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Method, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Method, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Method> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_Method_has_Icon
    A: ZeroOrMore Method as Method
    B: ZeroOrOne Icon as Icon
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Icon
        // fkBackingName=_fk_Icon; fkGuidBackingName=_fk_guid_Icon;
        // referencedInterface=Kistl.App.GUI.Icon; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Icon Icon
        {
            get { return IconImpl; }
            set { IconImpl = (Kistl.App.GUI.IconEfImpl)value; }
        }

        private int? _fk_Icon;

        private Guid? _fk_guid_Icon = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Method_has_Icon", "Icon")]
        public Kistl.App.GUI.IconEfImpl IconImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.IconEfImpl __value;
                EntityReference<Kistl.App.GUI.IconEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.IconEfImpl>(
                        "Model.FK_Method_has_Icon",
                        "Icon");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnIcon_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.Icon>(__value);
                    OnIcon_Getter(this, e);
                    __value = (Kistl.App.GUI.IconEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.IconEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.IconEfImpl>(
                        "Model.FK_Method_has_Icon",
                        "Icon");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.IconEfImpl __oldValue = (Kistl.App.GUI.IconEfImpl)r.Value;
                Kistl.App.GUI.IconEfImpl __newValue = (Kistl.App.GUI.IconEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("Icon", null, __oldValue, __newValue);

                if (OnIcon_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.Icon>(__oldValue, __newValue);
                    OnIcon_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.IconEfImpl)e.Result;
                }

                r.Value = (Kistl.App.GUI.IconEfImpl)__newValue;

                if (OnIcon_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.Icon>(__oldValue, __newValue);
                    OnIcon_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("Icon", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Icon
		public static event PropertyGetterHandler<Kistl.App.Base.Method, Kistl.App.GUI.Icon> OnIcon_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Method, Kistl.App.GUI.Icon> OnIcon_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Method, Kistl.App.GUI.Icon> OnIcon_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Method> OnIcon_IsValid;

        /// <summary>
        /// Method will be invoked on server if true
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool? InvokeOnServer
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _InvokeOnServer;
                if (OnInvokeOnServer_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnInvokeOnServer_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_InvokeOnServer != value)
                {
                    var __oldValue = _InvokeOnServer;
                    var __newValue = value;
                    if (OnInvokeOnServer_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnInvokeOnServer_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("InvokeOnServer", __oldValue, __newValue);
                    _InvokeOnServer = __newValue;
                    NotifyPropertyChanged("InvokeOnServer", __oldValue, __newValue);

                    if (OnInvokeOnServer_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnInvokeOnServer_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("InvokeOnServer");
				}
            }
        }
        private bool? _InvokeOnServer;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Method, bool?> OnInvokeOnServer_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Method, bool?> OnInvokeOnServer_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Method, bool?> OnInvokeOnServer_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Method> OnInvokeOnServer_IsValid;

        /// <summary>
        /// Shows this Method in th GUI
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool IsDisplayable
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsDisplayable;
                if (OnIsDisplayable_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsDisplayable_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_IsDisplayable != value)
                {
                    var __oldValue = _IsDisplayable;
                    var __newValue = value;
                    if (OnIsDisplayable_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsDisplayable_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsDisplayable", __oldValue, __newValue);
                    _IsDisplayable = __newValue;
                    NotifyPropertyChanged("IsDisplayable", __oldValue, __newValue);

                    if (OnIsDisplayable_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsDisplayable_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("IsDisplayable");
				}
            }
        }
        private bool _IsDisplayable;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Method, bool> OnIsDisplayable_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Method, bool> OnIsDisplayable_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Method, bool> OnIsDisplayable_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Method> OnIsDisplayable_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Label
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Label;
                if (OnLabel_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnLabel_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Label != value)
                {
                    var __oldValue = _Label;
                    var __newValue = value;
                    if (OnLabel_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnLabel_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Label", __oldValue, __newValue);
                    _Label = __newValue;
                    NotifyPropertyChanged("Label", __oldValue, __newValue);

                    if (OnLabel_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnLabel_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("Label");
				}
            }
        }
        private string _Label;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Method, string> OnLabel_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Method, string> OnLabel_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Method, string> OnLabel_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Method> OnLabel_IsValid;

        /// <summary>
        /// Zugehörig zum Modul
        /// </summary>
    /*
    Relation: FK_Method_has_Module
    A: ZeroOrMore Method as Method
    B: One Module as Module
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=_fk_Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Kistl.App.Base.Module; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Module Module
        {
            get { return ModuleImpl; }
            set { ModuleImpl = (Kistl.App.Base.ModuleEfImpl)value; }
        }

        private int? _fk_Module;

        private Guid? _fk_guid_Module = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Method_has_Module", "Module")]
        public Kistl.App.Base.ModuleEfImpl ModuleImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.ModuleEfImpl __value;
                EntityReference<Kistl.App.Base.ModuleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.ModuleEfImpl>(
                        "Model.FK_Method_has_Module",
                        "Module");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Module>(__value);
                    OnModule_Getter(this, e);
                    __value = (Kistl.App.Base.ModuleEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.ModuleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.ModuleEfImpl>(
                        "Model.FK_Method_has_Module",
                        "Module");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.ModuleEfImpl __oldValue = (Kistl.App.Base.ModuleEfImpl)r.Value;
                Kistl.App.Base.ModuleEfImpl __newValue = (Kistl.App.Base.ModuleEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("Module", null, __oldValue, __newValue);

                if (OnModule_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.ModuleEfImpl)e.Result;
                }

                r.Value = (Kistl.App.Base.ModuleEfImpl)__newValue;

                if (OnModule_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("Module", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Kistl.App.Base.Method, Kistl.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Method, Kistl.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Method, Kistl.App.Base.Module> OnModule_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Method> OnModule_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Name
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("Name");
				}
            }
        }
        private string _Name;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Method, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Method, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Method, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Method> OnName_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_ObjectClass_has_Methods
    A: One DataType as ObjectClass
    B: ZeroOrMore Method as Methods
    Preferred Storage: MergeIntoB
    */
        // object reference property
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ObjectClass
        // fkBackingName=_fk_ObjectClass; fkGuidBackingName=_fk_guid_ObjectClass;
        // referencedInterface=Kistl.App.Base.DataType; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=Methods; is list;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.DataType ObjectClass
        {
            get { return ObjectClassImpl; }
            set { ObjectClassImpl = (Kistl.App.Base.DataTypeEfImpl)value; }
        }

        private int? _fk_ObjectClass;

        private Guid? _fk_guid_ObjectClass = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ObjectClass_has_Methods", "ObjectClass")]
        public Kistl.App.Base.DataTypeEfImpl ObjectClassImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.DataTypeEfImpl __value;
                EntityReference<Kistl.App.Base.DataTypeEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.DataTypeEfImpl>(
                        "Model.FK_ObjectClass_has_Methods",
                        "ObjectClass");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                if (OnObjectClass_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.DataType>(__value);
                    OnObjectClass_Getter(this, e);
                    __value = (Kistl.App.Base.DataTypeEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.DataTypeEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.DataTypeEfImpl>(
                        "Model.FK_ObjectClass_has_Methods",
                        "ObjectClass");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.DataTypeEfImpl __oldValue = (Kistl.App.Base.DataTypeEfImpl)r.Value;
                Kistl.App.Base.DataTypeEfImpl __newValue = (Kistl.App.Base.DataTypeEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("ObjectClass", null, __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("Methods", null, null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("Methods", null, null, null);
                }

                if (OnObjectClass_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.DataType>(__oldValue, __newValue);
                    OnObjectClass_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.DataTypeEfImpl)e.Result;
                }

                r.Value = (Kistl.App.Base.DataTypeEfImpl)__newValue;

                if (OnObjectClass_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.DataType>(__oldValue, __newValue);
                    OnObjectClass_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("ObjectClass", null, __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("Methods", null, null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("Methods", null, null, null);
                }
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ObjectClass
		public static event PropertyGetterHandler<Kistl.App.Base.Method, Kistl.App.Base.DataType> OnObjectClass_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Method, Kistl.App.Base.DataType> OnObjectClass_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Method, Kistl.App.Base.DataType> OnObjectClass_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Method> OnObjectClass_IsValid;

        /// <summary>
        /// Parameter der Methode
        /// </summary>
    /*
    Relation: FK_Method_has_Parameter
    A: One Method as Method
    B: ZeroOrMore BaseParameter as Parameter
    Preferred Storage: MergeIntoB
    */
        // object list property
        // object list property
           // Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public IList<Kistl.App.Base.BaseParameter> Parameter
        {
            get
            {
                if (_Parameter == null)
                {
                    _Parameter = new EntityListWrapper<Kistl.App.Base.BaseParameter, Kistl.App.Base.BaseParameterEfImpl>(
                            this.Context, ParameterImpl,
                            () => this.NotifyPropertyChanging("Parameter", null, null, null),
                            () => { this.NotifyPropertyChanged("Parameter", null, null, null); if(OnParameter_PostSetter != null && IsAttached) OnParameter_PostSetter(this); },
                            (item) => item.NotifyPropertyChanging("Method", null, null, null),
                            (item) => item.NotifyPropertyChanged("Method", null, null, null), "Method", "Parameter_pos");
                }
                return _Parameter;
            }
        }
    
        [EdmRelationshipNavigationProperty("Model", "FK_Method_has_Parameter", "Parameter")]
        public EntityCollection<Kistl.App.Base.BaseParameterEfImpl> ParameterImpl
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Kistl.App.Base.BaseParameterEfImpl>(
                        "Model.FK_Method_has_Parameter",
                        "Parameter");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                c.ForEach(i => i.AttachToContext(Context));
                return c;
            }
        }
        private EntityListWrapper<Kistl.App.Base.BaseParameter, Kistl.App.Base.BaseParameterEfImpl> _Parameter;


public static event PropertyListChangedHandler<Kistl.App.Base.Method> OnParameter_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Method> OnParameter_IsValid;

        /// <summary>
        /// This method is show by these properties
        /// </summary>
    /*
    Relation: FK_ObjRefProp_shows_Methods
    A: ZeroOrMore ObjectReferenceProperty as ObjRefProp
    B: ZeroOrMore Method as Methods
    Preferred Storage: Separate
    */
        // collection reference property
        // Kistl.DalProvider.Ef.Generator.Templates.Properties.CollectionEntryListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Base.ObjectReferenceProperty> ShowByProperties
        {
            get
            {
                if (_ShowByProperties == null)
                {
                    _ShowByProperties = new ASideCollectionWrapper<Kistl.App.Base.ObjectReferenceProperty, Kistl.App.Base.Method, Kistl.App.GUI.ObjectReferenceProperty_shows_Method_RelationEntryEfImpl, EntityCollection<Kistl.App.GUI.ObjectReferenceProperty_shows_Method_RelationEntryEfImpl>>(
                            this,
                            ShowByPropertiesImpl);
                }
                return _ShowByProperties;
            }
        }
        
        [EdmRelationshipNavigationProperty("Model", "FK_ObjRefProp_shows_Methods_B", "CollectionEntry")]
        public EntityCollection<Kistl.App.GUI.ObjectReferenceProperty_shows_Method_RelationEntryEfImpl> ShowByPropertiesImpl
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Kistl.App.GUI.ObjectReferenceProperty_shows_Method_RelationEntryEfImpl>(
                        "Model.FK_ObjRefProp_shows_Methods_B",
                        "CollectionEntry");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                c.ForEach(i => i.AttachToContext(Context));
                return c;
            }
        }
        private ASideCollectionWrapper<Kistl.App.Base.ObjectReferenceProperty, Kistl.App.Base.Method, Kistl.App.GUI.ObjectReferenceProperty_shows_Method_RelationEntryEfImpl, EntityCollection<Kistl.App.GUI.ObjectReferenceProperty_shows_Method_RelationEntryEfImpl>> _ShowByProperties;

        public static event PropertyIsValidHandler<Kistl.App.Base.Method> OnShowByProperties_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetLabel_Method")]
        public virtual string GetLabel()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetLabel_Method != null)
            {
                OnGetLabel_Method(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Method.GetLabel");
            }
            return e.Result;
        }
        public delegate void GetLabel_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetLabel_Handler<Method> OnGetLabel_Method;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Method> OnGetLabel_Method_CanExec;

        [EventBasedMethod("OnGetLabel_Method_CanExec")]
        public virtual bool GetLabelCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetLabel_Method_CanExec != null)
				{
					OnGetLabel_Method_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Method> OnGetLabel_Method_CanExecReason;

        [EventBasedMethod("OnGetLabel_Method_CanExecReason")]
        public virtual string GetLabelCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetLabel_Method_CanExecReason != null)
				{
					OnGetLabel_Method_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the Return Parameter Meta Object of this Method Meta Object.
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetReturnParameter_Method")]
        public virtual Kistl.App.Base.BaseParameter GetReturnParameter()
        {
            var e = new MethodReturnEventArgs<Kistl.App.Base.BaseParameter>();
            if (OnGetReturnParameter_Method != null)
            {
                OnGetReturnParameter_Method(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Method.GetReturnParameter");
            }
            return e.Result;
        }
        public delegate void GetReturnParameter_Handler<T>(T obj, MethodReturnEventArgs<Kistl.App.Base.BaseParameter> ret);
        public static event GetReturnParameter_Handler<Method> OnGetReturnParameter_Method;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Method> OnGetReturnParameter_Method_CanExec;

        [EventBasedMethod("OnGetReturnParameter_Method_CanExec")]
        public virtual bool GetReturnParameterCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetReturnParameter_Method_CanExec != null)
				{
					OnGetReturnParameter_Method_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Method> OnGetReturnParameter_Method_CanExecReason;

        [EventBasedMethod("OnGetReturnParameter_Method_CanExecReason")]
        public virtual string GetReturnParameterCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetReturnParameter_Method_CanExecReason != null)
				{
					OnGetReturnParameter_Method_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(Method);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Method)obj;
            var otherImpl = (MethodEfImpl)obj;
            var me = (Method)this;

            me.CategoryTags = other.CategoryTags;
            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.InvokeOnServer = other.InvokeOnServer;
            me.IsDisplayable = other.IsDisplayable;
            me.Label = other.Label;
            me.Name = other.Name;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_Icon = otherImpl._fk_Icon;
            this._fk_Module = otherImpl._fk_Module;
            this._fk_ObjectClass = otherImpl._fk_ObjectClass;
        }

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }
        #region Kistl.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "CategoryTags":
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "Description":
                case "ExportGuid":
                case "Icon":
                case "InvokeOnServer":
                case "IsDisplayable":
                case "Label":
                case "Module":
                case "Name":
                case "ObjectClass":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        public override void Recalculate(string property)
        {
            switch (property)
            {
                case "CodeTemplate":
                    _CodeTemplate_IsDirty = true;
                    NotifyPropertyChanged(property, null, null);
                    return;
            }

            base.Recalculate(property);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.OnPropertyChange

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Kistl.App.Base.IdentityEfImpl)Context.Find<Kistl.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Kistl.App.Base.IdentityEfImpl)Context.Find<Kistl.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;

            if (_fk_guid_Icon.HasValue)
                IconImpl = (Kistl.App.GUI.IconEfImpl)Context.FindPersistenceObject<Kistl.App.GUI.Icon>(_fk_guid_Icon.Value);
            else
            if (_fk_Icon.HasValue)
                IconImpl = (Kistl.App.GUI.IconEfImpl)Context.Find<Kistl.App.GUI.Icon>(_fk_Icon.Value);
            else
                IconImpl = null;

            if (_fk_guid_Module.HasValue)
                ModuleImpl = (Kistl.App.Base.ModuleEfImpl)Context.FindPersistenceObject<Kistl.App.Base.Module>(_fk_guid_Module.Value);
            else
            if (_fk_Module.HasValue)
                ModuleImpl = (Kistl.App.Base.ModuleEfImpl)Context.Find<Kistl.App.Base.Module>(_fk_Module.Value);
            else
                ModuleImpl = null;

            if (_fk_guid_ObjectClass.HasValue)
                ObjectClassImpl = (Kistl.App.Base.DataTypeEfImpl)Context.FindPersistenceObject<Kistl.App.Base.DataType>(_fk_guid_ObjectClass.Value);
            else
            if (_fk_ObjectClass.HasValue)
                ObjectClassImpl = (Kistl.App.Base.DataTypeEfImpl)Context.Find<Kistl.App.Base.DataType>(_fk_ObjectClass.Value);
            else
                ObjectClassImpl = null;
        }
        #region Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorEfImpl<Method, string>(
                        lazyCtx,
                        new Guid("d984fab4-5b62-4a5d-af6a-98cde8337729"),
                        "CategoryTags",
                        null,
                        obj => obj.CategoryTags,
                        (obj, val) => obj.CategoryTags = val,
						obj => OnCategoryTags_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Method, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("2a7c5b69-437a-46f5-8d9f-b055c81ebada"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Method, DateTime>(
                        lazyCtx,
                        new Guid("3df96dd2-8cfa-4b37-bf19-792d8c3fc90d"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Method, string>(
                        lazyCtx,
                        new Guid("8ecc7baa-79b3-4dee-bd5b-2136b27f162e"),
                        "CodeTemplate",
                        null,
                        obj => obj.CodeTemplate,
                        null, // calculated property
						obj => OnCodeTemplate_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Method, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("b1c88012-ceb1-48b2-812b-454a1d5205cb"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Method, DateTime>(
                        lazyCtx,
                        new Guid("4bfb09a2-bcd3-4983-b57d-d1bfcf15a343"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Method, string>(
                        lazyCtx,
                        new Guid("cbf27789-e98f-4d9f-88e9-f3ff89e8c952"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val,
						obj => OnDescription_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Method, Guid>(
                        lazyCtx,
                        new Guid("842eb3fc-3c8f-47d6-a59f-225c75ec2439"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Method, Kistl.App.GUI.Icon>(
                        lazyCtx,
                        new Guid("82a3f85f-aa39-4309-a83c-aa5b073a6887"),
                        "Icon",
                        null,
                        obj => obj.Icon,
                        (obj, val) => obj.Icon = val,
						obj => OnIcon_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Method, bool?>(
                        lazyCtx,
                        new Guid("1bd6290d-2f38-4cc0-96b9-83a0b00c951b"),
                        "InvokeOnServer",
                        null,
                        obj => obj.InvokeOnServer,
                        (obj, val) => obj.InvokeOnServer = val,
						obj => OnInvokeOnServer_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Method, bool>(
                        lazyCtx,
                        new Guid("5ac29d6a-9dec-4d88-8f66-59ee7a139f4d"),
                        "IsDisplayable",
                        null,
                        obj => obj.IsDisplayable,
                        (obj, val) => obj.IsDisplayable = val,
						obj => OnIsDisplayable_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Method, string>(
                        lazyCtx,
                        new Guid("4ce1447d-5ba3-40a9-b665-a435c7a028aa"),
                        "Label",
                        null,
                        obj => obj.Label,
                        (obj, val) => obj.Label = val,
						obj => OnLabel_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Method, Kistl.App.Base.Module>(
                        lazyCtx,
                        new Guid("51640f6f-b2ae-4f26-915e-fda5a2c060a6"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val,
						obj => OnModule_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Method, string>(
                        lazyCtx,
                        new Guid("88de8421-488e-452e-8289-33074054b22f"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Method, Kistl.App.Base.DataType>(
                        lazyCtx,
                        new Guid("9afc74a4-4eeb-4c39-879c-eacc8f369fa7"),
                        "ObjectClass",
                        null,
                        obj => obj.ObjectClass,
                        (obj, val) => obj.ObjectClass = val,
						obj => OnObjectClass_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<Method, IList<Kistl.App.Base.BaseParameter>>(
                        lazyCtx,
                        new Guid("8dace0a9-6db1-458d-b054-ace4a3d906c2"),
                        "Parameter",
                        null,
                        obj => obj.Parameter,
                        null, // lists are read-only properties
                        obj => OnParameter_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<Method, ICollection<Kistl.App.Base.ObjectReferenceProperty>>(
                        lazyCtx,
                        new Guid("f062792d-757f-4c39-bdb1-1cc81d063595"),
                        "ShowByProperties",
                        null,
                        obj => obj.ShowByProperties,
                        null, // lists are read-only properties
                        obj => OnShowByProperties_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Method")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Method != null)
            {
                OnToString_Method(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Method> OnToString_Method;

		[System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_Method")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
			var b = base.ObjectIsValid();
            e.IsValid = b.IsValid;
			e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_Method != null)
            {
                OnObjectIsValid_Method(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<Method> OnObjectIsValid_Method;

        [EventBasedMethod("OnNotifyPreSave_Method")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_Method != null) OnNotifyPreSave_Method(this);
        }
        public static event ObjectEventHandler<Method> OnNotifyPreSave_Method;

        [EventBasedMethod("OnNotifyPostSave_Method")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_Method != null) OnNotifyPostSave_Method(this);
        }
        public static event ObjectEventHandler<Method> OnNotifyPostSave_Method;

        [EventBasedMethod("OnNotifyCreated_Method")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("CategoryTags");
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CodeTemplate");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("Description");
            SetNotInitializedProperty("Icon");
            SetNotInitializedProperty("InvokeOnServer");
            SetNotInitializedProperty("IsDisplayable");
            SetNotInitializedProperty("Label");
            SetNotInitializedProperty("Module");
            SetNotInitializedProperty("Name");
            SetNotInitializedProperty("ObjectClass");
            _CodeTemplate_IsDirty = true;
            base.NotifyCreated();
            if (OnNotifyCreated_Method != null) OnNotifyCreated_Method(this);
        }
        public static event ObjectEventHandler<Method> OnNotifyCreated_Method;

        [EventBasedMethod("OnNotifyDeleting_Method")]
        public override void NotifyDeleting()
        {
            Parameter.Clear();
            ShowByProperties.Clear();
            ChangedBy = null;
            CreatedBy = null;
            Icon = null;
            base.NotifyDeleting();
            if (OnNotifyDeleting_Method != null) OnNotifyDeleting_Method(this);
        }
        public static event ObjectEventHandler<Method> OnNotifyDeleting_Method;

        #endregion // Kistl.Generator.Templates.ObjectClasses.DefaultMethods
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);

                }
				else 
				{
					SetInitializedProperty("ID");
				}
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this._CategoryTags, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>("Model.FK_Method_was_ChangedBy", "ChangedBy").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                BinarySerializer.ToStream(this._ChangedOn, binStream);
            }
            BinarySerializer.ToStream(this._CodeTemplate, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>("Model.FK_Method_was_CreatedBy", "CreatedBy").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                BinarySerializer.ToStream(this._CreatedOn, binStream);
            }
            BinarySerializer.ToStream(this._Description, binStream);
            BinarySerializer.ToStream(this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.ToStream(this._ExportGuid, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.IconEfImpl>("Model.FK_Method_has_Icon", "Icon").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._InvokeOnServer, binStream);
            BinarySerializer.ToStream(this._IsDisplayable, binStream);
            BinarySerializer.ToStream(this._Label, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.ModuleEfImpl>("Model.FK_Method_has_Module", "Module").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._Name, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.DataTypeEfImpl>("Model.FK_ObjectClass_has_Methods", "ObjectClass").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._CategoryTags, binStream);
            BinarySerializer.FromStream(out this._fk_ChangedBy, binStream);
            BinarySerializer.FromStream(out this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                BinarySerializer.FromStream(out this._ChangedOn, binStream);
            }
            BinarySerializer.FromStream(out this._CodeTemplate, binStream);
            BinarySerializer.FromStream(out this._fk_CreatedBy, binStream);
            BinarySerializer.FromStream(out this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                BinarySerializer.FromStream(out this._CreatedOn, binStream);
            }
            BinarySerializer.FromStream(out this._Description, binStream);
            BinarySerializer.FromStream(out this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.FromStream(out this._ExportGuid, binStream);
            }
            BinarySerializer.FromStream(out this._fk_Icon, binStream);
            BinarySerializer.FromStream(out this._InvokeOnServer, binStream);
            BinarySerializer.FromStream(out this._IsDisplayable, binStream);
            BinarySerializer.FromStream(out this._Label, binStream);
            BinarySerializer.FromStream(out this._fk_Module, binStream);
            BinarySerializer.FromStream(out this._Name, binStream);
            BinarySerializer.FromStream(out this._fk_ObjectClass, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this._CategoryTags, xml, "CategoryTags", "Kistl.App.Base");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>("Model.FK_Method_was_ChangedBy", "ChangedBy").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "ChangedBy", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(this._isChangedOnSet, xml, "IsChangedOnSet", "Kistl.App.Base");
            if (this._isChangedOnSet) {
                XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(this._CodeTemplate, xml, "CodeTemplate", "Kistl.App.Base");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>("Model.FK_Method_was_CreatedBy", "CreatedBy").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "CreatedBy", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(this._isCreatedOnSet, xml, "IsCreatedOnSet", "Kistl.App.Base");
            if (this._isCreatedOnSet) {
                XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(this._Description, xml, "Description", "Kistl.App.Base");
            XmlStreamer.ToStream(this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.Base");
            if (this._isExportGuidSet) {
                XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "Kistl.App.Base");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.IconEfImpl>("Model.FK_Method_has_Icon", "Icon").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "Icon", "Kistl.App.GUI");
            }
            XmlStreamer.ToStream(this._InvokeOnServer, xml, "InvokeOnServer", "Kistl.App.Base");
            XmlStreamer.ToStream(this._IsDisplayable, xml, "IsDisplayable", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._Label, xml, "Label", "Kistl.App.Base");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.ModuleEfImpl>("Model.FK_Method_has_Module", "Module").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "Module", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(this._Name, xml, "Name", "Kistl.App.Base");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.DataTypeEfImpl>("Model.FK_ObjectClass_has_Methods", "ObjectClass").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "ObjectClass", "Kistl.App.Base");
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._CategoryTags, xml, "CategoryTags", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_ChangedBy, xml, "ChangedBy", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._isChangedOnSet, xml, "IsChangedOnSet", "Kistl.App.Base");
            if (this._isChangedOnSet) {
                XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            }
            XmlStreamer.FromStream(ref this._CodeTemplate, xml, "CodeTemplate", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_CreatedBy, xml, "CreatedBy", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._isCreatedOnSet, xml, "IsCreatedOnSet", "Kistl.App.Base");
            if (this._isCreatedOnSet) {
                XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            }
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.Base");
            if (this._isExportGuidSet) {
                XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "Kistl.App.Base");
            }
            XmlStreamer.FromStream(ref this._fk_Icon, xml, "Icon", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._InvokeOnServer, xml, "InvokeOnServer", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._IsDisplayable, xml, "IsDisplayable", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._Label, xml, "Label", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_Module, xml, "Module", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._Name, xml, "Name", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_ObjectClass, xml, "ObjectClass", "Kistl.App.Base");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._CategoryTags, xml, "CategoryTags", "Kistl.App.Base");
            System.Diagnostics.Debug.Assert(this._isChangedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._CodeTemplate, xml, "CodeTemplate", "Kistl.App.Base");
            System.Diagnostics.Debug.Assert(this._isCreatedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._Description, xml, "Description", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(Icon != null ? Icon.ExportGuid : (Guid?)null, xml, "Icon", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._InvokeOnServer, xml, "InvokeOnServer", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._IsDisplayable, xml, "IsDisplayable", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._Label, xml, "Label", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(Module != null ? Module.ExportGuid : (Guid?)null, xml, "Module", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._Name, xml, "Name", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(ObjectClass != null ? ObjectClass.ExportGuid : (Guid?)null, xml, "ObjectClass", "Kistl.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.FromStream(ref this._CategoryTags, xml, "CategoryTags", "Kistl.App.Base");
            // Import must have default value set
            XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            this._isChangedOnSet = true;
            XmlStreamer.FromStream(ref this._CodeTemplate, xml, "CodeTemplate", "Kistl.App.Base");
            // Import must have default value set
            XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            this._isCreatedOnSet = true;
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "Kistl.App.Base");
            // Import must have default value set
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "Kistl.App.Base");
            this._isExportGuidSet = true;
            XmlStreamer.FromStream(ref this._fk_guid_Icon, xml, "Icon", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._InvokeOnServer, xml, "InvokeOnServer", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._IsDisplayable, xml, "IsDisplayable", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._Label, xml, "Label", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_guid_Module, xml, "Module", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._Name, xml, "Name", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_guid_ObjectClass, xml, "ObjectClass", "Kistl.App.Base");
        }

        #endregion

    }
}