// <autogenerated/>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using System.Xml.Serialization;
using System.Linq;

using Kistl.API;
using Kistl.DalProvider.Base.RelationWrappers;
using Kistl.API.Server;
using Kistl.DalProvider.Ef;
using System.Data.Objects;
using System.Data.Objects.DataClasses;

namespace Kistl.App.Base
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryEfImpl")]
    public class CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<Kistl.App.Base.CalculatedObjectReferenceProperty, Kistl.App.Base.CalculatedObjectReferencePropertyEfImpl, Kistl.App.Base.Property, Kistl.App.Base.PropertyEfImpl>, CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable
    {
        [Obsolete]
        public CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryEfImpl()
            : base(null)
        {
        }

        public CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("47595643-e8d0-48ef-82c7-2d24de8a784e");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Kistl.App.Base.CalculatedObjectReferenceProperty)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.Base.Property)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Kistl.App.Base.CalculatedObjectReferenceProperty; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.CalculatedObjectReferenceProperty A
        {
            get { return AImpl; }
            set { AImpl = (Kistl.App.Base.CalculatedObjectReferencePropertyEfImpl)value; }
        }

        private int? _fk_A;

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_CalculatedReference_dependsOn_InputProperties_A", "CalculatedReference")]
        public Kistl.App.Base.CalculatedObjectReferencePropertyEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.CalculatedObjectReferencePropertyEfImpl __value;
                EntityReference<Kistl.App.Base.CalculatedObjectReferencePropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.CalculatedObjectReferencePropertyEfImpl>(
                        "Model.FK_CalculatedReference_dependsOn_InputProperties_A",
                        "CalculatedReference");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.CalculatedObjectReferencePropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.CalculatedObjectReferencePropertyEfImpl>(
                        "Model.FK_CalculatedReference_dependsOn_InputProperties_A",
                        "CalculatedReference");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.CalculatedObjectReferencePropertyEfImpl __oldValue = (Kistl.App.Base.CalculatedObjectReferencePropertyEfImpl)r.Value;
                Kistl.App.Base.CalculatedObjectReferencePropertyEfImpl __newValue = (Kistl.App.Base.CalculatedObjectReferencePropertyEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.CalculatedObjectReferencePropertyEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.Base.Property; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Property B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.Base.PropertyEfImpl)value; }
        }

        private int? _fk_B;

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_CalculatedReference_dependsOn_InputProperties_B", "InputProperties")]
        public Kistl.App.Base.PropertyEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.PropertyEfImpl __value;
                EntityReference<Kistl.App.Base.PropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.PropertyEfImpl>(
                        "Model.FK_CalculatedReference_dependsOn_InputProperties_B",
                        "InputProperties");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.PropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.PropertyEfImpl>(
                        "Model.FK_CalculatedReference_dependsOn_InputProperties_B",
                        "InputProperties");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.PropertyEfImpl __oldValue = (Kistl.App.Base.PropertyEfImpl)r.Value;
                Kistl.App.Base.PropertyEfImpl __newValue = (Kistl.App.Base.PropertyEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.PropertyEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.CalculatedObjectReferencePropertyEfImpl>("Model.FK_CalculatedReference_dependsOn_InputProperties_A", "CalculatedReference").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
			if (auxObjects != null) {
				auxObjects.Add(A);
			}
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.PropertyEfImpl>("Model.FK_CalculatedReference_dependsOn_InputProperties_B", "InputProperties").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.CalculatedObjectReferencePropertyEfImpl>("Model.FK_CalculatedReference_dependsOn_InputProperties_A", "CalculatedReference").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "Kistl.App.Base");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.PropertyEfImpl>("Model.FK_CalculatedReference_dependsOn_InputProperties_B", "InputProperties").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "Kistl.App.Base");
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Base");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.Base");
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryEfImpl)obj;
            var me = (CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Kistl.App.Base.CalculatedObjectReferencePropertyEfImpl)Context.FindPersistenceObject<Kistl.App.Base.CalculatedObjectReferenceProperty>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Kistl.App.Base.CalculatedObjectReferencePropertyEfImpl)Context.Find<Kistl.App.Base.CalculatedObjectReferenceProperty>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Kistl.App.Base.PropertyEfImpl)Context.FindPersistenceObject<Kistl.App.Base.Property>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Kistl.App.Base.PropertyEfImpl)Context.Find<Kistl.App.Base.Property>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Kistl.App.Base
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="DataType_implements_Interface_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("DataType_implements_Interface_RelationEntryEfImpl")]
    public class DataType_implements_Interface_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<Kistl.App.Base.DataType, Kistl.App.Base.DataTypeEfImpl, Kistl.App.Base.Interface, Kistl.App.Base.InterfaceEfImpl>, DataType_implements_Interface_RelationEntry, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable
    {
        [Obsolete]
        public DataType_implements_Interface_RelationEntryEfImpl()
            : base(null)
        {
        }

        public DataType_implements_Interface_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("692c1064-37a2-4be3-a81e-4cb91f673aa3");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Kistl.App.Base.DataType)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.Base.Interface)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Kistl.App.Base.DataType; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.DataType A
        {
            get { return AImpl; }
            set { AImpl = (Kistl.App.Base.DataTypeEfImpl)value; }
        }

        private int? _fk_A;

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_DataType_implements_ImplementedInterfaces_A", "DataType")]
        public Kistl.App.Base.DataTypeEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.DataTypeEfImpl __value;
                EntityReference<Kistl.App.Base.DataTypeEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.DataTypeEfImpl>(
                        "Model.FK_DataType_implements_ImplementedInterfaces_A",
                        "DataType");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.DataTypeEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.DataTypeEfImpl>(
                        "Model.FK_DataType_implements_ImplementedInterfaces_A",
                        "DataType");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.DataTypeEfImpl __oldValue = (Kistl.App.Base.DataTypeEfImpl)r.Value;
                Kistl.App.Base.DataTypeEfImpl __newValue = (Kistl.App.Base.DataTypeEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.DataTypeEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.Base.Interface; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Interface B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.Base.InterfaceEfImpl)value; }
        }

        private int? _fk_B;

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_DataType_implements_ImplementedInterfaces_B", "ImplementedInterfaces")]
        public Kistl.App.Base.InterfaceEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.InterfaceEfImpl __value;
                EntityReference<Kistl.App.Base.InterfaceEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.InterfaceEfImpl>(
                        "Model.FK_DataType_implements_ImplementedInterfaces_B",
                        "ImplementedInterfaces");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.InterfaceEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.InterfaceEfImpl>(
                        "Model.FK_DataType_implements_ImplementedInterfaces_B",
                        "ImplementedInterfaces");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.InterfaceEfImpl __oldValue = (Kistl.App.Base.InterfaceEfImpl)r.Value;
                Kistl.App.Base.InterfaceEfImpl __newValue = (Kistl.App.Base.InterfaceEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.InterfaceEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.DataTypeEfImpl>("Model.FK_DataType_implements_ImplementedInterfaces_A", "DataType").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.InterfaceEfImpl>("Model.FK_DataType_implements_ImplementedInterfaces_B", "ImplementedInterfaces").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.DataTypeEfImpl>("Model.FK_DataType_implements_ImplementedInterfaces_A", "DataType").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "Kistl.App.Base");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.InterfaceEfImpl>("Model.FK_DataType_implements_ImplementedInterfaces_B", "ImplementedInterfaces").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "Kistl.App.Base");
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Base");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.Base");
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(DataType_implements_Interface_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (DataType_implements_Interface_RelationEntryEfImpl)obj;
            var me = (DataType_implements_Interface_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Kistl.App.Base.DataTypeEfImpl)Context.FindPersistenceObject<Kistl.App.Base.DataType>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Kistl.App.Base.DataTypeEfImpl)Context.Find<Kistl.App.Base.DataType>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Kistl.App.Base.InterfaceEfImpl)Context.FindPersistenceObject<Kistl.App.Base.Interface>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Kistl.App.Base.InterfaceEfImpl)Context.Find<Kistl.App.Base.Interface>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace at.dasz.DocumentManagement
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="Document_has_Blob_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("Document_has_Blob_RelationEntryEfImpl")]
    public class Document_has_Blob_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<at.dasz.DocumentManagement.Document, at.dasz.DocumentManagement.DocumentEfImpl, Kistl.App.Base.Blob, Kistl.App.Base.BlobEfImpl>, Document_has_Blob_RelationEntry, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable
    {
        [Obsolete]
        public Document_has_Blob_RelationEntryEfImpl()
            : base(null)
        {
        }

        public Document_has_Blob_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("69d27812-e981-443b-a94b-dfe1a95f3aad");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (at.dasz.DocumentManagement.Document)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.Base.Blob)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=at.dasz.DocumentManagement.Document; moduleNamespace=at.dasz.DocumentManagement;
        // inverse Navigator=none; is reference;
        // PositionStorage=A_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.DocumentManagement.Document A
        {
            get { return AImpl; }
            set { AImpl = (at.dasz.DocumentManagement.DocumentEfImpl)value; }
        }

        private int? _fk_A;

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Document_has_Revisions_A", "Document")]
        public at.dasz.DocumentManagement.DocumentEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                at.dasz.DocumentManagement.DocumentEfImpl __value;
                EntityReference<at.dasz.DocumentManagement.DocumentEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.DocumentManagement.DocumentEfImpl>(
                        "Model.FK_Document_has_Revisions_A",
                        "Document");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<at.dasz.DocumentManagement.DocumentEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.DocumentManagement.DocumentEfImpl>(
                        "Model.FK_Document_has_Revisions_A",
                        "Document");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                at.dasz.DocumentManagement.DocumentEfImpl __oldValue = (at.dasz.DocumentManagement.DocumentEfImpl)r.Value;
                at.dasz.DocumentManagement.DocumentEfImpl __newValue = (at.dasz.DocumentManagement.DocumentEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (at.dasz.DocumentManagement.DocumentEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? A_pos
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(int?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
                    var __oldValue = _A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    _A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _A_pos;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.Base.Blob; moduleNamespace=at.dasz.DocumentManagement;
        // inverse Navigator=none; is reference;
        // PositionStorage=B_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Blob B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.Base.BlobEfImpl)value; }
        }

        private int? _fk_B;

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Document_has_Revisions_B", "Revisions")]
        public Kistl.App.Base.BlobEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.BlobEfImpl __value;
                EntityReference<Kistl.App.Base.BlobEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.BlobEfImpl>(
                        "Model.FK_Document_has_Revisions_B",
                        "Revisions");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.BlobEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.BlobEfImpl>(
                        "Model.FK_Document_has_Revisions_B",
                        "Revisions");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.BlobEfImpl __oldValue = (Kistl.App.Base.BlobEfImpl)r.Value;
                Kistl.App.Base.BlobEfImpl __newValue = (Kistl.App.Base.BlobEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.BlobEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? B_pos
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(int?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
                    var __oldValue = _B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    _B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _B_pos;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
        public int? AIndex { get { return _A_pos; } set { _A_pos = value; } }

        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
        public int? BIndex { get { return _B_pos; } set { _B_pos = value; } }

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<at.dasz.DocumentManagement.DocumentEfImpl>("Model.FK_Document_has_Revisions_A", "Document").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._A_pos, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.BlobEfImpl>("Model.FK_Document_has_Revisions_B", "Revisions").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._B_pos, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            {
                var key = this.RelationshipManager.GetRelatedReference<at.dasz.DocumentManagement.DocumentEfImpl>("Model.FK_Document_has_Revisions_A", "Document").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "at.dasz.DocumentManagement");
            }
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.BlobEfImpl>("Model.FK_Document_has_Revisions_B", "Revisions").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "at.dasz.DocumentManagement");
            }
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "at.dasz.DocumentManagement");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "at.dasz.DocumentManagement");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "at.dasz.DocumentManagement");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "at.dasz.DocumentManagement");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "at.dasz.DocumentManagement");
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "at.dasz.DocumentManagement");
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "at.dasz.DocumentManagement");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "at.dasz.DocumentManagement");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "at.dasz.DocumentManagement");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "at.dasz.DocumentManagement");
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Document_has_Blob_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Document_has_Blob_RelationEntryEfImpl)obj;
            var me = (Document_has_Blob_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me.AIndex = other.AIndex;
            me._fk_B = other._fk_B;
            me.BIndex = other.BIndex;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (at.dasz.DocumentManagement.DocumentEfImpl)Context.FindPersistenceObject<at.dasz.DocumentManagement.Document>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (at.dasz.DocumentManagement.DocumentEfImpl)Context.Find<at.dasz.DocumentManagement.Document>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Kistl.App.Base.BlobEfImpl)Context.FindPersistenceObject<Kistl.App.Base.Blob>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Kistl.App.Base.BlobEfImpl)Context.Find<Kistl.App.Base.Blob>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Kistl.App.Base
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="Identity_memberOf_Group_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("Identity_memberOf_Group_RelationEntryEfImpl")]
    public class Identity_memberOf_Group_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<Kistl.App.Base.Identity, Kistl.App.Base.IdentityEfImpl, Kistl.App.Base.Group, Kistl.App.Base.GroupEfImpl>, Identity_memberOf_Group_RelationEntry
    {
        [Obsolete]
        public Identity_memberOf_Group_RelationEntryEfImpl()
            : base(null)
        {
        }

        public Identity_memberOf_Group_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("3efb7ae8-ba6b-40e3-9482-b45d1c101743");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Kistl.App.Base.Identity)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.Base.Group)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity A
        {
            get { return AImpl; }
            set { AImpl = (Kistl.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_A;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Identities_memberOf_Groups_A", "Identities")]
        public Kistl.App.Base.IdentityEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.IdentityEfImpl __value;
                EntityReference<Kistl.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>(
                        "Model.FK_Identities_memberOf_Groups_A",
                        "Identities");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>(
                        "Model.FK_Identities_memberOf_Groups_A",
                        "Identities");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.IdentityEfImpl __oldValue = (Kistl.App.Base.IdentityEfImpl)r.Value;
                Kistl.App.Base.IdentityEfImpl __newValue = (Kistl.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.IdentityEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.Base.Group; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Group B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.Base.GroupEfImpl)value; }
        }

        private int? _fk_B;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Identities_memberOf_Groups_B", "Groups")]
        public Kistl.App.Base.GroupEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.GroupEfImpl __value;
                EntityReference<Kistl.App.Base.GroupEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.GroupEfImpl>(
                        "Model.FK_Identities_memberOf_Groups_B",
                        "Groups");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.GroupEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.GroupEfImpl>(
                        "Model.FK_Identities_memberOf_Groups_B",
                        "Groups");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.GroupEfImpl __oldValue = (Kistl.App.Base.GroupEfImpl)r.Value;
                Kistl.App.Base.GroupEfImpl __newValue = (Kistl.App.Base.GroupEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.GroupEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>("Model.FK_Identities_memberOf_Groups_A", "Identities").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.GroupEfImpl>("Model.FK_Identities_memberOf_Groups_B", "Groups").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.IdentityEfImpl>("Model.FK_Identities_memberOf_Groups_A", "Identities").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "Kistl.App.Base");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.GroupEfImpl>("Model.FK_Identities_memberOf_Groups_B", "Groups").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "Kistl.App.Base");
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Base");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Identity_memberOf_Group_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Identity_memberOf_Group_RelationEntryEfImpl)obj;
            var me = (Identity_memberOf_Group_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                AImpl = (Kistl.App.Base.IdentityEfImpl)Context.Find<Kistl.App.Base.Identity>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_B.HasValue)
                BImpl = (Kistl.App.Base.GroupEfImpl)Context.Find<Kistl.App.Base.Group>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Kistl.App.Base
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="IndexConstraint_ensures_unique_on_Property_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("IndexConstraint_ensures_unique_on_Property_RelationEntryEfImpl")]
    public class IndexConstraint_ensures_unique_on_Property_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<Kistl.App.Base.IndexConstraint, Kistl.App.Base.IndexConstraintEfImpl, Kistl.App.Base.Property, Kistl.App.Base.PropertyEfImpl>, IndexConstraint_ensures_unique_on_Property_RelationEntry, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable
    {
        [Obsolete]
        public IndexConstraint_ensures_unique_on_Property_RelationEntryEfImpl()
            : base(null)
        {
        }

        public IndexConstraint_ensures_unique_on_Property_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("29235ba6-5979-4ed8-8e75-6bd0837c7f28");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Kistl.App.Base.IndexConstraint)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.Base.Property)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Kistl.App.Base.IndexConstraint; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.IndexConstraint A
        {
            get { return AImpl; }
            set { AImpl = (Kistl.App.Base.IndexConstraintEfImpl)value; }
        }

        private int? _fk_A;

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_UniqueContraints_ensures_unique_on_Properties_A", "UniqueContraints")]
        public Kistl.App.Base.IndexConstraintEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.IndexConstraintEfImpl __value;
                EntityReference<Kistl.App.Base.IndexConstraintEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.IndexConstraintEfImpl>(
                        "Model.FK_UniqueContraints_ensures_unique_on_Properties_A",
                        "UniqueContraints");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.IndexConstraintEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.IndexConstraintEfImpl>(
                        "Model.FK_UniqueContraints_ensures_unique_on_Properties_A",
                        "UniqueContraints");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.IndexConstraintEfImpl __oldValue = (Kistl.App.Base.IndexConstraintEfImpl)r.Value;
                Kistl.App.Base.IndexConstraintEfImpl __newValue = (Kistl.App.Base.IndexConstraintEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.IndexConstraintEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.Base.Property; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Property B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.Base.PropertyEfImpl)value; }
        }

        private int? _fk_B;

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_UniqueContraints_ensures_unique_on_Properties_B", "Properties")]
        public Kistl.App.Base.PropertyEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.PropertyEfImpl __value;
                EntityReference<Kistl.App.Base.PropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.PropertyEfImpl>(
                        "Model.FK_UniqueContraints_ensures_unique_on_Properties_B",
                        "Properties");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.PropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.PropertyEfImpl>(
                        "Model.FK_UniqueContraints_ensures_unique_on_Properties_B",
                        "Properties");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.PropertyEfImpl __oldValue = (Kistl.App.Base.PropertyEfImpl)r.Value;
                Kistl.App.Base.PropertyEfImpl __newValue = (Kistl.App.Base.PropertyEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.PropertyEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.IndexConstraintEfImpl>("Model.FK_UniqueContraints_ensures_unique_on_Properties_A", "UniqueContraints").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.PropertyEfImpl>("Model.FK_UniqueContraints_ensures_unique_on_Properties_B", "Properties").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.IndexConstraintEfImpl>("Model.FK_UniqueContraints_ensures_unique_on_Properties_A", "UniqueContraints").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "Kistl.App.Base");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.PropertyEfImpl>("Model.FK_UniqueContraints_ensures_unique_on_Properties_B", "Properties").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "Kistl.App.Base");
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Base");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.Base");
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(IndexConstraint_ensures_unique_on_Property_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (IndexConstraint_ensures_unique_on_Property_RelationEntryEfImpl)obj;
            var me = (IndexConstraint_ensures_unique_on_Property_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Kistl.App.Base.IndexConstraintEfImpl)Context.FindPersistenceObject<Kistl.App.Base.IndexConstraint>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Kistl.App.Base.IndexConstraintEfImpl)Context.Find<Kistl.App.Base.IndexConstraint>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Kistl.App.Base.PropertyEfImpl)Context.FindPersistenceObject<Kistl.App.Base.Property>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Kistl.App.Base.PropertyEfImpl)Context.Find<Kistl.App.Base.Property>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Kistl.App.Test
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="Muhblah_has_TestCustomObject_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("Muhblah_has_TestCustomObject_RelationEntryEfImpl")]
    public class Muhblah_has_TestCustomObject_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<Kistl.App.Test.Muhblah, Kistl.App.Test.MuhblahEfImpl, Kistl.App.Test.TestCustomObject, Kistl.App.Test.TestCustomObjectEfImpl>, Muhblah_has_TestCustomObject_RelationEntry
    {
        [Obsolete]
        public Muhblah_has_TestCustomObject_RelationEntryEfImpl()
            : base(null)
        {
        }

        public Muhblah_has_TestCustomObject_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("d1e0da3e-ce64-4587-b62d-70c0f4371d97");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Kistl.App.Test.Muhblah)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.Test.TestCustomObject)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Kistl.App.Test.Muhblah; moduleNamespace=Kistl.App.Test;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.Muhblah A
        {
            get { return AImpl; }
            set { AImpl = (Kistl.App.Test.MuhblahEfImpl)value; }
        }

        private int? _fk_A;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_MB_Many_Role_has_TCO_ManyList_Role_A", "MB_Many_Role")]
        public Kistl.App.Test.MuhblahEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Test.MuhblahEfImpl __value;
                EntityReference<Kistl.App.Test.MuhblahEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.MuhblahEfImpl>(
                        "Model.FK_MB_Many_Role_has_TCO_ManyList_Role_A",
                        "MB_Many_Role");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Test.MuhblahEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.MuhblahEfImpl>(
                        "Model.FK_MB_Many_Role_has_TCO_ManyList_Role_A",
                        "MB_Many_Role");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Test.MuhblahEfImpl __oldValue = (Kistl.App.Test.MuhblahEfImpl)r.Value;
                Kistl.App.Test.MuhblahEfImpl __newValue = (Kistl.App.Test.MuhblahEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Test.MuhblahEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.Test.TestCustomObject; moduleNamespace=Kistl.App.Test;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.TestCustomObject B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.Test.TestCustomObjectEfImpl)value; }
        }

        private int? _fk_B;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_MB_Many_Role_has_TCO_ManyList_Role_B", "TCO_ManyList_Role")]
        public Kistl.App.Test.TestCustomObjectEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Test.TestCustomObjectEfImpl __value;
                EntityReference<Kistl.App.Test.TestCustomObjectEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.TestCustomObjectEfImpl>(
                        "Model.FK_MB_Many_Role_has_TCO_ManyList_Role_B",
                        "TCO_ManyList_Role");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Test.TestCustomObjectEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.TestCustomObjectEfImpl>(
                        "Model.FK_MB_Many_Role_has_TCO_ManyList_Role_B",
                        "TCO_ManyList_Role");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Test.TestCustomObjectEfImpl __oldValue = (Kistl.App.Test.TestCustomObjectEfImpl)r.Value;
                Kistl.App.Test.TestCustomObjectEfImpl __newValue = (Kistl.App.Test.TestCustomObjectEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Test.TestCustomObjectEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Test.MuhblahEfImpl>("Model.FK_MB_Many_Role_has_TCO_ManyList_Role_A", "MB_Many_Role").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Test.TestCustomObjectEfImpl>("Model.FK_MB_Many_Role_has_TCO_ManyList_Role_B", "TCO_ManyList_Role").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Test.MuhblahEfImpl>("Model.FK_MB_Many_Role_has_TCO_ManyList_Role_A", "MB_Many_Role").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "Kistl.App.Test");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Test.TestCustomObjectEfImpl>("Model.FK_MB_Many_Role_has_TCO_ManyList_Role_B", "TCO_ManyList_Role").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "Kistl.App.Test");
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Test");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Test");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Muhblah_has_TestCustomObject_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Muhblah_has_TestCustomObject_RelationEntryEfImpl)obj;
            var me = (Muhblah_has_TestCustomObject_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                AImpl = (Kistl.App.Test.MuhblahEfImpl)Context.Find<Kistl.App.Test.Muhblah>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_B.HasValue)
                BImpl = (Kistl.App.Test.TestCustomObjectEfImpl)Context.Find<Kistl.App.Test.TestCustomObject>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Kistl.App.Test
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryEfImpl")]
    public class N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<Kistl.App.Test.N_to_M_relations_A, Kistl.App.Test.N_to_M_relations_AEfImpl, Kistl.App.Test.N_to_M_relations_B, Kistl.App.Test.N_to_M_relations_BEfImpl>, N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntry
    {
        [Obsolete]
        public N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryEfImpl()
            : base(null)
        {
        }

        public N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("3555da6e-0e9b-4f7c-903e-a51f3cce7cd9");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Kistl.App.Test.N_to_M_relations_A)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.Test.N_to_M_relations_B)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Kistl.App.Test.N_to_M_relations_A; moduleNamespace=Kistl.App.Test;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.N_to_M_relations_A A
        {
            get { return AImpl; }
            set { AImpl = (Kistl.App.Test.N_to_M_relations_AEfImpl)value; }
        }

        private int? _fk_A;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ASide_connectsTo_BSide_A", "ASide")]
        public Kistl.App.Test.N_to_M_relations_AEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Test.N_to_M_relations_AEfImpl __value;
                EntityReference<Kistl.App.Test.N_to_M_relations_AEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.N_to_M_relations_AEfImpl>(
                        "Model.FK_ASide_connectsTo_BSide_A",
                        "ASide");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Test.N_to_M_relations_AEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.N_to_M_relations_AEfImpl>(
                        "Model.FK_ASide_connectsTo_BSide_A",
                        "ASide");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Test.N_to_M_relations_AEfImpl __oldValue = (Kistl.App.Test.N_to_M_relations_AEfImpl)r.Value;
                Kistl.App.Test.N_to_M_relations_AEfImpl __newValue = (Kistl.App.Test.N_to_M_relations_AEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Test.N_to_M_relations_AEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.Test.N_to_M_relations_B; moduleNamespace=Kistl.App.Test;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.N_to_M_relations_B B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.Test.N_to_M_relations_BEfImpl)value; }
        }

        private int? _fk_B;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ASide_connectsTo_BSide_B", "BSide")]
        public Kistl.App.Test.N_to_M_relations_BEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Test.N_to_M_relations_BEfImpl __value;
                EntityReference<Kistl.App.Test.N_to_M_relations_BEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.N_to_M_relations_BEfImpl>(
                        "Model.FK_ASide_connectsTo_BSide_B",
                        "BSide");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Test.N_to_M_relations_BEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.N_to_M_relations_BEfImpl>(
                        "Model.FK_ASide_connectsTo_BSide_B",
                        "BSide");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Test.N_to_M_relations_BEfImpl __oldValue = (Kistl.App.Test.N_to_M_relations_BEfImpl)r.Value;
                Kistl.App.Test.N_to_M_relations_BEfImpl __newValue = (Kistl.App.Test.N_to_M_relations_BEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Test.N_to_M_relations_BEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Test.N_to_M_relations_AEfImpl>("Model.FK_ASide_connectsTo_BSide_A", "ASide").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Test.N_to_M_relations_BEfImpl>("Model.FK_ASide_connectsTo_BSide_B", "BSide").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Test.N_to_M_relations_AEfImpl>("Model.FK_ASide_connectsTo_BSide_A", "ASide").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "Kistl.App.Test");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Test.N_to_M_relations_BEfImpl>("Model.FK_ASide_connectsTo_BSide_B", "BSide").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "Kistl.App.Test");
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Test");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Test");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryEfImpl)obj;
            var me = (N_to_M_relations_A_connectsTo_N_to_M_relations_B_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                AImpl = (Kistl.App.Test.N_to_M_relations_AEfImpl)Context.Find<Kistl.App.Test.N_to_M_relations_A>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_B.HasValue)
                BImpl = (Kistl.App.Test.N_to_M_relations_BEfImpl)Context.Find<Kistl.App.Test.N_to_M_relations_B>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Kistl.App.GUI
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="NavigationEntry_accessed_by_Group_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("NavigationEntry_accessed_by_Group_RelationEntryEfImpl")]
    public class NavigationEntry_accessed_by_Group_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<Kistl.App.GUI.NavigationEntry, Kistl.App.GUI.NavigationEntryEfImpl, Kistl.App.Base.Group, Kistl.App.Base.GroupEfImpl>, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, NavigationEntry_accessed_by_Group_RelationEntry
    {
        [Obsolete]
        public NavigationEntry_accessed_by_Group_RelationEntryEfImpl()
            : base(null)
        {
        }

        public NavigationEntry_accessed_by_Group_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("b88c12ac-eabe-4aee-913e-5edd9d2a193a");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Kistl.App.GUI.NavigationEntry)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.Base.Group)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Kistl.App.GUI.NavigationEntry; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.NavigationEntry A
        {
            get { return AImpl; }
            set { AImpl = (Kistl.App.GUI.NavigationEntryEfImpl)value; }
        }

        private int? _fk_A;

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_NavigationScreen_accessed_by_Groups_A", "NavigationScreen")]
        public Kistl.App.GUI.NavigationEntryEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.NavigationEntryEfImpl __value;
                EntityReference<Kistl.App.GUI.NavigationEntryEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.NavigationEntryEfImpl>(
                        "Model.FK_NavigationScreen_accessed_by_Groups_A",
                        "NavigationScreen");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.NavigationEntryEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.NavigationEntryEfImpl>(
                        "Model.FK_NavigationScreen_accessed_by_Groups_A",
                        "NavigationScreen");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.NavigationEntryEfImpl __oldValue = (Kistl.App.GUI.NavigationEntryEfImpl)r.Value;
                Kistl.App.GUI.NavigationEntryEfImpl __newValue = (Kistl.App.GUI.NavigationEntryEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (Kistl.App.GUI.NavigationEntryEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.Base.Group; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Group B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.Base.GroupEfImpl)value; }
        }

        private int? _fk_B;

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_NavigationScreen_accessed_by_Groups_B", "Groups")]
        public Kistl.App.Base.GroupEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.GroupEfImpl __value;
                EntityReference<Kistl.App.Base.GroupEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.GroupEfImpl>(
                        "Model.FK_NavigationScreen_accessed_by_Groups_B",
                        "Groups");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.GroupEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.GroupEfImpl>(
                        "Model.FK_NavigationScreen_accessed_by_Groups_B",
                        "Groups");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.GroupEfImpl __oldValue = (Kistl.App.Base.GroupEfImpl)r.Value;
                Kistl.App.Base.GroupEfImpl __newValue = (Kistl.App.Base.GroupEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.GroupEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.NavigationEntryEfImpl>("Model.FK_NavigationScreen_accessed_by_Groups_A", "NavigationScreen").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
			if (auxObjects != null) {
				auxObjects.Add(A);
			}
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.GroupEfImpl>("Model.FK_NavigationScreen_accessed_by_Groups_B", "Groups").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.NavigationEntryEfImpl>("Model.FK_NavigationScreen_accessed_by_Groups_A", "NavigationScreen").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "Kistl.App.GUI");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.GroupEfImpl>("Model.FK_NavigationScreen_accessed_by_Groups_B", "Groups").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "Kistl.App.GUI");
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.GUI");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.GUI");
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(NavigationEntry_accessed_by_Group_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (NavigationEntry_accessed_by_Group_RelationEntryEfImpl)obj;
            var me = (NavigationEntry_accessed_by_Group_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Kistl.App.GUI.NavigationEntryEfImpl)Context.FindPersistenceObject<Kistl.App.GUI.NavigationEntry>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Kistl.App.GUI.NavigationEntryEfImpl)Context.Find<Kistl.App.GUI.NavigationEntry>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Kistl.App.Base.GroupEfImpl)Context.FindPersistenceObject<Kistl.App.Base.Group>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Kistl.App.Base.GroupEfImpl)Context.Find<Kistl.App.Base.Group>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Kistl.App.GUI
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="ObjectReferenceProperty_shows_Method_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("ObjectReferenceProperty_shows_Method_RelationEntryEfImpl")]
    public class ObjectReferenceProperty_shows_Method_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<Kistl.App.Base.ObjectReferenceProperty, Kistl.App.Base.ObjectReferencePropertyEfImpl, Kistl.App.Base.Method, Kistl.App.Base.MethodEfImpl>, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, ObjectReferenceProperty_shows_Method_RelationEntry
    {
        [Obsolete]
        public ObjectReferenceProperty_shows_Method_RelationEntryEfImpl()
            : base(null)
        {
        }

        public ObjectReferenceProperty_shows_Method_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("02b3e9d5-fc2e-4ffe-8867-0977b88437cc");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Kistl.App.Base.ObjectReferenceProperty)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.Base.Method)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Kistl.App.Base.ObjectReferenceProperty; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.ObjectReferenceProperty A
        {
            get { return AImpl; }
            set { AImpl = (Kistl.App.Base.ObjectReferencePropertyEfImpl)value; }
        }

        private int? _fk_A;

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ObjRefProp_shows_Methods_A", "ObjRefProp")]
        public Kistl.App.Base.ObjectReferencePropertyEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.ObjectReferencePropertyEfImpl __value;
                EntityReference<Kistl.App.Base.ObjectReferencePropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.ObjectReferencePropertyEfImpl>(
                        "Model.FK_ObjRefProp_shows_Methods_A",
                        "ObjRefProp");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.ObjectReferencePropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.ObjectReferencePropertyEfImpl>(
                        "Model.FK_ObjRefProp_shows_Methods_A",
                        "ObjRefProp");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.ObjectReferencePropertyEfImpl __oldValue = (Kistl.App.Base.ObjectReferencePropertyEfImpl)r.Value;
                Kistl.App.Base.ObjectReferencePropertyEfImpl __newValue = (Kistl.App.Base.ObjectReferencePropertyEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.ObjectReferencePropertyEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.Base.Method; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Method B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.Base.MethodEfImpl)value; }
        }

        private int? _fk_B;

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ObjRefProp_shows_Methods_B", "Methods")]
        public Kistl.App.Base.MethodEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.MethodEfImpl __value;
                EntityReference<Kistl.App.Base.MethodEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.MethodEfImpl>(
                        "Model.FK_ObjRefProp_shows_Methods_B",
                        "Methods");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.MethodEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.MethodEfImpl>(
                        "Model.FK_ObjRefProp_shows_Methods_B",
                        "Methods");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.MethodEfImpl __oldValue = (Kistl.App.Base.MethodEfImpl)r.Value;
                Kistl.App.Base.MethodEfImpl __newValue = (Kistl.App.Base.MethodEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.MethodEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.ObjectReferencePropertyEfImpl>("Model.FK_ObjRefProp_shows_Methods_A", "ObjRefProp").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.MethodEfImpl>("Model.FK_ObjRefProp_shows_Methods_B", "Methods").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.ObjectReferencePropertyEfImpl>("Model.FK_ObjRefProp_shows_Methods_A", "ObjRefProp").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "Kistl.App.GUI");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.MethodEfImpl>("Model.FK_ObjRefProp_shows_Methods_B", "Methods").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "Kistl.App.GUI");
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.GUI");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.GUI");
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(ObjectReferenceProperty_shows_Method_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ObjectReferenceProperty_shows_Method_RelationEntryEfImpl)obj;
            var me = (ObjectReferenceProperty_shows_Method_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Kistl.App.Base.ObjectReferencePropertyEfImpl)Context.FindPersistenceObject<Kistl.App.Base.ObjectReferenceProperty>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Kistl.App.Base.ObjectReferencePropertyEfImpl)Context.Find<Kistl.App.Base.ObjectReferenceProperty>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Kistl.App.Base.MethodEfImpl)Context.FindPersistenceObject<Kistl.App.Base.Method>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Kistl.App.Base.MethodEfImpl)Context.Find<Kistl.App.Base.Method>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Kistl.App.Projekte
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="Projekt_haben_Mitarbeiter_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("Projekt_haben_Mitarbeiter_RelationEntryEfImpl")]
    public class Projekt_haben_Mitarbeiter_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<Kistl.App.Projekte.Projekt, Kistl.App.Projekte.ProjektEfImpl, Kistl.App.Projekte.Mitarbeiter, Kistl.App.Projekte.MitarbeiterEfImpl>, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, Projekt_haben_Mitarbeiter_RelationEntry
    {
        [Obsolete]
        public Projekt_haben_Mitarbeiter_RelationEntryEfImpl()
            : base(null)
        {
        }

        public Projekt_haben_Mitarbeiter_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("c7b3cf10-cdc8-454c-826c-04a0f7e5ef3e");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Kistl.App.Projekte.Projekt)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.Projekte.Mitarbeiter)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Kistl.App.Projekte.Projekt; moduleNamespace=Kistl.App.Projekte;
        // inverse Navigator=none; is reference;
        // PositionStorage=A_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Projekte.Projekt A
        {
            get { return AImpl; }
            set { AImpl = (Kistl.App.Projekte.ProjektEfImpl)value; }
        }

        private int? _fk_A;

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Projekte_haben_Mitarbeiter_A", "Projekte")]
        public Kistl.App.Projekte.ProjektEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Projekte.ProjektEfImpl __value;
                EntityReference<Kistl.App.Projekte.ProjektEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Projekte.ProjektEfImpl>(
                        "Model.FK_Projekte_haben_Mitarbeiter_A",
                        "Projekte");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Projekte.ProjektEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Projekte.ProjektEfImpl>(
                        "Model.FK_Projekte_haben_Mitarbeiter_A",
                        "Projekte");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Projekte.ProjektEfImpl __oldValue = (Kistl.App.Projekte.ProjektEfImpl)r.Value;
                Kistl.App.Projekte.ProjektEfImpl __newValue = (Kistl.App.Projekte.ProjektEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Projekte.ProjektEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? A_pos
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(int?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
                    var __oldValue = _A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    _A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _A_pos;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.Projekte.Mitarbeiter; moduleNamespace=Kistl.App.Projekte;
        // inverse Navigator=none; is reference;
        // PositionStorage=B_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Projekte.Mitarbeiter B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.Projekte.MitarbeiterEfImpl)value; }
        }

        private int? _fk_B;

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Projekte_haben_Mitarbeiter_B", "Mitarbeiter")]
        public Kistl.App.Projekte.MitarbeiterEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Projekte.MitarbeiterEfImpl __value;
                EntityReference<Kistl.App.Projekte.MitarbeiterEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Projekte.MitarbeiterEfImpl>(
                        "Model.FK_Projekte_haben_Mitarbeiter_B",
                        "Mitarbeiter");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Projekte.MitarbeiterEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Projekte.MitarbeiterEfImpl>(
                        "Model.FK_Projekte_haben_Mitarbeiter_B",
                        "Mitarbeiter");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Projekte.MitarbeiterEfImpl __oldValue = (Kistl.App.Projekte.MitarbeiterEfImpl)r.Value;
                Kistl.App.Projekte.MitarbeiterEfImpl __newValue = (Kistl.App.Projekte.MitarbeiterEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Projekte.MitarbeiterEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? B_pos
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(int?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
                    var __oldValue = _B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    _B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _B_pos;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
        public int? AIndex { get { return _A_pos; } set { _A_pos = value; } }

        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
        public int? BIndex { get { return _B_pos; } set { _B_pos = value; } }

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Projekte.ProjektEfImpl>("Model.FK_Projekte_haben_Mitarbeiter_A", "Projekte").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._A_pos, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Projekte.MitarbeiterEfImpl>("Model.FK_Projekte_haben_Mitarbeiter_B", "Mitarbeiter").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._B_pos, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Projekte.ProjektEfImpl>("Model.FK_Projekte_haben_Mitarbeiter_A", "Projekte").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "Kistl.App.Projekte");
            }
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Projekte");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Projekte.MitarbeiterEfImpl>("Model.FK_Projekte_haben_Mitarbeiter_B", "Mitarbeiter").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "Kistl.App.Projekte");
            }
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Projekte");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Projekte");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Kistl.App.Projekte")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Kistl.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Projekte")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Projekte")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Projekte")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Projekte");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Projekte");
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Projekt_haben_Mitarbeiter_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Projekt_haben_Mitarbeiter_RelationEntryEfImpl)obj;
            var me = (Projekt_haben_Mitarbeiter_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me.AIndex = other.AIndex;
            me._fk_B = other._fk_B;
            me.BIndex = other.BIndex;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Kistl.App.Projekte.ProjektEfImpl)Context.FindPersistenceObject<Kistl.App.Projekte.Projekt>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Kistl.App.Projekte.ProjektEfImpl)Context.Find<Kistl.App.Projekte.Projekt>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Kistl.App.Projekte.MitarbeiterEfImpl)Context.FindPersistenceObject<Kistl.App.Projekte.Mitarbeiter>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Kistl.App.Projekte.MitarbeiterEfImpl)Context.Find<Kistl.App.Projekte.Mitarbeiter>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Kistl.App.Base
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="RoleMembership_resolves_Relation_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("RoleMembership_resolves_Relation_RelationEntryEfImpl")]
    public class RoleMembership_resolves_Relation_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<Kistl.App.Base.RoleMembership, Kistl.App.Base.RoleMembershipEfImpl, Kistl.App.Base.Relation, Kistl.App.Base.RelationEfImpl>, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, RoleMembership_resolves_Relation_RelationEntry
    {
        [Obsolete]
        public RoleMembership_resolves_Relation_RelationEntryEfImpl()
            : base(null)
        {
        }

        public RoleMembership_resolves_Relation_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("f74d425f-e733-4cba-baca-f4a05fbc0a80");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Kistl.App.Base.RoleMembership)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.Base.Relation)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Kistl.App.Base.RoleMembership; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=A_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.RoleMembership A
        {
            get { return AImpl; }
            set { AImpl = (Kistl.App.Base.RoleMembershipEfImpl)value; }
        }

        private int? _fk_A;

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_RoleMembership_resolves_Relations_A", "RoleMembership")]
        public Kistl.App.Base.RoleMembershipEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.RoleMembershipEfImpl __value;
                EntityReference<Kistl.App.Base.RoleMembershipEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.RoleMembershipEfImpl>(
                        "Model.FK_RoleMembership_resolves_Relations_A",
                        "RoleMembership");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.RoleMembershipEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.RoleMembershipEfImpl>(
                        "Model.FK_RoleMembership_resolves_Relations_A",
                        "RoleMembership");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.RoleMembershipEfImpl __oldValue = (Kistl.App.Base.RoleMembershipEfImpl)r.Value;
                Kistl.App.Base.RoleMembershipEfImpl __newValue = (Kistl.App.Base.RoleMembershipEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.RoleMembershipEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? A_pos
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(int?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
                    var __oldValue = _A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    _A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _A_pos;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.Base.Relation; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=B_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Relation B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.Base.RelationEfImpl)value; }
        }

        private int? _fk_B;

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_RoleMembership_resolves_Relations_B", "Relations")]
        public Kistl.App.Base.RelationEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.RelationEfImpl __value;
                EntityReference<Kistl.App.Base.RelationEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.RelationEfImpl>(
                        "Model.FK_RoleMembership_resolves_Relations_B",
                        "Relations");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.RelationEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.RelationEfImpl>(
                        "Model.FK_RoleMembership_resolves_Relations_B",
                        "Relations");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.RelationEfImpl __oldValue = (Kistl.App.Base.RelationEfImpl)r.Value;
                Kistl.App.Base.RelationEfImpl __newValue = (Kistl.App.Base.RelationEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.RelationEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? B_pos
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(int?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
                    var __oldValue = _B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    _B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _B_pos;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
        public int? AIndex { get { return _A_pos; } set { _A_pos = value; } }

        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
        public int? BIndex { get { return _B_pos; } set { _B_pos = value; } }

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.RoleMembershipEfImpl>("Model.FK_RoleMembership_resolves_Relations_A", "RoleMembership").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._A_pos, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.RelationEfImpl>("Model.FK_RoleMembership_resolves_Relations_B", "Relations").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._B_pos, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.RoleMembershipEfImpl>("Model.FK_RoleMembership_resolves_Relations_A", "RoleMembership").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Base");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.RelationEfImpl>("Model.FK_RoleMembership_resolves_Relations_B", "Relations").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(RoleMembership_resolves_Relation_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (RoleMembership_resolves_Relation_RelationEntryEfImpl)obj;
            var me = (RoleMembership_resolves_Relation_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me.AIndex = other.AIndex;
            me._fk_B = other._fk_B;
            me.BIndex = other.BIndex;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Kistl.App.Base.RoleMembershipEfImpl)Context.FindPersistenceObject<Kistl.App.Base.RoleMembership>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Kistl.App.Base.RoleMembershipEfImpl)Context.Find<Kistl.App.Base.RoleMembership>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Kistl.App.Base.RelationEfImpl)Context.FindPersistenceObject<Kistl.App.Base.Relation>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Kistl.App.Base.RelationEfImpl)Context.Find<Kistl.App.Base.Relation>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace ZBox.App.SchemaMigration
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="SourceColumn_created_Property_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("SourceColumn_created_Property_RelationEntryEfImpl")]
    public class SourceColumn_created_Property_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceColumnEfImpl, Kistl.App.Base.Property, Kistl.App.Base.PropertyEfImpl>, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, SourceColumn_created_Property_RelationEntry
    {
        [Obsolete]
        public SourceColumn_created_Property_RelationEntryEfImpl()
            : base(null)
        {
        }

        public SourceColumn_created_Property_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("fb27e3f8-3615-4f3b-ae2a-2b89b8782e27");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (ZBox.App.SchemaMigration.SourceColumn)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.Base.Property)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=ZBox.App.SchemaMigration.SourceColumn; moduleNamespace=ZBox.App.SchemaMigration;
        // inverse Navigator=none; is reference;
        // PositionStorage=A_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ZBox.App.SchemaMigration.SourceColumn A
        {
            get { return AImpl; }
            set { AImpl = (ZBox.App.SchemaMigration.SourceColumnEfImpl)value; }
        }

        private int? _fk_A;

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_SourceColumn_created_Property_A", "SourceColumn")]
        public ZBox.App.SchemaMigration.SourceColumnEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                ZBox.App.SchemaMigration.SourceColumnEfImpl __value;
                EntityReference<ZBox.App.SchemaMigration.SourceColumnEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.SourceColumnEfImpl>(
                        "Model.FK_SourceColumn_created_Property_A",
                        "SourceColumn");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<ZBox.App.SchemaMigration.SourceColumnEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.SourceColumnEfImpl>(
                        "Model.FK_SourceColumn_created_Property_A",
                        "SourceColumn");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                ZBox.App.SchemaMigration.SourceColumnEfImpl __oldValue = (ZBox.App.SchemaMigration.SourceColumnEfImpl)r.Value;
                ZBox.App.SchemaMigration.SourceColumnEfImpl __newValue = (ZBox.App.SchemaMigration.SourceColumnEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (ZBox.App.SchemaMigration.SourceColumnEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? A_pos
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(int?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
                    var __oldValue = _A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    _A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _A_pos;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.Base.Property; moduleNamespace=ZBox.App.SchemaMigration;
        // inverse Navigator=none; is reference;
        // PositionStorage=B_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Property B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.Base.PropertyEfImpl)value; }
        }

        private int? _fk_B;

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_SourceColumn_created_Property_B", "Property")]
        public Kistl.App.Base.PropertyEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.PropertyEfImpl __value;
                EntityReference<Kistl.App.Base.PropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.PropertyEfImpl>(
                        "Model.FK_SourceColumn_created_Property_B",
                        "Property");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.PropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.PropertyEfImpl>(
                        "Model.FK_SourceColumn_created_Property_B",
                        "Property");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.PropertyEfImpl __oldValue = (Kistl.App.Base.PropertyEfImpl)r.Value;
                Kistl.App.Base.PropertyEfImpl __newValue = (Kistl.App.Base.PropertyEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.PropertyEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? B_pos
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(int?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
                    var __oldValue = _B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    _B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _B_pos;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
        public int? AIndex { get { return _A_pos; } set { _A_pos = value; } }

        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
        public int? BIndex { get { return _B_pos; } set { _B_pos = value; } }

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.SourceColumnEfImpl>("Model.FK_SourceColumn_created_Property_A", "SourceColumn").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
			if (auxObjects != null) {
				auxObjects.Add(A);
			}
            BinarySerializer.ToStream(this._A_pos, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.PropertyEfImpl>("Model.FK_SourceColumn_created_Property_B", "Property").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._B_pos, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            {
                var key = this.RelationshipManager.GetRelatedReference<ZBox.App.SchemaMigration.SourceColumnEfImpl>("Model.FK_SourceColumn_created_Property_A", "SourceColumn").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "ZBox.App.SchemaMigration");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.PropertyEfImpl>("Model.FK_SourceColumn_created_Property_B", "Property").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "ZBox.App.SchemaMigration");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "ZBox.App.SchemaMigration");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "ZBox.App.SchemaMigration");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "ZBox.App.SchemaMigration");
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(SourceColumn_created_Property_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (SourceColumn_created_Property_RelationEntryEfImpl)obj;
            var me = (SourceColumn_created_Property_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me.AIndex = other.AIndex;
            me._fk_B = other._fk_B;
            me.BIndex = other.BIndex;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (ZBox.App.SchemaMigration.SourceColumnEfImpl)Context.FindPersistenceObject<ZBox.App.SchemaMigration.SourceColumn>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (ZBox.App.SchemaMigration.SourceColumnEfImpl)Context.Find<ZBox.App.SchemaMigration.SourceColumn>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Kistl.App.Base.PropertyEfImpl)Context.FindPersistenceObject<Kistl.App.Base.Property>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Kistl.App.Base.PropertyEfImpl)Context.Find<Kistl.App.Base.Property>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Kistl.App.GUI
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="Template_hasMenu_Visual_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("Template_hasMenu_Visual_RelationEntryEfImpl")]
    public class Template_hasMenu_Visual_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<Kistl.App.GUI.Template, Kistl.App.GUI.TemplateEfImpl, Kistl.App.GUI.Visual, Kistl.App.GUI.VisualEfImpl>, Template_hasMenu_Visual_RelationEntry
    {
        [Obsolete]
        public Template_hasMenu_Visual_RelationEntryEfImpl()
            : base(null)
        {
        }

        public Template_hasMenu_Visual_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("81ff3089-57da-478c-8be5-fd23abc222a2");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Kistl.App.GUI.Template)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.GUI.Visual)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Kistl.App.GUI.Template; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Template A
        {
            get { return AImpl; }
            set { AImpl = (Kistl.App.GUI.TemplateEfImpl)value; }
        }

        private int? _fk_A;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Template_hasMenu_Menu_A", "Template")]
        public Kistl.App.GUI.TemplateEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.TemplateEfImpl __value;
                EntityReference<Kistl.App.GUI.TemplateEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.TemplateEfImpl>(
                        "Model.FK_Template_hasMenu_Menu_A",
                        "Template");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.TemplateEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.TemplateEfImpl>(
                        "Model.FK_Template_hasMenu_Menu_A",
                        "Template");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.TemplateEfImpl __oldValue = (Kistl.App.GUI.TemplateEfImpl)r.Value;
                Kistl.App.GUI.TemplateEfImpl __newValue = (Kistl.App.GUI.TemplateEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (Kistl.App.GUI.TemplateEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.GUI.Visual; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.GUI.VisualEfImpl)value; }
        }

        private int? _fk_B;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Template_hasMenu_Menu_B", "Menu")]
        public Kistl.App.GUI.VisualEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.VisualEfImpl __value;
                EntityReference<Kistl.App.GUI.VisualEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>(
                        "Model.FK_Template_hasMenu_Menu_B",
                        "Menu");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.VisualEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>(
                        "Model.FK_Template_hasMenu_Menu_B",
                        "Menu");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.VisualEfImpl __oldValue = (Kistl.App.GUI.VisualEfImpl)r.Value;
                Kistl.App.GUI.VisualEfImpl __newValue = (Kistl.App.GUI.VisualEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.GUI.VisualEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.TemplateEfImpl>("Model.FK_Template_hasMenu_Menu_A", "Template").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>("Model.FK_Template_hasMenu_Menu_B", "Menu").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.TemplateEfImpl>("Model.FK_Template_hasMenu_Menu_A", "Template").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "Kistl.App.GUI");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>("Model.FK_Template_hasMenu_Menu_B", "Menu").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "Kistl.App.GUI");
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.GUI");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Template_hasMenu_Visual_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Template_hasMenu_Visual_RelationEntryEfImpl)obj;
            var me = (Template_hasMenu_Visual_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                AImpl = (Kistl.App.GUI.TemplateEfImpl)Context.Find<Kistl.App.GUI.Template>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_B.HasValue)
                BImpl = (Kistl.App.GUI.VisualEfImpl)Context.Find<Kistl.App.GUI.Visual>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Kistl.App.Test
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="TestStudent_füllt_aus_Fragebogen_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("TestStudent_füllt_aus_Fragebogen_RelationEntryEfImpl")]
    public class TestStudent_füllt_aus_Fragebogen_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<Kistl.App.Test.TestStudent, Kistl.App.Test.TestStudentEfImpl, Kistl.App.Test.Fragebogen, Kistl.App.Test.FragebogenEfImpl>, TestStudent_füllt_aus_Fragebogen_RelationEntry
    {
        [Obsolete]
        public TestStudent_füllt_aus_Fragebogen_RelationEntryEfImpl()
            : base(null)
        {
        }

        public TestStudent_füllt_aus_Fragebogen_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("6819ca86-571c-4d59-bc30-cc1fb0decc9e");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Kistl.App.Test.TestStudent)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.Test.Fragebogen)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Kistl.App.Test.TestStudent; moduleNamespace=Kistl.App.Test;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.TestStudent A
        {
            get { return AImpl; }
            set { AImpl = (Kistl.App.Test.TestStudentEfImpl)value; }
        }

        private int? _fk_A;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Student_füllt_aus_Testbogen_A", "Student")]
        public Kistl.App.Test.TestStudentEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Test.TestStudentEfImpl __value;
                EntityReference<Kistl.App.Test.TestStudentEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.TestStudentEfImpl>(
                        "Model.FK_Student_füllt_aus_Testbogen_A",
                        "Student");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Test.TestStudentEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.TestStudentEfImpl>(
                        "Model.FK_Student_füllt_aus_Testbogen_A",
                        "Student");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Test.TestStudentEfImpl __oldValue = (Kistl.App.Test.TestStudentEfImpl)r.Value;
                Kistl.App.Test.TestStudentEfImpl __newValue = (Kistl.App.Test.TestStudentEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Test.TestStudentEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.Test.Fragebogen; moduleNamespace=Kistl.App.Test;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.Fragebogen B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.Test.FragebogenEfImpl)value; }
        }

        private int? _fk_B;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Student_füllt_aus_Testbogen_B", "Testbogen")]
        public Kistl.App.Test.FragebogenEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Test.FragebogenEfImpl __value;
                EntityReference<Kistl.App.Test.FragebogenEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.FragebogenEfImpl>(
                        "Model.FK_Student_füllt_aus_Testbogen_B",
                        "Testbogen");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Test.FragebogenEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.FragebogenEfImpl>(
                        "Model.FK_Student_füllt_aus_Testbogen_B",
                        "Testbogen");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Test.FragebogenEfImpl __oldValue = (Kistl.App.Test.FragebogenEfImpl)r.Value;
                Kistl.App.Test.FragebogenEfImpl __newValue = (Kistl.App.Test.FragebogenEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Test.FragebogenEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Test.TestStudentEfImpl>("Model.FK_Student_füllt_aus_Testbogen_A", "Student").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Test.FragebogenEfImpl>("Model.FK_Student_füllt_aus_Testbogen_B", "Testbogen").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Test.TestStudentEfImpl>("Model.FK_Student_füllt_aus_Testbogen_A", "Student").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "Kistl.App.Test");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Test.FragebogenEfImpl>("Model.FK_Student_füllt_aus_Testbogen_B", "Testbogen").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "Kistl.App.Test");
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Test");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Test");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(TestStudent_füllt_aus_Fragebogen_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (TestStudent_füllt_aus_Fragebogen_RelationEntryEfImpl)obj;
            var me = (TestStudent_füllt_aus_Fragebogen_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                AImpl = (Kistl.App.Test.TestStudentEfImpl)Context.Find<Kistl.App.Test.TestStudent>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_B.HasValue)
                BImpl = (Kistl.App.Test.FragebogenEfImpl)Context.Find<Kistl.App.Test.Fragebogen>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Kistl.App.Base
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="TypeRef_hasGenericArguments_TypeRef_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("TypeRef_hasGenericArguments_TypeRef_RelationEntryEfImpl")]
    public class TypeRef_hasGenericArguments_TypeRef_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<Kistl.App.Base.TypeRef, Kistl.App.Base.TypeRefEfImpl, Kistl.App.Base.TypeRef, Kistl.App.Base.TypeRefEfImpl>, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, TypeRef_hasGenericArguments_TypeRef_RelationEntry
    {
        [Obsolete]
        public TypeRef_hasGenericArguments_TypeRef_RelationEntryEfImpl()
            : base(null)
        {
        }

        public TypeRef_hasGenericArguments_TypeRef_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("8b41ffa4-8ffa-4d96-b4e5-708188045c71");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Kistl.App.Base.TypeRef)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.Base.TypeRef)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Kistl.App.Base.TypeRef; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=A_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.TypeRef A
        {
            get { return AImpl; }
            set { AImpl = (Kistl.App.Base.TypeRefEfImpl)value; }
        }

        private int? _fk_A;

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_TypeRef_hasGenericArguments_GenericArguments_A", "TypeRef")]
        public Kistl.App.Base.TypeRefEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.TypeRefEfImpl __value;
                EntityReference<Kistl.App.Base.TypeRefEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRefEfImpl>(
                        "Model.FK_TypeRef_hasGenericArguments_GenericArguments_A",
                        "TypeRef");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.TypeRefEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRefEfImpl>(
                        "Model.FK_TypeRef_hasGenericArguments_GenericArguments_A",
                        "TypeRef");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.TypeRefEfImpl __oldValue = (Kistl.App.Base.TypeRefEfImpl)r.Value;
                Kistl.App.Base.TypeRefEfImpl __newValue = (Kistl.App.Base.TypeRefEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.TypeRefEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? A_pos
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(int?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
                    var __oldValue = _A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    _A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _A_pos;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.Base.TypeRef; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=B_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.TypeRef B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.Base.TypeRefEfImpl)value; }
        }

        private int? _fk_B;

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_TypeRef_hasGenericArguments_GenericArguments_B", "GenericArguments")]
        public Kistl.App.Base.TypeRefEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.TypeRefEfImpl __value;
                EntityReference<Kistl.App.Base.TypeRefEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRefEfImpl>(
                        "Model.FK_TypeRef_hasGenericArguments_GenericArguments_B",
                        "GenericArguments");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.TypeRefEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRefEfImpl>(
                        "Model.FK_TypeRef_hasGenericArguments_GenericArguments_B",
                        "GenericArguments");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.TypeRefEfImpl __oldValue = (Kistl.App.Base.TypeRefEfImpl)r.Value;
                Kistl.App.Base.TypeRefEfImpl __newValue = (Kistl.App.Base.TypeRefEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.TypeRefEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? B_pos
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(int?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
                    var __oldValue = _B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    _B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _B_pos;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
        public int? AIndex { get { return _A_pos; } set { _A_pos = value; } }

        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
        public int? BIndex { get { return _B_pos; } set { _B_pos = value; } }

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRefEfImpl>("Model.FK_TypeRef_hasGenericArguments_GenericArguments_A", "TypeRef").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
			if (auxObjects != null) {
				auxObjects.Add(A);
			}
            BinarySerializer.ToStream(this._A_pos, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRefEfImpl>("Model.FK_TypeRef_hasGenericArguments_GenericArguments_B", "GenericArguments").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._B_pos, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRefEfImpl>("Model.FK_TypeRef_hasGenericArguments_GenericArguments_A", "TypeRef").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Base");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRefEfImpl>("Model.FK_TypeRef_hasGenericArguments_GenericArguments_B", "GenericArguments").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(TypeRef_hasGenericArguments_TypeRef_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (TypeRef_hasGenericArguments_TypeRef_RelationEntryEfImpl)obj;
            var me = (TypeRef_hasGenericArguments_TypeRef_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me.AIndex = other.AIndex;
            me._fk_B = other._fk_B;
            me.BIndex = other.BIndex;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Kistl.App.Base.TypeRefEfImpl)Context.FindPersistenceObject<Kistl.App.Base.TypeRef>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Kistl.App.Base.TypeRefEfImpl)Context.Find<Kistl.App.Base.TypeRef>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Kistl.App.Base.TypeRefEfImpl)Context.FindPersistenceObject<Kistl.App.Base.TypeRef>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Kistl.App.Base.TypeRefEfImpl)Context.Find<Kistl.App.Base.TypeRef>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Kistl.App.GUI
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="ViewDescriptor_supports_TypeRef_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("ViewDescriptor_supports_TypeRef_RelationEntryEfImpl")]
    public class ViewDescriptor_supports_TypeRef_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<Kistl.App.GUI.ViewDescriptor, Kistl.App.GUI.ViewDescriptorEfImpl, Kistl.App.Base.TypeRef, Kistl.App.Base.TypeRefEfImpl>, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, ViewDescriptor_supports_TypeRef_RelationEntry
    {
        [Obsolete]
        public ViewDescriptor_supports_TypeRef_RelationEntryEfImpl()
            : base(null)
        {
        }

        public ViewDescriptor_supports_TypeRef_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("786dae2f-cb6e-454d-93fd-192541df928d");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Kistl.App.GUI.ViewDescriptor)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.Base.TypeRef)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Kistl.App.GUI.ViewDescriptor; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ViewDescriptor A
        {
            get { return AImpl; }
            set { AImpl = (Kistl.App.GUI.ViewDescriptorEfImpl)value; }
        }

        private int? _fk_A;

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ViewDescriptor_supports_ViewModelTypeRefs_A", "ViewDescriptor")]
        public Kistl.App.GUI.ViewDescriptorEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.ViewDescriptorEfImpl __value;
                EntityReference<Kistl.App.GUI.ViewDescriptorEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ViewDescriptorEfImpl>(
                        "Model.FK_ViewDescriptor_supports_ViewModelTypeRefs_A",
                        "ViewDescriptor");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.ViewDescriptorEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ViewDescriptorEfImpl>(
                        "Model.FK_ViewDescriptor_supports_ViewModelTypeRefs_A",
                        "ViewDescriptor");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.ViewDescriptorEfImpl __oldValue = (Kistl.App.GUI.ViewDescriptorEfImpl)r.Value;
                Kistl.App.GUI.ViewDescriptorEfImpl __newValue = (Kistl.App.GUI.ViewDescriptorEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (Kistl.App.GUI.ViewDescriptorEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.Base.TypeRef; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.TypeRef B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.Base.TypeRefEfImpl)value; }
        }

        private int? _fk_B;

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ViewDescriptor_supports_ViewModelTypeRefs_B", "ViewModelTypeRefs")]
        public Kistl.App.Base.TypeRefEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.TypeRefEfImpl __value;
                EntityReference<Kistl.App.Base.TypeRefEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRefEfImpl>(
                        "Model.FK_ViewDescriptor_supports_ViewModelTypeRefs_B",
                        "ViewModelTypeRefs");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Base.TypeRefEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRefEfImpl>(
                        "Model.FK_ViewDescriptor_supports_ViewModelTypeRefs_B",
                        "ViewModelTypeRefs");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Base.TypeRefEfImpl __oldValue = (Kistl.App.Base.TypeRefEfImpl)r.Value;
                Kistl.App.Base.TypeRefEfImpl __newValue = (Kistl.App.Base.TypeRefEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.Base.TypeRefEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ViewDescriptorEfImpl>("Model.FK_ViewDescriptor_supports_ViewModelTypeRefs_A", "ViewDescriptor").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
			if (auxObjects != null) {
				auxObjects.Add(A);
			}
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRefEfImpl>("Model.FK_ViewDescriptor_supports_ViewModelTypeRefs_B", "ViewModelTypeRefs").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ViewDescriptorEfImpl>("Model.FK_ViewDescriptor_supports_ViewModelTypeRefs_A", "ViewDescriptor").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "Kistl.App.GUI");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Base.TypeRefEfImpl>("Model.FK_ViewDescriptor_supports_ViewModelTypeRefs_B", "ViewModelTypeRefs").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "Kistl.App.GUI");
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.GUI");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.GUI");
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(ViewDescriptor_supports_TypeRef_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ViewDescriptor_supports_TypeRef_RelationEntryEfImpl)obj;
            var me = (ViewDescriptor_supports_TypeRef_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Kistl.App.GUI.ViewDescriptorEfImpl)Context.FindPersistenceObject<Kistl.App.GUI.ViewDescriptor>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Kistl.App.GUI.ViewDescriptorEfImpl)Context.Find<Kistl.App.GUI.ViewDescriptor>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Kistl.App.Base.TypeRefEfImpl)Context.FindPersistenceObject<Kistl.App.Base.TypeRef>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Kistl.App.Base.TypeRefEfImpl)Context.Find<Kistl.App.Base.TypeRef>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Kistl.App.GUI
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="ViewModelDescriptor_displayedBy_ControlKind_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("ViewModelDescriptor_displayedBy_ControlKind_RelationEntryEfImpl")]
    public class ViewModelDescriptor_displayedBy_ControlKind_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ViewModelDescriptorEfImpl, Kistl.App.GUI.ControlKind, Kistl.App.GUI.ControlKindEfImpl>, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, ViewModelDescriptor_displayedBy_ControlKind_RelationEntry
    {
        [Obsolete]
        public ViewModelDescriptor_displayedBy_ControlKind_RelationEntryEfImpl()
            : base(null)
        {
        }

        public ViewModelDescriptor_displayedBy_ControlKind_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("5404456a-4527-4e40-a660-b4a5e96e4a47");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Kistl.App.GUI.ViewModelDescriptor)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.GUI.ControlKind)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Kistl.App.GUI.ViewModelDescriptor; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ViewModelDescriptor A
        {
            get { return AImpl; }
            set { AImpl = (Kistl.App.GUI.ViewModelDescriptorEfImpl)value; }
        }

        private int? _fk_A;

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Presentable_displayedBy_SecondaryControlKinds_A", "Presentable")]
        public Kistl.App.GUI.ViewModelDescriptorEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.ViewModelDescriptorEfImpl __value;
                EntityReference<Kistl.App.GUI.ViewModelDescriptorEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ViewModelDescriptorEfImpl>(
                        "Model.FK_Presentable_displayedBy_SecondaryControlKinds_A",
                        "Presentable");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.ViewModelDescriptorEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ViewModelDescriptorEfImpl>(
                        "Model.FK_Presentable_displayedBy_SecondaryControlKinds_A",
                        "Presentable");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.ViewModelDescriptorEfImpl __oldValue = (Kistl.App.GUI.ViewModelDescriptorEfImpl)r.Value;
                Kistl.App.GUI.ViewModelDescriptorEfImpl __newValue = (Kistl.App.GUI.ViewModelDescriptorEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (Kistl.App.GUI.ViewModelDescriptorEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.GUI.ControlKind; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ControlKind B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.GUI.ControlKindEfImpl)value; }
        }

        private int? _fk_B;

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Presentable_displayedBy_SecondaryControlKinds_B", "SecondaryControlKinds")]
        public Kistl.App.GUI.ControlKindEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.ControlKindEfImpl __value;
                EntityReference<Kistl.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>(
                        "Model.FK_Presentable_displayedBy_SecondaryControlKinds_B",
                        "SecondaryControlKinds");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>(
                        "Model.FK_Presentable_displayedBy_SecondaryControlKinds_B",
                        "SecondaryControlKinds");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.ControlKindEfImpl __oldValue = (Kistl.App.GUI.ControlKindEfImpl)r.Value;
                Kistl.App.GUI.ControlKindEfImpl __newValue = (Kistl.App.GUI.ControlKindEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.GUI.ControlKindEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ViewModelDescriptorEfImpl>("Model.FK_Presentable_displayedBy_SecondaryControlKinds_A", "Presentable").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>("Model.FK_Presentable_displayedBy_SecondaryControlKinds_B", "SecondaryControlKinds").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ViewModelDescriptorEfImpl>("Model.FK_Presentable_displayedBy_SecondaryControlKinds_A", "Presentable").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "Kistl.App.GUI");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.ControlKindEfImpl>("Model.FK_Presentable_displayedBy_SecondaryControlKinds_B", "SecondaryControlKinds").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "Kistl.App.GUI");
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.GUI");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Kistl.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_guid_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_B, xml, "B", "Kistl.App.GUI");
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(ViewModelDescriptor_displayedBy_ControlKind_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ViewModelDescriptor_displayedBy_ControlKind_RelationEntryEfImpl)obj;
            var me = (ViewModelDescriptor_displayedBy_ControlKind_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Kistl.App.GUI.ViewModelDescriptorEfImpl)Context.FindPersistenceObject<Kistl.App.GUI.ViewModelDescriptor>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Kistl.App.GUI.ViewModelDescriptorEfImpl)Context.Find<Kistl.App.GUI.ViewModelDescriptor>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Kistl.App.GUI.ControlKindEfImpl)Context.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Kistl.App.GUI.ControlKindEfImpl)Context.Find<Kistl.App.GUI.ControlKind>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Kistl.App.GUI
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="Visual_contains_Visual_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("Visual_contains_Visual_RelationEntryEfImpl")]
    public class Visual_contains_Visual_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<Kistl.App.GUI.Visual, Kistl.App.GUI.VisualEfImpl, Kistl.App.GUI.Visual, Kistl.App.GUI.VisualEfImpl>, Visual_contains_Visual_RelationEntry
    {
        [Obsolete]
        public Visual_contains_Visual_RelationEntryEfImpl()
            : base(null)
        {
        }

        public Visual_contains_Visual_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("4d4e1ffd-f362-40e2-9fe1-0711ded83241");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Kistl.App.GUI.Visual)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.GUI.Visual)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Kistl.App.GUI.Visual; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual A
        {
            get { return AImpl; }
            set { AImpl = (Kistl.App.GUI.VisualEfImpl)value; }
        }

        private int? _fk_A;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Visual_contains_Children_A", "Visual")]
        public Kistl.App.GUI.VisualEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.VisualEfImpl __value;
                EntityReference<Kistl.App.GUI.VisualEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>(
                        "Model.FK_Visual_contains_Children_A",
                        "Visual");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.VisualEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>(
                        "Model.FK_Visual_contains_Children_A",
                        "Visual");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.VisualEfImpl __oldValue = (Kistl.App.GUI.VisualEfImpl)r.Value;
                Kistl.App.GUI.VisualEfImpl __newValue = (Kistl.App.GUI.VisualEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (Kistl.App.GUI.VisualEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.GUI.Visual; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.GUI.VisualEfImpl)value; }
        }

        private int? _fk_B;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Visual_contains_Children_B", "Children")]
        public Kistl.App.GUI.VisualEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.VisualEfImpl __value;
                EntityReference<Kistl.App.GUI.VisualEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>(
                        "Model.FK_Visual_contains_Children_B",
                        "Children");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.VisualEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>(
                        "Model.FK_Visual_contains_Children_B",
                        "Children");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.VisualEfImpl __oldValue = (Kistl.App.GUI.VisualEfImpl)r.Value;
                Kistl.App.GUI.VisualEfImpl __newValue = (Kistl.App.GUI.VisualEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.GUI.VisualEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>("Model.FK_Visual_contains_Children_A", "Visual").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>("Model.FK_Visual_contains_Children_B", "Children").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>("Model.FK_Visual_contains_Children_A", "Visual").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "Kistl.App.GUI");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>("Model.FK_Visual_contains_Children_B", "Children").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "Kistl.App.GUI");
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.GUI");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Visual_contains_Visual_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Visual_contains_Visual_RelationEntryEfImpl)obj;
            var me = (Visual_contains_Visual_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                AImpl = (Kistl.App.GUI.VisualEfImpl)Context.Find<Kistl.App.GUI.Visual>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_B.HasValue)
                BImpl = (Kistl.App.GUI.VisualEfImpl)Context.Find<Kistl.App.GUI.Visual>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Kistl.App.GUI
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="Visual_hasContextMenu_Visual_RelationEntry")]
    [System.Diagnostics.DebuggerDisplay("Visual_hasContextMenu_Visual_RelationEntryEfImpl")]
    public class Visual_hasContextMenu_Visual_RelationEntryEfImpl : Kistl.DalProvider.Ef.RelationEntryEfImpl<Kistl.App.GUI.Visual, Kistl.App.GUI.VisualEfImpl, Kistl.App.GUI.Visual, Kistl.App.GUI.VisualEfImpl>, Visual_hasContextMenu_Visual_RelationEntry
    {
        [Obsolete]
        public Visual_hasContextMenu_Visual_RelationEntryEfImpl()
            : base(null)
        {
        }

        public Visual_hasContextMenu_Visual_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("358c14b9-fef5-495d-8d44-04e84186830e");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Kistl.App.GUI.Visual)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Kistl.App.GUI.Visual)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Kistl.App.GUI.Visual; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual A
        {
            get { return AImpl; }
            set { AImpl = (Kistl.App.GUI.VisualEfImpl)value; }
        }

        private int? _fk_A;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Visual_hasContextMenu_ContextMenu_A", "Visual")]
        public Kistl.App.GUI.VisualEfImpl AImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.VisualEfImpl __value;
                EntityReference<Kistl.App.GUI.VisualEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>(
                        "Model.FK_Visual_hasContextMenu_ContextMenu_A",
                        "Visual");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.VisualEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>(
                        "Model.FK_Visual_hasContextMenu_ContextMenu_A",
                        "Visual");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.VisualEfImpl __oldValue = (Kistl.App.GUI.VisualEfImpl)r.Value;
                Kistl.App.GUI.VisualEfImpl __newValue = (Kistl.App.GUI.VisualEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("A", null, __oldValue, __newValue);

                r.Value = (Kistl.App.GUI.VisualEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("A", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Kistl.App.GUI.Visual; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual B
        {
            get { return BImpl; }
            set { BImpl = (Kistl.App.GUI.VisualEfImpl)value; }
        }

        private int? _fk_B;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Visual_hasContextMenu_ContextMenu_B", "ContextMenu")]
        public Kistl.App.GUI.VisualEfImpl BImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.VisualEfImpl __value;
                EntityReference<Kistl.App.GUI.VisualEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>(
                        "Model.FK_Visual_hasContextMenu_ContextMenu_B",
                        "ContextMenu");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.GUI.VisualEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>(
                        "Model.FK_Visual_hasContextMenu_ContextMenu_B",
                        "ContextMenu");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.GUI.VisualEfImpl __oldValue = (Kistl.App.GUI.VisualEfImpl)r.Value;
                Kistl.App.GUI.VisualEfImpl __newValue = (Kistl.App.GUI.VisualEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("B", null, __oldValue, __newValue);

                r.Value = (Kistl.App.GUI.VisualEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("B", null, __oldValue, __newValue);
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>("Model.FK_Visual_hasContextMenu_ContextMenu_A", "Visual").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>("Model.FK_Visual_hasContextMenu_ContextMenu_B", "ContextMenu").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>("Model.FK_Visual_hasContextMenu_ContextMenu_A", "Visual").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "A", "Kistl.App.GUI");
            }
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.GUI.VisualEfImpl>("Model.FK_Visual_hasContextMenu_ContextMenu_B", "ContextMenu").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "B", "Kistl.App.GUI");
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "Kistl.App.GUI");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Visual_hasContextMenu_Visual_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Visual_hasContextMenu_Visual_RelationEntryEfImpl)obj;
            var me = (Visual_hasContextMenu_Visual_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                AImpl = (Kistl.App.GUI.VisualEfImpl)Context.Find<Kistl.App.GUI.Visual>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_B.HasValue)
                BImpl = (Kistl.App.GUI.VisualEfImpl)Context.Find<Kistl.App.GUI.Visual>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Kistl.App.Projekte
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.ValueCollectionEntry
    [EdmEntityType(NamespaceName="Model", Name="Kunde_EMails_CollectionEntry")]
    [System.Diagnostics.DebuggerDisplay("Kunde_EMails_CollectionEntryEfImpl")]
    public class Kunde_EMails_CollectionEntryEfImpl : Kistl.DalProvider.Ef.ValueCollectionEntryEfImpl<Kistl.App.Projekte.Kunde, Kistl.App.Projekte.KundeEfImpl, string>, Kistl.API.IExportableValueCollectionEntryInternal, Kunde_EMails_CollectionEntry
    {
[Obsolete]
public Kunde_EMails_CollectionEntryEfImpl()
: base(null)
{
}
public Kunde_EMails_CollectionEntryEfImpl(Func<IFrozenContext> lazyCtx)
    : base(lazyCtx)
{
}
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty

        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // fkBackingName=_fk_Parent; fkGuidBackingName=;
        // referencedInterface=Kistl.App.Projekte.Kunde; moduleNamespace=Kistl.App.Projekte;
        // inverse Navigator=EMails; is list;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Projekte.Kunde Parent
        {
            get { return ParentImpl; }
            set { ParentImpl = (Kistl.App.Projekte.KundeEfImpl)value; }
        }

        private int? _fk_Parent;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Kunde_value_EMails", "Kunde")]
        public Kistl.App.Projekte.KundeEfImpl ParentImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Projekte.KundeEfImpl __value;
                EntityReference<Kistl.App.Projekte.KundeEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Projekte.KundeEfImpl>(
                        "Model.FK_Kunde_value_EMails",
                        "Kunde");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Projekte.KundeEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Projekte.KundeEfImpl>(
                        "Model.FK_Kunde_value_EMails",
                        "Kunde");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Projekte.KundeEfImpl __oldValue = (Kistl.App.Projekte.KundeEfImpl)r.Value;
                Kistl.App.Projekte.KundeEfImpl __newValue = (Kistl.App.Projekte.KundeEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("Parent", null, __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("EMails", null, null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("EMails", null, null, null);
                }

                r.Value = (Kistl.App.Projekte.KundeEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("Parent", null, __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("EMails", null, null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("EMails", null, null, null);
                }
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.API.IDataObject ParentObject
        {
            get { return Parent; }
            set { Parent = (Kistl.App.Projekte.KundeEfImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Value
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Value;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Value != value)
                {
                    var __oldValue = _Value;
                    var __newValue = value;
                    NotifyPropertyChanging("Value", __oldValue, __newValue);
                    _Value = __newValue;
                    NotifyPropertyChanged("Value", __oldValue, __newValue);
                }
            }
        }
        private string _Value;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public object ValueObject
        {
            get { return Value; }
            set { Value = (string)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Projekte.KundeEfImpl>("Model.FK_Kunde_value_EMails", "Kunde").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
            BinarySerializer.ToStream(this._Value, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._fk_Parent, binStream);
            BinarySerializer.FromStream(out this._Value, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Projekte.KundeEfImpl>("Model.FK_Kunde_value_EMails", "Kunde").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "Parent", "Kistl.App.Projekte");
            }
            XmlStreamer.ToStream(this._Value, xml, "Value", "Kistl.App.Projekte");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._fk_Parent, xml, "Parent", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._Value, xml, "Value", "Kistl.App.Projekte");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Kistl.App.Projekte")) XmlStreamer.ToStream(this._Value, xml, "Value", "Kistl.App.Projekte");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.FromStream(ref this._Value, xml, "Value", "Kistl.App.Projekte");
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Kunde_EMails_CollectionEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Kunde_EMails_CollectionEntryEfImpl)obj;
            var me = (Kunde_EMails_CollectionEntryEfImpl)this;

            me._fk_Parent = other._fk_Parent;
            me.Value = other.Value;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_Parent.HasValue)
                Parent = (Kistl.App.Projekte.KundeEfImpl)Context.Find<Kistl.App.Projekte.Kunde>(_fk_Parent.Value);
            else
                Parent = null;

        }


        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "Parent":
                    {
                        var __oldValue = _fk_Parent;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("Parent", __oldValue, __newValue);
                        _fk_Parent = __newValue;
                        NotifyPropertyChanged("Parent", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.ValueCollectionEntry
}

namespace Kistl.App.Test
{
    // BEGIN Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.ValueCollectionEntry
    [EdmEntityType(NamespaceName="Model", Name="TestCustomObject_PhoneNumbersOther_CollectionEntry")]
    [System.Diagnostics.DebuggerDisplay("TestCustomObject_PhoneNumbersOther_CollectionEntryEfImpl")]
    public class TestCustomObject_PhoneNumbersOther_CollectionEntryEfImpl : Kistl.DalProvider.Ef.CompoundCollectionEntryEfImpl<Kistl.App.Test.TestCustomObject, Kistl.App.Test.TestCustomObjectEfImpl, Kistl.App.Test.TestPhoneCompoundObject, Kistl.App.Test.TestPhoneCompoundObjectEfImpl>, TestCustomObject_PhoneNumbersOther_CollectionEntry
    {
[Obsolete]
public TestCustomObject_PhoneNumbersOther_CollectionEntryEfImpl()
: base(null)
{
            _Value = new Kistl.App.Test.TestPhoneCompoundObjectEfImpl(false, this, "Value");
}
public TestCustomObject_PhoneNumbersOther_CollectionEntryEfImpl(Func<IFrozenContext> lazyCtx)
    : base(lazyCtx)
{
            _Value = new Kistl.App.Test.TestPhoneCompoundObjectEfImpl(false, this, "Value");
}
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.IdProperty

        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // fkBackingName=_fk_Parent; fkGuidBackingName=;
        // referencedInterface=Kistl.App.Test.TestCustomObject; moduleNamespace=Kistl.App.Test;
        // inverse Navigator=PhoneNumbersOther; is list;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.TestCustomObject Parent
        {
            get { return ParentImpl; }
            set { ParentImpl = (Kistl.App.Test.TestCustomObjectEfImpl)value; }
        }

        private int? _fk_Parent;


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_TestCustomObject_value_PhoneNumbersOther", "TestCustomObject")]
        public Kistl.App.Test.TestCustomObjectEfImpl ParentImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Test.TestCustomObjectEfImpl __value;
                EntityReference<Kistl.App.Test.TestCustomObjectEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.TestCustomObjectEfImpl>(
                        "Model.FK_TestCustomObject_value_PhoneNumbersOther",
                        "TestCustomObject");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                if (r.Value != null) r.Value.AttachToContext(this.Context);
                __value = r.Value;
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                EntityReference<Kistl.App.Test.TestCustomObjectEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Kistl.App.Test.TestCustomObjectEfImpl>(
                        "Model.FK_TestCustomObject_value_PhoneNumbersOther",
                        "TestCustomObject");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Kistl.App.Test.TestCustomObjectEfImpl __oldValue = (Kistl.App.Test.TestCustomObjectEfImpl)r.Value;
                Kistl.App.Test.TestCustomObjectEfImpl __newValue = (Kistl.App.Test.TestCustomObjectEfImpl)value;

                // Changing Event fires before anything is touched
                // navigators may not be notified to entity framework
                NotifyPropertyChanging("Parent", null, __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("PhoneNumbersOther", null, null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("PhoneNumbersOther", null, null, null);
                }

                r.Value = (Kistl.App.Test.TestCustomObjectEfImpl)__newValue;

                // everything is done. fire the Changed event
                // navigators may not be notified to entity framework
                NotifyPropertyChanged("Parent", null, __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("PhoneNumbersOther", null, null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("PhoneNumbersOther", null, null, null);
                }
            }
        }

        // END Kistl.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.API.IDataObject ParentObject
        {
            get { return Parent; }
            set { Parent = (Kistl.App.Test.TestCustomObjectEfImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Kistl.DalProvider.Ef.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        public Kistl.App.Test.TestPhoneCompoundObject Value
        {
            get { return ValueImpl.CompoundObject_IsNull ? null : ValueImpl; }
            set { ValueImpl = (Kistl.App.Test.TestPhoneCompoundObjectEfImpl)value; }
        }

        /// <summary>backing store for Value</summary>
        private Kistl.App.Test.TestPhoneCompoundObjectEfImpl _Value;

        /// <summary>backing property for Value, takes care of attaching/detaching the values, mapped via EF</summary>
        [XmlIgnore()]
        [EdmComplexProperty()]
        public Kistl.App.Test.TestPhoneCompoundObjectEfImpl ValueImpl
        {
            get 
			{ 
                if (!CurrentAccessRights.HasReadRights()) return null;
				return _Value; 
			}
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (!object.Equals(_Value, value))
                {
                    var __oldValue = _Value;
					var __newValue = value;

                    NotifyPropertyChanging("Value", "ValueImpl", __oldValue, __newValue);

                    if (_Value != null)
                    {
                        _Value.DetachFromObject(this, "Value");
                    }
                    if(__newValue == null)
                    {
                        _Value = new Kistl.App.Test.TestPhoneCompoundObjectEfImpl(true, this, "Value");
                    }
                    else
                    {
                        _Value = (Kistl.App.Test.TestPhoneCompoundObjectEfImpl)__newValue.Clone();
                        _Value.AttachToObject(this, "Value");
                    }

                    NotifyPropertyChanged("Value", "ValueImpl", __oldValue, value);
                }
            }
        }
           // END Kistl.DalProvider.Ef.Generator.Templates.Properties.CompoundObjectPropertyTemplate        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public object ValueObject
        {
            get { return Value; }
            set { Value = (Kistl.App.Test.TestPhoneCompoundObjectEfImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Test.TestCustomObjectEfImpl>("Model.FK_TestCustomObject_value_PhoneNumbersOther", "TestCustomObject").EntityKey;
                BinarySerializer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, binStream);
            }
			BinarySerializer.ToStream(this.Value, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._fk_Parent, binStream);
			{
                // use backing store to avoid notifications
				Kistl.App.Test.TestPhoneCompoundObjectEfImpl tmp;
				BinarySerializer.FromStream(out tmp, binStream);
	            this.ValueImpl = tmp ?? new Kistl.App.Test.TestPhoneCompoundObjectEfImpl(true, this, "Value");
                this.ValueImpl.AttachToObject(this, "Value");
	        }
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var key = this.RelationshipManager.GetRelatedReference<Kistl.App.Test.TestCustomObjectEfImpl>("Model.FK_TestCustomObject_value_PhoneNumbersOther", "TestCustomObject").EntityKey;
                XmlStreamer.ToStream(key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null, xml, "Parent", "Kistl.App.Test");
            }
			// TODO: Add XML Serializer here
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._fk_Parent, xml, "Parent", "Kistl.App.Test");
            // TODO: Add XML Serializer here
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(TestCustomObject_PhoneNumbersOther_CollectionEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (TestCustomObject_PhoneNumbersOther_CollectionEntryEfImpl)obj;
            var me = (TestCustomObject_PhoneNumbersOther_CollectionEntryEfImpl)this;

            me._fk_Parent = other._fk_Parent;
            if (me.Value == null && other.Value != null) {
                me.Value = (Kistl.App.Test.TestPhoneCompoundObject)other.Value.Clone();
            } else if (me.Value != null && other.Value == null) {
                me.Value = null;
            } else if (me.Value != null && other.Value != null) {
                me.Value.ApplyChangesFrom(other.Value);
            }
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_Parent.HasValue)
                Parent = (Kistl.App.Test.TestCustomObjectEfImpl)Context.Find<Kistl.App.Test.TestCustomObject>(_fk_Parent.Value);
            else
                Parent = null;

        }


        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "Parent":
                    {
                        var __oldValue = _fk_Parent;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("Parent", __oldValue, __newValue);
                        _fk_Parent = __newValue;
                        NotifyPropertyChanged("Parent", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
    }
    // END Kistl.DalProvider.Ef.Generator.Templates.CollectionEntries.ValueCollectionEntry
}
