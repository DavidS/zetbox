using System;
using System.Collections.Generic;
using System.Linq;
using Kistl.API;
using Kistl.API.Server;
using Kistl.App.Base;
using Kistl.App.Extensions;
using Kistl.Generator;
using Kistl.Generator.Extensions;


namespace Kistl.Generator.Templates
{
    [Arebis.CodeGeneration.TemplateInfo(@"P:\Kistl\Kistl.Generator\Templates\TypeBase.cst")]
    public partial class TypeBase : Kistl.Generator.ResourceTemplate
    {
		protected IKistlContext ctx;
		protected DataType DataType;


        public static void Call(Arebis.CodeGeneration.IGenerationHost _host, IKistlContext ctx, DataType DataType)
        {
            if (_host == null) { throw new global::System.ArgumentNullException("_host"); }

            _host.CallTemplate("TypeBase", ctx, DataType);
        }

        public TypeBase(Arebis.CodeGeneration.IGenerationHost _host, IKistlContext ctx, DataType DataType)
            : base(_host)
        {
			this.ctx = ctx;
			this.DataType = DataType;

        }

        public override void Generate()
        {
#line 16 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
this.WriteObjects("// <autogenerated/>\r\n");
this.WriteObjects("\r\n");
#line 18 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
ApplyGlobalPreambleTemplate(); 
#line 19 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
this.WriteObjects("namespace ",  DataType.Module.Namespace , "\r\n");
this.WriteObjects("{\r\n");
this.WriteObjects("    using System;\r\n");
this.WriteObjects("    using System.Collections;\r\n");
this.WriteObjects("    using System.Collections.Generic;\r\n");
this.WriteObjects("    using System.Collections.ObjectModel;\r\n");
this.WriteObjects("    using System.Linq;\r\n");
this.WriteObjects("    using System.Text;\r\n");
this.WriteObjects("    using System.Xml;\r\n");
this.WriteObjects("    using System.Xml.Serialization;\r\n");
this.WriteObjects("\r\n");
this.WriteObjects("    using Kistl.API;\r\n");
this.WriteObjects("\r\n");
#line 32 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
foreach(string ns in GetAdditionalImports().Distinct().OrderBy(s => s)) { 
#line 33 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
this.WriteObjects("    using ",  ns , ";\r\n");
#line 34 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
} 
#line 35 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
this.WriteObjects("\r\n");
#line 36 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
ApplyNamespacePreambleTemplate(); 
#line 37 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
this.WriteObjects("    /// <summary>\r\n");
this.WriteObjects("    /// ",  DataType.Description , "\r\n");
this.WriteObjects("    /// </summary>\r\n");
#line 41 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
var mungedClassName = GetTypeName();

    ApplyClassAttributeTemplate();

#line 45 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
this.WriteObjects("    [System.Diagnostics.DebuggerDisplay(\"",  DataType.Name , "\")]\r\n");
this.WriteObjects("    public",  GetClassModifiers() , " class ",  mungedClassName , " ",  GetInheritance() , "\r\n");
this.WriteObjects("    {\r\n");
#line 48 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
ApplyClassHeadTemplate(); 
#line 49 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
ApplyConstructorTemplate(); 
#line 51 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
// TODO: decouple serializing format from Name order
        foreach(Property p in DataType.Properties.OrderBy(p => p.Name))
        {

#line 55 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
this.WriteObjects("\r\n");
this.WriteObjects("        /// <summary>\r\n");
this.WriteObjects("        /// ",  p.Description , "\r\n");
this.WriteObjects("        /// </summary>\r\n");
#line 60 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
ApplyPropertyTemplate(p);
        }

        foreach(var mg in MethodsToGenerate().GroupBy(m => m.Name).OrderBy(mg => mg.Key))
        {
            int index = 0;
            foreach(var m in mg.OrderByDefault())
            {

#line 69 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
this.WriteObjects("\r\n");
this.WriteObjects("        /// <summary>\r\n");
this.WriteObjects("        /// ",  m.Description , "\r\n");
this.WriteObjects("        /// </summary>\r\n");
#line 74 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
ApplyMethodTemplate(m, index++);
            }
        }

#line 78 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
this.WriteObjects("\r\n");
this.WriteObjects("        public override Type GetImplementedInterface()\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("            return typeof(",  DataType.Name , ");\r\n");
this.WriteObjects("        }\r\n");
#line 84 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
ApplyApplyChangesFromMethod();
        ApplyAttachToContextMethod();
        ApplyClassTailTemplate();

#line 88 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
this.WriteObjects("\r\n");
this.WriteObjects("        #region Serializer\r\n");
this.WriteObjects("\r\n");
#line 92 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
Serialization.SerializerTemplate.Call(Host, ctx,
            Serialization.SerializerDirection.ToStream, this.MembersToSerialize, true, null);
        
        Serialization.SerializerTemplate.Call(Host, ctx,
            Serialization.SerializerDirection.FromStream, this.MembersToSerialize, true, null);

        Serialization.SerializerTemplate.Call(Host, ctx,
            Serialization.SerializerDirection.ToXmlStream, this.MembersToSerialize, true, null);
        
        Serialization.SerializerTemplate.Call(Host, ctx,
            Serialization.SerializerDirection.FromXmlStream, this.MembersToSerialize, true, null);

        if((DataType is ObjectClass) && ((ObjectClass)DataType).ImplementsIExportable())
        {
            ObjectClass cls = (ObjectClass)DataType;            
            Serialization.SerializerTemplate.Call(Host, ctx,
                Serialization.SerializerDirection.Export, this.MembersToSerialize, cls.BaseObjectClass != null, GetExportGuidBackingStoreReference());
            
            Serialization.SerializerTemplate.Call(Host, ctx,
                Serialization.SerializerDirection.MergeImport, this.MembersToSerialize, cls.BaseObjectClass != null, GetExportGuidBackingStoreReference());
        }

#line 114 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
this.WriteObjects("\r\n");
this.WriteObjects("        #endregion\r\n");
this.WriteObjects("\r\n");
this.WriteObjects("    }\r\n");
#line 118 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
ApplyNamespaceTailTemplate(); 
#line 119 "P:\Kistl\Kistl.Generator\Templates\TypeBase.cst"
this.WriteObjects("}");

        }

    }
}