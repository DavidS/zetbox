<%@ CodeTemplate Language="C#"
    Name="Properties.CalculatedProperty"
    ClassName="Kistl.Generator.Templates.Properties.CalculatedProperty"
    Inherits="Kistl.Generator.MemberTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="serializationList" Type="Serialization.SerializationMembersList" %>
<%@ Parameter Name="modulenamespace" Type="string" %>
<%@ Parameter Name="className" Type="string" %>
<%@ Parameter Name="referencedType" Type="string" %>
<%@ Parameter Name="propertyName" Type="string" %>
<%@ Parameter Name="getterEventName" Type="string" %>
<%@ Parameter Name="isCompound" Type="bool" %>
        // BEGIN <%= this.GetType() %>
        <%= GetModifiers() %> <%= referencedType %> <%= propertyName %>
        {
            get
            {
                if (<%= getterEventName %> == null)
                {
                    throw new NotImplementedException("No handler registered on calculated property <%= className %>.<%= propertyName %>");
                }
<% if (isCompound) { %>
                var e = new PropertyGetterEventArgs<<%= referencedType %>>(default(<%= referencedType %>));
                <%= getterEventName %>(this, e);
                return e.Result;
<% } else { %>
                if (_<%= propertyName %>_IsDirty)
                {
                    var e = new PropertyGetterEventArgs<<%= referencedType %>>(default(<%= referencedType %>));
                    <%= getterEventName %>(this, e);
                    <%= ApplyStorageStatement("e.Result") %>
                    _<%= propertyName %>_IsDirty = false;
                }
                return <%= ApplyResultExpression() %>;
<% } %>
            }
        }
<% if (!isCompound) { %>
        <%= ApplyBackingStorageDefinition() %>
<% } %>
        private bool _<%= propertyName %>_IsDirty = true;
        // END <%= this.GetType() %>
