<%@ CodeTemplate Language="C#"
    Name="Properties.CompoundObjectPropertyTemplate"
    ClassName="Kistl.Generator.Templates.Properties.CompoundObjectPropertyTemplate"
    Inherits="Kistl.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Import Namespace="Kistl.Generator" %>
<%@ Import Namespace="Kistl.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="serializationList" Type="Kistl.Generator.Templates.Serialization.SerializationMembersList" %>
<%@ Parameter Name="xmlNamespace" Type="string" %>
<%@ Parameter Name="propName" Type="string" %>
<%@ Parameter Name="backingPropertyName" Type="string" %>
<%@ Parameter Name="backingStoreName" Type="string" %>
<%@ Parameter Name="coType" Type="string" %>
<%@ Parameter Name="coImplementationType" Type="string" %>
<%@ Parameter Name="isNullable" Type="bool" %>
        // <%= this.GetType() %>
        // implement the user-visible interface
        public <%= coType %> <%= propName %>
        {
            get { return <%= backingPropertyName %>; }
            set { <%= backingPropertyName %> = (<%= coImplementationType %>)value; }
        }

        /// <summary>backing store for <%= propName %></summary>
        private <%= coImplementationType %> <%= backingStoreName %>;

        /// <summary>backing property for <%= propName %>, takes care of attaching/detaching the values</summary>
        private <%= coImplementationType %> <%= backingPropertyName %>
        {
            get { return <%= backingStoreName %>; }
            set
            {
<% if(!isNullable) { %>
                if (value == null)
                    throw new ArgumentNullException("value");
<% } %>
                var __oldValue = <%= backingStoreName %>;
                var __newValue = value;

                NotifyPropertyChanging("<%= propName %>", __oldValue, __newValue);

                if (<%= backingStoreName %> != null) <%= backingStoreName %>.DetachFromObject(this, "<%= propName %>");
                <%= backingStoreName %> = value != null ? (<%= coImplementationType %>)value.Clone() : null;
                if (<%= backingStoreName %> != null) <%= backingStoreName %>.AttachToObject(this, "<%= propName %>");

                NotifyPropertyChanged("<%= propName %>", __oldValue, __newValue);
            }
        }
<%
        AddSerialization(serializationList, propName, backingPropertyName);
%>
