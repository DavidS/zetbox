<%@ CodeTemplate Language="C#"    
    Name="Properties.ObjectListProperty"
    ClassName="Kistl.Generator.Templates.Properties.ObjectListProperty"    
    Inherits="Kistl.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Import Namespace="Kistl.Generator" %>
<%@ Import Namespace="Kistl.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="serializationList" Type="Kistl.Generator.Templates.Serialization.SerializationMembersList" %>
<%@ Parameter Name="name" Type="string" %>
<%@ Parameter Name="wrapperName" Type="string" %>
<%@ Parameter Name="wrapperClass" Type="string" %>
<%@ Parameter Name="exposedListType" Type="string" %>
<%@ Parameter Name="rel" Type="Relation" %>
<%@ Parameter Name="endRole" Type="RelationEndRole" %>
<%@ Parameter Name="positionPropertyName" Type="string" %>
<%@ Parameter Name="otherName" Type="string" %>
<%@ Parameter Name="referencedInterface" Type="string" %>
<%

    RelationEnd relEnd = rel.GetEndFromRole(endRole);
    RelationEnd otherEnd = rel.GetOtherEnd(relEnd);

    string idsListName = name + "Ids";
    
    // whether or not the collection will be eagerly loaded
    bool eagerLoading = relEnd.Navigator != null && relEnd.Navigator.EagerLoading;
    
%>
        // <%= this.GetType() %>
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public <%= exposedListType %><<%= referencedInterface %>> <%= name %>
        {
            get
            {
                if (<%= wrapperName %> == null)
                {
                    List<<%= referencedInterface %>> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
<% if (eagerLoading) { %>
                        if(<%= idsListName %> != null)
                        {
                            serverList = <%= idsListName %>.Select(id => Context.Find<<%= referencedInterface %>>(id)).ToList();
                            <%= idsListName %> = null; // allow id list to be garbage collected
                        }
                        else
                        {
                            serverList = Context.GetListOf<<%= referencedInterface %>>(this, "<%= name %>");
                        }
<% } else { %>
                        serverList = Context.GetListOf<<%= referencedInterface %>>(this, "<%= name %>");
<% } %>
                    }
                    else
                    {
                        serverList = new List<<%= referencedInterface %>>();
                    }
    
                    <%= wrapperName %> = new <%= wrapperClass %><<%= referencedInterface %>>(
                        "<%= otherName %>",
                        <% if (!String.IsNullOrEmpty(positionPropertyName)) { %>"<%= positionPropertyName %>"<% } else { %>null<% } %>,
                        this,
                        () => this.NotifyPropertyChanged("<%= name %>", null, null),
                        serverList);
                }
                return <%= wrapperName %>;
            }
        }
    
        private <%= wrapperClass %><<%= referencedInterface %>> <%= wrapperName %>;

<%
    if (eagerLoading)
    {
%>
        private List<int> <%= name %>Ids;
        private bool <%= name %>_was_eagerLoaded = false;
<%
    }

    AddSerialization(serializationList, name, eagerLoading);
%>
