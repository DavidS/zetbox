<%@ CodeTemplate Language="C#"
    Name="ObjectClasses.ReloadReferences"
    ClassName="Kistl.Generator.Templates.ObjectClasses.ReloadReferences"
    Inherits="Kistl.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Import Namespace="Kistl.Generator" %>
<%@ Import Namespace="Kistl.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="cls" Type="ObjectClass" %>

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
<%
    if (cls.BaseObjectClass != null) {
%>
            base.ReloadReferences();

<%
    }
%>
            // fix direct object references
<%
	// TODO: Use only 1 side relation ends
    foreach(var prop in cls.Properties.OfType<ObjectReferenceProperty>()
        .Where(orp => !orp.IsList())
        .OrderBy(orp => orp.ObjectClass.Name)
        .ThenBy(orp => orp.Name))
    {
        Relation rel = Kistl.App.Extensions.RelationExtensions.Lookup(ctx, prop);
        RelationEnd relEnd = rel.GetEnd(prop);
        RelationEnd otherEnd = rel.GetOtherEnd(relEnd);

        if (otherEnd.Type.ImplementsIExportable()) {
            string referencedInterface = otherEnd.Type.GetDataTypeString();
            string referencedImplementation = otherEnd.Type.GetDataTypeString() + ImplementationSuffix;
            string name = prop.Name;
            string implName = name + Kistl.API.Helper.ImplementationSuffix;
            string fkBackingName = "_fk_" + name;
            string fkGuidBackingName = "_fk_guid_" + name;
            bool isExportable = relEnd.Type.ImplementsIExportable() && otherEnd.Type.ImplementsIExportable();

            ReloadOneReference.Call(Host, ctx, referencedInterface, referencedImplementation, name, implName, fkBackingName, fkGuidBackingName, isExportable);
        }
    }
%>
        }
