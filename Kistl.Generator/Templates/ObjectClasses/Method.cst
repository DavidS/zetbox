<%@ CodeTemplate Language="C#"
    Name="ObjectClasses.Method"
    ClassName="Kistl.Generator.Templates.ObjectClasses.Method"
    Inherits="Kistl.Generator.MemberTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Generator" %>
<%@ Import Namespace="Kistl.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="dt" Type="Kistl.App.Base.DataType" %>
<%@ Parameter Name="m" Type="Kistl.App.Base.Method" %>
<%@ Parameter Name="index" Type="int" %>
<%@ Parameter Name="indexSuffix" Type="string" %>
<%@ Parameter Name="eventName" Type="string" %>
        // BEGIN <%= this.GetType() %>
<%
    foreach(var attr in GetMethodAttributes())
    {
%>
        <%= attr %>
<%
    }
%>
        <%= GetModifiers() %> <%= GetReturnType() %> <%= m.Name %>(<%= GetParameterDefinitions() %>)
<%

    string delegateName = m.Name + indexSuffix + "_Handler";
    var returnParam = m.Parameter.SingleOrDefault(parameter => parameter.IsReturnParameter);

    string parameterDefs = m.GetParameterDefinitions();
    if (!String.IsNullOrEmpty(parameterDefs))
    {
        // add leading comma for later usage
        parameterDefs = ", " + parameterDefs;
    }

    string argumentDefs = m.GetArguments();
    if (!String.IsNullOrEmpty(argumentDefs))
    {
        // add leading comma for later usage
        argumentDefs = ", " + argumentDefs;
    }

    if (returnParam == null)
    {
%>
        {
            // base.<%= m.Name %>();
            if (<%= eventName %> != null)
            {
                <%= eventName %>(this<%= argumentDefs %>);
            }
            else
            {
<%
        if (m.ObjectClass == dt || !(dt is ObjectClass))
        {
%>
                throw new NotImplementedException("No handler registered on method <%= m.ObjectClass.Name %>.<%= m.Name %>");
<%
        }
        else
        {
%>
                base.<%= m.Name %>(<%= m.GetArguments() %>);
<%
        }
%>
            }
        }
<%
        // define delegate type only on base class
        if (this.m.ObjectClass == this.dt)
        {
%>
        public delegate void <%= delegateName %><T>(T obj<%= parameterDefs %>);
<%
        }
    }
    else
    {

        string returnArgsType = String.Format("MethodReturnEventArgs<{0}>", returnParam.GetParameterTypeString());
%>
        {
            var e = new <%= returnArgsType %>();
            if (<%= eventName %> != null)
            {
                <%= eventName %>(this, e<%= argumentDefs %>);
            }
            else
            {
<%
        if (m.ObjectClass == dt || !(dt is ObjectClass))
        {
%>
                throw new NotImplementedException("No handler registered on <%= m.ObjectClass.Name %>.<%= m.Name %>");
<%
        }
        else
        {
%>
                e.Result = base.<%= m.Name %>(<%= m.GetArguments() %>);
<%
        }
%>
            }
            return e.Result;
        }
<%

        // define delegate type only on base class
        if (this.m.ObjectClass == this.dt)
        {
%>
        public delegate void <%= delegateName %><T>(T obj, <%= returnArgsType %> ret<%= parameterDefs %>);
<%
        }
    }

%>
        public static event <%= delegateName %><<%= dt.Name %>> <%= eventName %>;
<% 
if(index == 0) {
	// Only for first overload
%>
		// CanExec
<%
		var eventName_CanExec = eventName + "_CanExec";
%>
		public static event CanExecMethodEventHandler<<%= dt.Name %>> <%= eventName_CanExec %>;

        [EventBasedMethod("<%= eventName_CanExec %>")]
        <%= GetModifiers() %> bool <%= m.Name %>CanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (<%= eventName_CanExec %> != null)
				{
					<%= eventName_CanExec %>(this, e);
				}
				else
				{
<%      if (m.ObjectClass == dt || !(dt is ObjectClass)) { %>
					e.Result = true;
<%      } else { %>
					e.Result = base.<%= m.Name %>CanExec;
<%      } %>
				}
				return e.Result;
			}
        }

		// CanExecReason
<%
		var eventName_CanExecReason = eventName + "_CanExecReason";
%>
		public static event CanExecReasonMethodEventHandler<<%= dt.Name %>> <%= eventName_CanExecReason %>;

        [EventBasedMethod("<%= eventName_CanExecReason %>")]
        <%= GetModifiers() %> string <%= m.Name %>CanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (<%= eventName_CanExecReason %> != null)
				{
					<%= eventName_CanExecReason %>(this, e);
				}
				else
				{
<%      if (m.ObjectClass == dt || !(dt is ObjectClass)) { %>
					e.Result = string.Empty;
<%      } else { %>
					e.Result = base.<%= m.Name %>CanExecReason;
<%      } %>
				}
				return e.Result;
			}
        }
<% } // Only for first overload %>
        // END <%= this.GetType() %>
