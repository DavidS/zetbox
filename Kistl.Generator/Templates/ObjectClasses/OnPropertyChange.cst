<%@ CodeTemplate Language="C#"
    Name="ObjectClasses.OnPropertyChange"
    ClassName="Kistl.Generator.Templates.ObjectClasses.OnPropertyChange"
    Inherits="Kistl.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Generator" %>
<%@ Import Namespace="Kistl.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="dt" Type="DataType" %>
<% var recalcProps = GetRecalcProperties();                                                                         %>
<% var auditProps = GetAuditProperties();                                                                           %>
        #region <%= this.GetType() %>

<% if (auditProps.Count > 0 && !(dt is CompoundObject)) {                                                           %>
        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
<%      foreach (var prop in auditProps ) {                                                                         %>
                case "<%= prop.Name %>":
<%      }                                                                                                           %>
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
<% }                                                                                                                %>

<% if (recalcProps.Count > 0 && !(dt is CompoundObject)) {                                                          %>
        public override void Recalculate(string property)
        {
            switch (property)
            {
<%      foreach (var prop in recalcProps) {                                                                         %>
                case "<%= prop.Name %>":
<%          ApplyNotifyPropertyChanging(prop);                                                                      %>
                    _<%= prop.Name %>_IsDirty = true;
<%          ApplyNotifyPropertyChanged(prop);                                                                       %>
                    return;
<%      }                                                                                                           %>
            }

            base.Recalculate(property);
        }
<% }                                                                                                                %>
        #endregion // <%= this.GetType() %>
