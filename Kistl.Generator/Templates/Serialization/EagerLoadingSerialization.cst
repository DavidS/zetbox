<%@ CodeTemplate Language="C#" 
	Name="Serialization.EagerLoadingSerialization"
	ClassName="Kistl.Generator.Templates.Serialization.EagerLoadingSerialization" 
	Inherits="Kistl.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Generator" %>
<%@ Import Namespace="Kistl.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="direction" Type="SerializerDirection" %>
<%@ Parameter Name="streamName" Type="string" %>
<%@ Parameter Name="xmlnamespace" Type="string" %>
<%@ Parameter Name="xmlname" Type="string" %>
<%@ Parameter Name="collectionName" Type="string" %>
<%@ Parameter Name="serializeIds" Type="bool" %>
<%@ Parameter Name="serializeRelationEntries" Type="bool" %>

<%
	switch(direction)
	{
		case SerializerDirection.ToStream:
%>
			<%= streamName %>.Write(eagerLoadLists);
			if (eagerLoadLists && auxObjects != null)
			{
<% if (serializeIds) {                                                          %>
				<%= streamName %>.Write(true);
				<%= streamName %>.Write(<%= collectionName %>.Count);
<% }                                                                            %>
				foreach(var obj in <%= collectionName %>)
				{
					auxObjects.Add(obj);
<% if (serializeIds) {                                                          %>
					<%= streamName %>.Write(obj.ID);
<% }                                                                            %>
				}
<% if (serializeRelationEntries) { ApplyRelationEntrySerialization(); }         %>
			}
<% if (serializeIds) {                                                          %>
			else
			{
				<%= streamName %>.Write(false);
			}
<% }                                                                            %>
<%
			break;
		case SerializerDirection.FromStream:
%>
			<%= streamName %>.Read(out <%= collectionName %>_was_eagerLoaded);
<% if (serializeIds) {                                                          %>
			{
				bool containsList;
				<%= streamName %>.Read(out containsList);
				if (containsList)
				{
					int numElements;
					<%= streamName %>.Read(out numElements);
					<%= collectionName %>Ids = new List<int>(numElements);
					while (numElements-- > 0) 
					{
						int id;
						<%= streamName %>.Read(out id);
						<%= collectionName %>Ids.Add(id);
					}
				}
			}
<% }                                                                            %>
<%
			break;
		default:
			throw new ArgumentOutOfRangeException("direction");
	}
%>