<%@ CodeTemplate Language="C#" 
	Name="Serialization.EagerLoadingSerialization"
	ClassName="Kistl.Generator.Templates.Serialization.EagerLoadingSerialization" 
	Inherits="Kistl.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Generator" %>
<%@ Import Namespace="Kistl.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="direction" Type="SerializerDirection" %>
<%@ Parameter Name="streamName" Type="string" %>
<%@ Parameter Name="xmlnamespace" Type="string" %>
<%@ Parameter Name="xmlname" Type="string" %>
<%@ Parameter Name="collectionName" Type="string" %>
<%@ Parameter Name="serializeIds" Type="bool" %>

<%

	switch(direction)
	{
		case SerializerDirection.ToStream:
%>
			BinarySerializer.ToStream(eagerLoadLists, <%= streamName %>);
			if(eagerLoadLists)
			{
<% if (serializeIds) { %>
				BinarySerializer.ToStream(true, <%= streamName %>);
				BinarySerializer.ToStream(<%= collectionName %>.Count, <%= streamName %>);
<% } %>
				foreach(var obj in <%= collectionName %>)
				{
					if (auxObjects != null) {
						auxObjects.Add(obj);
					}
<% if (serializeIds) { %>
					BinarySerializer.ToStream(obj.ID, <%= streamName %>);
<% } %>
				}
			}
<% if (serializeIds) { %>
			else
			{
				BinarySerializer.ToStream(false, <%= streamName %>);
			}
<% } %>
<%
			break;
		case SerializerDirection.FromStream:
%>
			BinarySerializer.FromStream(out <%= collectionName %>_was_eagerLoaded, <%= streamName %>);
<% if (serializeIds) { %>
			{
				bool containsList;
				BinarySerializer.FromStream(out containsList, <%= streamName %>);
				if(containsList)
				{
					int numElements;
					BinarySerializer.FromStream(out numElements, <%= streamName %>);
					<%= collectionName %>Ids = new List<int>(numElements);
					while (numElements-- > 0) 
					{
						int id;
						BinarySerializer.FromStream(out id, <%= streamName %>);
						<%= collectionName %>Ids.Add(id);
					}
				}
			}
<% } %>
<%
			break;
		default:
			throw new ArgumentOutOfRangeException("direction");
	}
%>