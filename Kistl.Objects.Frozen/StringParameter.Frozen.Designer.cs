// <autogenerated/>


namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.DalProvider.Frozen;

    /// <summary>
    /// Metadefinition Object for String Parameter.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("StringParameter")]
    public class StringParameter__Implementation__Frozen : Kistl.App.Base.BaseParameter__Implementation__Frozen, StringParameter
    {
    
		public StringParameter__Implementation__Frozen()
		{
        }


        /// <summary>
        /// Returns the resulting Type of this Method-Parameter Meta Object.
        /// </summary>

		public override System.Type GetParameterType() 
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetParameterType_StringParameter != null)
            {
                OnGetParameterType_StringParameter(this, e);
            }
            else
            {
                e.Result = base.GetParameterType();
            }
            return e.Result;
        }
		public event GetParameterType_Handler<StringParameter> OnGetParameterType_StringParameter;



        /// <summary>
        /// Returns the String representation of this Method-Parameter Meta Object.
        /// </summary>

		public override string GetParameterTypeString() 
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetParameterTypeString_StringParameter != null)
            {
                OnGetParameterTypeString_StringParameter(this, e);
            }
            else
            {
                e.Result = base.GetParameterTypeString();
            }
            return e.Result;
        }
		public event GetParameterTypeString_Handler<StringParameter> OnGetParameterTypeString_StringParameter;



		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(StringParameter));
		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_StringParameter != null)
            {
                OnToString_StringParameter(this, e);
            }
            return e.Result;
        }
        public event ToStringHandler<StringParameter> OnToString_StringParameter;

        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_StringParameter != null) OnPreSave_StringParameter(this);
        }
        public event ObjectEventHandler<StringParameter> OnPreSave_StringParameter;

        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_StringParameter != null) OnPostSave_StringParameter(this);
        }
        public event ObjectEventHandler<StringParameter> OnPostSave_StringParameter;


        internal StringParameter__Implementation__Frozen(int id)
            : base(id)
        { }


		internal new static Dictionary<int, StringParameter__Implementation__Frozen> DataStore = new Dictionary<int, StringParameter__Implementation__Frozen>(8);
		internal new static void CreateInstances()
		{
			Kistl.App.Base.BaseParameter__Implementation__Frozen.DataStore[4] = 
			DataStore[4] = new StringParameter__Implementation__Frozen(4);

			Kistl.App.Base.BaseParameter__Implementation__Frozen.DataStore[12] = 
			DataStore[12] = new StringParameter__Implementation__Frozen(12);

			Kistl.App.Base.BaseParameter__Implementation__Frozen.DataStore[13] = 
			DataStore[13] = new StringParameter__Implementation__Frozen(13);

			Kistl.App.Base.BaseParameter__Implementation__Frozen.DataStore[14] = 
			DataStore[14] = new StringParameter__Implementation__Frozen(14);

			Kistl.App.Base.BaseParameter__Implementation__Frozen.DataStore[16] = 
			DataStore[16] = new StringParameter__Implementation__Frozen(16);

			Kistl.App.Base.BaseParameter__Implementation__Frozen.DataStore[18] = 
			DataStore[18] = new StringParameter__Implementation__Frozen(18);

			Kistl.App.Base.BaseParameter__Implementation__Frozen.DataStore[29] = 
			DataStore[29] = new StringParameter__Implementation__Frozen(29);

			Kistl.App.Base.BaseParameter__Implementation__Frozen.DataStore[34] = 
			DataStore[34] = new StringParameter__Implementation__Frozen(34);

		}

		internal new static void FillDataStore() {
			DataStore[4].Description = null;
			DataStore[4].ExportGuid = new Guid("007922b8-b97d-4a66-af57-fb7effe4e84a");
			DataStore[4].IsList = false;
			DataStore[4].IsReturnParameter = true;
			DataStore[4].Method = Kistl.App.Base.Method__Implementation__Frozen.DataStore[14];
			DataStore[4].ParameterName = @"result";
			DataStore[4].Seal();
			DataStore[12].Description = @"a C# code fragment, usable as skeleton for implementing the target of this MethodInvocatoin";
			DataStore[12].ExportGuid = new Guid("533bcb48-b41f-4f46-868c-c2dbffe36cde");
			DataStore[12].IsList = false;
			DataStore[12].IsReturnParameter = true;
			DataStore[12].Method = Kistl.App.Base.Method__Implementation__Frozen.DataStore[62];
			DataStore[12].ParameterName = @"result";
			DataStore[12].Seal();
			DataStore[13].Description = @"Returns the Member Name of this MethodInvocation";
			DataStore[13].ExportGuid = new Guid("2a71d345-3a19-4318-83ea-23ff03734127");
			DataStore[13].IsList = false;
			DataStore[13].IsReturnParameter = true;
			DataStore[13].Method = Kistl.App.Base.Method__Implementation__Frozen.DataStore[63];
			DataStore[13].ParameterName = @"ReturnValue";
			DataStore[13].Seal();
			DataStore[14].Description = null;
			DataStore[14].ExportGuid = new Guid("c2c27d9c-7e12-4e13-8014-dd0900de41dc");
			DataStore[14].IsList = false;
			DataStore[14].IsReturnParameter = false;
			DataStore[14].Method = Kistl.App.Base.Method__Implementation__Frozen.DataStore[75];
			DataStore[14].ParameterName = @"message";
			DataStore[14].Seal();
			DataStore[16].Description = null;
			DataStore[16].ExportGuid = new Guid("8756dd12-12ad-4883-8137-ba086f474933");
			DataStore[16].IsList = false;
			DataStore[16].IsReturnParameter = true;
			DataStore[16].Method = Kistl.App.Base.Method__Implementation__Frozen.DataStore[94];
			DataStore[16].ParameterName = @"ReturnParameter";
			DataStore[16].Seal();
			DataStore[18].Description = null;
			DataStore[18].ExportGuid = new Guid("f1abbc13-1167-42f3-9c27-826dd963fa65");
			DataStore[18].IsList = false;
			DataStore[18].IsReturnParameter = true;
			DataStore[18].Method = Kistl.App.Base.Method__Implementation__Frozen.DataStore[91];
			DataStore[18].ParameterName = @"ReturnParameter";
			DataStore[18].Seal();
			DataStore[29].Description = null;
			DataStore[29].ExportGuid = new Guid("3eae78bd-7474-4e9f-87e7-9d8014f9e0bd");
			DataStore[29].IsList = false;
			DataStore[29].IsReturnParameter = true;
			DataStore[29].Method = Kistl.App.Base.Method__Implementation__Frozen.DataStore[109];
			DataStore[29].ParameterName = @"ReturnParameter";
			DataStore[29].Seal();
			DataStore[34].Description = null;
			DataStore[34].ExportGuid = new Guid("55ec2e74-5d6a-418f-b370-86da5ec89a70");
			DataStore[34].IsList = false;
			DataStore[34].IsReturnParameter = false;
			DataStore[34].Method = Kistl.App.Base.Method__Implementation__Frozen.DataStore[122];
			DataStore[34].ParameterName = @"TestString";
			DataStore[34].Seal();
	
		}
#region Serializer

        public override void ToStream(System.IO.BinaryWriter binStream)
        {
            throw new NotImplementedException();
        }
        public override void FromStream(System.IO.BinaryReader binStream)
        {
            throw new NotImplementedException();
        }
        public override void ToStream(System.Xml.XmlWriter xml)
        {
            throw new NotImplementedException();
        }
        public override void FromStream(System.Xml.XmlReader xml)
        {
            throw new NotImplementedException();
        }
        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            throw new NotImplementedException();
        }
        public override void MergeImport(System.Xml.XmlReader xml)
        {
            throw new NotImplementedException();
        }

#endregion

    }


}