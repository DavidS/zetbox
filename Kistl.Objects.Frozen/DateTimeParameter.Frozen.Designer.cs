// <autogenerated/>


namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.DalProvider.Frozen;

    /// <summary>
    /// Metadefinition Object for DateTime Parameter.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("DateTimeParameter")]
    public class DateTimeParameter__Implementation__Frozen : Kistl.App.Base.BaseParameter__Implementation__Frozen, DateTimeParameter
    {
    
		public DateTimeParameter__Implementation__Frozen()
		{
        }


        /// <summary>
        /// Returns the resulting Type of this Method-Parameter Meta Object.
        /// </summary>

		public override System.Type GetParameterType() 
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetParameterType_DateTimeParameter != null)
            {
                OnGetParameterType_DateTimeParameter(this, e);
            }
            else
            {
                e.Result = base.GetParameterType();
            }
            return e.Result;
        }
		public event GetParameterType_Handler<DateTimeParameter> OnGetParameterType_DateTimeParameter;



        /// <summary>
        /// Returns the String representation of this Method-Parameter Meta Object.
        /// </summary>

		public override string GetParameterTypeString() 
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetParameterTypeString_DateTimeParameter != null)
            {
                OnGetParameterTypeString_DateTimeParameter(this, e);
            }
            else
            {
                e.Result = base.GetParameterTypeString();
            }
            return e.Result;
        }
		public event GetParameterTypeString_Handler<DateTimeParameter> OnGetParameterTypeString_DateTimeParameter;



		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(DateTimeParameter));
		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_DateTimeParameter != null)
            {
                OnToString_DateTimeParameter(this, e);
            }
            return e.Result;
        }
        public event ToStringHandler<DateTimeParameter> OnToString_DateTimeParameter;

        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_DateTimeParameter != null) OnPreSave_DateTimeParameter(this);
        }
        public event ObjectEventHandler<DateTimeParameter> OnPreSave_DateTimeParameter;

        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_DateTimeParameter != null) OnPostSave_DateTimeParameter(this);
        }
        public event ObjectEventHandler<DateTimeParameter> OnPostSave_DateTimeParameter;


        internal DateTimeParameter__Implementation__Frozen(int id)
            : base(id)
        { }


		internal new static Dictionary<int, DateTimeParameter__Implementation__Frozen> DataStore = new Dictionary<int, DateTimeParameter__Implementation__Frozen>(4);
		internal new static void CreateInstances()
		{
			Kistl.App.Base.BaseParameter__Implementation__Frozen.DataStore[23] = 
			DataStore[23] = new DateTimeParameter__Implementation__Frozen(23);

			Kistl.App.Base.BaseParameter__Implementation__Frozen.DataStore[24] = 
			DataStore[24] = new DateTimeParameter__Implementation__Frozen(24);

			Kistl.App.Base.BaseParameter__Implementation__Frozen.DataStore[31] = 
			DataStore[31] = new DateTimeParameter__Implementation__Frozen(31);

			Kistl.App.Base.BaseParameter__Implementation__Frozen.DataStore[32] = 
			DataStore[32] = new DateTimeParameter__Implementation__Frozen(32);

		}

		internal new static void FillDataStore() {
			DataStore[23].Description = null;
			DataStore[23].ExportGuid = new Guid("9cf2824c-3570-4230-aa1a-c1146eb3226b");
			DataStore[23].IsList = false;
			DataStore[23].IsReturnParameter = true;
			DataStore[23].Method = Kistl.App.Base.Method__Implementation__Frozen.DataStore[122];
			DataStore[23].ParameterName = @"TestDateTimeReturn";
			DataStore[23].Seal();
			DataStore[24].Description = null;
			DataStore[24].ExportGuid = new Guid("9200143f-437e-4c8d-9150-fcdb6c3e4e11");
			DataStore[24].IsList = false;
			DataStore[24].IsReturnParameter = false;
			DataStore[24].Method = Kistl.App.Base.Method__Implementation__Frozen.DataStore[122];
			DataStore[24].ParameterName = @"TestDateTime";
			DataStore[24].Seal();
			DataStore[31].Description = null;
			DataStore[31].ExportGuid = new Guid("1e80ab18-5034-4835-a688-e4ea028a7116");
			DataStore[31].IsList = false;
			DataStore[31].IsReturnParameter = false;
			DataStore[31].Method = Kistl.App.Base.Method__Implementation__Frozen.DataStore[51];
			DataStore[31].ParameterName = @"DateTimeParamForTestMethod";
			DataStore[31].Seal();
			DataStore[32].Description = null;
			DataStore[32].ExportGuid = new Guid("ddd0bd0d-5e07-44fb-a9ce-e67fa232459c");
			DataStore[32].IsList = false;
			DataStore[32].IsReturnParameter = false;
			DataStore[32].Method = Kistl.App.Base.Method__Implementation__Frozen.DataStore[115];
			DataStore[32].ParameterName = @"DateTimeParam";
			DataStore[32].Seal();
	
		}
#region Serializer

        public override void ToStream(System.IO.BinaryWriter binStream)
        {
            throw new NotImplementedException();
        }
        public override void FromStream(System.IO.BinaryReader binStream)
        {
            throw new NotImplementedException();
        }
        public override void ToStream(System.Xml.XmlWriter xml)
        {
            throw new NotImplementedException();
        }
        public override void FromStream(System.Xml.XmlReader xml)
        {
            throw new NotImplementedException();
        }
        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            throw new NotImplementedException();
        }
        public override void MergeImport(System.Xml.XmlReader xml)
        {
            throw new NotImplementedException();
        }

#endregion

    }


}