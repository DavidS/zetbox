// <autogenerated/>


namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.DalProvider.Frozen;

    /// <summary>
    /// Metadefinition Object for Struct Properties.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("StructProperty")]
    public class StructProperty__Implementation__Frozen : Kistl.App.Base.Property__Implementation__Frozen, StructProperty
    {
    
		public StructProperty__Implementation__Frozen()
		{
        }


        /// <summary>
        /// Definition of this Struct
        /// </summary>
        // object reference property
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual Kistl.App.Base.Struct StructDefinition
        {
            get
            {
                return _StructDefinition;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (_StructDefinition != value)
                {
					var __oldValue = _StructDefinition;
                    NotifyPropertyChanging("StructDefinition", __oldValue, value);
                    _StructDefinition = value;
                    NotifyPropertyChanged("StructDefinition", __oldValue, value);
                }
            }
        }
        private Kistl.App.Base.Struct _StructDefinition;

        /// <summary>
        /// Returns the resulting Type of this Property Meta Object.
        /// </summary>

		public override System.Type GetPropertyType() 
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetPropertyType_StructProperty != null)
            {
                OnGetPropertyType_StructProperty(this, e);
            }
            else
            {
                e.Result = base.GetPropertyType();
            }
            return e.Result;
        }
		public event GetPropertyType_Handler<StructProperty> OnGetPropertyType_StructProperty;



        /// <summary>
        /// Returns the String representation of this Property Meta Object.
        /// </summary>

		public override string GetPropertyTypeString() 
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetPropertyTypeString_StructProperty != null)
            {
                OnGetPropertyTypeString_StructProperty(this, e);
            }
            else
            {
                e.Result = base.GetPropertyTypeString();
            }
            return e.Result;
        }
		public event GetPropertyTypeString_Handler<StructProperty> OnGetPropertyTypeString_StructProperty;



		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(StructProperty));
		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_StructProperty != null)
            {
                OnToString_StructProperty(this, e);
            }
            return e.Result;
        }
        public event ToStringHandler<StructProperty> OnToString_StructProperty;

        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_StructProperty != null) OnPreSave_StructProperty(this);
        }
        public event ObjectEventHandler<StructProperty> OnPreSave_StructProperty;

        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_StructProperty != null) OnPostSave_StructProperty(this);
        }
        public event ObjectEventHandler<StructProperty> OnPostSave_StructProperty;


		protected override string GetPropertyError(string propertyName) 
		{
			switch(propertyName)
			{
				case "StructDefinition":
				{
					var errors = FrozenContext.Single.Find<Kistl.App.Base.Property>(85).Constraints
						.Where(c => !c.IsValid(this, this.StructDefinition))
						.Select(c => c.GetErrorText(this, this.StructDefinition))
						.ToArray();
					
					return String.Join("; ", errors);
				}
				default:
					return base.GetPropertyError(propertyName);
			}
		}
        internal StructProperty__Implementation__Frozen(int id)
            : base(id)
        { }


		internal new static Dictionary<int, StructProperty__Implementation__Frozen> DataStore = new Dictionary<int, StructProperty__Implementation__Frozen>(2);
		internal new static void CreateInstances()
		{
			Kistl.App.Base.Property__Implementation__Frozen.DataStore[1] = 
			DataStore[1] = new StructProperty__Implementation__Frozen(1);

			Kistl.App.Base.Property__Implementation__Frozen.DataStore[2] = 
			DataStore[2] = new StructProperty__Implementation__Frozen(2);

		}

		internal new static void FillDataStore() {
			DataStore[1].AltText = @"Office Phone Number";
			DataStore[1].CategoryTags = null;
			DataStore[1].Constraints = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.Constraint>(new List<Kistl.App.Base.Constraint>(0) {
});
			DataStore[1].Description = @"Office Phone Number";
			DataStore[1].ExportGuid = new Guid("f2e60b5a-767c-4369-b178-3397b22a3f7e");
			DataStore[1].IsIndexed = false;
			DataStore[1].IsList = false;
			DataStore[1].IsNullable = true;
			DataStore[1].Module = Kistl.App.Base.Module__Implementation__Frozen.DataStore[4];
			DataStore[1].ObjectClass = Kistl.App.Base.DataType__Implementation__Frozen.DataStore[15];
			DataStore[1].PropertyName = @"PhoneNumberOffice";
			DataStore[1].ValueModelDescriptor = null;
			DataStore[1].StructDefinition = Kistl.App.Base.Struct__Implementation__Frozen.DataStore[16];
			DataStore[1].Seal();
			DataStore[2].AltText = @"Mobile Phone Number";
			DataStore[2].CategoryTags = null;
			DataStore[2].Constraints = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.Constraint>(new List<Kistl.App.Base.Constraint>(0) {
});
			DataStore[2].Description = @"Mobile Phone Number";
			DataStore[2].ExportGuid = new Guid("c9788c6f-e59b-4b4e-9222-1cc726961b20");
			DataStore[2].IsIndexed = false;
			DataStore[2].IsList = false;
			DataStore[2].IsNullable = true;
			DataStore[2].Module = Kistl.App.Base.Module__Implementation__Frozen.DataStore[4];
			DataStore[2].ObjectClass = Kistl.App.Base.DataType__Implementation__Frozen.DataStore[15];
			DataStore[2].PropertyName = @"PhoneNumberMobile";
			DataStore[2].ValueModelDescriptor = null;
			DataStore[2].StructDefinition = Kistl.App.Base.Struct__Implementation__Frozen.DataStore[16];
			DataStore[2].Seal();
	
		}
#region Serializer

        public override void ToStream(System.IO.BinaryWriter binStream)
        {
            throw new NotImplementedException();
        }
        public override void FromStream(System.IO.BinaryReader binStream)
        {
            throw new NotImplementedException();
        }
        public override void ToStream(System.Xml.XmlWriter xml)
        {
            throw new NotImplementedException();
        }
        public override void FromStream(System.Xml.XmlReader xml)
        {
            throw new NotImplementedException();
        }
        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            throw new NotImplementedException();
        }
        public override void MergeImport(System.Xml.XmlReader xml)
        {
            throw new NotImplementedException();
        }

#endregion

    }


}