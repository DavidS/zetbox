// <autogenerated/>


namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.DalProvider.Frozen;

    /// <summary>
    /// Metadefinition Object for Enumerations.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("Enumeration")]
    public class Enumeration__Implementation__Frozen : Kistl.App.Base.DataType__Implementation__Frozen, Enumeration
    {
    
		public Enumeration__Implementation__Frozen()
		{
        }


        /// <summary>
        /// Eintr√§ge der Enumeration
        /// </summary>
        // object list property
   		// Kistl.Server.Generators.FrozenObjects.Implementation.ObjectClasses.ListProperty
        public virtual ICollection<Kistl.App.Base.EnumerationEntry> EnumerationEntries
        {
            get
            {
                if (_EnumerationEntries == null)
                    _EnumerationEntries = new ReadOnlyCollection<Kistl.App.Base.EnumerationEntry>(new List<Kistl.App.Base.EnumerationEntry>(0));
                return _EnumerationEntries;
            }
            internal set
            {
                if (((IPersistenceObject)this).IsReadonly)
                {
                    throw new ReadOnlyObjectException();
                }
                _EnumerationEntries = (ReadOnlyCollection<Kistl.App.Base.EnumerationEntry>)value;
            }
        }
        private ReadOnlyCollection<Kistl.App.Base.EnumerationEntry> _EnumerationEntries;

        /// <summary>
        /// Returns the resulting Type of this Datatype Meta Object.
        /// </summary>

		public override System.Type GetDataType() 
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetDataType_Enumeration != null)
            {
                OnGetDataType_Enumeration(this, e);
            }
            else
            {
                e.Result = base.GetDataType();
            }
            return e.Result;
        }
		public event GetDataType_Handler<Enumeration> OnGetDataType_Enumeration;



        /// <summary>
        /// Returns the String representation of this Datatype Meta Object.
        /// </summary>

		public override string GetDataTypeString() 
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetDataTypeString_Enumeration != null)
            {
                OnGetDataTypeString_Enumeration(this, e);
            }
            else
            {
                e.Result = base.GetDataTypeString();
            }
            return e.Result;
        }
		public event GetDataTypeString_Handler<Enumeration> OnGetDataTypeString_Enumeration;



		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Enumeration));
		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Enumeration != null)
            {
                OnToString_Enumeration(this, e);
            }
            return e.Result;
        }
        public event ToStringHandler<Enumeration> OnToString_Enumeration;

        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_Enumeration != null) OnPreSave_Enumeration(this);
        }
        public event ObjectEventHandler<Enumeration> OnPreSave_Enumeration;

        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_Enumeration != null) OnPostSave_Enumeration(this);
        }
        public event ObjectEventHandler<Enumeration> OnPostSave_Enumeration;


		protected override string GetPropertyError(string propertyName) 
		{
			switch(propertyName)
			{
				case "EnumerationEntries":
				{
					var errors = FrozenContext.Single.Find<Kistl.App.Base.Property>(53).Constraints
						.Where(c => !c.IsValid(this, this.EnumerationEntries))
						.Select(c => c.GetErrorText(this, this.EnumerationEntries))
						.ToArray();
					
					return String.Join("; ", errors);
				}
				default:
					return base.GetPropertyError(propertyName);
			}
		}
        internal Enumeration__Implementation__Frozen(int id)
            : base(id)
        { }


		internal new static Dictionary<int, Enumeration__Implementation__Frozen> DataStore = new Dictionary<int, Enumeration__Implementation__Frozen>(5);
		internal new static void CreateInstances()
		{
			Kistl.App.Base.DataType__Implementation__Frozen.DataStore[4] = 
			DataStore[4] = new Enumeration__Implementation__Frozen(4);

			Kistl.App.Base.DataType__Implementation__Frozen.DataStore[14] = 
			DataStore[14] = new Enumeration__Implementation__Frozen(14);

			Kistl.App.Base.DataType__Implementation__Frozen.DataStore[19] = 
			DataStore[19] = new Enumeration__Implementation__Frozen(19);

			Kistl.App.Base.DataType__Implementation__Frozen.DataStore[53] = 
			DataStore[53] = new Enumeration__Implementation__Frozen(53);

			Kistl.App.Base.DataType__Implementation__Frozen.DataStore[64] = 
			DataStore[64] = new Enumeration__Implementation__Frozen(64);

		}

		internal new static void FillDataStore() {
			DataStore[4].ClassName = @"Multiplicity";
			DataStore[4].DefaultIcon = null;
			DataStore[4].Description = @"Describes the multiplicities of objects on RelationEnds";
			DataStore[4].ExportGuid = new Guid("4f2b5005-672e-46ef-80ed-94b8cdd053db");
			DataStore[4].MethodInvocations = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.MethodInvocation>(new List<Kistl.App.Base.MethodInvocation>(0) {
});
			DataStore[4].Methods = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.Method>(new List<Kistl.App.Base.Method>(0) {
});
			DataStore[4].Module = Kistl.App.Base.Module__Implementation__Frozen.DataStore[2];
			DataStore[4].Properties = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.Property>(new List<Kistl.App.Base.Property>(0) {
});
			DataStore[4].ShowIconInLists = true;
			DataStore[4].ShowIdInLists = true;
			DataStore[4].ShowNameInLists = true;
			DataStore[4].EnumerationEntries = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.EnumerationEntry>(new List<Kistl.App.Base.EnumerationEntry>(3) {
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[1],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[3],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[4],
});
			DataStore[4].Seal();
			DataStore[14].ClassName = @"TestEnum";
			DataStore[14].DefaultIcon = null;
			DataStore[14].Description = @"A TestEnum";
			DataStore[14].ExportGuid = new Guid("67b48828-e7d2-4432-a942-88e96d74b40a");
			DataStore[14].MethodInvocations = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.MethodInvocation>(new List<Kistl.App.Base.MethodInvocation>(0) {
});
			DataStore[14].Methods = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.Method>(new List<Kistl.App.Base.Method>(0) {
});
			DataStore[14].Module = Kistl.App.Base.Module__Implementation__Frozen.DataStore[4];
			DataStore[14].Properties = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.Property>(new List<Kistl.App.Base.Property>(0) {
});
			DataStore[14].ShowIconInLists = true;
			DataStore[14].ShowIdInLists = true;
			DataStore[14].ShowNameInLists = true;
			DataStore[14].EnumerationEntries = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.EnumerationEntry>(new List<Kistl.App.Base.EnumerationEntry>(2) {
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[13],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[14],
});
			DataStore[14].Seal();
			DataStore[19].ClassName = @"VisualType";
			DataStore[19].DefaultIcon = null;
			DataStore[19].Description = @"";
			DataStore[19].ExportGuid = new Guid("3567a11f-1809-44e8-bafe-ce0ccec7ea2a");
			DataStore[19].MethodInvocations = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.MethodInvocation>(new List<Kistl.App.Base.MethodInvocation>(0) {
});
			DataStore[19].Methods = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.Method>(new List<Kistl.App.Base.Method>(0) {
});
			DataStore[19].Module = Kistl.App.Base.Module__Implementation__Frozen.DataStore[5];
			DataStore[19].Properties = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.Property>(new List<Kistl.App.Base.Property>(0) {
});
			DataStore[19].ShowIconInLists = true;
			DataStore[19].ShowIdInLists = true;
			DataStore[19].ShowNameInLists = true;
			DataStore[19].EnumerationEntries = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.EnumerationEntry>(new List<Kistl.App.Base.EnumerationEntry>(28) {
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[2],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[5],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[6],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[7],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[8],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[9],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[10],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[11],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[12],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[15],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[16],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[17],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[18],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[19],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[20],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[21],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[22],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[23],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[24],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[25],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[26],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[27],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[28],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[29],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[30],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[31],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[32],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[33],
});
			DataStore[19].Seal();
			DataStore[53].ClassName = @"Toolkit";
			DataStore[53].DefaultIcon = Kistl.App.GUI.Icon__Implementation__Frozen.DataStore[13];
			DataStore[53].Description = @"";
			DataStore[53].ExportGuid = new Guid("803fb38d-f0d2-409c-9f15-30da4bdcf576");
			DataStore[53].MethodInvocations = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.MethodInvocation>(new List<Kistl.App.Base.MethodInvocation>(0) {
});
			DataStore[53].Methods = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.Method>(new List<Kistl.App.Base.Method>(0) {
});
			DataStore[53].Module = Kistl.App.Base.Module__Implementation__Frozen.DataStore[5];
			DataStore[53].Properties = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.Property>(new List<Kistl.App.Base.Property>(0) {
});
			DataStore[53].ShowIconInLists = true;
			DataStore[53].ShowIdInLists = true;
			DataStore[53].ShowNameInLists = true;
			DataStore[53].EnumerationEntries = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.EnumerationEntry>(new List<Kistl.App.Base.EnumerationEntry>(4) {
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[34],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[36],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[40],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[41],
});
			DataStore[53].Seal();
			DataStore[64].ClassName = @"StorageType";
			DataStore[64].DefaultIcon = Kistl.App.GUI.Icon__Implementation__Frozen.DataStore[7];
			DataStore[64].Description = @"Storage Type of a 1:1 Releation.";
			DataStore[64].ExportGuid = new Guid("351a22e8-d047-4878-b6d3-3945489139a0");
			DataStore[64].MethodInvocations = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.MethodInvocation>(new List<Kistl.App.Base.MethodInvocation>(0) {
});
			DataStore[64].Methods = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.Method>(new List<Kistl.App.Base.Method>(0) {
});
			DataStore[64].Module = Kistl.App.Base.Module__Implementation__Frozen.DataStore[2];
			DataStore[64].Properties = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.Property>(new List<Kistl.App.Base.Property>(0) {
});
			DataStore[64].ShowIconInLists = true;
			DataStore[64].ShowIdInLists = true;
			DataStore[64].ShowNameInLists = true;
			DataStore[64].EnumerationEntries = new System.Collections.ObjectModel.ReadOnlyCollection<Kistl.App.Base.EnumerationEntry>(new List<Kistl.App.Base.EnumerationEntry>(4) {
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[35],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[37],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[38],
Kistl.App.Base.EnumerationEntry__Implementation__Frozen.DataStore[39],
});
			DataStore[64].Seal();
	
		}
#region Serializer

        public override void ToStream(System.IO.BinaryWriter binStream)
        {
            throw new NotImplementedException();
        }
        public override void FromStream(System.IO.BinaryReader binStream)
        {
            throw new NotImplementedException();
        }
        public override void ToStream(System.Xml.XmlWriter xml)
        {
            throw new NotImplementedException();
        }
        public override void FromStream(System.Xml.XmlReader xml)
        {
            throw new NotImplementedException();
        }
        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            throw new NotImplementedException();
        }
        public override void MergeImport(System.Xml.XmlReader xml)
        {
            throw new NotImplementedException();
        }

#endregion

    }


}