// <autogenerated/>


namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.DalProvider.Frozen;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("IsValidIdentifierConstraint")]
    public class IsValidIdentifierConstraint__Implementation__Frozen : Kistl.App.Base.Constraint__Implementation__Frozen, IsValidIdentifierConstraint
    {
    
		public IsValidIdentifierConstraint__Implementation__Frozen()
		{
        }


        /// <summary>
        /// 
        /// </summary>

		public override string GetErrorText(System.Object constrainedObject, System.Object constrainedValue) 
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetErrorText_IsValidIdentifierConstraint != null)
            {
                OnGetErrorText_IsValidIdentifierConstraint(this, e, constrainedObject, constrainedValue);
            }
            else
            {
                e.Result = base.GetErrorText(constrainedObject, constrainedValue);
            }
            return e.Result;
        }
		public event GetErrorText_Handler<IsValidIdentifierConstraint> OnGetErrorText_IsValidIdentifierConstraint;



        /// <summary>
        /// 
        /// </summary>

		public override bool IsValid(System.Object constrainedObject, System.Object constrainedValue) 
        {
            var e = new MethodReturnEventArgs<bool>();
            if (OnIsValid_IsValidIdentifierConstraint != null)
            {
                OnIsValid_IsValidIdentifierConstraint(this, e, constrainedObject, constrainedValue);
            }
            else
            {
                e.Result = base.IsValid(constrainedObject, constrainedValue);
            }
            return e.Result;
        }
		public event IsValid_Handler<IsValidIdentifierConstraint> OnIsValid_IsValidIdentifierConstraint;



		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(IsValidIdentifierConstraint));
		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_IsValidIdentifierConstraint != null)
            {
                OnToString_IsValidIdentifierConstraint(this, e);
            }
            return e.Result;
        }
        public event ToStringHandler<IsValidIdentifierConstraint> OnToString_IsValidIdentifierConstraint;

        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_IsValidIdentifierConstraint != null) OnPreSave_IsValidIdentifierConstraint(this);
        }
        public event ObjectEventHandler<IsValidIdentifierConstraint> OnPreSave_IsValidIdentifierConstraint;

        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_IsValidIdentifierConstraint != null) OnPostSave_IsValidIdentifierConstraint(this);
        }
        public event ObjectEventHandler<IsValidIdentifierConstraint> OnPostSave_IsValidIdentifierConstraint;


        internal IsValidIdentifierConstraint__Implementation__Frozen(int id)
            : base(id)
        { }


		internal new static Dictionary<int, IsValidIdentifierConstraint__Implementation__Frozen> DataStore = new Dictionary<int, IsValidIdentifierConstraint__Implementation__Frozen>(6);
		internal new static void CreateInstances()
		{
			Kistl.App.Base.Constraint__Implementation__Frozen.DataStore[49] = 
			DataStore[49] = new IsValidIdentifierConstraint__Implementation__Frozen(49);

			Kistl.App.Base.Constraint__Implementation__Frozen.DataStore[58] = 
			DataStore[58] = new IsValidIdentifierConstraint__Implementation__Frozen(58);

			Kistl.App.Base.Constraint__Implementation__Frozen.DataStore[59] = 
			DataStore[59] = new IsValidIdentifierConstraint__Implementation__Frozen(59);

			Kistl.App.Base.Constraint__Implementation__Frozen.DataStore[65] = 
			DataStore[65] = new IsValidIdentifierConstraint__Implementation__Frozen(65);

			Kistl.App.Base.Constraint__Implementation__Frozen.DataStore[101] = 
			DataStore[101] = new IsValidIdentifierConstraint__Implementation__Frozen(101);

			Kistl.App.Base.Constraint__Implementation__Frozen.DataStore[140] = 
			DataStore[140] = new IsValidIdentifierConstraint__Implementation__Frozen(140);

		}

		internal new static void FillDataStore() {
			DataStore[49].ConstrainedProperty = Kistl.App.Base.Property__Implementation__Frozen.DataStore[80];
			DataStore[49].ExportGuid = new Guid("533b99b1-63d8-4c73-8856-7714c86fd828");
			DataStore[49].Reason = null;
			DataStore[49].Seal();
			DataStore[58].ConstrainedProperty = Kistl.App.Base.Property__Implementation__Frozen.DataStore[76];
			DataStore[58].ExportGuid = new Guid("033a551a-4325-4e2b-8533-0ef28b043215");
			DataStore[58].Reason = null;
			DataStore[58].Seal();
			DataStore[59].ConstrainedProperty = Kistl.App.Base.Property__Implementation__Frozen.DataStore[75];
			DataStore[59].ExportGuid = new Guid("6aa150ce-666b-4823-ae6f-6df3c2d569a2");
			DataStore[59].Reason = null;
			DataStore[59].Seal();
			DataStore[65].ConstrainedProperty = Kistl.App.Base.Property__Implementation__Frozen.DataStore[77];
			DataStore[65].ExportGuid = new Guid("c0facd37-aec9-4716-b969-339b2fc361d5");
			DataStore[65].Reason = null;
			DataStore[65].Seal();
			DataStore[101].ConstrainedProperty = Kistl.App.Base.Property__Implementation__Frozen.DataStore[7];
			DataStore[101].ExportGuid = new Guid("c12b7b3d-548f-4d4d-91fa-8181e8d930d9");
			DataStore[101].Reason = null;
			DataStore[101].Seal();
			DataStore[140].ConstrainedProperty = Kistl.App.Base.Property__Implementation__Frozen.DataStore[14];
			DataStore[140].ExportGuid = new Guid("2cfa54f9-3e62-4db3-92c9-1f1c60ce5367");
			DataStore[140].Reason = null;
			DataStore[140].Seal();
	
		}
#region Serializer

        public override void ToStream(System.IO.BinaryWriter binStream)
        {
            throw new NotImplementedException();
        }
        public override void FromStream(System.IO.BinaryReader binStream)
        {
            throw new NotImplementedException();
        }
        public override void ToStream(System.Xml.XmlWriter xml)
        {
            throw new NotImplementedException();
        }
        public override void FromStream(System.Xml.XmlReader xml)
        {
            throw new NotImplementedException();
        }
        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            throw new NotImplementedException();
        }
        public override void MergeImport(System.Xml.XmlReader xml)
        {
            throw new NotImplementedException();
        }

#endregion

    }


}