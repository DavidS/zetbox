// <autogenerated/>


namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.DalProvider.Frozen;

    /// <summary>
    /// Metadefinition Object for Object Parameter.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("ObjectParameter")]
    public class ObjectParameter__Implementation__Frozen : Kistl.App.Base.BaseParameter__Implementation__Frozen, ObjectParameter
    {
    
		public ObjectParameter__Implementation__Frozen()
		{
        }


        /// <summary>
        /// Kistl-Typ des Parameters
        /// </summary>
        // object reference property
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual Kistl.App.Base.DataType DataType
        {
            get
            {
                return _DataType;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (_DataType != value)
                {
					var __oldValue = _DataType;
                    NotifyPropertyChanging("DataType", __oldValue, value);
                    _DataType = value;
                    NotifyPropertyChanged("DataType", __oldValue, value);
                }
            }
        }
        private Kistl.App.Base.DataType _DataType;

        /// <summary>
        /// Returns the resulting Type of this Method-Parameter Meta Object.
        /// </summary>

		public override System.Type GetParameterType() 
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetParameterType_ObjectParameter != null)
            {
                OnGetParameterType_ObjectParameter(this, e);
            }
            else
            {
                e.Result = base.GetParameterType();
            }
            return e.Result;
        }
		public event GetParameterType_Handler<ObjectParameter> OnGetParameterType_ObjectParameter;



        /// <summary>
        /// Returns the String representation of this Method-Parameter Meta Object.
        /// </summary>

		public override string GetParameterTypeString() 
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetParameterTypeString_ObjectParameter != null)
            {
                OnGetParameterTypeString_ObjectParameter(this, e);
            }
            else
            {
                e.Result = base.GetParameterTypeString();
            }
            return e.Result;
        }
		public event GetParameterTypeString_Handler<ObjectParameter> OnGetParameterTypeString_ObjectParameter;



		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(ObjectParameter));
		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_ObjectParameter != null)
            {
                OnToString_ObjectParameter(this, e);
            }
            return e.Result;
        }
        public event ToStringHandler<ObjectParameter> OnToString_ObjectParameter;

        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_ObjectParameter != null) OnPreSave_ObjectParameter(this);
        }
        public event ObjectEventHandler<ObjectParameter> OnPreSave_ObjectParameter;

        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_ObjectParameter != null) OnPostSave_ObjectParameter(this);
        }
        public event ObjectEventHandler<ObjectParameter> OnPostSave_ObjectParameter;


		protected override string GetPropertyError(string propertyName) 
		{
			switch(propertyName)
			{
				case "DataType":
				{
					var errors = FrozenContext.Single.Find<Kistl.App.Base.Property>(103).Constraints
						.Where(c => !c.IsValid(this, this.DataType))
						.Select(c => c.GetErrorText(this, this.DataType))
						.ToArray();
					
					return String.Join("; ", errors);
				}
				default:
					return base.GetPropertyError(propertyName);
			}
		}
        internal ObjectParameter__Implementation__Frozen(int id)
            : base(id)
        { }


		internal new static Dictionary<int, ObjectParameter__Implementation__Frozen> DataStore = new Dictionary<int, ObjectParameter__Implementation__Frozen>(4);
		internal new static void CreateInstances()
		{
			Kistl.App.Base.BaseParameter__Implementation__Frozen.DataStore[5] = 
			DataStore[5] = new ObjectParameter__Implementation__Frozen(5);

			Kistl.App.Base.BaseParameter__Implementation__Frozen.DataStore[17] = 
			DataStore[17] = new ObjectParameter__Implementation__Frozen(17);

			Kistl.App.Base.BaseParameter__Implementation__Frozen.DataStore[22] = 
			DataStore[22] = new ObjectParameter__Implementation__Frozen(22);

			Kistl.App.Base.BaseParameter__Implementation__Frozen.DataStore[28] = 
			DataStore[28] = new ObjectParameter__Implementation__Frozen(28);

		}

		internal new static void FillDataStore() {
			DataStore[5].Description = null;
			DataStore[5].ExportGuid = new Guid("c0ee1435-955b-4ed8-b633-d4165a56b048");
			DataStore[5].IsList = false;
			DataStore[5].IsReturnParameter = false;
			DataStore[5].Method = Kistl.App.Base.Method__Implementation__Frozen.DataStore[19];
			DataStore[5].ParameterName = @"cls";
			DataStore[5].DataType = Kistl.App.Base.DataType__Implementation__Frozen.DataStore[59];
			DataStore[5].Seal();
			DataStore[17].Description = null;
			DataStore[17].ExportGuid = new Guid("d4869404-976b-4853-84fd-72403d4ea6e2");
			DataStore[17].IsList = true;
			DataStore[17].IsReturnParameter = true;
			DataStore[17].Method = Kistl.App.Base.Method__Implementation__Frozen.DataStore[104];
			DataStore[17].ParameterName = @"Result";
			DataStore[17].DataType = Kistl.App.Base.DataType__Implementation__Frozen.DataStore[49];
			DataStore[17].Seal();
			DataStore[22].Description = null;
			DataStore[22].ExportGuid = new Guid("95a488c0-e4fc-479d-8d88-786c8d364694");
			DataStore[22].IsList = false;
			DataStore[22].IsReturnParameter = true;
			DataStore[22].Method = Kistl.App.Base.Method__Implementation__Frozen.DataStore[58];
			DataStore[22].ParameterName = @"Result";
			DataStore[22].DataType = Kistl.App.Base.DataType__Implementation__Frozen.DataStore[35];
			DataStore[22].Seal();
			DataStore[28].Description = null;
			DataStore[28].ExportGuid = new Guid("1fa8c4d8-83a5-42b9-848d-c113951fe49f");
			DataStore[28].IsList = false;
			DataStore[28].IsReturnParameter = false;
			DataStore[28].Method = Kistl.App.Base.Method__Implementation__Frozen.DataStore[122];
			DataStore[28].ParameterName = @"TestObjectParameter";
			DataStore[28].DataType = Kistl.App.Base.DataType__Implementation__Frozen.DataStore[25];
			DataStore[28].Seal();
	
		}
#region Serializer

        public override void ToStream(System.IO.BinaryWriter binStream)
        {
            throw new NotImplementedException();
        }
        public override void FromStream(System.IO.BinaryReader binStream)
        {
            throw new NotImplementedException();
        }
        public override void ToStream(System.Xml.XmlWriter xml)
        {
            throw new NotImplementedException();
        }
        public override void FromStream(System.Xml.XmlReader xml)
        {
            throw new NotImplementedException();
        }
        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            throw new NotImplementedException();
        }
        public override void MergeImport(System.Xml.XmlReader xml)
        {
            throw new NotImplementedException();
        }

#endregion

    }


}