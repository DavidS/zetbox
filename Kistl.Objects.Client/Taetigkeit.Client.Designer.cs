//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.1433
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kistl.App.Zeiterfassung
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Collections;
    using System.Xml;
    using System.Xml.Serialization;
    using Kistl.API;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Kistl.API.Client;
    
    
    public class Taetigkeit : BaseClientDataObject, ICloneable
    {
        
        private int _ID = Helper.INVALIDID;
        
        private int _fk_Zeitkonto = Helper.INVALIDID;
        
        private int _fk_Mitarbeiter = Helper.INVALIDID;
        
        private System.DateTime _Datum;
        
        private double _Dauer;
        
        private int _fk_TaetigkeitsArt = Helper.INVALIDID;
        
        public Taetigkeit()
        {
        }
        
        public override int ID
        {
            get
            {
                return _ID;
            }
            set
            {
                _ID = value;
            }
        }
        
        [XmlIgnore()]
        public Kistl.App.Zeiterfassung.Zeitkonto Zeitkonto
        {
            get
            {
                return Context.Find<Kistl.App.Zeiterfassung.Zeitkonto>(fk_Zeitkonto);
            }
            set
            {
                NotifyPropertyChanging("Zeitkonto"); 
                _fk_Zeitkonto = value.ID;
                NotifyPropertyChanged("Zeitkonto"); ;
            }
        }
        
        public int fk_Zeitkonto
        {
            get
            {
                return _fk_Zeitkonto;
            }
            set
            {
                NotifyPropertyChanging("Zeitkonto"); 
                _fk_Zeitkonto = value;
                NotifyPropertyChanged("Zeitkonto"); ;
            }
        }
        
        [XmlIgnore()]
        public Kistl.App.Projekte.Mitarbeiter Mitarbeiter
        {
            get
            {
                return Context.Find<Kistl.App.Projekte.Mitarbeiter>(fk_Mitarbeiter);
            }
            set
            {
                NotifyPropertyChanging("Mitarbeiter"); 
                _fk_Mitarbeiter = value.ID;
                NotifyPropertyChanged("Mitarbeiter"); ;
            }
        }
        
        public int fk_Mitarbeiter
        {
            get
            {
                return _fk_Mitarbeiter;
            }
            set
            {
                NotifyPropertyChanging("Mitarbeiter"); 
                _fk_Mitarbeiter = value;
                NotifyPropertyChanged("Mitarbeiter"); ;
            }
        }
        
        public System.DateTime Datum
        {
            get
            {
                return _Datum;
            }
            set
            {
                NotifyPropertyChanging("Datum"); 
                _Datum = value; 
                NotifyPropertyChanged("Datum");;
            }
        }
        
        public double Dauer
        {
            get
            {
                return _Dauer;
            }
            set
            {
                NotifyPropertyChanging("Dauer"); 
                _Dauer = value; 
                NotifyPropertyChanged("Dauer");;
            }
        }
        
        [XmlIgnore()]
        public Kistl.App.Zeiterfassung.TaetigkeitsArt TaetigkeitsArt
        {
            get
            {
                return Context.Find<Kistl.App.Zeiterfassung.TaetigkeitsArt>(fk_TaetigkeitsArt);
            }
            set
            {
                NotifyPropertyChanging("TaetigkeitsArt"); 
                _fk_TaetigkeitsArt = value.ID;
                NotifyPropertyChanged("TaetigkeitsArt"); ;
            }
        }
        
        public int fk_TaetigkeitsArt
        {
            get
            {
                return _fk_TaetigkeitsArt;
            }
            set
            {
                NotifyPropertyChanging("TaetigkeitsArt"); 
                _fk_TaetigkeitsArt = value;
                NotifyPropertyChanged("TaetigkeitsArt"); ;
            }
        }
        
        public event ToStringHandler<Taetigkeit> OnToString_Taetigkeit;
        
        public event ObjectEventHandler<Taetigkeit> OnPreSave_Taetigkeit;
        
        public event ObjectEventHandler<Taetigkeit> OnPostSave_Taetigkeit;
        
        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Taetigkeit != null)
            {
                OnToString_Taetigkeit(this, e);
            }
            return e.Result;
        }
        
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_Taetigkeit != null) OnPreSave_Taetigkeit(this);
        }
        
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_Taetigkeit != null) OnPostSave_Taetigkeit(this);
        }
        
        public override object Clone()
        {
            Taetigkeit obj = new Taetigkeit();
            CopyTo(obj);
            return obj;
        }
        
        public override void CopyTo(Kistl.API.IDataObject obj)
        {
            base.CopyTo(obj);
            ((Taetigkeit)obj)._fk_Zeitkonto = this._fk_Zeitkonto;
            ((Taetigkeit)obj)._fk_Mitarbeiter = this._fk_Mitarbeiter;
            ((Taetigkeit)obj)._Datum = this._Datum;
            ((Taetigkeit)obj)._Dauer = this._Dauer;
            ((Taetigkeit)obj)._fk_TaetigkeitsArt = this._fk_TaetigkeitsArt;
        }
        
        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this.fk_Zeitkonto, sw);
            BinarySerializer.ToBinary(this.fk_Mitarbeiter, sw);
            BinarySerializer.ToBinary(this._Datum, sw);
            BinarySerializer.ToBinary(this._Dauer, sw);
            BinarySerializer.ToBinary(this.fk_TaetigkeitsArt, sw);
        }
        
        public override void FromStream(Kistl.API.IKistlContext ctx, System.IO.BinaryReader sr)
        {
            base.FromStream(ctx, sr);
            BinarySerializer.FromBinary(out this._fk_Zeitkonto, sr);
            BinarySerializer.FromBinary(out this._fk_Mitarbeiter, sr);
            BinarySerializer.FromBinary(out this._Datum, sr);
            BinarySerializer.FromBinary(out this._Dauer, sr);
            BinarySerializer.FromBinary(out this._fk_TaetigkeitsArt, sr);
        }
    }
}
