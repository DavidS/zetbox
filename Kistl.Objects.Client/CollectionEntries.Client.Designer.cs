// <autogenerated/>

using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;
using System.Linq;

using Kistl.API;
    using Kistl.API.Client;

namespace Kistl.App.Base
{
    [System.Diagnostics.DebuggerDisplay("ObjectClass_implements_Interface_RelationEntry__Implementation__")]
    public class ObjectClass_implements_Interface_RelationEntry__Implementation__ : BaseClientCollectionEntry, ObjectClass_implements_Interface_RelationEntry
    {
    
// ID is inherited
        public int RelationID { get { return 51; } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Base.ObjectClass)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.Interface)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.ObjectClass A
        {
            get
            {
                if (_fk_A.HasValue)
                    return Context.Find<Kistl.App.Base.ObjectClass>(_fk_A.Value);
                else
                    return null;
            }
            set
            {
                // TODO: only accept objects from same Context
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var oldValue = A;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", oldValue, value);
                
				// next, set the local reference
                _fk_A = value == null ? (int?)null : value.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", oldValue, value);
            }
        }
        
        private int? _fk_A;
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Interface B
        {
            get
            {
                if (_fk_B.HasValue)
                    return Context.Find<Kistl.App.Base.Interface>(_fk_B.Value);
                else
                    return null;
            }
            set
            {
                // TODO: only accept objects from same Context
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var oldValue = B;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", oldValue, value);
                
				// next, set the local reference
                _fk_B = value == null ? (int?)null : value.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", oldValue, value);
            }
        }
        
        private int? _fk_B;

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
			
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
			
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
			
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
			
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(ObjectClass_implements_Interface_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (ObjectClass_implements_Interface_RelationEntry__Implementation__)obj;
			var me = (ObjectClass_implements_Interface_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.Projekte
{
    [System.Diagnostics.DebuggerDisplay("Projekt_haben_Mitarbeiter_RelationEntry__Implementation__")]
    public class Projekt_haben_Mitarbeiter_RelationEntry__Implementation__ : BaseClientCollectionEntry, Projekt_haben_Mitarbeiter_RelationEntry
    {
    
// ID is inherited
        public int RelationID { get { return 34; } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Projekte.Projekt)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Projekte.Mitarbeiter)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Projekte.Projekt A
        {
            get
            {
                if (_fk_A.HasValue)
                    return Context.Find<Kistl.App.Projekte.Projekt>(_fk_A.Value);
                else
                    return null;
            }
            set
            {
                // TODO: only accept objects from same Context
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var oldValue = A;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", oldValue, value);
                
				// next, set the local reference
                _fk_A = value == null ? (int?)null : value.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", oldValue, value);
            }
        }
        
        private int? _fk_A;
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? A_pos
        {
            get
            {
                return _A_pos;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
					var __oldValue = _A_pos;
                    NotifyPropertyChanging("A_pos", __oldValue, value);
                    _A_pos = value;
                    NotifyPropertyChanged("A_pos", __oldValue, value);
                }
            }
        }
        private int? _A_pos;
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Projekte.Mitarbeiter B
        {
            get
            {
                if (_fk_B.HasValue)
                    return Context.Find<Kistl.App.Projekte.Mitarbeiter>(_fk_B.Value);
                else
                    return null;
            }
            set
            {
                // TODO: only accept objects from same Context
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var oldValue = B;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", oldValue, value);
                
				// next, set the local reference
                _fk_B = value == null ? (int?)null : value.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", oldValue, value);
            }
        }
        
        private int? _fk_B;
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? B_pos
        {
            get
            {
                return _B_pos;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
					var __oldValue = _B_pos;
                    NotifyPropertyChanging("B_pos", __oldValue, value);
                    _B_pos = value;
                    NotifyPropertyChanged("B_pos", __oldValue, value);
                }
            }
        }
        private int? _B_pos;



        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
public int? AIndex { get { return A_pos; } set { A_pos = value; } }
        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
public int? BIndex { get { return B_pos; } set { B_pos = value; } }
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
			
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
			
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
			
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Projekte");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Projekte");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
			
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Projekte");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Projekt_haben_Mitarbeiter_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Projekt_haben_Mitarbeiter_RelationEntry__Implementation__)obj;
			var me = (Projekt_haben_Mitarbeiter_RelationEntry__Implementation__)this;
			
            me.AIndex = other.AIndex;
            me.BIndex = other.BIndex;
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.GUI
{
    [System.Diagnostics.DebuggerDisplay("Template_hasMenu_Visual_RelationEntry__Implementation__")]
    public class Template_hasMenu_Visual_RelationEntry__Implementation__ : BaseClientCollectionEntry, Template_hasMenu_Visual_RelationEntry
    {
    
// ID is inherited
        public int RelationID { get { return 4; } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.GUI.Template)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.GUI.Visual)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Template A
        {
            get
            {
                if (_fk_A.HasValue)
                    return Context.Find<Kistl.App.GUI.Template>(_fk_A.Value);
                else
                    return null;
            }
            set
            {
                // TODO: only accept objects from same Context
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var oldValue = A;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", oldValue, value);
                
				// next, set the local reference
                _fk_A = value == null ? (int?)null : value.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", oldValue, value);
            }
        }
        
        private int? _fk_A;
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual B
        {
            get
            {
                if (_fk_B.HasValue)
                    return Context.Find<Kistl.App.GUI.Visual>(_fk_B.Value);
                else
                    return null;
            }
            set
            {
                // TODO: only accept objects from same Context
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var oldValue = B;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", oldValue, value);
                
				// next, set the local reference
                _fk_B = value == null ? (int?)null : value.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", oldValue, value);
            }
        }
        
        private int? _fk_B;

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
			
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
			
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
			
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
			
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Template_hasMenu_Visual_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Template_hasMenu_Visual_RelationEntry__Implementation__)obj;
			var me = (Template_hasMenu_Visual_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.Base
{
    [System.Diagnostics.DebuggerDisplay("TypeRef_hasGenericArguments_TypeRef_RelationEntry__Implementation__")]
    public class TypeRef_hasGenericArguments_TypeRef_RelationEntry__Implementation__ : BaseClientCollectionEntry, TypeRef_hasGenericArguments_TypeRef_RelationEntry
    {
    
// ID is inherited
        public int RelationID { get { return 9; } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Base.TypeRef)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.TypeRef)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.TypeRef A
        {
            get
            {
                if (_fk_A.HasValue)
                    return Context.Find<Kistl.App.Base.TypeRef>(_fk_A.Value);
                else
                    return null;
            }
            set
            {
                // TODO: only accept objects from same Context
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var oldValue = A;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", oldValue, value);
                
				// next, set the local reference
                _fk_A = value == null ? (int?)null : value.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", oldValue, value);
            }
        }
        
        private int? _fk_A;
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? A_pos
        {
            get
            {
                return _A_pos;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
					var __oldValue = _A_pos;
                    NotifyPropertyChanging("A_pos", __oldValue, value);
                    _A_pos = value;
                    NotifyPropertyChanged("A_pos", __oldValue, value);
                }
            }
        }
        private int? _A_pos;
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.TypeRef B
        {
            get
            {
                if (_fk_B.HasValue)
                    return Context.Find<Kistl.App.Base.TypeRef>(_fk_B.Value);
                else
                    return null;
            }
            set
            {
                // TODO: only accept objects from same Context
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var oldValue = B;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", oldValue, value);
                
				// next, set the local reference
                _fk_B = value == null ? (int?)null : value.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", oldValue, value);
            }
        }
        
        private int? _fk_B;
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? B_pos
        {
            get
            {
                return _B_pos;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
					var __oldValue = _B_pos;
                    NotifyPropertyChanging("B_pos", __oldValue, value);
                    _B_pos = value;
                    NotifyPropertyChanged("B_pos", __oldValue, value);
                }
            }
        }
        private int? _B_pos;



        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
public int? AIndex { get { return A_pos; } set { A_pos = value; } }
        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
public int? BIndex { get { return B_pos; } set { B_pos = value; } }
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
			
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
			
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
			
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
			
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(TypeRef_hasGenericArguments_TypeRef_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (TypeRef_hasGenericArguments_TypeRef_RelationEntry__Implementation__)obj;
			var me = (TypeRef_hasGenericArguments_TypeRef_RelationEntry__Implementation__)this;
			
            me.AIndex = other.AIndex;
            me.BIndex = other.BIndex;
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.GUI
{
    [System.Diagnostics.DebuggerDisplay("Visual_contains_Visual_RelationEntry__Implementation__")]
    public class Visual_contains_Visual_RelationEntry__Implementation__ : BaseClientCollectionEntry, Visual_contains_Visual_RelationEntry
    {
    
// ID is inherited
        public int RelationID { get { return 23; } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.GUI.Visual)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.GUI.Visual)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual A
        {
            get
            {
                if (_fk_A.HasValue)
                    return Context.Find<Kistl.App.GUI.Visual>(_fk_A.Value);
                else
                    return null;
            }
            set
            {
                // TODO: only accept objects from same Context
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var oldValue = A;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", oldValue, value);
                
				// next, set the local reference
                _fk_A = value == null ? (int?)null : value.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", oldValue, value);
            }
        }
        
        private int? _fk_A;
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual B
        {
            get
            {
                if (_fk_B.HasValue)
                    return Context.Find<Kistl.App.GUI.Visual>(_fk_B.Value);
                else
                    return null;
            }
            set
            {
                // TODO: only accept objects from same Context
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var oldValue = B;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", oldValue, value);
                
				// next, set the local reference
                _fk_B = value == null ? (int?)null : value.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", oldValue, value);
            }
        }
        
        private int? _fk_B;

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
			
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
			
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
			
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
			
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Visual_contains_Visual_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Visual_contains_Visual_RelationEntry__Implementation__)obj;
			var me = (Visual_contains_Visual_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.GUI
{
    [System.Diagnostics.DebuggerDisplay("Visual_hasContextMenu_Visual_RelationEntry__Implementation__")]
    public class Visual_hasContextMenu_Visual_RelationEntry__Implementation__ : BaseClientCollectionEntry, Visual_hasContextMenu_Visual_RelationEntry
    {
    
// ID is inherited
        public int RelationID { get { return 43; } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.GUI.Visual)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.GUI.Visual)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual A
        {
            get
            {
                if (_fk_A.HasValue)
                    return Context.Find<Kistl.App.GUI.Visual>(_fk_A.Value);
                else
                    return null;
            }
            set
            {
                // TODO: only accept objects from same Context
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var oldValue = A;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", oldValue, value);
                
				// next, set the local reference
                _fk_A = value == null ? (int?)null : value.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", oldValue, value);
            }
        }
        
        private int? _fk_A;
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual B
        {
            get
            {
                if (_fk_B.HasValue)
                    return Context.Find<Kistl.App.GUI.Visual>(_fk_B.Value);
                else
                    return null;
            }
            set
            {
                // TODO: only accept objects from same Context
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var oldValue = B;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", oldValue, value);
                
				// next, set the local reference
                _fk_B = value == null ? (int?)null : value.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", oldValue, value);
            }
        }
        
        private int? _fk_B;

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
			
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
			
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
			
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
			
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Visual_hasContextMenu_Visual_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Visual_hasContextMenu_Visual_RelationEntry__Implementation__)obj;
			var me = (Visual_hasContextMenu_Visual_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.TimeRecords
{
	using Kistl.App.Projekte;
    [System.Diagnostics.DebuggerDisplay("WorkEffortAccount_has_Mitarbeiter_RelationEntry__Implementation__")]
    public class WorkEffortAccount_has_Mitarbeiter_RelationEntry__Implementation__ : BaseClientCollectionEntry, WorkEffortAccount_has_Mitarbeiter_RelationEntry
    {
    
// ID is inherited
        public int RelationID { get { return 36; } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.TimeRecords.WorkEffortAccount)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Projekte.Mitarbeiter)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.TimeRecords.WorkEffortAccount A
        {
            get
            {
                if (_fk_A.HasValue)
                    return Context.Find<Kistl.App.TimeRecords.WorkEffortAccount>(_fk_A.Value);
                else
                    return null;
            }
            set
            {
                // TODO: only accept objects from same Context
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var oldValue = A;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", oldValue, value);
                
				// next, set the local reference
                _fk_A = value == null ? (int?)null : value.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", oldValue, value);
            }
        }
        
        private int? _fk_A;
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// Kistl.Server.Generators.ClientObjects.Implementation.ObjectClasses.ObjectReferencePropertyTemplate
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Projekte.Mitarbeiter B
        {
            get
            {
                if (_fk_B.HasValue)
                    return Context.Find<Kistl.App.Projekte.Mitarbeiter>(_fk_B.Value);
                else
                    return null;
            }
            set
            {
                // TODO: only accept objects from same Context
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var oldValue = B;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", oldValue, value);
                
				// next, set the local reference
                _fk_B = value == null ? (int?)null : value.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", oldValue, value);
            }
        }
        
        private int? _fk_B;

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
			
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
			
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
			
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
			
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(WorkEffortAccount_has_Mitarbeiter_RelationEntry));
		}
	
		public override void ReloadReferences()
		{
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (WorkEffortAccount_has_Mitarbeiter_RelationEntry__Implementation__)obj;
			var me = (WorkEffortAccount_has_Mitarbeiter_RelationEntry__Implementation__)this;
			
            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
		}		
		
		

    }
}

namespace Kistl.App.Projekte
{
    [System.Diagnostics.DebuggerDisplay("Kunde_EMails_CollectionEntry__Implementation__")]
    public class Kunde_EMails_CollectionEntry__Implementation__ : BaseClientCollectionEntry, Kunde_EMails_CollectionEntry
    {
    
// ID is inherited
        public IDataObject ParentObject { get { return Parent; } set { Parent = (Kunde)value; } }
        public object ValueObject { get { return Value; } set { Value = (string)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>

        public Kunde A
        {
            get
            {
                if (_ACache != null && _ACache.ID == _fk_A)
                    return _ACache;

                if (_fk_A.HasValue)
                    _ACache = this.Context.Find<Kunde>(_fk_A.Value);
                else
                    _ACache = null;

                return _ACache;
            }
            set
            {
                if (value == null && !_fk_A.HasValue)
                    return;
                if (value != null && _fk_A.HasValue && value.ID == _fk_A.Value)
                    return;

                _ACache = value;
                if (value != null)
					fk_A = value.ID;
				else
					fk_A = null;
            }
        }
        private Kunde _ACache;

        public int? fk_A
        {
            get
            {
                return _fk_A;
            }
            set
            {
                if (_fk_A != value)
                {
					var __oldValue = _fk_A;
                    NotifyPropertyChanging("A", __oldValue, value);
                    _fk_A = value;
                    NotifyPropertyChanged("A", __oldValue, value);
                }
            }
        }

        // backing store for serialization
        private int? _fk_A;
        
public Kunde Parent { get { return A; } set { A = value; } }
        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // value type property
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual string B
        {
            get
            {
                return _B;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (_B != value)
                {
					var __oldValue = _B;
                    NotifyPropertyChanging("B", __oldValue, value);
                    _B = value;
                    NotifyPropertyChanged("B", __oldValue, value);
                }
            }
        }
        private string _B;
public string Value { get { return B; } set { B = value; } }

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
			
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
			
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
			
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._B, xml, "B", "Kistl.App.Projekte");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
			
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._B, xml, "B", "Kistl.App.Projekte");
        }

#endregion

		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(Kunde_EMails_CollectionEntry));
		}
	
		public override void ReloadReferences()
		{
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Kunde_EMails_CollectionEntry__Implementation__)obj;
			var me = (Kunde_EMails_CollectionEntry__Implementation__)this;
			
            me.B = other.B;
		}		
		
		

    }
}
