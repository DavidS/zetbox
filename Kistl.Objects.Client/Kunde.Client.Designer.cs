//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kistl.App.Projekte
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Collections;
    using System.Xml;
    using System.Xml.Serialization;
    using Kistl.API;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Kistl.API.Client;
    
    
    public class Kunde : BaseClientDataObject, ICloneable
    {
        
        private int _ID = Helper.INVALIDID;
        
        private string _Kundenname;
        
        private string _Adresse;
        
        private string _PLZ;
        
        private string _Ort;
        
        private string _Land;
        
        private NotifyingObservableCollection<Kunde_EMailsCollectionEntry> _EMails;
        
        public Kunde()
        {
            _EMails = new NotifyingObservableCollection<Kunde_EMailsCollectionEntry>(this, "EMails");
        }
        
        public override int ID
        {
            get
            {
                return _ID;
            }
            set
            {
                _ID = value;
            }
        }
        
        public string Kundenname
        {
            get
            {
                return _Kundenname;
            }
            set
            {
                NotifyPropertyChanging("Kundenname"); 
                _Kundenname = value; 
                NotifyPropertyChanged("Kundenname");;
            }
        }
        
        public string Adresse
        {
            get
            {
                return _Adresse;
            }
            set
            {
                NotifyPropertyChanging("Adresse"); 
                _Adresse = value; 
                NotifyPropertyChanged("Adresse");;
            }
        }
        
        public string PLZ
        {
            get
            {
                return _PLZ;
            }
            set
            {
                NotifyPropertyChanging("PLZ"); 
                _PLZ = value; 
                NotifyPropertyChanged("PLZ");;
            }
        }
        
        public string Ort
        {
            get
            {
                return _Ort;
            }
            set
            {
                NotifyPropertyChanging("Ort"); 
                _Ort = value; 
                NotifyPropertyChanged("Ort");;
            }
        }
        
        public string Land
        {
            get
            {
                return _Land;
            }
            set
            {
                NotifyPropertyChanging("Land"); 
                _Land = value; 
                NotifyPropertyChanged("Land");;
            }
        }
        
        public NotifyingObservableCollection<Kunde_EMailsCollectionEntry> EMails
        {
            get
            {
                return _EMails;
            }
        }
        
        public event ToStringHandler<Kunde> OnToString_Kunde;
        
        public event ObjectEventHandler<Kunde> OnPreSave_Kunde;
        
        public event ObjectEventHandler<Kunde> OnPostSave_Kunde;
        
        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Kunde != null)
            {
                OnToString_Kunde(this, e);
            }
            return e.Result;
        }
        
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_Kunde != null) OnPreSave_Kunde(this);
        }
        
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_Kunde != null) OnPostSave_Kunde(this);
        }
        
        public override object Clone()
        {
            Kunde obj = new Kunde();
            CopyTo(obj);
            return obj;
        }
        
        public override void CopyTo(Kistl.API.IDataObject obj)
        {
            base.CopyTo(obj);
            ((Kunde)obj)._Kundenname = this._Kundenname;
            ((Kunde)obj)._Adresse = this._Adresse;
            ((Kunde)obj)._PLZ = this._PLZ;
            ((Kunde)obj)._Ort = this._Ort;
            ((Kunde)obj)._Land = this._Land;
            ((Kunde)obj)._EMails = this._EMails.Clone(obj);
        }
        
        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
            _EMails.ToList().ForEach(i => ctx.Attach(i));
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this._Kundenname, sw);
            BinarySerializer.ToBinary(this._Adresse, sw);
            BinarySerializer.ToBinary(this._PLZ, sw);
            BinarySerializer.ToBinary(this._Ort, sw);
            BinarySerializer.ToBinary(this._Land, sw);
            BinarySerializer.ToBinary(this.EMails, sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._Kundenname, sr);
            BinarySerializer.FromBinary(out this._Adresse, sr);
            BinarySerializer.FromBinary(out this._PLZ, sr);
            BinarySerializer.FromBinary(out this._Ort, sr);
            BinarySerializer.FromBinary(out this._Land, sr);
            BinarySerializer.FromBinaryCollectionEntries(out this._EMails, sr, this, "EMails");
        }
    }
    
    public class Kunde_EMailsCollectionEntry : Kistl.API.Client.BaseClientCollectionEntry
    {
        
        private int _ID = Helper.INVALIDID;
        
        private string _Value;
        
        private int _fk_Parent = Helper.INVALIDID;
        
        public override int ID
        {
            get
            {
                return _ID;
            }
            set
            {
                _ID = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _Value;
            }
            set
            {
                base.NotifyPropertyChanging("Value");
                _Value = value;
                base.NotifyPropertyChanged("Value");;
            }
        }
        
        [XmlIgnore()]
        public Kunde Parent
        {
            get
            {
                return Context.GetQuery<Kunde>().Single(o => o.ID == fk_Parent);
            }
            set
            {
                _fk_Parent = value.ID;
            }
        }
        
        public int fk_Parent
        {
            get
            {
                return _fk_Parent;
            }
            set
            {
                _fk_Parent = value;
            }
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this.Value, sw);
            BinarySerializer.ToBinary(this.fk_Parent, sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._Value, sr);
            BinarySerializer.FromBinary(out this._fk_Parent, sr);
        }
        
        public override void CopyTo(Kistl.API.ICollectionEntry obj)
        {
            base.CopyTo(obj);
            ((Kunde_EMailsCollectionEntry)obj)._Value = this._Value;
            ((Kunde_EMailsCollectionEntry)obj)._fk_Parent = this._fk_Parent;
        }
    }
}
