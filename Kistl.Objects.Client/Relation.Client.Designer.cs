//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kistl.App.Base
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Collections;
    using System.Xml;
    using System.Xml.Serialization;
    using Kistl.API;
    using Kistl.API.Client;
    
    
    public class Relation__Implementation__ : BaseClientDataObject, Relation
    {
        
        private System.Nullable<int> _fk_RightPart = null;
        
        private System.Nullable<int> _fk_LeftPart = null;
        
        private Kistl.App.Base.StorageType? _Storage;
        
        private string _Description;
        
        public Relation__Implementation__()
        {
        }
        
        [XmlIgnore()]
        public Kistl.App.Base.ObjectReferenceProperty RightPart
        {
            get
            {
                if (fk_RightPart == null) return null;
                return Context.Find<Kistl.App.Base.ObjectReferenceProperty>(fk_RightPart.Value);
            }
            set
            {
                fk_RightPart = value != null ? (int?)value.ID : null;
            }
        }
        
        public System.Nullable<int> fk_RightPart
        {
            get
            {
                return _fk_RightPart;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (fk_RightPart != value)
                {
                    NotifyPropertyChanging("RightPart"); 
                    _fk_RightPart = value;
                    NotifyPropertyChanged("RightPart");;
                }
            }
        }
        
        [XmlIgnore()]
        public Kistl.App.Base.ObjectReferenceProperty LeftPart
        {
            get
            {
                if (fk_LeftPart == null) return null;
                return Context.Find<Kistl.App.Base.ObjectReferenceProperty>(fk_LeftPart.Value);
            }
            set
            {
                fk_LeftPart = value != null ? (int?)value.ID : null;
            }
        }
        
        public System.Nullable<int> fk_LeftPart
        {
            get
            {
                return _fk_LeftPart;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (fk_LeftPart != value)
                {
                    NotifyPropertyChanging("LeftPart"); 
                    _fk_LeftPart = value;
                    NotifyPropertyChanged("LeftPart");;
                }
            }
        }
        
        public Kistl.App.Base.StorageType? Storage
        {
            get
            {
                return _Storage;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (Storage != value)
                {
                    NotifyPropertyChanging("Storage"); 
                    _Storage = value;
                    NotifyPropertyChanged("Storage");;
                }
            }
        }
        
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (Description != value)
                {
                    NotifyPropertyChanging("Description"); 
                    _Description = value;
                    NotifyPropertyChanged("Description");;
                }
            }
        }
        
        public event ToStringHandler<Relation> OnToString_Relation;
        
        public event ObjectEventHandler<Relation> OnPreSave_Relation;
        
        public event ObjectEventHandler<Relation> OnPostSave_Relation;
        
        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Relation != null)
            {
                OnToString_Relation(this, e);
            }
            return e.Result;
        }
        
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_Relation != null) OnPreSave_Relation(this);
        }
        
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_Relation != null) OnPostSave_Relation(this);
        }
        
        public override void ApplyChanges(Kistl.API.IDataObject obj)
        {
            base.ApplyChanges(obj);
            ((Relation__Implementation__)obj).fk_RightPart = this.fk_RightPart;
            ((Relation__Implementation__)obj).fk_LeftPart = this.fk_LeftPart;
            ((Relation__Implementation__)obj).Storage = this.Storage;
            ((Relation__Implementation__)obj).Description = this.Description;
        }
        
        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }
        
        protected override string GetPropertyError(string prop)
        {
            switch(prop)
            {
                case "RightPart":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(182).Constraints
                            .Where(c => !c.IsValid(this, this.RightPart))
                            .Select(c => c.GetErrorText(this, this.RightPart))
                            .ToArray());
                case "LeftPart":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(181).Constraints
                            .Where(c => !c.IsValid(this, this.LeftPart))
                            .Select(c => c.GetErrorText(this, this.LeftPart))
                            .ToArray());
                case "Storage":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(183).Constraints
                            .Where(c => !c.IsValid(this, this.Storage))
                            .Select(c => c.GetErrorText(this, this.Storage))
                            .ToArray());
                case "Description":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(184).Constraints
                            .Where(c => !c.IsValid(this, this.Description))
                            .Select(c => c.GetErrorText(this, this.Description))
                            .ToArray());
            }
            return base.GetPropertyError(prop);
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this.fk_RightPart, sw);
            BinarySerializer.ToBinary(this.fk_LeftPart, sw);
            BinarySerializer.ToBinary((int?)this._Storage, sw);
            BinarySerializer.ToBinary(this._Description, sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._fk_RightPart, sr);
            BinarySerializer.FromBinary(out this._fk_LeftPart, sr);
            int? tmpStorage; BinarySerializer.FromBinary(out tmpStorage, sr); _Storage = (Kistl.App.Base.StorageType?)tmpStorage;
            BinarySerializer.FromBinary(out this._Description, sr);
        }
    }
}
