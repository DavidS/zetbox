//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kistl.App.Base
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Collections;
    using System.Xml;
    using System.Xml.Serialization;
    using Kistl.API;
    using Kistl.API.Client;
    
    
    [System.Diagnostics.DebuggerDisplay("Kistl.App.Base.BaseParameter")]
    public class BaseParameter__Implementation__ : BaseClientDataObject, BaseParameter
    {
        
        private System.Nullable<int> _fk_Method = null;
        
        private System.Nullable<int> _Method__Position__ = null;
        
        private string _ParameterName;
        
        private bool _IsList;
        
        private bool _IsReturnParameter;
        
        private string _Description;
        
        public BaseParameter__Implementation__()
        {
        }
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Method Method
        {
            get
            {
                if (fk_Method == null) return null;
                return Context.Find<Kistl.App.Base.Method>(fk_Method.Value);
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (value != null)
                {
                    if (fk_Method != value.ID && fk_Method != null) Method.Parameter.Remove(this);
                    fk_Method = value.ID;
                    if (!value.Parameter.Contains(this)) value.Parameter.Add(this);
                }
                else
                {
                    if (Method != null && Method.Parameter.Contains(this)) Method.Parameter.Remove(this);
                    fk_Method = null;
                };
            }
        }
        
        public System.Nullable<int> fk_Method
        {
            get
            {
                return _fk_Method;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (fk_Method != value)
                {
                    NotifyPropertyChanging("Method"); 
                    _fk_Method = value;
                    NotifyPropertyChanged("Method");;
                }
            }
        }
        
        public System.Nullable<int> Method__Position__
        {
            get
            {
                return _Method__Position__;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (Method__Position__ != value)
                {
                    NotifyPropertyChanging("Method__Position__"); 
                    _Method__Position__ = value;
                    NotifyPropertyChanged("Method__Position__");;
                }
            }
        }
        
        public string ParameterName
        {
            get
            {
                return _ParameterName;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (ParameterName != value)
                {
                    NotifyPropertyChanging("ParameterName"); 
                    _ParameterName = value;
                    NotifyPropertyChanged("ParameterName");;
                }
            }
        }
        
        public bool IsList
        {
            get
            {
                return _IsList;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (IsList != value)
                {
                    NotifyPropertyChanging("IsList"); 
                    _IsList = value;
                    NotifyPropertyChanged("IsList");;
                }
            }
        }
        
        public bool IsReturnParameter
        {
            get
            {
                return _IsReturnParameter;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (IsReturnParameter != value)
                {
                    NotifyPropertyChanging("IsReturnParameter"); 
                    _IsReturnParameter = value;
                    NotifyPropertyChanged("IsReturnParameter");;
                }
            }
        }
        
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (Description != value)
                {
                    NotifyPropertyChanging("Description"); 
                    _Description = value;
                    NotifyPropertyChanged("Description");;
                }
            }
        }
        
        public event ToStringHandler<BaseParameter> OnToString_BaseParameter;
        
        public event ObjectEventHandler<BaseParameter> OnPreSave_BaseParameter;
        
        public event ObjectEventHandler<BaseParameter> OnPostSave_BaseParameter;
        
        public event GetParameterTypeString_Handler<BaseParameter> OnGetParameterTypeString_BaseParameter;
        
        public event GetParameterType_Handler<BaseParameter> OnGetParameterType_BaseParameter;
        
        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_BaseParameter != null)
            {
                OnToString_BaseParameter(this, e);
            }
            return e.Result;
        }
        
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_BaseParameter != null) OnPreSave_BaseParameter(this);
        }
        
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_BaseParameter != null) OnPostSave_BaseParameter(this);
        }
        
        public override void ApplyChanges(Kistl.API.IDataObject obj)
        {
            base.ApplyChanges(obj);
            ((BaseParameter__Implementation__)obj).fk_Method = this.fk_Method;
            ((BaseParameter__Implementation__)obj).ParameterName = this.ParameterName;
            ((BaseParameter__Implementation__)obj).IsList = this.IsList;
            ((BaseParameter__Implementation__)obj).IsReturnParameter = this.IsReturnParameter;
            ((BaseParameter__Implementation__)obj).Description = this.Description;
        }
        
        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }
        
        protected override string GetPropertyError(string prop)
        {
            switch(prop)
            {
                case "Method":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(92).Constraints
                            .Where(c => !c.IsValid(this, this.Method))
                            .Select(c => c.GetErrorText(this, this.Method))
                            .ToArray());
                case "ParameterName":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(91).Constraints
                            .Where(c => !c.IsValid(this, this.ParameterName))
                            .Select(c => c.GetErrorText(this, this.ParameterName))
                            .ToArray());
                case "IsList":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(94).Constraints
                            .Where(c => !c.IsValid(this, this.IsList))
                            .Select(c => c.GetErrorText(this, this.IsList))
                            .ToArray());
                case "IsReturnParameter":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(95).Constraints
                            .Where(c => !c.IsValid(this, this.IsReturnParameter))
                            .Select(c => c.GetErrorText(this, this.IsReturnParameter))
                            .ToArray());
                case "Description":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(177).Constraints
                            .Where(c => !c.IsValid(this, this.Description))
                            .Select(c => c.GetErrorText(this, this.Description))
                            .ToArray());
            }
            return base.GetPropertyError(prop);
        }
        
        public virtual string GetParameterTypeString()
        {
            MethodReturnEventArgs<System.String> e = new MethodReturnEventArgs<System.String>();
            if (OnGetParameterTypeString_BaseParameter != null)
            {
                OnGetParameterTypeString_BaseParameter(this, e);
            };
            return e.Result;
        }
        
        public virtual System.Type GetParameterType()
        {
            MethodReturnEventArgs<System.Type> e = new MethodReturnEventArgs<System.Type>();
            if (OnGetParameterType_BaseParameter != null)
            {
                OnGetParameterType_BaseParameter(this, e);
            };
            return e.Result;
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this.fk_Method, sw);
            BinarySerializer.ToBinary(this.Method__Position__, sw);
            BinarySerializer.ToBinary(this._ParameterName, sw);
            BinarySerializer.ToBinary(this._IsList, sw);
            BinarySerializer.ToBinary(this._IsReturnParameter, sw);
            BinarySerializer.ToBinary(this._Description, sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._fk_Method, sr);
            BinarySerializer.FromBinary(out this._Method__Position__, sr);
            BinarySerializer.FromBinary(out this._ParameterName, sr);
            BinarySerializer.FromBinary(out this._IsList, sr);
            BinarySerializer.FromBinary(out this._IsReturnParameter, sr);
            BinarySerializer.FromBinary(out this._Description, sr);
        }
        
        public delegate void GetParameterTypeString_Handler<T>(T obj, MethodReturnEventArgs<string> e);
        
        public delegate void GetParameterType_Handler<T>(T obj, MethodReturnEventArgs<System.Type> e);
    }
}
