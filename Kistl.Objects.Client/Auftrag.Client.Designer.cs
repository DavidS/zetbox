//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kistl.App.Projekte
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Collections;
    using System.Xml;
    using System.Xml.Serialization;
    using Kistl.API;
    using Kistl.API.Client;
    
    
    public class Auftrag__Implementation__ : BaseClientDataObject, Auftrag
    {
        
        private System.Nullable<int> _fk_Projekt = null;
        
        private System.Nullable<int> _fk_Mitarbeiter = null;
        
        private string _Auftragsname;
        
        private System.Nullable<int> _fk_Kunde = null;
        
        private System.Double? _Auftragswert;
        
        public Auftrag__Implementation__()
        {
        }
        
        [XmlIgnore()]
        public Kistl.App.Projekte.Projekt Projekt
        {
            get
            {
                if (fk_Projekt == null) return null;
                return Context.Find<Kistl.App.Projekte.Projekt>(fk_Projekt.Value);
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (value != null)
                {
                    if (fk_Projekt != value.ID && fk_Projekt != null) value.Auftraege.Remove(this);
                    fk_Projekt = value.ID;
                    if (!value.Auftraege.Contains(this)) value.Auftraege.Add(this);
                }
                else
                {
                    if (Projekt != null && Projekt.Auftraege.Contains(this)) Projekt.Auftraege.Remove(this);
                    fk_Projekt = null;
                };
            }
        }
        
        public System.Nullable<int> fk_Projekt
        {
            get
            {
                return _fk_Projekt;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (fk_Projekt != value)
                {
                    NotifyPropertyChanging("Projekt"); 
                    _fk_Projekt = value;
                    NotifyPropertyChanged("Projekt");;
                }
            }
        }
        
        [XmlIgnore()]
        public Kistl.App.Projekte.Mitarbeiter Mitarbeiter
        {
            get
            {
                if (fk_Mitarbeiter == null) return null;
                return Context.Find<Kistl.App.Projekte.Mitarbeiter>(fk_Mitarbeiter.Value);
            }
            set
            {
                fk_Mitarbeiter = value != null ? (int?)value.ID : null;
            }
        }
        
        public System.Nullable<int> fk_Mitarbeiter
        {
            get
            {
                return _fk_Mitarbeiter;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (fk_Mitarbeiter != value)
                {
                    NotifyPropertyChanging("Mitarbeiter"); 
                    _fk_Mitarbeiter = value;
                    NotifyPropertyChanged("Mitarbeiter");;
                }
            }
        }
        
        public string Auftragsname
        {
            get
            {
                return _Auftragsname;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (Auftragsname != value)
                {
                    NotifyPropertyChanging("Auftragsname"); 
                    _Auftragsname = value;
                    NotifyPropertyChanged("Auftragsname");;
                }
            }
        }
        
        [XmlIgnore()]
        public Kistl.App.Projekte.Kunde Kunde
        {
            get
            {
                if (fk_Kunde == null) return null;
                return Context.Find<Kistl.App.Projekte.Kunde>(fk_Kunde.Value);
            }
            set
            {
                fk_Kunde = value != null ? (int?)value.ID : null;
            }
        }
        
        public System.Nullable<int> fk_Kunde
        {
            get
            {
                return _fk_Kunde;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (fk_Kunde != value)
                {
                    NotifyPropertyChanging("Kunde"); 
                    _fk_Kunde = value;
                    NotifyPropertyChanged("Kunde");;
                }
            }
        }
        
        public System.Double? Auftragswert
        {
            get
            {
                return _Auftragswert;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (Auftragswert != value)
                {
                    NotifyPropertyChanging("Auftragswert"); 
                    _Auftragswert = value;
                    NotifyPropertyChanged("Auftragswert");;
                }
            }
        }
        
        public event ToStringHandler<Auftrag> OnToString_Auftrag;
        
        public event ObjectEventHandler<Auftrag> OnPreSave_Auftrag;
        
        public event ObjectEventHandler<Auftrag> OnPostSave_Auftrag;
        
        public event RechnungErstellen_Handler<Auftrag> OnRechnungErstellen_Auftrag;
        
        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Auftrag != null)
            {
                OnToString_Auftrag(this, e);
            }
            return e.Result;
        }
        
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_Auftrag != null) OnPreSave_Auftrag(this);
        }
        
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_Auftrag != null) OnPostSave_Auftrag(this);
        }
        
        public override void ApplyChanges(Kistl.API.IDataObject obj)
        {
            base.ApplyChanges(obj);
            ((Auftrag__Implementation__)obj).fk_Projekt = this.fk_Projekt;
            ((Auftrag__Implementation__)obj).fk_Mitarbeiter = this.fk_Mitarbeiter;
            ((Auftrag__Implementation__)obj).Auftragsname = this.Auftragsname;
            ((Auftrag__Implementation__)obj).fk_Kunde = this.fk_Kunde;
            ((Auftrag__Implementation__)obj).Auftragswert = this.Auftragswert;
        }
        
        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }
        
        protected override string GetPropertyError(string prop)
        {
            switch(prop)
            {
                case "Projekt":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(51).Constraints
                            .Where(c => !c.IsValid(this, this.Projekt))
                            .Select(c => c.GetErrorText(this, this.Projekt))
                            .ToArray());
                case "Mitarbeiter":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(49).Constraints
                            .Where(c => !c.IsValid(this, this.Mitarbeiter))
                            .Select(c => c.GetErrorText(this, this.Mitarbeiter))
                            .ToArray());
                case "Auftragsname":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(50).Constraints
                            .Where(c => !c.IsValid(this, this.Auftragsname))
                            .Select(c => c.GetErrorText(this, this.Auftragsname))
                            .ToArray());
                case "Kunde":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(64).Constraints
                            .Where(c => !c.IsValid(this, this.Kunde))
                            .Select(c => c.GetErrorText(this, this.Kunde))
                            .ToArray());
                case "Auftragswert":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(65).Constraints
                            .Where(c => !c.IsValid(this, this.Auftragswert))
                            .Select(c => c.GetErrorText(this, this.Auftragswert))
                            .ToArray());
            }
            return base.GetPropertyError(prop);
        }
        
        public virtual void RechnungErstellen()
        {
            if (OnRechnungErstellen_Auftrag != null)
            {
                OnRechnungErstellen_Auftrag(this);
            };
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this.fk_Projekt, sw);
            BinarySerializer.ToBinary(this.fk_Mitarbeiter, sw);
            BinarySerializer.ToBinary(this._Auftragsname, sw);
            BinarySerializer.ToBinary(this.fk_Kunde, sw);
            BinarySerializer.ToBinary(this._Auftragswert, sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._fk_Projekt, sr);
            BinarySerializer.FromBinary(out this._fk_Mitarbeiter, sr);
            BinarySerializer.FromBinary(out this._Auftragsname, sr);
            BinarySerializer.FromBinary(out this._fk_Kunde, sr);
            BinarySerializer.FromBinary(out this._Auftragswert, sr);
        }
        
        public delegate void RechnungErstellen_Handler<T>(T obj);
    }
}
