//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kistl.App.Base
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Collections;
    using System.Xml;
    using System.Xml.Serialization;
    using Kistl.API;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Kistl.API.Client;
    
    
    public class ObjectClass : Kistl.App.Base.DataType, ICloneable
    {
        
        private string _TableName;
        
        private System.Nullable<int> _fk_BaseObjectClass = null;
        
        private BackReferenceCollection<Kistl.App.Base.ObjectClass> _SubClasses;
        
        private ListPropertyCollection<Kistl.App.Base.Interface, ObjectClass, ObjectClass_ImplementsInterfacesCollectionEntry> _ImplementsInterfaces;
        
        public ObjectClass()
        {
            _ImplementsInterfaces = new ListPropertyCollection<Kistl.App.Base.Interface, ObjectClass, ObjectClass_ImplementsInterfacesCollectionEntry>(this, "ImplementsInterfaces");
        }
        
        public string TableName
        {
            get
            {
                return _TableName;
            }
            set
            {
                NotifyPropertyChanging("TableName"); 
                _TableName = value; 
                NotifyPropertyChanged("TableName");;
            }
        }
        
        [XmlIgnore()]
        public Kistl.App.Base.ObjectClass BaseObjectClass
        {
            get
            {
                if (fk_BaseObjectClass == null) return null;
                    return Context.Find<Kistl.App.Base.ObjectClass>(fk_BaseObjectClass.Value);
            }
            set
            {
                fk_BaseObjectClass = value != null ? (int?)value.ID : null;
            }
        }
        
        public System.Nullable<int> fk_BaseObjectClass
        {
            get
            {
                return _fk_BaseObjectClass;
            }
            set
            {
                if (fk_BaseObjectClass != value)
                {
                    NotifyPropertyChanging("BaseObjectClass"); 
                    _fk_BaseObjectClass = value;
                    NotifyPropertyChanged("BaseObjectClass");
                }
            }
        }
        
        [XmlIgnore()]
        public IList<Kistl.App.Base.ObjectClass> SubClasses
        {
            get
            {
                if (_SubClasses == null)
                {
                    List<Kistl.App.Base.ObjectClass> serverList;
                    if (Helper.IsPersistedObject(this))
                        serverList = Context.GetListOf<Kistl.App.Base.ObjectClass>(this, "SubClasses");
                    else
                        serverList = new List<Kistl.App.Base.ObjectClass>();

                    _SubClasses = new BackReferenceCollection<Kistl.App.Base.ObjectClass>(
                         "BaseObjectClass", this, serverList);
                }
                return _SubClasses;
            }
        }
        
        public IList<Kistl.App.Base.Interface> ImplementsInterfaces
        {
            get
            {
                return _ImplementsInterfaces;
            }
        }
        
        public event ToStringHandler<ObjectClass> OnToString_ObjectClass;
        
        public event ObjectEventHandler<ObjectClass> OnPreSave_ObjectClass;
        
        public event ObjectEventHandler<ObjectClass> OnPostSave_ObjectClass;
        
        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_ObjectClass != null)
            {
                OnToString_ObjectClass(this, e);
            }
            return e.Result;
        }
        
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_ObjectClass != null) OnPreSave_ObjectClass(this);
        }
        
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_ObjectClass != null) OnPostSave_ObjectClass(this);
        }
        
        public override object Clone()
        {
            ObjectClass obj = new ObjectClass();
            CopyTo(obj);
            return obj;
        }
        
        public override void CopyTo(Kistl.API.IDataObject obj)
        {
            base.CopyTo(obj);
            ((ObjectClass)obj)._TableName = this._TableName;
            ((ObjectClass)obj)._fk_BaseObjectClass = this._fk_BaseObjectClass;
            this._ImplementsInterfaces.CopyTo(((ObjectClass)obj)._ImplementsInterfaces);
        }
        
        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
            _ImplementsInterfaces.UnderlyingCollection.ForEach(i => ctx.Attach(i));
            if(_SubClasses != null) _SubClasses = new BackReferenceCollection<Kistl.App.Base.ObjectClass>("BaseObjectClass", this, _SubClasses.Select(i => ctx.Attach(i)).OfType<Kistl.App.Base.ObjectClass>());
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this._TableName, sw);
            BinarySerializer.ToBinary(this.fk_BaseObjectClass, sw);
            this._ImplementsInterfaces.ToStream(sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._TableName, sr);
            BinarySerializer.FromBinary(out this._fk_BaseObjectClass, sr);
            this._ImplementsInterfaces.FromStream(sr);
        }
    }
    
    internal class ObjectClass_ImplementsInterfacesCollectionEntry : Kistl.API.Client.BaseClientCollectionEntry, ICollectionEntry<Kistl.App.Base.Interface, ObjectClass>
    {
        
        private int _ID = Helper.INVALIDID;
        
        private int _fk_Value = Helper.INVALIDID;
        
        private int _fk_Parent = Helper.INVALIDID;
        
        public override int ID
        {
            get
            {
                return _ID;
            }
            set
            {
                _ID = value;
            }
        }
        
        [XmlIgnore()]
        public Kistl.App.Base.Interface Value
        {
            get
            {
                return Context.GetQuery<Kistl.App.Base.Interface>().Single(o => o.ID == fk_Value);
            }
            set
            {
                base.NotifyPropertyChanging("Value");
                _fk_Value = value.ID;
                base.NotifyPropertyChanged("Value");
            }
        }
        
        [XmlIgnore()]
        public ObjectClass Parent
        {
            get
            {
                return Context.GetQuery<ObjectClass>().Single(o => o.ID == fk_Parent);
            }
            set
            {
                _fk_Parent = value.ID;
            }
        }
        
        public int fk_Value
        {
            get
            {
                return _fk_Value;
            }
            set
            {
                base.NotifyPropertyChanging("Value");
                _fk_Value = value;
                base.NotifyPropertyChanged("Value");
            }
        }
        
        public int fk_Parent
        {
            get
            {
                return _fk_Parent;
            }
            set
            {
                _fk_Parent = value;
            }
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this.fk_Value, sw);
            BinarySerializer.ToBinary(this.fk_Parent, sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._fk_Value, sr);
            BinarySerializer.FromBinary(out this._fk_Parent, sr);
        }
        
        public override void CopyTo(Kistl.API.ICollectionEntry obj)
        {
            base.CopyTo(obj);
            ((ObjectClass_ImplementsInterfacesCollectionEntry)obj)._fk_Value = this.fk_Value;
            ((ObjectClass_ImplementsInterfacesCollectionEntry)obj)._fk_Parent = this.fk_Parent;
        }
    }
}
