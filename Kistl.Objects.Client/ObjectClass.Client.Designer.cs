//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.3053
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kistl.App.Base
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Collections;
    using System.Xml;
    using System.Xml.Serialization;
    using Kistl.API;
    using Kistl.API.Client;
    
    
    public class ObjectClass__Implementation__ : Kistl.App.Base.DataType__Implementation__, ObjectClass
    {
        
        private string _TableName;
        
        private System.Nullable<int> _fk_BaseObjectClass = null;
        
        private BackReferenceCollection<Kistl.App.Base.ObjectClass> _SubClasses;
        
        private ListPropertyCollection<Kistl.App.Base.Interface, Kistl.App.Base.ObjectClass, ObjectClass_ImplementsInterfacesCollectionEntry__Implementation__> _ImplementsInterfaces;
        
        private bool _IsSimpleObject;
        
        public ObjectClass__Implementation__()
        {
            _ImplementsInterfaces = new ListPropertyCollection<Kistl.App.Base.Interface, Kistl.App.Base.ObjectClass, ObjectClass_ImplementsInterfacesCollectionEntry__Implementation__>(this, "ImplementsInterfaces");
        }
        
        public string TableName
        {
            get
            {
                return _TableName;
            }
            set
            {
                if (TableName != value)
                {
                    NotifyPropertyChanging("TableName"); 
                    _TableName = value;
                    NotifyPropertyChanged("TableName");;
                }
            }
        }
        
        [XmlIgnore()]
        public Kistl.App.Base.ObjectClass BaseObjectClass
        {
            get
            {
                if (fk_BaseObjectClass == null) return null;
                return Context.Find<Kistl.App.Base.ObjectClass>(fk_BaseObjectClass.Value);
            }
            set
            {
                fk_BaseObjectClass = value != null ? (int?)value.ID : null;
            }
        }
        
        public System.Nullable<int> fk_BaseObjectClass
        {
            get
            {
                return _fk_BaseObjectClass;
            }
            set
            {
                if (fk_BaseObjectClass != value)
                {
                    NotifyPropertyChanging("BaseObjectClass"); 
                    _fk_BaseObjectClass = value;
                    NotifyPropertyChanged("BaseObjectClass");;
                }
            }
        }
        
        [XmlIgnore()]
        public ICollection<Kistl.App.Base.ObjectClass> SubClasses
        {
            get
            {
                if (_SubClasses == null)
                {
                    List<Kistl.App.Base.ObjectClass> serverList;
                    if (Helper.IsPersistedObject(this))
                        serverList = Context.GetListOf<Kistl.App.Base.ObjectClass>(this, "SubClasses");
                    else
                        serverList = new List<Kistl.App.Base.ObjectClass>();

                    _SubClasses = new BackReferenceCollection<Kistl.App.Base.ObjectClass>(
                         "BaseObjectClass", this, serverList);
                }
                return _SubClasses;
            }
        }
        
        public IList<Kistl.App.Base.Interface> ImplementsInterfaces
        {
            get
            {
                return _ImplementsInterfaces;
            }
        }
        
        public bool IsSimpleObject
        {
            get
            {
                return _IsSimpleObject;
            }
            set
            {
                if (IsSimpleObject != value)
                {
                    NotifyPropertyChanging("IsSimpleObject"); 
                    _IsSimpleObject = value;
                    NotifyPropertyChanged("IsSimpleObject");;
                }
            }
        }
        
        public event ToStringHandler<ObjectClass> OnToString_ObjectClass;
        
        public event ObjectEventHandler<ObjectClass> OnPreSave_ObjectClass;
        
        public event ObjectEventHandler<ObjectClass> OnPostSave_ObjectClass;
        
        public event GetInheritedMethods_Handler<ObjectClass> OnGetInheritedMethods_ObjectClass;
        
        public event GetDataTypeString_Handler<ObjectClass> OnGetDataTypeString_ObjectClass;
        
        public event GetDataType_Handler<ObjectClass> OnGetDataType_ObjectClass;
        
        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_ObjectClass != null)
            {
                OnToString_ObjectClass(this, e);
            }
            return e.Result;
        }
        
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_ObjectClass != null) OnPreSave_ObjectClass(this);
        }
        
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_ObjectClass != null) OnPostSave_ObjectClass(this);
        }
        
        public override void ApplyChanges(Kistl.API.IDataObject obj)
        {
            base.ApplyChanges(obj);
            ((ObjectClass__Implementation__)obj).TableName = this.TableName;
            ((ObjectClass__Implementation__)obj).fk_BaseObjectClass = this.fk_BaseObjectClass;
            if(this._SubClasses != null) this._SubClasses.ApplyChanges(((ObjectClass__Implementation__)obj)._SubClasses); else ((ObjectClass__Implementation__)obj)._SubClasses = null; ((ObjectClass__Implementation__)obj).NotifyPropertyChanged("SubClasses");
            this._ImplementsInterfaces.ApplyChanges(((ObjectClass__Implementation__)obj)._ImplementsInterfaces);
            ((ObjectClass__Implementation__)obj).IsSimpleObject = this.IsSimpleObject;
        }
        
        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
            _ImplementsInterfaces.AttachToContext(ctx);
            if(_SubClasses != null) _SubClasses.AttachToContext(ctx);
        }
        
        public virtual IList<Kistl.App.Base.Method> GetInheritedMethods()
        {
            MethodReturnEventArgs<IList<Kistl.App.Base.Method>> e = new MethodReturnEventArgs<IList<Kistl.App.Base.Method>>();
            if (OnGetInheritedMethods_ObjectClass != null)
            {
                OnGetInheritedMethods_ObjectClass(this, e);
            };
            return e.Result;
        }
        
        public override string GetDataTypeString()
        {
            MethodReturnEventArgs<System.String> e = new MethodReturnEventArgs<System.String>();
            e.Result = base.GetDataTypeString();
            if (OnGetDataTypeString_ObjectClass != null)
            {
                OnGetDataTypeString_ObjectClass(this, e);
            };
            return e.Result;
        }
        
        public override System.Type GetDataType()
        {
            MethodReturnEventArgs<System.Type> e = new MethodReturnEventArgs<System.Type>();
            e.Result = base.GetDataType();
            if (OnGetDataType_ObjectClass != null)
            {
                OnGetDataType_ObjectClass(this, e);
            };
            return e.Result;
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this._TableName, sw);
            BinarySerializer.ToBinary(this.fk_BaseObjectClass, sw);
            this._ImplementsInterfaces.ToStream(sw);
            BinarySerializer.ToBinary(this._IsSimpleObject, sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._TableName, sr);
            BinarySerializer.FromBinary(out this._fk_BaseObjectClass, sr);
            this._ImplementsInterfaces.FromStream(sr);
            BinarySerializer.FromBinary(out this._IsSimpleObject, sr);
        }
        
        public delegate void GetInheritedMethods_Handler<T>(T obj, MethodReturnEventArgs<IList<Kistl.App.Base.Method>> e);
    }
    
    public class ObjectClass_ImplementsInterfacesCollectionEntry__Implementation__ : Kistl.API.Client.BaseClientCollectionEntry, ICollectionEntry<Kistl.App.Base.Interface, Kistl.App.Base.ObjectClass>
    {
        
        private int _fk_Value;
        
        private int _fk_Parent;
        
        [XmlIgnore()]
        public Kistl.App.Base.Interface Value
        {
            get
            {
                return Context.GetQuery<Kistl.App.Base.Interface>().Single(o => o.ID == fk_Value);
            }
            set
            {
                fk_Value = value.ID;;
            }
        }
        
        [XmlIgnore()]
        public Kistl.App.Base.ObjectClass Parent
        {
            get
            {
                return Context.GetQuery<ObjectClass>().Single(o => o.ID == fk_Parent);
            }
            set
            {
                _fk_Parent = value.ID;
            }
        }
        
        public int fk_Value
        {
            get
            {
                return _fk_Value;
            }
            set
            {
                if(_fk_Value != value)
                {
                    base.NotifyPropertyChanging("Value");
                    _fk_Value = value;
                    base.NotifyPropertyChanged("Value");
                };
            }
        }
        
        public int fk_Parent
        {
            get
            {
                return _fk_Parent;
            }
            set
            {
                _fk_Parent = value;
            }
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this.fk_Value, sw);
            BinarySerializer.ToBinary(this.fk_Parent, sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._fk_Value, sr);
            BinarySerializer.FromBinary(out this._fk_Parent, sr);
        }
        
        public override void ApplyChanges(Kistl.API.ICollectionEntry obj)
        {
            base.ApplyChanges(obj);
            ((ObjectClass_ImplementsInterfacesCollectionEntry__Implementation__)obj)._fk_Value = this.fk_Value;
            ((ObjectClass_ImplementsInterfacesCollectionEntry__Implementation__)obj)._fk_Parent = this.fk_Parent;
        }
    }
}
