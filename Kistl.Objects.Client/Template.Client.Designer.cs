//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kistl.App.GUI
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Collections;
    using System.Xml;
    using System.Xml.Serialization;
    using Kistl.API;
    using Kistl.API.Client;
    
    
    [System.Diagnostics.DebuggerDisplay("Kistl.App.GUI.Template")]
    public class Template__Implementation__ : BaseClientDataObject, Template
    {
        
        private string _DisplayName;
        
        private System.Nullable<int> _fk_VisualTree = null;
        
        private string _DisplayedTypeFullName;
        
        private System.Nullable<int> _fk_DisplayedTypeAssembly = null;
        
        private ListPropertyCollection<Kistl.App.GUI.Visual, Kistl.App.GUI.Template, Template_MenuCollectionEntry__Implementation__> _Menu;
        
        public Template__Implementation__()
        {
            _Menu = new ListPropertyCollection<Kistl.App.GUI.Visual, Kistl.App.GUI.Template, Template_MenuCollectionEntry__Implementation__>(this, "Menu");
        }
        
        public string DisplayName
        {
            get
            {
                return _DisplayName;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (DisplayName != value)
                {
                    NotifyPropertyChanging("DisplayName"); 
                    _DisplayName = value;
                    NotifyPropertyChanged("DisplayName");;
                }
            }
        }
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual VisualTree
        {
            get
            {
                if (fk_VisualTree == null) return null;
                return Context.Find<Kistl.App.GUI.Visual>(fk_VisualTree.Value);
            }
            set
            {
                fk_VisualTree = value != null ? (int?)value.ID : null;
            }
        }
        
        public System.Nullable<int> fk_VisualTree
        {
            get
            {
                return _fk_VisualTree;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (fk_VisualTree != value)
                {
                    NotifyPropertyChanging("VisualTree"); 
                    _fk_VisualTree = value;
                    NotifyPropertyChanged("VisualTree");;
                }
            }
        }
        
        public string DisplayedTypeFullName
        {
            get
            {
                return _DisplayedTypeFullName;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (DisplayedTypeFullName != value)
                {
                    NotifyPropertyChanging("DisplayedTypeFullName"); 
                    _DisplayedTypeFullName = value;
                    NotifyPropertyChanged("DisplayedTypeFullName");;
                }
            }
        }
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Assembly DisplayedTypeAssembly
        {
            get
            {
                if (fk_DisplayedTypeAssembly == null) return null;
                return Context.Find<Kistl.App.Base.Assembly>(fk_DisplayedTypeAssembly.Value);
            }
            set
            {
                fk_DisplayedTypeAssembly = value != null ? (int?)value.ID : null;
            }
        }
        
        public System.Nullable<int> fk_DisplayedTypeAssembly
        {
            get
            {
                return _fk_DisplayedTypeAssembly;
            }
            set
            {
                if (IsReadonly) throw new ReadOnlyObjectException();
                if (fk_DisplayedTypeAssembly != value)
                {
                    NotifyPropertyChanging("DisplayedTypeAssembly"); 
                    _fk_DisplayedTypeAssembly = value;
                    NotifyPropertyChanged("DisplayedTypeAssembly");;
                }
            }
        }
        
        public IList<Kistl.App.GUI.Visual> Menu
        {
            get
            {
                return _Menu;
            }
        }
        
        public event ToStringHandler<Template> OnToString_Template;
        
        public event ObjectEventHandler<Template> OnPreSave_Template;
        
        public event ObjectEventHandler<Template> OnPostSave_Template;
        
        public event PrepareDefault_Handler<Template> OnPrepareDefault_Template;
        
        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Template != null)
            {
                OnToString_Template(this, e);
            }
            return e.Result;
        }
        
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_Template != null) OnPreSave_Template(this);
        }
        
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_Template != null) OnPostSave_Template(this);
        }
        
        public override void ApplyChanges(Kistl.API.IDataObject obj)
        {
            base.ApplyChanges(obj);
            ((Template__Implementation__)obj).DisplayName = this.DisplayName;
            ((Template__Implementation__)obj).fk_VisualTree = this.fk_VisualTree;
            ((Template__Implementation__)obj).DisplayedTypeFullName = this.DisplayedTypeFullName;
            ((Template__Implementation__)obj).fk_DisplayedTypeAssembly = this.fk_DisplayedTypeAssembly;
            this._Menu.ApplyChanges(((Template__Implementation__)obj)._Menu);
        }
        
        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
            if(_Menu != null) _Menu.AttachToContext(ctx);
        }
        
        protected override string GetPropertyError(string prop)
        {
            switch(prop)
            {
                case "DisplayName":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(154).Constraints
                            .Where(c => !c.IsValid(this, this.DisplayName))
                            .Select(c => c.GetErrorText(this, this.DisplayName))
                            .ToArray());
                case "VisualTree":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(155).Constraints
                            .Where(c => !c.IsValid(this, this.VisualTree))
                            .Select(c => c.GetErrorText(this, this.VisualTree))
                            .ToArray());
                case "DisplayedTypeFullName":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(162).Constraints
                            .Where(c => !c.IsValid(this, this.DisplayedTypeFullName))
                            .Select(c => c.GetErrorText(this, this.DisplayedTypeFullName))
                            .ToArray());
                case "DisplayedTypeAssembly":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(163).Constraints
                            .Where(c => !c.IsValid(this, this.DisplayedTypeAssembly))
                            .Select(c => c.GetErrorText(this, this.DisplayedTypeAssembly))
                            .ToArray());
                case "Menu":
                    return string.Join("\n", 
                        Context.GetReadonlyContext().Find<Kistl.App.Base.BaseProperty>(165).Constraints
                            .Where(c => !c.IsValid(this, this.Menu))
                            .Select(c => c.GetErrorText(this, this.Menu))
                            .ToArray());
            }
            return base.GetPropertyError(prop);
        }
        
        public virtual void PrepareDefault(Kistl.App.Base.ObjectClass cls)
        {
            if (OnPrepareDefault_Template != null)
            {
                OnPrepareDefault_Template(this, cls);
            };
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this._DisplayName, sw);
            BinarySerializer.ToBinary(this.fk_VisualTree, sw);
            BinarySerializer.ToBinary(this._DisplayedTypeFullName, sw);
            BinarySerializer.ToBinary(this.fk_DisplayedTypeAssembly, sw);
            this._Menu.ToStream(sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._DisplayName, sr);
            BinarySerializer.FromBinary(out this._fk_VisualTree, sr);
            BinarySerializer.FromBinary(out this._DisplayedTypeFullName, sr);
            BinarySerializer.FromBinary(out this._fk_DisplayedTypeAssembly, sr);
            this._Menu.FromStream(sr);
        }
        
        public delegate void PrepareDefault_Handler<T>(T obj, Kistl.App.Base.ObjectClass cls);
    }
    
    [System.Diagnostics.DebuggerDisplay("Kistl.App.GUI.Template_MenuCollectionEntry")]
    public class Template_MenuCollectionEntry__Implementation__ : Kistl.API.Client.BaseClientCollectionEntry, ICollectionEntry<Kistl.App.GUI.Visual, Kistl.App.GUI.Template>
    {
        
        private int _fk_Value;
        
        private int _fk_Parent;
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual Value
        {
            get
            {
                return Context != null && fk_Value != Kistl.API.Helper.INVALIDID ? Context.GetQuery<Kistl.App.GUI.Visual>().Single(o => o.ID == fk_Value) : null;
            }
            set
            {
                fk_Value = value.ID;
            }
        }
        
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Template Parent
        {
            get
            {
                return Context != null && fk_Parent != Kistl.API.Helper.INVALIDID ? Context.GetQuery<Template>().Single(o => o.ID == fk_Parent) : null;
            }
            set
            {
                _fk_Parent = value.ID;
            }
        }
        
        public int fk_Value
        {
            get
            {
                return _fk_Value;
            }
            set
            {
                if(_fk_Value != value)
                {
                    base.NotifyPropertyChanging("Value");
                    _fk_Value = value;
                    base.NotifyPropertyChanged("Value");
                };
            }
        }
        
        public int fk_Parent
        {
            get
            {
                return _fk_Parent;
            }
            set
            {
                _fk_Parent = value;
            }
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this.fk_Value, sw);
            BinarySerializer.ToBinary(this.fk_Parent, sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._fk_Value, sr);
            BinarySerializer.FromBinary(out this._fk_Parent, sr);
        }
        
        public override void ApplyChanges(Kistl.API.ICollectionEntry obj)
        {
            base.ApplyChanges(obj);
            ((Template_MenuCollectionEntry__Implementation__)obj)._fk_Value = this.fk_Value;
            ((Template_MenuCollectionEntry__Implementation__)obj)._fk_Parent = this.fk_Parent;
        }
    }
}
