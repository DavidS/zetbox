//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kistl.App.Base
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Collections;
    using System.Xml;
    using System.Xml.Serialization;
    using Kistl.API;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Kistl.API.Client;
    
    
    public class DataType : BaseClientDataObject
    {
        
        private System.Nullable<int> _fk_Module = null;
        
        private string _ClassName;
        
        private BackReferenceCollection<Kistl.App.Base.BaseProperty> _Properties;
        
        private BackReferenceCollection<Kistl.App.Base.Method> _Methods;
        
        private System.Nullable<int> _fk_DefaultIcon = null;
        
        private BackReferenceCollection<Kistl.App.Base.MethodInvocation> _MethodIvokations;
        
        public DataType()
        {
        }
        
        [XmlIgnore()]
        public Kistl.App.Base.Module Module
        {
            get
            {
                if (fk_Module == null) return null;
                return Context.Find<Kistl.App.Base.Module>(fk_Module.Value);
            }
            set
            {
                fk_Module = value != null ? (int?)value.ID : null;
            }
        }
        
        public System.Nullable<int> fk_Module
        {
            get
            {
                return _fk_Module;
            }
            set
            {
                if (fk_Module != value)
                {
                    NotifyPropertyChanging("Module"); 
                    _fk_Module = value;
                    NotifyPropertyChanged("Module");;
                }
            }
        }
        
        public string ClassName
        {
            get
            {
                return _ClassName;
            }
            set
            {
                if (ClassName != value)
                {
                    NotifyPropertyChanging("ClassName"); 
                    _ClassName = value;
                    NotifyPropertyChanged("ClassName");;
                }
            }
        }
        
        [XmlIgnore()]
        public IList<Kistl.App.Base.BaseProperty> Properties
        {
            get
            {
                if (_Properties == null)
                {
                    List<Kistl.App.Base.BaseProperty> serverList;
                    if (Helper.IsPersistedObject(this))
                        serverList = Context.GetListOf<Kistl.App.Base.BaseProperty>(this, "Properties");
                    else
                        serverList = new List<Kistl.App.Base.BaseProperty>();

                    _Properties = new BackReferenceCollection<Kistl.App.Base.BaseProperty>(
                         "ObjectClass", this, serverList);
                }
                return _Properties;
            }
        }
        
        [XmlIgnore()]
        public IList<Kistl.App.Base.Method> Methods
        {
            get
            {
                if (_Methods == null)
                {
                    List<Kistl.App.Base.Method> serverList;
                    if (Helper.IsPersistedObject(this))
                        serverList = Context.GetListOf<Kistl.App.Base.Method>(this, "Methods");
                    else
                        serverList = new List<Kistl.App.Base.Method>();

                    _Methods = new BackReferenceCollection<Kistl.App.Base.Method>(
                         "ObjectClass", this, serverList);
                }
                return _Methods;
            }
        }
        
        [XmlIgnore()]
        public Kistl.App.GUI.Icon DefaultIcon
        {
            get
            {
                if (fk_DefaultIcon == null) return null;
                return Context.Find<Kistl.App.GUI.Icon>(fk_DefaultIcon.Value);
            }
            set
            {
                fk_DefaultIcon = value != null ? (int?)value.ID : null;
            }
        }
        
        public System.Nullable<int> fk_DefaultIcon
        {
            get
            {
                return _fk_DefaultIcon;
            }
            set
            {
                if (fk_DefaultIcon != value)
                {
                    NotifyPropertyChanging("DefaultIcon"); 
                    _fk_DefaultIcon = value;
                    NotifyPropertyChanged("DefaultIcon");;
                }
            }
        }
        
        [XmlIgnore()]
        public IList<Kistl.App.Base.MethodInvocation> MethodIvokations
        {
            get
            {
                if (_MethodIvokations == null)
                {
                    List<Kistl.App.Base.MethodInvocation> serverList;
                    if (Helper.IsPersistedObject(this))
                        serverList = Context.GetListOf<Kistl.App.Base.MethodInvocation>(this, "MethodIvokations");
                    else
                        serverList = new List<Kistl.App.Base.MethodInvocation>();

                    _MethodIvokations = new BackReferenceCollection<Kistl.App.Base.MethodInvocation>(
                         "InvokeOnObjectClass", this, serverList);
                }
                return _MethodIvokations;
            }
        }
        
        public event ToStringHandler<DataType> OnToString_DataType;
        
        public event ObjectEventHandler<DataType> OnPreSave_DataType;
        
        public event ObjectEventHandler<DataType> OnPostSave_DataType;
        
        public event GetDataTypeString_Handler<DataType> OnGetDataTypeString_DataType;
        
        public event GetDataType_Handler<DataType> OnGetDataType_DataType;
        
        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_DataType != null)
            {
                OnToString_DataType(this, e);
            }
            return e.Result;
        }
        
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_DataType != null) OnPreSave_DataType(this);
        }
        
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_DataType != null) OnPostSave_DataType(this);
        }
        
        public override void ApplyChanges(Kistl.API.IDataObject obj)
        {
            base.ApplyChanges(obj);
            ((DataType)obj).fk_Module = this.fk_Module;
            ((DataType)obj).ClassName = this.ClassName;
            if(this._Properties != null) this._Properties.ApplyChanges(((DataType)obj)._Properties); else ((DataType)obj)._Properties = null; ((DataType)obj).NotifyPropertyChanged("Properties");
            if(this._Methods != null) this._Methods.ApplyChanges(((DataType)obj)._Methods); else ((DataType)obj)._Methods = null; ((DataType)obj).NotifyPropertyChanged("Methods");
            ((DataType)obj).fk_DefaultIcon = this.fk_DefaultIcon;
            if(this._MethodIvokations != null) this._MethodIvokations.ApplyChanges(((DataType)obj)._MethodIvokations); else ((DataType)obj)._MethodIvokations = null; ((DataType)obj).NotifyPropertyChanged("MethodIvokations");
        }
        
        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
            if(_Properties != null) _Properties.AttachToContext(ctx);
            if(_Methods != null) _Methods.AttachToContext(ctx);
            if(_MethodIvokations != null) _MethodIvokations.AttachToContext(ctx);
        }
        
        public virtual string GetDataTypeString()
        {
            MethodReturnEventArgs<System.String> e = new MethodReturnEventArgs<System.String>();
            if (OnGetDataTypeString_DataType != null)
            {
                OnGetDataTypeString_DataType(this, e);
            };
            return e.Result;
        }
        
        public virtual System.Type GetDataType()
        {
            MethodReturnEventArgs<System.Type> e = new MethodReturnEventArgs<System.Type>();
            if (OnGetDataType_DataType != null)
            {
                OnGetDataType_DataType(this, e);
            };
            return e.Result;
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this.fk_Module, sw);
            BinarySerializer.ToBinary(this._ClassName, sw);
            BinarySerializer.ToBinary(this.fk_DefaultIcon, sw);
        }
        
        public override void FromStream(System.IO.BinaryReader sr)
        {
            base.FromStream(sr);
            BinarySerializer.FromBinary(out this._fk_Module, sr);
            BinarySerializer.FromBinary(out this._ClassName, sr);
            this._Properties = new BackReferenceCollection<Kistl.App.Base.BaseProperty>("ObjectClass", this); BinarySerializer.FromBinary(this._Properties, sr);
            this._Methods = new BackReferenceCollection<Kistl.App.Base.Method>("ObjectClass", this); BinarySerializer.FromBinary(this._Methods, sr);
            BinarySerializer.FromBinary(out this._fk_DefaultIcon, sr);
            this._MethodIvokations = new BackReferenceCollection<Kistl.App.Base.MethodInvocation>("InvokeOnObjectClass", this); BinarySerializer.FromBinary(this._MethodIvokations, sr);
        }
        
        public delegate void GetDataTypeString_Handler<T>(T obj, MethodReturnEventArgs<string> e);
        
        public delegate void GetDataType_Handler<T>(T obj, MethodReturnEventArgs<System.Type> e);
    }
}
