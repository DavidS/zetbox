//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.1433
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kistl.App.Base
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Collections;
    using System.Xml;
    using System.Xml.Serialization;
    using Kistl.API;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Kistl.API.Client;
    
    
    public class MethodInvocation : BaseClientDataObject, ICloneable
    {
        
        private int _ID = Helper.INVALIDID;
        
        private int _fk_Module = Helper.INVALIDID;
        
        private int _fk_Method = Helper.INVALIDID;
        
        private int _fk_Assembly = Helper.INVALIDID;
        
        private string _FullTypeName;
        
        private string _MemberName;
        
        private int _fk_InvokeOnObjectClass = Helper.INVALIDID;
        
        public MethodInvocation()
        {
        }
        
        public override int ID
        {
            get
            {
                return _ID;
            }
            set
            {
                _ID = value;
            }
        }
        
        [XmlIgnore()]
        public Kistl.App.Base.Module Module
        {
            get
            {
                return Context.Find<Kistl.App.Base.Module>(fk_Module);
            }
            set
            {
                NotifyPropertyChanging("Module"); 
                _fk_Module = value.ID;
                NotifyPropertyChanged("Module"); ;
            }
        }
        
        public int fk_Module
        {
            get
            {
                return _fk_Module;
            }
            set
            {
                NotifyPropertyChanging("Module"); 
                _fk_Module = value;
                NotifyPropertyChanged("Module"); ;
            }
        }
        
        [XmlIgnore()]
        public Kistl.App.Base.Method Method
        {
            get
            {
                return Context.Find<Kistl.App.Base.Method>(fk_Method);
            }
            set
            {
                NotifyPropertyChanging("Method"); 
                _fk_Method = value.ID;
                NotifyPropertyChanged("Method"); ;
            }
        }
        
        public int fk_Method
        {
            get
            {
                return _fk_Method;
            }
            set
            {
                NotifyPropertyChanging("Method"); 
                _fk_Method = value;
                NotifyPropertyChanged("Method"); ;
            }
        }
        
        [XmlIgnore()]
        public Kistl.App.Base.Assembly Assembly
        {
            get
            {
                return Context.Find<Kistl.App.Base.Assembly>(fk_Assembly);
            }
            set
            {
                NotifyPropertyChanging("Assembly"); 
                _fk_Assembly = value.ID;
                NotifyPropertyChanged("Assembly"); ;
            }
        }
        
        public int fk_Assembly
        {
            get
            {
                return _fk_Assembly;
            }
            set
            {
                NotifyPropertyChanging("Assembly"); 
                _fk_Assembly = value;
                NotifyPropertyChanged("Assembly"); ;
            }
        }
        
        public string FullTypeName
        {
            get
            {
                return _FullTypeName;
            }
            set
            {
                NotifyPropertyChanging("FullTypeName"); 
                _FullTypeName = value; 
                NotifyPropertyChanged("FullTypeName");;
            }
        }
        
        public string MemberName
        {
            get
            {
                return _MemberName;
            }
            set
            {
                NotifyPropertyChanging("MemberName"); 
                _MemberName = value; 
                NotifyPropertyChanged("MemberName");;
            }
        }
        
        [XmlIgnore()]
        public Kistl.App.Base.DataType InvokeOnObjectClass
        {
            get
            {
                return Context.Find<Kistl.App.Base.DataType>(fk_InvokeOnObjectClass);
            }
            set
            {
                NotifyPropertyChanging("InvokeOnObjectClass"); 
                _fk_InvokeOnObjectClass = value.ID;
                NotifyPropertyChanged("InvokeOnObjectClass"); ;
            }
        }
        
        public int fk_InvokeOnObjectClass
        {
            get
            {
                return _fk_InvokeOnObjectClass;
            }
            set
            {
                NotifyPropertyChanging("InvokeOnObjectClass"); 
                _fk_InvokeOnObjectClass = value;
                NotifyPropertyChanged("InvokeOnObjectClass"); ;
            }
        }
        
        public event ToStringHandler<MethodInvocation> OnToString_MethodInvocation;
        
        public event ObjectEventHandler<MethodInvocation> OnPreSave_MethodInvocation;
        
        public event ObjectEventHandler<MethodInvocation> OnPostSave_MethodInvocation;
        
        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_MethodInvocation != null)
            {
                OnToString_MethodInvocation(this, e);
            }
            return e.Result;
        }
        
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_MethodInvocation != null) OnPreSave_MethodInvocation(this);
        }
        
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_MethodInvocation != null) OnPostSave_MethodInvocation(this);
        }
        
        public override object Clone()
        {
            MethodInvocation obj = new MethodInvocation();
            CopyTo(obj);
            return obj;
        }
        
        public override void CopyTo(Kistl.API.IDataObject obj)
        {
            base.CopyTo(obj);
            ((MethodInvocation)obj)._fk_Module = this._fk_Module;
            ((MethodInvocation)obj)._fk_Method = this._fk_Method;
            ((MethodInvocation)obj)._fk_Assembly = this._fk_Assembly;
            ((MethodInvocation)obj)._FullTypeName = this._FullTypeName;
            ((MethodInvocation)obj)._MemberName = this._MemberName;
            ((MethodInvocation)obj)._fk_InvokeOnObjectClass = this._fk_InvokeOnObjectClass;
        }
        
        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }
        
        public override void ToStream(System.IO.BinaryWriter sw)
        {
            base.ToStream(sw);
            BinarySerializer.ToBinary(this.fk_Module, sw);
            BinarySerializer.ToBinary(this.fk_Method, sw);
            BinarySerializer.ToBinary(this.fk_Assembly, sw);
            BinarySerializer.ToBinary(this._FullTypeName, sw);
            BinarySerializer.ToBinary(this._MemberName, sw);
            BinarySerializer.ToBinary(this.fk_InvokeOnObjectClass, sw);
        }
        
        public override void FromStream(Kistl.API.IKistlContext ctx, System.IO.BinaryReader sr)
        {
            base.FromStream(ctx, sr);
            BinarySerializer.FromBinary(out this._fk_Module, sr);
            BinarySerializer.FromBinary(out this._fk_Method, sr);
            BinarySerializer.FromBinary(out this._fk_Assembly, sr);
            BinarySerializer.FromBinary(out this._FullTypeName, sr);
            BinarySerializer.FromBinary(out this._MemberName, sr);
            BinarySerializer.FromBinary(out this._fk_InvokeOnObjectClass, sr);
        }
    }
}
