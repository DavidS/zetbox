// <autogenerated/>


namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.API.Client;
    using Kistl.DalProvider.ClientObjects;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("IntegerRangeConstraint")]
    public class IntegerRangeConstraint__Implementation__ : Kistl.App.Base.Constraint__Implementation__, IntegerRangeConstraint
    {
    
		public IntegerRangeConstraint__Implementation__()
		{
            {
            }
        }


        /// <summary>
        /// The biggest value accepted by this constraint
        /// </summary>
        // value type property
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int Max
        {
            get
            {
                return _Max;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (_Max != value)
                {
					var __oldValue = _Max;
                    NotifyPropertyChanging("Max", __oldValue, value);
                    _Max = value;
                    NotifyPropertyChanged("Max", __oldValue, value);
                }
            }
        }
        private int _Max;

        /// <summary>
        /// The smallest value accepted by this constraint
        /// </summary>
        // value type property
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int Min
        {
            get
            {
                return _Min;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (_Min != value)
                {
					var __oldValue = _Min;
                    NotifyPropertyChanging("Min", __oldValue, value);
                    _Min = value;
                    NotifyPropertyChanged("Min", __oldValue, value);
                }
            }
        }
        private int _Min;

        /// <summary>
        /// 
        /// </summary>

		public override string GetErrorText(System.Object constrainedObject, System.Object constrainedValue) 
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetErrorText_IntegerRangeConstraint != null)
            {
                OnGetErrorText_IntegerRangeConstraint(this, e, constrainedObject, constrainedValue);
            }
            else
            {
                e.Result = base.GetErrorText(constrainedObject, constrainedValue);
            }
            return e.Result;
        }
		public event GetErrorText_Handler<IntegerRangeConstraint> OnGetErrorText_IntegerRangeConstraint;



        /// <summary>
        /// 
        /// </summary>

		public override bool IsValid(System.Object constrainedObject, System.Object constrainedValue) 
        {
            var e = new MethodReturnEventArgs<bool>();
            if (OnIsValid_IntegerRangeConstraint != null)
            {
                OnIsValid_IntegerRangeConstraint(this, e, constrainedObject, constrainedValue);
            }
            else
            {
                e.Result = base.IsValid(constrainedObject, constrainedValue);
            }
            return e.Result;
        }
		public event IsValid_Handler<IntegerRangeConstraint> OnIsValid_IntegerRangeConstraint;



		public override InterfaceType GetInterfaceType()
		{
			return new InterfaceType(typeof(IntegerRangeConstraint));
		}

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (IntegerRangeConstraint)obj;
			var otherImpl = (IntegerRangeConstraint__Implementation__)obj;
			var me = (IntegerRangeConstraint)this;

			me.Max = other.Max;
			me.Min = other.Min;
		}

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_IntegerRangeConstraint != null)
            {
                OnToString_IntegerRangeConstraint(this, e);
            }
            return e.Result;
        }
        public event ToStringHandler<IntegerRangeConstraint> OnToString_IntegerRangeConstraint;

        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_IntegerRangeConstraint != null) OnPreSave_IntegerRangeConstraint(this);
        }
        public event ObjectEventHandler<IntegerRangeConstraint> OnPreSave_IntegerRangeConstraint;

        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_IntegerRangeConstraint != null) OnPostSave_IntegerRangeConstraint(this);
        }
        public event ObjectEventHandler<IntegerRangeConstraint> OnPostSave_IntegerRangeConstraint;


		protected override string GetPropertyError(string propertyName) 
		{
			switch(propertyName)
			{
				case "Max":
				{
					var errors = FrozenContext.Single.Find<Kistl.App.Base.Property>(166).Constraints
						.Where(c => !c.IsValid(this, this.Max))
						.Select(c => c.GetErrorText(this, this.Max))
						.ToArray();
					
					return String.Join("; ", errors);
				}
				case "Min":
				{
					var errors = FrozenContext.Single.Find<Kistl.App.Base.Property>(173).Constraints
						.Where(c => !c.IsValid(this, this.Min))
						.Select(c => c.GetErrorText(this, this.Min))
						.ToArray();
					
					return String.Join("; ", errors);
				}
				default:
					return base.GetPropertyError(propertyName);
			}
		}

		public override void UpdateParent(string propertyName, int? id)
		{
			switch(propertyName)
			{
				default:
					base.UpdateParent(propertyName, id);
					break;
			}
		}

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects)
        {
			
            base.ToStream(binStream, auxObjects);
            BinarySerializer.ToStream(this._Max, binStream);
            BinarySerializer.ToStream(this._Min, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
			
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._Max, binStream);
            BinarySerializer.FromStream(out this._Min, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
			
            base.ToStream(xml);
            XmlStreamer.ToStream(this._Max, xml, "Max", "Kistl.App.Base");
            XmlStreamer.ToStream(this._Min, xml, "Min", "Kistl.App.Base");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
			
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._Max, xml, "Max", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._Min, xml, "Min", "Kistl.App.Base");
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
			
            base.Export(xml, modules);
	
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._Max, xml, "Max", "Kistl.App.Base");
	
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._Min, xml, "Min", "Kistl.App.Base");
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
			
            base.MergeImport(xml);
            XmlStreamer.FromStream(ref this._Max, xml, "Max", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._Min, xml, "Min", "Kistl.App.Base");
        }

#endregion

    }


}