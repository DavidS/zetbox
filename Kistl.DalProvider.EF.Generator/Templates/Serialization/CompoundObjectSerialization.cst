<%@ CodeTemplate Language="C#" 
	Name="Serialization.CompoundObjectSerialization"
	ClassName="Kistl.DalProvider.Ef.Generator.Templates.Serialization.CompoundObjectSerialization" 
	Inherits="Kistl.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Generator" %>
<%@ Import Namespace="Kistl.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="direction" Type="Kistl.Generator.Templates.Serialization.SerializerDirection" %>
<%@ Parameter Name="streamName" Type="string" %>
<%@ Parameter Name="xmlnamespace" Type="string" %>
<%@ Parameter Name="xmlname" Type="string" %>
<%@ Parameter Name="memberType" Type="string" %>
<%@ Parameter Name="memberName" Type="string" %>
<%@ Parameter Name="backingStoreType" Type="string" %>
<%@ Parameter Name="backingStoreName" Type="string" %>
<%
	if (direction == Kistl.Generator.Templates.Serialization.SerializerDirection.ToStream)
	{
%>
			<%= streamName %>.Write(this.<%= memberName %>);
<%	
	}
	else if (direction == Kistl.Generator.Templates.Serialization.SerializerDirection.FromStream)
	{
%>
			{
                // use backing store to avoid notifications
				<%= backingStoreType %> tmp = <%= streamName %>.ReadCompoundObject<<%= backingStoreType %>>();
	            this.<%= backingStoreName %> = tmp ?? new <%= backingStoreType %>(true, this, "<%= memberName %>");
                this.<%= backingStoreName %>.AttachToObject(this, "<%= memberName %>");
	        }
<%	
	}
	else if (direction == Kistl.Generator.Templates.Serialization.SerializerDirection.ToXmlStream)
	{
%>
			// TODO: Add XML Serializer here
<%
	}
	else if (direction == Kistl.Generator.Templates.Serialization.SerializerDirection.FromXmlStream)
	{
%>
            // TODO: Add XML Serializer here
<%
	}
	else if (direction == Kistl.Generator.Templates.Serialization.SerializerDirection.Export)
	{
%>
            if (modules.Contains("*") || modules.Contains("<%= xmlnamespace %>")) XmlStreamer.ToStream(this.<%= memberName %>, <%= streamName %>, "<%= xmlname %>", "<%= xmlnamespace %>");
<%
	}
	else if (direction == Kistl.Generator.Templates.Serialization.SerializerDirection.MergeImport)
	{
%>
			XmlStreamer.FromStream(this.<%= backingStoreName %>, <%= streamName %>, "<%= xmlname %>", "<%= xmlnamespace %>");
<%
	}
	else
	{
		throw new ArgumentOutOfRangeException("direction");
	}
%>