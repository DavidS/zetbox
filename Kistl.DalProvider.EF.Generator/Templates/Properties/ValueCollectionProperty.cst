<%@ CodeTemplate Language="C#" 
	Name="Properties.ValueCollectionProperty"
	ClassName="Kistl.DalProvider.Ef.Generator.Templates.Properties.ValueCollectionProperty" 
	Inherits="Kistl.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Generator" %>
<%@ Import Namespace="Kistl.Generator.Extensions" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="serializationList" Type="Kistl.Generator.Templates.Serialization.SerializationMembersList" %>
<%@ Parameter Name="prop" Type="Property" %>
<%

    Debug.Assert(prop is ValueTypeProperty ? ((ValueTypeProperty)prop).IsList : ((CompoundObjectProperty)prop).IsList);
	bool hasPersistentOrder = prop is ValueTypeProperty ? ((ValueTypeProperty)prop).HasPersistentOrder : ((CompoundObjectProperty)prop).HasPersistentOrder;

	// the name of the property to create
	string name = prop.Name;
	// the ef-visible property's name
	string efName = name + ImplementationPropertySuffix;
	// the name of the private backing store for the conversion wrapper list
	string wrapperName = "_" + name;
	// the name of the wrapper class for wrapping the EntityCollection
	string wrapperClass = (hasPersistentOrder ? "EfValueListWrapper" : "EfValueCollectionWrapper");
	
	// the name of the EF association
	string assocName = prop.GetAssociationName();
	string targetRoleName = "CollectionEntry";

	// which generic interface to use for the collection
	string exposedListType = hasPersistentOrder ? "IList" : "ICollection";

	// which Kistl interface this is 
	string thisInterface = prop.ObjectClass.Name;
	// which type this list contains
	string referencedType = prop.ReferencedTypeAsCSharp();
	// collection entries in this list
	string referencedCollectionEntry = prop.GetCollectionEntryFullName() + ImplementationSuffix;

    AddSerialization(serializationList, efName);
	var eventName = "On" + name + "_PostSetter";
%>
   		// <%= this.GetType() %>
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public <%= exposedListType %><<%= referencedType %>> <%= name %>
        {
            get
            {
                if (<%= wrapperName %> == null)
                {
                    <%= wrapperName %> = new <%= wrapperClass %><<%= thisInterface %>, <%= referencedType %>, <%= referencedCollectionEntry %>, EntityCollection<<%= referencedCollectionEntry %>>>(
						this.Context,
                        this,
              			() => { this.NotifyPropertyChanged("<%= name %>", null, null, null); if(<%= eventName %> != null && IsAttached) <%= eventName%>(this); },
          	            <%= efName %>);
                }
                return <%= wrapperName %>;
            }
        }
        
        [EdmRelationshipNavigationProperty("Model", "<%= assocName %>", "<%= targetRoleName %>")]
        public EntityCollection<<%= referencedCollectionEntry %>> <%= efName %>
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<<%= referencedCollectionEntry %>>(
                        "Model.<%= assocName %>",
                        "<%= targetRoleName %>");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                c.ForEach(i => i.AttachToContext(Context));
                return c;
            }
        }
        private <%= wrapperClass %><<%= thisInterface %>, <%= referencedType %>, <%= referencedCollectionEntry %>, EntityCollection<<%= referencedCollectionEntry %>>> <%= wrapperName %>;
