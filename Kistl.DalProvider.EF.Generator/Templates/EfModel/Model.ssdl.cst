<%@ CodeTemplate Language="C#" 
	Name="EfModel.ModelSsdl"
	ClassName="Kistl.DalProvider.Ef.Generator.Templates.EfModel.ModelSsdl" 
	Inherits="Kistl.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Import Namespace="Kistl.Generator" %>
<%@ Import Namespace="Kistl.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="schemaProvider" Type="ISchemaProvider" %>
<?xml version="1.0" encoding="utf-8"?>
<Schema xmlns="http://schemas.microsoft.com/ado/2006/04/edm/ssdl"
        Namespace="Model.Store"
        Alias="Self"
        Provider="<%= schemaProvider.AdoNetProvider %>"
        ProviderManifestToken="<%= schemaProvider.ManifestToken %>" >
  <EntityContainer Name="dbo">

    <!-- EntitySets for all Base Classes -->
<%	
	foreach(var cls in ctx.GetBaseClasses().OrderBy(c => c.Name))
	{
%>
    <EntitySet Name="<%= cls.Name %>" EntityType="Model.Store.<%= cls.Name %>" Table="<%= cls.TableName %>"/>
<%	
		if (cls.NeedsRightsTable())
		{
%>
    <EntitySet Name="<%= Construct.SecurityRulesClassName(cls) %>" EntityType="Model.Store.<%= Construct.SecurityRulesClassName(cls) %>" Table="<%= Construct.SecurityRulesTableName(cls) %>"/>
    <AssociationSet Name="<%= Construct.SecurityRulesFKName(cls) %>" Association="Model.Store.<%= Construct.SecurityRulesFKName(cls) %>">
      <End Role="<%= cls.Name %>" EntitySet="<%= cls.Name %>" />
      <End Role="<%= Construct.SecurityRulesClassName(cls) %>" EntitySet="<%= Construct.SecurityRulesClassName(cls) %>" />
    </AssociationSet>
<%	
		}
	}
%>

    <!-- EntitySets for all derived classes and their inheritance AssociationSets -->
<%	
	foreach(var cls in ctx.GetDerivedClasses().OrderBy(c => c.Name))
	{
		var info = new InheritanceStorageAssociationInfo(cls);
%>
    <EntitySet Name="<%= cls.Name %>" EntityType="Model.Store.<%= cls.Name %>" Table="<%= cls.TableName %>"/>
    <!-- inherits from <%= info.ParentEntitySetName %> -->
    <AssociationSet Name="<%= info.AssociationName %>" Association="Model.Store.<%= info.AssociationName %>" >
      <End Role="<%= info.ParentRoleName %>" EntitySet="<%= info.ParentEntitySetName %>" />
      <End Role="<%= info.ChildRoleName %>" EntitySet="<%= info.ChildEntitySetName %>" />
    </AssociationSet>
<%	
	}
%>

    <!-- EntitySets and AssociationSet for all object-object CollectionEntrys -->
<%
	foreach(var rel in ctx.GetRelationsWithSeparateStorage())
	{
		string assocNameA = rel.GetRelationAssociationName(RelationEndRole.A);
		string assocNameB = rel.GetRelationAssociationName(RelationEndRole.B);
		string esName = rel.GetRelationClassName();
		string esTableName = rel.GetRelationTableName();
		
%>
    <!-- 
<%
    RelationDebugTemplate.Call(Host, ctx, rel);
%>
    -->
    <EntitySet Name="<%= esName %>" EntityType="Model.Store.<%= esName %>" Table="<%= esTableName %>" />
    <AssociationSet Name="<%= assocNameA %>" Association="Model.Store.<%= assocNameA %>" >
      <End Role="<%= rel.A.RoleName %>" EntitySet="<%= rel.A.Type.Name %>" />
      <End Role="CollectionEntry" EntitySet="<%= esName %>" />
    </AssociationSet>
    <AssociationSet Name="<%= assocNameB %>" Association="Model.Store.<%= assocNameB %>" >
      <End Role="CollectionEntry" EntitySet="<%= esName %>" />
      <End Role="<%= rel.B.RoleName %>" EntitySet="<%= rel.B.Type.Name %>" />
    </AssociationSet>
    
<%
	}
%>


    <!-- AssociationSets for all object-object relations which do not need CollectionEntrys -->
<%
	foreach (var rel in ctx.GetRelationsWithoutSeparateStorage())
	{
		string assocName = rel.GetAssociationName();
		
%>
    <AssociationSet Name="<%= assocName %>" Association="Model.Store.<%= assocName %>" >
      <End Role="<%= rel.A.RoleName %>" EntitySet="<%= rel.A.Type.Name %>" />
      <End Role="<%= rel.B.RoleName %>" EntitySet="<%= rel.B.Type.Name %>" />
    </AssociationSet>
<%
	}
%>

    <!-- EntitySets and AssociationSet for all object-value CollectionEntrys -->
<%
	foreach(var prop in ctx.GetQuery<ValueTypeProperty>()
        .Where(p => p.IsList && !p.IsCalculated)
        .Where(p => p.ObjectClass is ObjectClass)
		.OrderBy(p => p.ObjectClass.Name)
		.ThenBy(p => p.Name))
	{
		string assocName = prop.GetAssociationName();
		string esName = prop.GetCollectionEntryClassName();
%>
    <EntitySet Name="<%= esName %>" EntityType="Model.Store.<%= esName %>" Table="<%= prop.GetCollectionEntryTable() %>" />
    <AssociationSet Name="<%= assocName %>" Association="Model.Store.<%= assocName %>" >
      <End Role="<%= prop.ObjectClass.Name %>" EntitySet="<%= prop.ObjectClass.Name %>" />
      <End Role="CollectionEntry" EntitySet="<%= esName %>" />
    </AssociationSet>
    
<%
	}
%>

    <!-- EntitySets and AssociationSet for all object-struct CollectionEntrys -->
<%
	foreach(var prop in ctx.GetQuery<CompoundObjectProperty>()
        .Where(p => p.IsList) // && !p.IsCalculated)
        .Where(p => p.ObjectClass is ObjectClass)
		.OrderBy(p => p.ObjectClass.Name)
		.ThenBy(p => p.Name))
	{
		string assocName = prop.GetAssociationName();
		string esName = prop.GetCollectionEntryClassName();
%>
    <EntitySet Name="<%= esName %>" EntityType="Model.Store.<%= esName %>" Table="<%= prop.GetCollectionEntryTable() %>" />
    <AssociationSet Name="<%= assocName %>" Association="Model.Store.<%= assocName %>" >
      <End Role="<%= prop.ObjectClass.Name %>" EntitySet="<%= prop.ObjectClass.Name %>" />
      <End Role="CollectionEntry" EntitySet="<%= esName %>" />
    </AssociationSet>
    
<%
	}
%>


  </EntityContainer>

  <!-- EntityTypes for all classes -->
<%
	foreach(var cls in ctx.GetQuery<ObjectClass>()
		.OrderBy(cls => cls.Name))
	{
%>	
  <EntityType Name="<%= cls.Name %>">
    <Key>
      <PropertyRef Name="ID" />
    </Key>
    <Property Name="ID" Type="<%= schemaProvider.DbTypeToNative(DbType.Int32) %>" Nullable="false" <%= (cls.BaseObjectClass == null) ? "StoreGeneratedPattern=\"Identity\" " : String.Empty %>/>
<%
		ApplyEntityTypeColumnDefs(cls);
%>
  </EntityType>
<%	
		if (cls.NeedsRightsTable())
		{
%>
    <EntityType Name="<%= Construct.SecurityRulesClassName(cls) %>">
      <Key>
        <PropertyRef Name="ID" />
        <PropertyRef Name="Identity" />
      </Key>
      <Property Name="ID" Type="<%= schemaProvider.DbTypeToNative(DbType.Int32) %>" Nullable="false" />
      <Property Name="Identity" Type="<%= schemaProvider.DbTypeToNative(DbType.Int32) %>" Nullable="false" />
      <Property Name="Right" Type="<%= schemaProvider.DbTypeToNative(DbType.Int32) %>" Nullable="false" />
    </EntityType>
    <Association Name="<%= Construct.SecurityRulesFKName(cls) %>">
      <End Role="<%= cls.Name %>" Type="Model.Store.<%= cls.Name %>" Multiplicity="1" />
      <End Role="<%= Construct.SecurityRulesClassName(cls) %>" Type="Model.Store.<%= Construct.SecurityRulesClassName(cls) %>" Multiplicity="*" />
      <ReferentialConstraint>
        <Principal Role="<%= cls.Name %>">
          <PropertyRef Name="ID" />
        </Principal>
        <Dependent Role="<%= Construct.SecurityRulesClassName(cls) %>">
          <PropertyRef Name="ID" />
        </Dependent>
      </ReferentialConstraint>
    </Association>
<%	
		}

	}
%>

  <!-- EntityTypes for all object-object CollectionEntrys with their associations -->
<%
	foreach(var rel in ctx.GetRelationsWithSeparateStorage())
	{
		string ceName = rel.GetRelationClassName();
		string fkAName = rel.GetRelationFkColumnName(RelationEndRole.A);
		string fkBName = rel.GetRelationFkColumnName(RelationEndRole.B);
%>	
  <EntityType Name="<%= ceName %>">
    <Key>
      <PropertyRef Name="ID" />
    </Key>
    <Property Name="ID" Type="<%= schemaProvider.DbTypeToNative(DbType.Int32) %>" Nullable="false" StoreGeneratedPattern="Identity" />
<% 
		if (rel.A.Type.ImplementsIExportable() && rel.B.Type.ImplementsIExportable())
		{
%>
	<Property Name="ExportGuid" Type="<%= schemaProvider.DbTypeToNative(DbType.Guid) %>" Nullable="false" />
<%	
		}
%>
    <Property Name="<%= fkAName %>" Type="<%= schemaProvider.DbTypeToNative(DbType.Int32) %>" Nullable="true" />
<%
		if (rel.NeedsPositionStorage(RelationEndRole.A))
		{
%>
    <Property Name="<%= fkAName %><%= Kistl.API.Helper.PositionSuffix %>" Type="<%= schemaProvider.DbTypeToNative(DbType.Int32) %>" Nullable="true" />
<%
		}
%>
    <Property Name="<%= fkBName %>" Type="<%= schemaProvider.DbTypeToNative(DbType.Int32) %>" Nullable="true" />
<%
		if (rel.NeedsPositionStorage(RelationEndRole.B))
		{
%>
    <Property Name="<%= fkBName %><%= Kistl.API.Helper.PositionSuffix %>" Type="<%= schemaProvider.DbTypeToNative(DbType.Int32) %>" Nullable="true" />
<%
		}
%>
  </EntityType>

  <!-- A to CollectionEntry -->
  <Association Name="<%= rel.GetRelationAssociationName(RelationEndRole.A) %>">
    <End Role="<%= rel.A.RoleName %>" Type="Model.Store.<%= rel.A.Type.Name %>" Multiplicity="0..1" />
    <End Role="CollectionEntry" Type="Model.Store.<%= ceName %>" Multiplicity="*" />
    <ReferentialConstraint>
      <Principal Role="<%= rel.A.RoleName %>">
        <PropertyRef Name="ID" />
      </Principal>
      <Dependent Role="CollectionEntry">
        <PropertyRef Name="<%= fkAName %>" />
      </Dependent>
    </ReferentialConstraint>
  </Association>

  <!-- B to CollectionEntry -->
  <Association Name="<%= rel.GetRelationAssociationName(RelationEndRole.B) %>">
    <End Role="<%= rel.B.RoleName %>" Type="Model.Store.<%= rel.B.Type.Name %>" Multiplicity="0..1" />
    <End Role="CollectionEntry" Type="Model.Store.<%= ceName %>" Multiplicity="*" />
    <ReferentialConstraint>
      <Principal Role="<%= rel.B.RoleName %>">
        <PropertyRef Name="ID" />
      </Principal>
      <Dependent Role="CollectionEntry">
        <PropertyRef Name="<%= fkBName %>" />
      </Dependent>
    </ReferentialConstraint>
  </Association>

<%
	}
%>


  <!-- Associations for all object-object relations without CollectionEntry (1:1, 1:N) -->
<%
	foreach(var rel in ctx.GetRelationsWithoutSeparateStorage())
	{
		RelationEnd principal, dependent;
	
		switch(rel.Storage)
		{
			case StorageType.MergeIntoA:
				principal = rel.B;
				dependent = rel.A;
				break;
			case StorageType.MergeIntoB:
				principal = rel.A;
				dependent = rel.B;
				break;
			default:
				throw new NotImplementedException();
		}
%>

  <Association Name="<%= rel.GetAssociationName() %>">
    <End Role="<%= principal.RoleName %>" Type="Model.Store.<%= principal.Type.Name %>" Multiplicity="<%= principal.Multiplicity.ToSsdlMultiplicity().ToXmlValue() %>" />
    <End Role="<%= dependent.RoleName %>" Type="Model.Store.<%= dependent.Type.Name %>" Multiplicity="*" />
    <ReferentialConstraint>
      <Principal Role="<%= principal.RoleName %>">
        <PropertyRef Name="ID" />
      </Principal>
      <Dependent Role="<%= dependent.RoleName %>">
        <PropertyRef Name="fk_<%= principal.RoleName %>" />
      </Dependent>
    </ReferentialConstraint>
  </Association>

<%
	}
%>


  <!-- derived->base ObjectClass references -->
<%
	foreach(var cls in ctx.GetDerivedClasses().OrderBy(c => c.Name))
	{
		var parentType = cls.BaseObjectClass;
		var childType = cls;
		
		string parentRoleName = Construct.AssociationParentRoleName(parentType);
		string childRoleName = Construct.AssociationChildRoleName(childType);
%>
  <Association Name="<%= Construct.InheritanceAssociationName(parentType, childType) %>">
    <End Role="<%= parentRoleName %>" Type="Model.Store.<%= parentType.Name %>" Multiplicity="1" />
    <End Role="<%= childRoleName %>" Type="Model.Store.<%= childType.Name %>" Multiplicity="0..1" />
    <ReferentialConstraint>
      <Principal Role="<%= parentRoleName %>">
        <PropertyRef Name="ID" />
      </Principal>
      <Dependent Role="<%= childRoleName %>">
        <PropertyRef Name="ID" />
      </Dependent>
    </ReferentialConstraint>
  </Association>
<%	}
%>


    <!-- EntityTypes and Associations for all object-value CollectionEntrys -->
<%
	foreach(var prop in ctx.GetQuery<ValueTypeProperty>()
		.Where(p => p.IsList && !p.IsCalculated)
        .Where(p => p.ObjectClass is ObjectClass)
		.OrderBy(p => p.ObjectClass.Name)
		.ThenBy(p => p.Name))
	{
		string assocName = prop.GetAssociationName();
		
		// the name of the class containing this list
		string containerTypeName = prop.ObjectClass.Name;
		// the name of the CollectionEntry class
		string entryTypeName = prop.GetCollectionEntryClassName();
		// the name of the contained type
		string itemTypeName = schemaProvider.DbTypeToNative(DbTypeMapper.GetDbTypeForProperty(prop.GetType()));
		
		string constraint = String.Empty;
		if (prop is StringProperty) {
			var sProp = (StringProperty)prop;
			constraint += String.Format("MaxLength=\"{0}\" ", sProp.GetMaxLength());
		}
		if (prop is DecimalProperty) {
			var dProp = (DecimalProperty)prop;
			constraint += String.Format("Precision=\"{0}\" Scale=\"{1}\" ", dProp.Precision, dProp.Scale);
		}

%>
    <EntityType Name="<%= entryTypeName %>" >
      <Key>
        <PropertyRef Name="ID" />
      </Key>
      <Property Name="ID" Type="<%= schemaProvider.DbTypeToNative(DbType.Int32) %>" Nullable="false" StoreGeneratedPattern="Identity" />
      <Property Name="fk_<%= containerTypeName %>" Type="<%= schemaProvider.DbTypeToNative(DbType.Int32) %>" Nullable="true" />
      <Property Name="<%= prop.Name %>" Type="<%= itemTypeName %>" <%= constraint %>/>
<%
		if (prop.HasPersistentOrder)
		{
%>
    <Property Name="<%= prop.Name %>Index" Type="<%= schemaProvider.DbTypeToNative(DbType.Int32) %>" Nullable="true" />
<%
		}
%>
    </EntityType>

    <Association Name="<%= prop.GetAssociationName() %>">
      <End Role="<%= containerTypeName %>" Type="Model.Store.<%= containerTypeName %>" Multiplicity="0..1">
        <OnDelete Action="Cascade" />
      </End>
      <End Role="CollectionEntry" Type="Model.Store.<%= entryTypeName %>" Multiplicity="*" />
      <ReferentialConstraint>
        <Principal Role="<%= containerTypeName %>">
          <PropertyRef Name="ID" />
        </Principal>
        <Dependent Role="CollectionEntry">
          <PropertyRef Name="fk_<%= containerTypeName %>" />
        </Dependent>
      </ReferentialConstraint>
    </Association>

<%
	}
%>

    <!-- EntityTypes and Associations for all object-struct CollectionEntrys -->
<%
	foreach(var prop in ctx.GetQuery<CompoundObjectProperty>()
		.Where(p => p.IsList) // && !p.IsCalculated)
        .Where(p => p.ObjectClass is ObjectClass)
		.OrderBy(p => p.ObjectClass.Name)
		.ThenBy(p => p.Name))
	{
		string assocName = prop.GetAssociationName();
		
		// the name of the class containing this list
		string containerTypeName = prop.ObjectClass.Name;
		// the name of the CollectionEntry class
		string entryTypeName = prop.GetCollectionEntryClassName();
%>
    <EntityType Name="<%= entryTypeName %>" >
      <Key>
        <PropertyRef Name="ID" />
      </Key>
      <Property Name="ID" Type="<%= schemaProvider.DbTypeToNative(DbType.Int32) %>" Nullable="false" StoreGeneratedPattern="Identity" />
      <Property Name="fk_<%= containerTypeName %>" Type="<%= schemaProvider.DbTypeToNative(DbType.Int32) %>" Nullable="true" />
<%
		ApplyEntityTypeColumnDefs(prop);
%>
<%
		if (prop.HasPersistentOrder)
		{
%>
    <Property Name="<%= prop.Name %>Index" Type="<%= schemaProvider.DbTypeToNative(DbType.Int32) %>" Nullable="true" />
<%
		}
%>
    </EntityType>

    <Association Name="<%= prop.GetAssociationName() %>">
      <End Role="<%= containerTypeName %>" Type="Model.Store.<%= containerTypeName %>" Multiplicity="0..1">
        <OnDelete Action="Cascade" />
      </End>
      <End Role="CollectionEntry" Type="Model.Store.<%= entryTypeName %>" Multiplicity="*" />
      <ReferentialConstraint>
        <Principal Role="<%= containerTypeName %>">
          <PropertyRef Name="ID" />
        </Principal>
        <Dependent Role="CollectionEntry">
          <PropertyRef Name="fk_<%= containerTypeName %>" />
        </Dependent>
      </ReferentialConstraint>
    </Association>

<%
	}
%>
	<Function Name="GetContinuousSequenceNumber" Aggregate="false" BuiltIn="false" NiladicFunction="false" IsComposable="false" ParameterTypeSemantics="AllowImplicitConversion" Schema="dbo">
          <Parameter Name="seqNumber" Type="<%= schemaProvider.DbTypeToNative(DbType.Guid) %>" Mode="In" />
		  <Parameter Name="result" Type="<%= schemaProvider.DbTypeToNative(DbType.Int32) %>" Mode="Out" />
    </Function>
    <Function Name="GetSequenceNumber" Aggregate="false" BuiltIn="false" NiladicFunction="false" IsComposable="false" ParameterTypeSemantics="AllowImplicitConversion" Schema="dbo">
        <Parameter Name="seqNumber" Type="<%= schemaProvider.DbTypeToNative(DbType.Guid) %>" Mode="In" />
		<Parameter Name="result" Type="<%= schemaProvider.DbTypeToNative(DbType.Int32) %>" Mode="Out" />
    </Function>
</Schema>