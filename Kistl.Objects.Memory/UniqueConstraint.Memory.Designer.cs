// <autogenerated/>


namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.DalProvider.Memory;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("UniqueConstraint")]
    public class UniqueConstraint__Implementation__Memory : Kistl.App.Base.InstanceConstraint__Implementation__Memory, UniqueConstraint
    {
        [Obsolete]
        public UniqueConstraint__Implementation__Memory()
            : base(null)
        {
            {
            }
        }

        public UniqueConstraint__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
            : base(lazyCtx)
        {
            {
            }
        }


        /// <summary>
        /// 
        /// </summary>
        // collection reference property
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.CollectionEntryListProperty
		public ICollection<Kistl.App.Base.Property> Properties
		{
			get
			{
				if (_Properties == null)
				{
					Context.FetchRelation<UniqueConstraint_ensures_unique_on_Property_RelationEntry__Implementation__Memory>(new Guid("29235ba6-5979-4ed8-8e75-6bd0837c7f28"), RelationEndRole.A, this);
					_Properties 
						= new ClientRelationBSideCollectionWrapper<Kistl.App.Base.UniqueConstraint, Kistl.App.Base.Property, UniqueConstraint_ensures_unique_on_Property_RelationEntry__Implementation__Memory>(
							this, 
							new RelationshipFilterASideCollection<UniqueConstraint_ensures_unique_on_Property_RelationEntry__Implementation__Memory>(this.Context, this));
				}
				return _Properties;
			}
		}

		private ClientRelationBSideCollectionWrapper<Kistl.App.Base.UniqueConstraint, Kistl.App.Base.Property, UniqueConstraint_ensures_unique_on_Property_RelationEntry__Implementation__Memory> _Properties;

        /// <summary>
        /// 
        /// </summary>
		[EventBasedMethod("OnGetErrorText_UniqueConstraint")]
		public override string GetErrorText(Kistl.API.IDataObject constrainedObject) 
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetErrorText_UniqueConstraint != null)
            {
                OnGetErrorText_UniqueConstraint(this, e, constrainedObject);
            }
            else
            {
                e.Result = base.GetErrorText(constrainedObject);
            }
            return e.Result;
        }
		public static event GetErrorText_Handler<UniqueConstraint> OnGetErrorText_UniqueConstraint;



        /// <summary>
        /// 
        /// </summary>
		[EventBasedMethod("OnIsValid_UniqueConstraint")]
		public override bool IsValid(Kistl.API.IDataObject constrainedObject) 
        {
            var e = new MethodReturnEventArgs<bool>();
            if (OnIsValid_UniqueConstraint != null)
            {
                OnIsValid_UniqueConstraint(this, e, constrainedObject);
            }
            else
            {
                e.Result = base.IsValid(constrainedObject);
            }
            return e.Result;
        }
		public static event IsValid_Handler<UniqueConstraint> OnIsValid_UniqueConstraint;



        public override Type GetImplementedInterface()
        {
            return typeof(UniqueConstraint);
        }

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (UniqueConstraint)obj;
			var otherImpl = (UniqueConstraint__Implementation__Memory)obj;
			var me = (UniqueConstraint)this;

		}

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
		}

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			base.ReloadReferences();
			
			// fix direct object references
		}
        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_UniqueConstraint")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_UniqueConstraint != null)
            {
                OnToString_UniqueConstraint(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<UniqueConstraint> OnToString_UniqueConstraint;

        [EventBasedMethod("OnPreSave_UniqueConstraint")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_UniqueConstraint != null) OnPreSave_UniqueConstraint(this);
        }
        public static event ObjectEventHandler<UniqueConstraint> OnPreSave_UniqueConstraint;

        [EventBasedMethod("OnPostSave_UniqueConstraint")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_UniqueConstraint != null) OnPostSave_UniqueConstraint(this);
        }
        public static event ObjectEventHandler<UniqueConstraint> OnPostSave_UniqueConstraint;

        [EventBasedMethod("OnCreated_UniqueConstraint")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_UniqueConstraint != null) OnCreated_UniqueConstraint(this);
        }
        public static event ObjectEventHandler<UniqueConstraint> OnCreated_UniqueConstraint;

        [EventBasedMethod("OnDeleting_UniqueConstraint")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_UniqueConstraint != null) OnDeleting_UniqueConstraint(this);
        }
        public static event ObjectEventHandler<UniqueConstraint> OnDeleting_UniqueConstraint;


		private static readonly object _propertiesLock = new object();
		private static System.ComponentModel.PropertyDescriptor[] _properties;
		
		private void _InitializePropertyDescriptors(Func<IReadOnlyKistlContext> lazyCtx)
		{
			if (_properties != null) return;
			lock (_propertiesLock)
			{
				// recheck for a lost race after aquiring the lock
				if (_properties != null) return;
				
				_properties = new System.ComponentModel.PropertyDescriptor[] {
					// property.IsAssociation() && !property.IsObjectReferencePropertySingle()
					new CustomPropertyDescriptor<UniqueConstraint__Implementation__Memory, ICollection<Kistl.App.Base.Property>>(
						lazyCtx,
						new Guid("3e4bfd37-1037-472b-a5d7-2c20a777e6fd"),
						"Properties",
						null,
						obj => obj.Properties,
						null), // lists are read-only properties
				};
			}
		}
		
		protected override void CollectProperties(Func<IReadOnlyKistlContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
		{
			base.CollectProperties(props);
			_InitializePropertyDescriptors(lazyCtx);
			props.AddRange(_properties);
		}
	


#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            base.Export(xml, modules);
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            
            base.MergeImport(xml);
        }

#endregion

    }


}