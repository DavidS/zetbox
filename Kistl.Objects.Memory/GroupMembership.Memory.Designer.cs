// <autogenerated/>


namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.DalProvider.Memory;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("GroupMembership")]
    public class GroupMembership__Implementation__Memory : Kistl.App.Base.AccessControl__Implementation__Memory, GroupMembership
    {
        [Obsolete]
        public GroupMembership__Implementation__Memory()
            : base(null)
        {
            {
            }
        }

        public GroupMembership__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
            : base(lazyCtx)
        {
            {
            }
        }


        /// <summary>
        /// 
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for Group
		// rel(A): GroupMembership has Group
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Group Group
        {
            get
            {
				Kistl.App.Base.Group __value;
                if (_fk_Group.HasValue)
                    __value = Context.Find<Kistl.App.Base.Group>(_fk_Group.Value);
                else
                    __value = null;

				if(OnGroup_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Base.Group>(__value);
					OnGroup_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_Group == null)
					return;
                else if (value != null && value.ID == _fk_Group)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = Group;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("Group", __oldValue, __newValue);
				
                if(OnGroup_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Group>(__oldValue, __newValue);
					OnGroup_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_Group = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("Group", __oldValue, __newValue);

                if(OnGroup_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Group>(__oldValue, __newValue);
					OnGroup_PostSetter(this, e);
                }
                
            }
        }
        
        private int? _fk_Group;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for Group
		public static event PropertyGetterHandler<Kistl.App.Base.GroupMembership, Kistl.App.Base.Group> OnGroup_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.GroupMembership, Kistl.App.Base.Group> OnGroup_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.GroupMembership, Kistl.App.Base.Group> OnGroup_PostSetter;

        public override Type GetImplementedInterface()
        {
            return typeof(GroupMembership);
        }

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (GroupMembership)obj;
			var otherImpl = (GroupMembership__Implementation__Memory)obj;
			var me = (GroupMembership)this;

			this._fk_Group = otherImpl._fk_Group;
		}

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_GroupMembership")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_GroupMembership != null)
            {
                OnToString_GroupMembership(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<GroupMembership> OnToString_GroupMembership;

        [EventBasedMethod("OnPreSave_GroupMembership")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_GroupMembership != null) OnPreSave_GroupMembership(this);
        }
        public static event ObjectEventHandler<GroupMembership> OnPreSave_GroupMembership;

        [EventBasedMethod("OnPostSave_GroupMembership")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_GroupMembership != null) OnPostSave_GroupMembership(this);
        }
        public static event ObjectEventHandler<GroupMembership> OnPostSave_GroupMembership;

        [EventBasedMethod("OnCreated_GroupMembership")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_GroupMembership != null) OnCreated_GroupMembership(this);
        }
        public static event ObjectEventHandler<GroupMembership> OnCreated_GroupMembership;

        [EventBasedMethod("OnDeleting_GroupMembership")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_GroupMembership != null) OnDeleting_GroupMembership(this);
        }
        public static event ObjectEventHandler<GroupMembership> OnDeleting_GroupMembership;


		private static readonly object _propertiesLock = new object();
		private static System.ComponentModel.PropertyDescriptor[] _properties;
		
		private void _InitializePropertyDescriptors(Func<IReadOnlyKistlContext> lazyCtx)
		{
			if (_properties != null) return;
			lock (_propertiesLock)
			{
				// recheck for a lost race after aquiring the lock
				if (_properties != null) return;
				
				_properties = new System.ComponentModel.PropertyDescriptor[] {
					// else
					new CustomPropertyDescriptor<GroupMembership__Implementation__Memory, Kistl.App.Base.Group>(
						lazyCtx,
						new Guid("da080b07-15d2-4cdf-bc1c-df776e094a75"),
						"Group",
						null,
						obj => obj.Group,
						(obj, val) => obj.Group = val),
					// rel: GroupMembership has Group (bb6d8d28-041f-4e53-8916-9f69b480d6ba)
				};
			}
		}
		
		protected override void CollectProperties(Func<IReadOnlyKistlContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
		{
			base.CollectProperties(props);
			_InitializePropertyDescriptors(lazyCtx);
			props.AddRange(_properties);
		}
	

		public override void UpdateParent(string propertyName, int? id)
		{
			int? __oldValue, __newValue = id;
			
			switch(propertyName)
			{
                case "Group":
                    __oldValue = _fk_Group;
                    NotifyPropertyChanging("Group", __oldValue, __newValue);
                    _fk_Group = __newValue;
                    NotifyPropertyChanged("Group", __oldValue, __newValue);
                    break;
				default:
					base.UpdateParent(propertyName, id);
					break;
			}
		}

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._fk_Group, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_Group, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_Group, xml, "Group", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_Group, xml, "Group", "http://dasz.at/Kistl");
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            base.Export(xml, modules);
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            
            base.MergeImport(xml);
        }

#endregion

    }


}