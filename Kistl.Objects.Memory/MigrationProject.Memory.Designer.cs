// <autogenerated/>


namespace ZBox.App.SchemaMigration
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.DalProvider.Memory;

    /// <summary>
    /// Defines a Schema Migration Project
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("MigrationProject")]
    public class MigrationProject__Implementation__Memory : BaseMemoryDataObject, MigrationProject
    {
        [Obsolete]
        public MigrationProject__Implementation__Memory()
            : base(null)
        {
            {
            }
        }

        public MigrationProject__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
            : base(lazyCtx)
        {
            {
            }
        }


        /// <summary>
        /// 
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if(OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Description;
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.MigrationProject, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.MigrationProject, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.MigrationProject, string> OnDescription_PostSetter;

        /// <summary>
        /// Connectionstring for source database. Providerspecific
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string SrcConnectionString
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _SrcConnectionString;
                if (OnSrcConnectionString_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnSrcConnectionString_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_SrcConnectionString != value)
                {
                    var __oldValue = _SrcConnectionString;
                    var __newValue = value;
                    if(OnSrcConnectionString_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnSrcConnectionString_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("SrcConnectionString", __oldValue, __newValue);
                    _SrcConnectionString = __newValue;
                    NotifyPropertyChanged("SrcConnectionString", __oldValue, __newValue);
                    if(OnSrcConnectionString_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnSrcConnectionString_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _SrcConnectionString;
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.MigrationProject, string> OnSrcConnectionString_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.MigrationProject, string> OnSrcConnectionString_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.MigrationProject, string> OnSrcConnectionString_PostSetter;

        /// <summary>
        /// Provider for source database. Can be one of: MSSQL, POSTGRES, OLEDB
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string SrcProvider
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _SrcProvider;
                if (OnSrcProvider_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnSrcProvider_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_SrcProvider != value)
                {
                    var __oldValue = _SrcProvider;
                    var __newValue = value;
                    if(OnSrcProvider_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnSrcProvider_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("SrcProvider", __oldValue, __newValue);
                    _SrcProvider = __newValue;
                    NotifyPropertyChanged("SrcProvider", __oldValue, __newValue);
                    if(OnSrcProvider_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnSrcProvider_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _SrcProvider;
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.MigrationProject, string> OnSrcProvider_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.MigrationProject, string> OnSrcProvider_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.MigrationProject, string> OnSrcProvider_PostSetter;

        /// <summary>
        /// 
        /// </summary>
		[EventBasedMethod("OnUpdateFromSourceSchema_MigrationProject")]
		public virtual void UpdateFromSourceSchema() 
		{
            // base.UpdateFromSourceSchema();
            if (OnUpdateFromSourceSchema_MigrationProject != null)
            {
				OnUpdateFromSourceSchema_MigrationProject(this);
			}
			else
			{
                throw new NotImplementedException("No handler registered on MigrationProject.UpdateFromSourceSchema");
			}
        }
		public delegate void UpdateFromSourceSchema_Handler<T>(T obj);
		public static event UpdateFromSourceSchema_Handler<MigrationProject> OnUpdateFromSourceSchema_MigrationProject;



        public override Type GetImplementedInterface()
        {
            return typeof(MigrationProject);
        }

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (MigrationProject)obj;
			var otherImpl = (MigrationProject__Implementation__Memory)obj;
			var me = (MigrationProject)this;

			me.Description = other.Description;
			me.SrcConnectionString = other.SrcConnectionString;
			me.SrcProvider = other.SrcProvider;
		}

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
		}

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			// fix direct object references
		}
        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_MigrationProject")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_MigrationProject != null)
            {
                OnToString_MigrationProject(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<MigrationProject> OnToString_MigrationProject;

        [EventBasedMethod("OnPreSave_MigrationProject")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_MigrationProject != null) OnPreSave_MigrationProject(this);
        }
        public static event ObjectEventHandler<MigrationProject> OnPreSave_MigrationProject;

        [EventBasedMethod("OnPostSave_MigrationProject")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_MigrationProject != null) OnPostSave_MigrationProject(this);
        }
        public static event ObjectEventHandler<MigrationProject> OnPostSave_MigrationProject;

        [EventBasedMethod("OnCreated_MigrationProject")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_MigrationProject != null) OnCreated_MigrationProject(this);
        }
        public static event ObjectEventHandler<MigrationProject> OnCreated_MigrationProject;

        [EventBasedMethod("OnDeleting_MigrationProject")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_MigrationProject != null) OnDeleting_MigrationProject(this);
        }
        public static event ObjectEventHandler<MigrationProject> OnDeleting_MigrationProject;


		private static readonly object _propertiesLock = new object();
		private static System.ComponentModel.PropertyDescriptor[] _properties;
		
		private void _InitializePropertyDescriptors(Func<IReadOnlyKistlContext> lazyCtx)
		{
			if (_properties != null) return;
			lock (_propertiesLock)
			{
				// recheck for a lost race after aquiring the lock
				if (_properties != null) return;
				
				_properties = new System.ComponentModel.PropertyDescriptor[] {
					// else
					new CustomPropertyDescriptor<MigrationProject__Implementation__Memory, string>(
						lazyCtx,
						new Guid("17634aec-04e4-40f8-a585-51989e5cd95f"),
						"Description",
						null,
						obj => obj.Description,
						(obj, val) => obj.Description = val),
					// else
					new CustomPropertyDescriptor<MigrationProject__Implementation__Memory, string>(
						lazyCtx,
						new Guid("bfa19150-0c51-48c0-b21d-f4eae2a2e801"),
						"SrcConnectionString",
						null,
						obj => obj.SrcConnectionString,
						(obj, val) => obj.SrcConnectionString = val),
					// else
					new CustomPropertyDescriptor<MigrationProject__Implementation__Memory, string>(
						lazyCtx,
						new Guid("36f338be-b21e-46ec-9a24-b96b78bdfeef"),
						"SrcProvider",
						null,
						obj => obj.SrcProvider,
						(obj, val) => obj.SrcProvider = val),
				};
			}
		}
		
		protected override void CollectProperties(Func<IReadOnlyKistlContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
		{
			base.CollectProperties(props);
			_InitializePropertyDescriptors(lazyCtx);
			props.AddRange(_properties);
		}
	


#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._Description, binStream);
            BinarySerializer.ToStream(this._SrcConnectionString, binStream);
            BinarySerializer.ToStream(this._SrcProvider, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._Description, binStream);
            BinarySerializer.FromStream(out this._SrcConnectionString, binStream);
            BinarySerializer.FromStream(out this._SrcProvider, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._SrcConnectionString, xml, "SrcConnectionString", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._SrcProvider, xml, "SrcProvider", "ZBox.App.SchemaMigration");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._SrcConnectionString, xml, "SrcConnectionString", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._SrcProvider, xml, "SrcProvider", "ZBox.App.SchemaMigration");
        }

#endregion

    }


}