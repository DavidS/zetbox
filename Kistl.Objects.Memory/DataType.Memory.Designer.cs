// <autogenerated/>


namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.DalProvider.Memory;

    /// <summary>
    /// Base Metadefinition Object for Objectclasses, Interfaces, CompoundObjects and Enumerations.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("DataType")]
    public abstract class DataType__Implementation__Memory : BaseMemoryDataObject, DataType, Kistl.API.IExportableInternal
    {
        [Obsolete]
        public DataType__Implementation__Memory()
            : base(null)
        {
            {
            }
        }

        public DataType__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
            : base(lazyCtx)
        {
            {
            }
        }


        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for ChangedBy
		// rel(A): DataType was ChangedBy
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity ChangedBy
        {
            get
            {
				Kistl.App.Base.Identity __value;
                if (_fk_ChangedBy.HasValue)
                    __value = Context.Find<Kistl.App.Base.Identity>(_fk_ChangedBy.Value);
                else
                    __value = null;

				if(OnChangedBy_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
					OnChangedBy_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_ChangedBy == null)
					return;
                else if (value != null && value.ID == _fk_ChangedBy)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = ChangedBy;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
				
                if(OnChangedBy_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
					OnChangedBy_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_ChangedBy = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);

                if(OnChangedBy_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
					OnChangedBy_PostSetter(this, e);
                }
                
            }
        }
        
        private int? _fk_ChangedBy;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Identity> OnChangedBy_PostSetter;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual DateTime? ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if(OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime? _ChangedOn;
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, DateTime?> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, DateTime?> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, DateTime?> OnChangedOn_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // object list property
        // ApplyObjectListPropertyTemplate
		// Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Base.InstanceConstraint> Constraints
        {
            get
            {
                if (_ConstraintsWrapper == null)
                {
                    List<Kistl.App.Base.InstanceConstraint> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
						if(ConstraintsIds != null)
						{
							serverList = ConstraintsIds.Select(id => Context.Find<Kistl.App.Base.InstanceConstraint>(id)).ToList();
							ConstraintsIds = null; // allow id list to be garbage collected
						}
						else
						{
							serverList = Context.GetListOf<Kistl.App.Base.InstanceConstraint>(this, "Constraints");
						}
					}
                    else
                    {
                        serverList = new List<Kistl.App.Base.InstanceConstraint>();
                    }
                        
                    _ConstraintsWrapper = new OneNRelationList<Kistl.App.Base.InstanceConstraint>(
                        "Constrained",
                        null,
                        this,
                        () => this.NotifyPropertyChanged("Constraints", null, null),
                        serverList);
                }
                return _ConstraintsWrapper;
            }
        }
        
        private OneNRelationList<Kistl.App.Base.InstanceConstraint> _ConstraintsWrapper;

		private List<int> ConstraintsIds;
		private bool Constraints_was_eagerLoaded = false;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for CreatedBy
		// rel(A): DataType was CreatedBy
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity CreatedBy
        {
            get
            {
				Kistl.App.Base.Identity __value;
                if (_fk_CreatedBy.HasValue)
                    __value = Context.Find<Kistl.App.Base.Identity>(_fk_CreatedBy.Value);
                else
                    __value = null;

				if(OnCreatedBy_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
					OnCreatedBy_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_CreatedBy == null)
					return;
                else if (value != null && value.ID == _fk_CreatedBy)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = CreatedBy;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
				
                if(OnCreatedBy_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
					OnCreatedBy_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_CreatedBy = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);

                if(OnCreatedBy_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
					OnCreatedBy_PostSetter(this, e);
                }
                
            }
        }
        
        private int? _fk_CreatedBy;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Identity> OnCreatedBy_PostSetter;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual DateTime? CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if(OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime? _CreatedOn;
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, DateTime?> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, DateTime?> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, DateTime?> OnCreatedOn_PostSetter;

        /// <summary>
        /// Standard Icon wenn IIcon nicht implementiert ist
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for DefaultIcon
		// rel(A): DataType has DefaultIcon
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Icon DefaultIcon
        {
            get
            {
				Kistl.App.GUI.Icon __value;
                if (_fk_DefaultIcon.HasValue)
                    __value = Context.Find<Kistl.App.GUI.Icon>(_fk_DefaultIcon.Value);
                else
                    __value = null;

				if(OnDefaultIcon_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.GUI.Icon>(__value);
					OnDefaultIcon_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_DefaultIcon == null)
					return;
                else if (value != null && value.ID == _fk_DefaultIcon)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = DefaultIcon;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("DefaultIcon", __oldValue, __newValue);
				
                if(OnDefaultIcon_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.Icon>(__oldValue, __newValue);
					OnDefaultIcon_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_DefaultIcon = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("DefaultIcon", __oldValue, __newValue);

                if(OnDefaultIcon_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.Icon>(__oldValue, __newValue);
					OnDefaultIcon_PostSetter(this, e);
                }
                
            }
        }
        
        private int? _fk_DefaultIcon;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for DefaultIcon
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, Kistl.App.GUI.Icon> OnDefaultIcon_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, Kistl.App.GUI.Icon> OnDefaultIcon_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, Kistl.App.GUI.Icon> OnDefaultIcon_PostSetter;

        /// <summary>
        /// Description of this DataType
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if(OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Description;
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, string> OnDescription_PostSetter;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        private bool _isExportGuidSet = false;
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet) {
                    var __p = FrozenContext.Single.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("1fdb011e-2098-4077-b5e9-dd2eeafa727c"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        __result = this._ExportGuid = (Guid)__p.DefaultValue.GetDefaultValue();
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'DataType.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if(OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
            }
        }
        private Guid _ExportGuid;
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, Guid> OnExportGuid_PostSetter;

        /// <summary>
        /// all implemented Methods in this DataType
        /// </summary>
        // object list property
        // ApplyObjectListPropertyTemplate
		// Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Base.MethodInvocation> MethodInvocations
        {
            get
            {
                if (_MethodInvocationsWrapper == null)
                {
                    List<Kistl.App.Base.MethodInvocation> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
						if(MethodInvocationsIds != null)
						{
							serverList = MethodInvocationsIds.Select(id => Context.Find<Kistl.App.Base.MethodInvocation>(id)).ToList();
							MethodInvocationsIds = null; // allow id list to be garbage collected
						}
						else
						{
							serverList = Context.GetListOf<Kistl.App.Base.MethodInvocation>(this, "MethodInvocations");
						}
					}
                    else
                    {
                        serverList = new List<Kistl.App.Base.MethodInvocation>();
                    }
                        
                    _MethodInvocationsWrapper = new OneNRelationList<Kistl.App.Base.MethodInvocation>(
                        "InvokeOnObjectClass",
                        null,
                        this,
                        () => this.NotifyPropertyChanged("MethodInvocations", null, null),
                        serverList);
                }
                return _MethodInvocationsWrapper;
            }
        }
        
        private OneNRelationList<Kistl.App.Base.MethodInvocation> _MethodInvocationsWrapper;

		private List<int> MethodInvocationsIds;
		private bool MethodInvocations_was_eagerLoaded = false;

        /// <summary>
        /// Liste aller Methoden der Objektklasse.
        /// </summary>
        // object list property
        // ApplyObjectListPropertyTemplate
		// Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Base.Method> Methods
        {
            get
            {
                if (_MethodsWrapper == null)
                {
                    List<Kistl.App.Base.Method> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
						if(MethodsIds != null)
						{
							serverList = MethodsIds.Select(id => Context.Find<Kistl.App.Base.Method>(id)).ToList();
							MethodsIds = null; // allow id list to be garbage collected
						}
						else
						{
							serverList = Context.GetListOf<Kistl.App.Base.Method>(this, "Methods");
						}
					}
                    else
                    {
                        serverList = new List<Kistl.App.Base.Method>();
                    }
                        
                    _MethodsWrapper = new OneNRelationList<Kistl.App.Base.Method>(
                        "ObjectClass",
                        null,
                        this,
                        () => this.NotifyPropertyChanged("Methods", null, null),
                        serverList);
                }
                return _MethodsWrapper;
            }
        }
        
        private OneNRelationList<Kistl.App.Base.Method> _MethodsWrapper;

		private List<int> MethodsIds;
		private bool Methods_was_eagerLoaded = false;

        /// <summary>
        /// Modul der Objektklasse
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for Module
		// rel(B): Module contains DataTypes
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Module Module
        {
            get
            {
				Kistl.App.Base.Module __value;
                if (_fk_Module.HasValue)
                    __value = Context.Find<Kistl.App.Base.Module>(_fk_Module.Value);
                else
                    __value = null;

				if(OnModule_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Base.Module>(__value);
					OnModule_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_Module == null)
					return;
                else if (value != null && value.ID == _fk_Module)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = Module;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("Module", __oldValue, __newValue);
				
                if(OnModule_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
					OnModule_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_Module = __newValue == null ? (int?)null : __newValue.ID;
				
				// now fixup redundant, inverse references
				// The inverse navigator will also fire events when changed, so should 
				// only be touched after setting the local value above. 
				// TODO: for complete correctness, the "other" Changing event should also fire 
				//       before the local value is changed
				if (__oldValue != null)
				{
					// remove from old list
					(__oldValue.DataTypes as OneNRelationList<Kistl.App.Base.DataType>).RemoveWithoutClearParent(this);
				}

                if (__newValue != null)
                {
					// add to new list
					(__newValue.DataTypes as OneNRelationList<Kistl.App.Base.DataType>).AddWithoutSetParent(this);
                }
				// everything is done. fire the Changed event
				NotifyPropertyChanged("Module", __oldValue, __newValue);

                if(OnModule_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
					OnModule_PostSetter(this, e);
                }
                
            }
        }
        
        private int? _fk_Module;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Module> OnModule_PostSetter;

        /// <summary>
        /// Der Name der Objektklasse
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if(OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Name;
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, string> OnName_PostSetter;

        /// <summary>
        /// Eigenschaften der Objektklasse
        /// </summary>
        // object list property
        // ApplyObjectListPropertyTemplate
		// Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public IList<Kistl.App.Base.Property> Properties
        {
            get
            {
                if (_PropertiesWrapper == null)
                {
                    List<Kistl.App.Base.Property> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
						if(PropertiesIds != null)
						{
							serverList = PropertiesIds.Select(id => Context.Find<Kistl.App.Base.Property>(id)).ToList();
							PropertiesIds = null; // allow id list to be garbage collected
						}
						else
						{
							serverList = Context.GetListOf<Kistl.App.Base.Property>(this, "Properties");
						}
					}
                    else
                    {
                        serverList = new List<Kistl.App.Base.Property>();
                    }
                        
                    _PropertiesWrapper = new OneNRelationList<Kistl.App.Base.Property>(
                        "ObjectClass",
                        "Properties_pos",
                        this,
                        () => this.NotifyPropertyChanged("Properties", null, null),
                        serverList);
                }
                return _PropertiesWrapper;
            }
        }
        
        private OneNRelationList<Kistl.App.Base.Property> _PropertiesWrapper;

		private List<int> PropertiesIds;
		private bool Properties_was_eagerLoaded = false;

        /// <summary>
        /// 
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual bool ShowIconInLists
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ShowIconInLists;
                if (OnShowIconInLists_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnShowIconInLists_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ShowIconInLists != value)
                {
                    var __oldValue = _ShowIconInLists;
                    var __newValue = value;
                    if(OnShowIconInLists_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowIconInLists_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowIconInLists", __oldValue, __newValue);
                    _ShowIconInLists = __newValue;
                    NotifyPropertyChanged("ShowIconInLists", __oldValue, __newValue);
                    if(OnShowIconInLists_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowIconInLists_PostSetter(this, __e);
                    }
                }
            }
        }
        private bool _ShowIconInLists;
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, bool> OnShowIconInLists_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, bool> OnShowIconInLists_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, bool> OnShowIconInLists_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual bool ShowIdInLists
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ShowIdInLists;
                if (OnShowIdInLists_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnShowIdInLists_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ShowIdInLists != value)
                {
                    var __oldValue = _ShowIdInLists;
                    var __newValue = value;
                    if(OnShowIdInLists_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowIdInLists_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowIdInLists", __oldValue, __newValue);
                    _ShowIdInLists = __newValue;
                    NotifyPropertyChanged("ShowIdInLists", __oldValue, __newValue);
                    if(OnShowIdInLists_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowIdInLists_PostSetter(this, __e);
                    }
                }
            }
        }
        private bool _ShowIdInLists;
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, bool> OnShowIdInLists_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, bool> OnShowIdInLists_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, bool> OnShowIdInLists_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual bool ShowNameInLists
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ShowNameInLists;
                if (OnShowNameInLists_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnShowNameInLists_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ShowNameInLists != value)
                {
                    var __oldValue = _ShowNameInLists;
                    var __newValue = value;
                    if(OnShowNameInLists_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowNameInLists_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowNameInLists", __oldValue, __newValue);
                    _ShowNameInLists = __newValue;
                    NotifyPropertyChanged("ShowNameInLists", __oldValue, __newValue);
                    if(OnShowNameInLists_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowNameInLists_PostSetter(this, __e);
                    }
                }
            }
        }
        private bool _ShowNameInLists;
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, bool> OnShowNameInLists_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, bool> OnShowNameInLists_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, bool> OnShowNameInLists_PostSetter;

        /// <summary>
        /// Returns the resulting Type of this Datatype Meta Object.
        /// </summary>
		[EventBasedMethod("OnGetDataType_DataType")]
		public virtual System.Type GetDataType() 
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetDataType_DataType != null)
            {
                OnGetDataType_DataType(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on DataType.GetDataType");
            }
            return e.Result;
        }
		public delegate void GetDataType_Handler<T>(T obj, MethodReturnEventArgs<System.Type> ret);
		public static event GetDataType_Handler<DataType> OnGetDataType_DataType;



        /// <summary>
        /// Returns the String representation of this Datatype Meta Object.
        /// </summary>
		[EventBasedMethod("OnGetDataTypeString_DataType")]
		public virtual string GetDataTypeString() 
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetDataTypeString_DataType != null)
            {
                OnGetDataTypeString_DataType(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on DataType.GetDataTypeString");
            }
            return e.Result;
        }
		public delegate void GetDataTypeString_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
		public static event GetDataTypeString_Handler<DataType> OnGetDataTypeString_DataType;



        public override Type GetImplementedInterface()
        {
            return typeof(DataType);
        }

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (DataType)obj;
			var otherImpl = (DataType__Implementation__Memory)obj;
			var me = (DataType)this;

			me.ChangedOn = other.ChangedOn;
			me.CreatedOn = other.CreatedOn;
			me.Description = other.Description;
			me.ExportGuid = other.ExportGuid;
			me.Name = other.Name;
			me.ShowIconInLists = other.ShowIconInLists;
			me.ShowIdInLists = other.ShowIdInLists;
			me.ShowNameInLists = other.ShowNameInLists;
			this._fk_ChangedBy = otherImpl._fk_ChangedBy;
			this._fk_CreatedBy = otherImpl._fk_CreatedBy;
			this._fk_DefaultIcon = otherImpl._fk_DefaultIcon;
			this._fk_Module = otherImpl._fk_Module;
		}

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_DataType")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_DataType != null)
            {
                OnToString_DataType(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<DataType> OnToString_DataType;

        [EventBasedMethod("OnPreSave_DataType")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_DataType != null) OnPreSave_DataType(this);
        }
        public static event ObjectEventHandler<DataType> OnPreSave_DataType;

        [EventBasedMethod("OnPostSave_DataType")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_DataType != null) OnPostSave_DataType(this);
        }
        public static event ObjectEventHandler<DataType> OnPostSave_DataType;

        [EventBasedMethod("OnCreated_DataType")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_DataType != null) OnCreated_DataType(this);
        }
        public static event ObjectEventHandler<DataType> OnCreated_DataType;

        [EventBasedMethod("OnDeleting_DataType")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_DataType != null) OnDeleting_DataType(this);
        }
        public static event ObjectEventHandler<DataType> OnDeleting_DataType;


		private static readonly object _propertiesLock = new object();
		private static System.ComponentModel.PropertyDescriptor[] _properties;
		
		private void _InitializePropertyDescriptors(Func<IReadOnlyKistlContext> lazyCtx)
		{
			if (_properties != null) return;
			lock (_propertiesLock)
			{
				// recheck for a lost race after aquiring the lock
				if (_properties != null) return;
				
				_properties = new System.ComponentModel.PropertyDescriptor[] {
					// else
					new CustomPropertyDescriptor<DataType__Implementation__Memory, Kistl.App.Base.Identity>(
						lazyCtx,
						new Guid("c007156e-5bb3-4c4e-8cb3-5823892a893b"),
						"ChangedBy",
						null,
						obj => obj.ChangedBy,
						(obj, val) => obj.ChangedBy = val),
					// else
					new CustomPropertyDescriptor<DataType__Implementation__Memory, DateTime?>(
						lazyCtx,
						new Guid("1bd4a5bc-ef42-4bc0-bf5e-162dea22d91e"),
						"ChangedOn",
						null,
						obj => obj.ChangedOn,
						(obj, val) => obj.ChangedOn = val),
					// property.IsAssociation() && !property.IsObjectReferencePropertySingle()
					new CustomPropertyDescriptor<DataType__Implementation__Memory, ICollection<Kistl.App.Base.InstanceConstraint>>(
						lazyCtx,
						new Guid("eda15826-7251-4726-9f6b-65e7f24f6ad1"),
						"Constraints",
						null,
						obj => obj.Constraints,
						null), // lists are read-only properties
					// else
					new CustomPropertyDescriptor<DataType__Implementation__Memory, Kistl.App.Base.Identity>(
						lazyCtx,
						new Guid("5c2ec701-9e7e-4340-a463-4fc2b8204f5d"),
						"CreatedBy",
						null,
						obj => obj.CreatedBy,
						(obj, val) => obj.CreatedBy = val),
					// else
					new CustomPropertyDescriptor<DataType__Implementation__Memory, DateTime?>(
						lazyCtx,
						new Guid("6ab4d1f6-1989-489b-a733-1c449fad773d"),
						"CreatedOn",
						null,
						obj => obj.CreatedOn,
						(obj, val) => obj.CreatedOn = val),
					// else
					new CustomPropertyDescriptor<DataType__Implementation__Memory, Kistl.App.GUI.Icon>(
						lazyCtx,
						new Guid("b1402cda-de87-4b2a-bd65-a950b8dd7a9f"),
						"DefaultIcon",
						null,
						obj => obj.DefaultIcon,
						(obj, val) => obj.DefaultIcon = val),
					// else
					new CustomPropertyDescriptor<DataType__Implementation__Memory, string>(
						lazyCtx,
						new Guid("2cffd4f2-cb84-4f39-9bd1-19fd2e160bad"),
						"Description",
						null,
						obj => obj.Description,
						(obj, val) => obj.Description = val),
					// else
					new CustomPropertyDescriptor<DataType__Implementation__Memory, Guid>(
						lazyCtx,
						new Guid("1fdb011e-2098-4077-b5e9-dd2eeafa727c"),
						"ExportGuid",
						null,
						obj => obj.ExportGuid,
						(obj, val) => obj.ExportGuid = val),
					// property.IsAssociation() && !property.IsObjectReferencePropertySingle()
					new CustomPropertyDescriptor<DataType__Implementation__Memory, ICollection<Kistl.App.Base.MethodInvocation>>(
						lazyCtx,
						new Guid("0f8a3e8b-29f6-49eb-99ba-f55ca1e161e9"),
						"MethodInvocations",
						null,
						obj => obj.MethodInvocations,
						null), // lists are read-only properties
					// property.IsAssociation() && !property.IsObjectReferencePropertySingle()
					new CustomPropertyDescriptor<DataType__Implementation__Memory, ICollection<Kistl.App.Base.Method>>(
						lazyCtx,
						new Guid("e9f8a1f1-a5ed-44a6-bbf3-9b040766f19f"),
						"Methods",
						null,
						obj => obj.Methods,
						null), // lists are read-only properties
					// else
					new CustomPropertyDescriptor<DataType__Implementation__Memory, Kistl.App.Base.Module>(
						lazyCtx,
						new Guid("4e1fb30b-e528-4968-95b0-f3a38eafe643"),
						"Module",
						null,
						obj => obj.Module,
						(obj, val) => obj.Module = val),
					// else
					new CustomPropertyDescriptor<DataType__Implementation__Memory, string>(
						lazyCtx,
						new Guid("083bbf12-aac6-4f5f-802a-d3701550bc84"),
						"Name",
						null,
						obj => obj.Name,
						(obj, val) => obj.Name = val),
					// property.IsAssociation() && !property.IsObjectReferencePropertySingle()
					new CustomPropertyDescriptor<DataType__Implementation__Memory, IList<Kistl.App.Base.Property>>(
						lazyCtx,
						new Guid("e7d91162-0aa8-4fe3-9e29-d0519781ceb7"),
						"Properties",
						null,
						obj => obj.Properties,
						null), // lists are read-only properties
					// else
					new CustomPropertyDescriptor<DataType__Implementation__Memory, bool>(
						lazyCtx,
						new Guid("d5b0ff20-10c1-40ce-b18e-9846dc5d0b60"),
						"ShowIconInLists",
						null,
						obj => obj.ShowIconInLists,
						(obj, val) => obj.ShowIconInLists = val),
					// else
					new CustomPropertyDescriptor<DataType__Implementation__Memory, bool>(
						lazyCtx,
						new Guid("220925a1-ed82-4b08-a3fa-af31bda7f40e"),
						"ShowIdInLists",
						null,
						obj => obj.ShowIdInLists,
						(obj, val) => obj.ShowIdInLists = val),
					// else
					new CustomPropertyDescriptor<DataType__Implementation__Memory, bool>(
						lazyCtx,
						new Guid("60e64ab1-830d-4c20-9d2e-17049738e9c4"),
						"ShowNameInLists",
						null,
						obj => obj.ShowNameInLists,
						(obj, val) => obj.ShowNameInLists = val),
					// rel: DataType has DefaultIcon (eb852cc4-3977-42b9-9fcd-3a8c60aa49ac)
					// rel: ObjectClass has Methods (557ddcb4-8e99-48f2-9107-ef0cbff8066b)
					// rel: MethodOwner has MethodInvocations (dabf87d2-8038-4bc7-978f-f043151c7d25)
					// rel: ObjectClass has Properties (f7e487a4-6922-40bf-a404-24ce6accbb83)
					// rel: DataType was CreatedBy (b7d1b442-4364-4979-b81c-66392fbe69fd)
					// rel: DataType was ChangedBy (cf88221e-3474-4de1-8692-abd65d052e8b)
					// rel: Constraint on Constrained (e2b66b79-ab7a-43c0-a229-16dddf4b8934)
					// rel: Module contains DataTypes (52c4ab07-f341-4eb3-86e2-05f27c8af2f7)
					// rel: ObjectParameter has DataType (a6a30705-15ad-4a3a-b624-23305fe2807a)
				};
			}
		}
		
		protected override void CollectProperties(Func<IReadOnlyKistlContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
		{
			base.CollectProperties(props);
			_InitializePropertyDescriptors(lazyCtx);
			props.AddRange(_properties);
		}
	

		public override void UpdateParent(string propertyName, int? id)
		{
			int? __oldValue, __newValue = id;
			
			switch(propertyName)
			{
                case "ChangedBy":
                    __oldValue = _fk_ChangedBy;
                    NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                    _fk_ChangedBy = __newValue;
                    NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    break;
                case "CreatedBy":
                    __oldValue = _fk_CreatedBy;
                    NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                    _fk_CreatedBy = __newValue;
                    NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    break;
                case "DefaultIcon":
                    __oldValue = _fk_DefaultIcon;
                    NotifyPropertyChanging("DefaultIcon", __oldValue, __newValue);
                    _fk_DefaultIcon = __newValue;
                    NotifyPropertyChanged("DefaultIcon", __oldValue, __newValue);
                    break;
                case "Module":
                    __oldValue = _fk_Module;
                    NotifyPropertyChanging("Module", __oldValue, __newValue);
                    _fk_Module = __newValue;
                    NotifyPropertyChanged("Module", __oldValue, __newValue);
                    break;
				default:
					base.UpdateParent(propertyName, id);
					break;
			}
		}

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._fk_ChangedBy, binStream);
            BinarySerializer.ToStream(this._ChangedOn, binStream);

			BinarySerializer.ToStream(eagerLoadLists, binStream);
			if(eagerLoadLists)
			{
				BinarySerializer.ToStream(true, binStream);
				BinarySerializer.ToStream(Constraints.Count, binStream);
				foreach(var obj in Constraints)
				{
					if (auxObjects != null) {
						auxObjects.Add(obj);
					}
					BinarySerializer.ToStream(obj.ID, binStream);
				}
			}
			else
			{
				BinarySerializer.ToStream(false, binStream);
			}
            BinarySerializer.ToStream(this._fk_CreatedBy, binStream);
            BinarySerializer.ToStream(this._CreatedOn, binStream);
            BinarySerializer.ToStream(this._fk_DefaultIcon, binStream);
            BinarySerializer.ToStream(this._Description, binStream);
            BinarySerializer.ToStream(this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.ToStream(this._ExportGuid, binStream);
            }

			BinarySerializer.ToStream(eagerLoadLists, binStream);
			if(eagerLoadLists)
			{
				BinarySerializer.ToStream(true, binStream);
				BinarySerializer.ToStream(MethodInvocations.Count, binStream);
				foreach(var obj in MethodInvocations)
				{
					if (auxObjects != null) {
						auxObjects.Add(obj);
					}
					BinarySerializer.ToStream(obj.ID, binStream);
				}
			}
			else
			{
				BinarySerializer.ToStream(false, binStream);
			}

			BinarySerializer.ToStream(eagerLoadLists, binStream);
			if(eagerLoadLists)
			{
				BinarySerializer.ToStream(true, binStream);
				BinarySerializer.ToStream(Methods.Count, binStream);
				foreach(var obj in Methods)
				{
					if (auxObjects != null) {
						auxObjects.Add(obj);
					}
					BinarySerializer.ToStream(obj.ID, binStream);
				}
			}
			else
			{
				BinarySerializer.ToStream(false, binStream);
			}
            BinarySerializer.ToStream(this._fk_Module, binStream);
            BinarySerializer.ToStream(this._Name, binStream);

			BinarySerializer.ToStream(eagerLoadLists, binStream);
			if(eagerLoadLists)
			{
				BinarySerializer.ToStream(true, binStream);
				BinarySerializer.ToStream(Properties.Count, binStream);
				foreach(var obj in Properties)
				{
					if (auxObjects != null) {
						auxObjects.Add(obj);
					}
					BinarySerializer.ToStream(obj.ID, binStream);
				}
			}
			else
			{
				BinarySerializer.ToStream(false, binStream);
			}
            BinarySerializer.ToStream(this._ShowIconInLists, binStream);
            BinarySerializer.ToStream(this._ShowIdInLists, binStream);
            BinarySerializer.ToStream(this._ShowNameInLists, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_ChangedBy, binStream);
            BinarySerializer.FromStream(out this._ChangedOn, binStream);

			BinarySerializer.FromStream(out Constraints_was_eagerLoaded, binStream);
			{
				bool containsList;
				BinarySerializer.FromStream(out containsList, binStream);
				if(containsList)
				{
					int numElements;
					BinarySerializer.FromStream(out numElements, binStream);
					ConstraintsIds = new List<int>(numElements);
					while (numElements-- > 0) 
					{
						int id;
						BinarySerializer.FromStream(out id, binStream);
						ConstraintsIds.Add(id);
					}
				}
			}
            BinarySerializer.FromStream(out this._fk_CreatedBy, binStream);
            BinarySerializer.FromStream(out this._CreatedOn, binStream);
            BinarySerializer.FromStream(out this._fk_DefaultIcon, binStream);
            BinarySerializer.FromStream(out this._Description, binStream);
            BinarySerializer.FromStream(out this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.FromStream(out this._ExportGuid, binStream);
            }

			BinarySerializer.FromStream(out MethodInvocations_was_eagerLoaded, binStream);
			{
				bool containsList;
				BinarySerializer.FromStream(out containsList, binStream);
				if(containsList)
				{
					int numElements;
					BinarySerializer.FromStream(out numElements, binStream);
					MethodInvocationsIds = new List<int>(numElements);
					while (numElements-- > 0) 
					{
						int id;
						BinarySerializer.FromStream(out id, binStream);
						MethodInvocationsIds.Add(id);
					}
				}
			}

			BinarySerializer.FromStream(out Methods_was_eagerLoaded, binStream);
			{
				bool containsList;
				BinarySerializer.FromStream(out containsList, binStream);
				if(containsList)
				{
					int numElements;
					BinarySerializer.FromStream(out numElements, binStream);
					MethodsIds = new List<int>(numElements);
					while (numElements-- > 0) 
					{
						int id;
						BinarySerializer.FromStream(out id, binStream);
						MethodsIds.Add(id);
					}
				}
			}
            BinarySerializer.FromStream(out this._fk_Module, binStream);
            BinarySerializer.FromStream(out this._Name, binStream);

			BinarySerializer.FromStream(out Properties_was_eagerLoaded, binStream);
			{
				bool containsList;
				BinarySerializer.FromStream(out containsList, binStream);
				if(containsList)
				{
					int numElements;
					BinarySerializer.FromStream(out numElements, binStream);
					PropertiesIds = new List<int>(numElements);
					while (numElements-- > 0) 
					{
						int id;
						BinarySerializer.FromStream(out id, binStream);
						PropertiesIds.Add(id);
					}
				}
			}
            BinarySerializer.FromStream(out this._ShowIconInLists, binStream);
            BinarySerializer.FromStream(out this._ShowIdInLists, binStream);
            BinarySerializer.FromStream(out this._ShowNameInLists, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_ChangedBy, xml, "ChangedBy", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            XmlStreamer.ToStream(this._fk_CreatedBy, xml, "CreatedBy", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            XmlStreamer.ToStream(this._fk_DefaultIcon, xml, "DefaultIcon", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._Description, xml, "Description", "Kistl.App.Base");
            XmlStreamer.ToStream(this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.Base");
            if (this._isExportGuidSet) {
                XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(this._fk_Module, xml, "Module", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._Name, xml, "Name", "Kistl.App.Base");
            XmlStreamer.ToStream(this._ShowIconInLists, xml, "ShowIconInLists", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._ShowIdInLists, xml, "ShowIdInLists", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._ShowNameInLists, xml, "ShowNameInLists", "Kistl.App.GUI");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_ChangedBy, xml, "ChangedBy", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_CreatedBy, xml, "CreatedBy", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_DefaultIcon, xml, "DefaultIcon", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.Base");
            if (this._isExportGuidSet) {
                XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "Kistl.App.Base");
            }
            XmlStreamer.FromStream(ref this._fk_Module, xml, "Module", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._Name, xml, "Name", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._ShowIconInLists, xml, "ShowIconInLists", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowIdInLists, xml, "ShowIdInLists", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowNameInLists, xml, "ShowNameInLists", "Kistl.App.GUI");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
    
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
    
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
    
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._Description, xml, "Description", "Kistl.App.Base");
    
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._Name, xml, "Name", "Kistl.App.Base");
    
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._ShowIconInLists, xml, "ShowIconInLists", "Kistl.App.GUI");
    
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._ShowIdInLists, xml, "ShowIdInLists", "Kistl.App.GUI");
    
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._ShowNameInLists, xml, "ShowNameInLists", "Kistl.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "Kistl.App.Base");
            this._isExportGuidSet = true;
            XmlStreamer.FromStream(ref this._Name, xml, "Name", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._ShowIconInLists, xml, "ShowIconInLists", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowIdInLists, xml, "ShowIdInLists", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowNameInLists, xml, "ShowNameInLists", "Kistl.App.GUI");
        }

#endregion

    }


}