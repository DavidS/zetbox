// <autogenerated/>

namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;
    using Kistl.DalProvider.Base.RelationWrappers;

    using Kistl.DalProvider.Base;
    using Kistl.DalProvider.Memory;

    /// <summary>
    /// Base Metadefinition Object for Objectclasses, Interfaces, CompoundObjects and Enumerations.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("DataType")]
    public abstract class DataTypeMemoryImpl : Kistl.DalProvider.Memory.DataObjectMemoryImpl, DataType, Kistl.API.IExportableInternal
    {
        [Obsolete]
        public DataTypeMemoryImpl()
            : base(null)
        {
        }

        public DataTypeMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Kistl.App.Base.IdentityMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_ChangedBy;


        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.Base.IdentityMemoryImpl ChangedByImpl
        {
            get
            {
                Kistl.App.Base.IdentityMemoryImpl __value;
                if (_fk_ChangedBy.HasValue)
                    __value = (Kistl.App.Base.IdentityMemoryImpl)Context.Find<Kistl.App.Base.Identity>(_fk_ChangedBy.Value);
                else
                    __value = null;

                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_ChangedBy == null)
                    return;
                else if (value != null && value.ID == _fk_ChangedBy)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = ChangedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_ChangedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Identity> OnChangedBy_PostSetter;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("1bd4a5bc-ef42-4bc0-bf5e-162dea22d91e"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'DataType.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime _ChangedOn;
        private bool _isChangedOnSet = false;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, DateTime> OnChangedOn_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // object list property
        // Kistl.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Base.InstanceConstraint> Constraints
        {
            get
            {
                if (_Constraints == null)
                {
                    List<Kistl.App.Base.InstanceConstraint> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
                        if (ConstraintsIds != null)
                        {
                            serverList = ConstraintsIds.Select(id => Context.Find<Kistl.App.Base.InstanceConstraint>(id)).ToList();
                            ConstraintsIds = null; // allow id list to be garbage collected
                        }
                        else
                        {
                            serverList = Context.GetListOf<Kistl.App.Base.InstanceConstraint>(this, "Constraints");
                        }
                    }
                    else
                    {
                        serverList = new List<Kistl.App.Base.InstanceConstraint>();
                    }
    
                    _Constraints = new OneNRelationList<Kistl.App.Base.InstanceConstraint>(
                        "Constrained",
                        null,
                        this,
                        () => { this.NotifyPropertyChanged("Constraints", null, null); if(OnConstraints_PostSetter != null && IsAttached) OnConstraints_PostSetter(this); },
                        serverList);
                }
                return _Constraints;
            }
        }
    
        private OneNRelationList<Kistl.App.Base.InstanceConstraint> _Constraints;

        private List<int> ConstraintsIds;
        private bool Constraints_was_eagerLoaded = false;
public static event PropertyListChangedHandler<Kistl.App.Base.DataType> OnConstraints_PostSetter;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Kistl.App.Base.IdentityMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_CreatedBy;


        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.Base.IdentityMemoryImpl CreatedByImpl
        {
            get
            {
                Kistl.App.Base.IdentityMemoryImpl __value;
                if (_fk_CreatedBy.HasValue)
                    __value = (Kistl.App.Base.IdentityMemoryImpl)Context.Find<Kistl.App.Base.Identity>(_fk_CreatedBy.Value);
                else
                    __value = null;

                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_CreatedBy == null)
                    return;
                else if (value != null && value.ID == _fk_CreatedBy)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = CreatedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_CreatedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Identity> OnCreatedBy_PostSetter;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("6ab4d1f6-1989-489b-a733-1c449fad773d"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'DataType.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime _CreatedOn;
        private bool _isCreatedOnSet = false;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, DateTime> OnCreatedOn_PostSetter;

        /// <summary>
        /// Standard Icon wenn IIcon nicht implementiert ist
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultIcon
        // fkBackingName=_fk_DefaultIcon; fkGuidBackingName=_fk_guid_DefaultIcon;
        // referencedInterface=Kistl.App.GUI.Icon; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.GUI.Icon DefaultIcon
        {
            get { return DefaultIconImpl; }
            set { DefaultIconImpl = (Kistl.App.GUI.IconMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_DefaultIcon;

        private Guid? _fk_guid_DefaultIcon = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.GUI.IconMemoryImpl DefaultIconImpl
        {
            get
            {
                Kistl.App.GUI.IconMemoryImpl __value;
                if (_fk_DefaultIcon.HasValue)
                    __value = (Kistl.App.GUI.IconMemoryImpl)Context.Find<Kistl.App.GUI.Icon>(_fk_DefaultIcon.Value);
                else
                    __value = null;

                if (OnDefaultIcon_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.Icon>(__value);
                    OnDefaultIcon_Getter(this, e);
                    __value = (Kistl.App.GUI.IconMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_DefaultIcon == null)
                    return;
                else if (value != null && value.ID == _fk_DefaultIcon)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = DefaultIconImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultIcon", __oldValue, __newValue);

                if (OnDefaultIcon_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.Icon>(__oldValue, __newValue);
                    OnDefaultIcon_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.IconMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_DefaultIcon = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultIcon", __oldValue, __newValue);

                if (OnDefaultIcon_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.Icon>(__oldValue, __newValue);
                    OnDefaultIcon_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultIcon
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, Kistl.App.GUI.Icon> OnDefaultIcon_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, Kistl.App.GUI.Icon> OnDefaultIcon_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, Kistl.App.GUI.Icon> OnDefaultIcon_PostSetter;

        /// <summary>
        /// Description of this DataType
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Description;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, string> OnDescription_PostSetter;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("1fdb011e-2098-4077-b5e9-dd2eeafa727c"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'DataType.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
            }
        }
        private Guid _ExportGuid;
        private bool _isExportGuidSet = false;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, Guid> OnExportGuid_PostSetter;

        /// <summary>
        /// Liste aller Methoden der Objektklasse.
        /// </summary>
        // object list property
        // Kistl.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Base.Method> Methods
        {
            get
            {
                if (_Methods == null)
                {
                    List<Kistl.App.Base.Method> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
                        if (MethodsIds != null)
                        {
                            serverList = MethodsIds.Select(id => Context.Find<Kistl.App.Base.Method>(id)).ToList();
                            MethodsIds = null; // allow id list to be garbage collected
                        }
                        else
                        {
                            serverList = Context.GetListOf<Kistl.App.Base.Method>(this, "Methods");
                        }
                    }
                    else
                    {
                        serverList = new List<Kistl.App.Base.Method>();
                    }
    
                    _Methods = new OneNRelationList<Kistl.App.Base.Method>(
                        "ObjectClass",
                        null,
                        this,
                        () => { this.NotifyPropertyChanged("Methods", null, null); if(OnMethods_PostSetter != null && IsAttached) OnMethods_PostSetter(this); },
                        serverList);
                }
                return _Methods;
            }
        }
    
        private OneNRelationList<Kistl.App.Base.Method> _Methods;

        private List<int> MethodsIds;
        private bool Methods_was_eagerLoaded = false;
public static event PropertyListChangedHandler<Kistl.App.Base.DataType> OnMethods_PostSetter;

        /// <summary>
        /// Modul der Objektklasse
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=_fk_Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Kistl.App.Base.Module; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.Base.Module Module
        {
            get { return ModuleImpl; }
            set { ModuleImpl = (Kistl.App.Base.ModuleMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_Module;

        private Guid? _fk_guid_Module = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.Base.ModuleMemoryImpl ModuleImpl
        {
            get
            {
                Kistl.App.Base.ModuleMemoryImpl __value;
                if (_fk_Module.HasValue)
                    __value = (Kistl.App.Base.ModuleMemoryImpl)Context.Find<Kistl.App.Base.Module>(_fk_Module.Value);
                else
                    __value = null;

                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Module>(__value);
                    OnModule_Getter(this, e);
                    __value = (Kistl.App.Base.ModuleMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_Module == null)
                    return;
                else if (value != null && value.ID == _fk_Module)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = ModuleImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Module", __oldValue, __newValue);

                if (OnModule_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.ModuleMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_Module = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Module", __oldValue, __newValue);

                if (OnModule_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, Kistl.App.Base.Module> OnModule_PostSetter;

        /// <summary>
        /// Der Name der Objektklasse
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Name;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, string> OnName_PostSetter;

        /// <summary>
        /// Eigenschaften der Objektklasse
        /// </summary>
        // object list property
        // Kistl.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public IList<Kistl.App.Base.Property> Properties
        {
            get
            {
                if (_Properties == null)
                {
                    List<Kistl.App.Base.Property> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
                        if (PropertiesIds != null)
                        {
                            serverList = PropertiesIds.Select(id => Context.Find<Kistl.App.Base.Property>(id)).ToList();
                            PropertiesIds = null; // allow id list to be garbage collected
                        }
                        else
                        {
                            serverList = Context.GetListOf<Kistl.App.Base.Property>(this, "Properties");
                        }
                    }
                    else
                    {
                        serverList = new List<Kistl.App.Base.Property>();
                    }
    
                    _Properties = new OneNRelationList<Kistl.App.Base.Property>(
                        "ObjectClass",
                        "Properties_pos",
                        this,
                        () => { this.NotifyPropertyChanged("Properties", null, null); if(OnProperties_PostSetter != null && IsAttached) OnProperties_PostSetter(this); },
                        serverList);
                }
                return _Properties;
            }
        }
    
        private OneNRelationList<Kistl.App.Base.Property> _Properties;

        private List<int> PropertiesIds;
        private bool Properties_was_eagerLoaded = false;
public static event PropertyListChangedHandler<Kistl.App.Base.DataType> OnProperties_PostSetter;

        /// <summary>
        /// Optional requested ControlKind
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedKind
        // fkBackingName=_fk_RequestedKind; fkGuidBackingName=_fk_guid_RequestedKind;
        // referencedInterface=Kistl.App.GUI.ControlKind; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.GUI.ControlKind RequestedKind
        {
            get { return RequestedKindImpl; }
            set { RequestedKindImpl = (Kistl.App.GUI.ControlKindMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_RequestedKind;

        private Guid? _fk_guid_RequestedKind = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.GUI.ControlKindMemoryImpl RequestedKindImpl
        {
            get
            {
                Kistl.App.GUI.ControlKindMemoryImpl __value;
                if (_fk_RequestedKind.HasValue)
                    __value = (Kistl.App.GUI.ControlKindMemoryImpl)Context.Find<Kistl.App.GUI.ControlKind>(_fk_RequestedKind.Value);
                else
                    __value = null;

                if (OnRequestedKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.ControlKind>(__value);
                    OnRequestedKind_Getter(this, e);
                    __value = (Kistl.App.GUI.ControlKindMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_RequestedKind == null)
                    return;
                else if (value != null && value.ID == _fk_RequestedKind)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = RequestedKindImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("RequestedKind", __oldValue, __newValue);

                if (OnRequestedKind_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedKind_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.ControlKindMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_RequestedKind = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("RequestedKind", __oldValue, __newValue);

                if (OnRequestedKind_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedKind_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedKind
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, Kistl.App.GUI.ControlKind> OnRequestedKind_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, Kistl.App.GUI.ControlKind> OnRequestedKind_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, Kistl.App.GUI.ControlKind> OnRequestedKind_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public bool ShowIconInLists
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ShowIconInLists;
                if (OnShowIconInLists_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnShowIconInLists_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ShowIconInLists != value)
                {
                    var __oldValue = _ShowIconInLists;
                    var __newValue = value;
                    if (OnShowIconInLists_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowIconInLists_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowIconInLists", __oldValue, __newValue);
                    _ShowIconInLists = __newValue;
                    NotifyPropertyChanged("ShowIconInLists", __oldValue, __newValue);
                    if (OnShowIconInLists_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowIconInLists_PostSetter(this, __e);
                    }
                }
            }
        }
        private bool _ShowIconInLists;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, bool> OnShowIconInLists_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, bool> OnShowIconInLists_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, bool> OnShowIconInLists_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public bool ShowIdInLists
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ShowIdInLists;
                if (OnShowIdInLists_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnShowIdInLists_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ShowIdInLists != value)
                {
                    var __oldValue = _ShowIdInLists;
                    var __newValue = value;
                    if (OnShowIdInLists_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowIdInLists_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowIdInLists", __oldValue, __newValue);
                    _ShowIdInLists = __newValue;
                    NotifyPropertyChanged("ShowIdInLists", __oldValue, __newValue);
                    if (OnShowIdInLists_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowIdInLists_PostSetter(this, __e);
                    }
                }
            }
        }
        private bool _ShowIdInLists;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, bool> OnShowIdInLists_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, bool> OnShowIdInLists_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, bool> OnShowIdInLists_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public bool ShowNameInLists
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ShowNameInLists;
                if (OnShowNameInLists_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnShowNameInLists_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ShowNameInLists != value)
                {
                    var __oldValue = _ShowNameInLists;
                    var __newValue = value;
                    if (OnShowNameInLists_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowNameInLists_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowNameInLists", __oldValue, __newValue);
                    _ShowNameInLists = __newValue;
                    NotifyPropertyChanged("ShowNameInLists", __oldValue, __newValue);
                    if (OnShowNameInLists_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowNameInLists_PostSetter(this, __e);
                    }
                }
            }
        }
        private bool _ShowNameInLists;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.DataType, bool> OnShowNameInLists_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.DataType, bool> OnShowNameInLists_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.DataType, bool> OnShowNameInLists_PostSetter;

        /// <summary>
        /// Returns the resulting Type of this Datatype Meta Object.
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDataType_DataType")]
        public virtual System.Type GetDataType()
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetDataType_DataType != null)
            {
                OnGetDataType_DataType(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on DataType.GetDataType");
            }
            return e.Result;
        }
        public delegate void GetDataType_Handler<T>(T obj, MethodReturnEventArgs<System.Type> ret);
        public static event GetDataType_Handler<DataType> OnGetDataType_DataType;
        // END Kistl.Generator.Templates.ObjectClasses.Method

        /// <summary>
        /// Returns the String representation of this Datatype Meta Object.
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDataTypeString_DataType")]
        public virtual string GetDataTypeString()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetDataTypeString_DataType != null)
            {
                OnGetDataTypeString_DataType(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on DataType.GetDataTypeString");
            }
            return e.Result;
        }
        public delegate void GetDataTypeString_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetDataTypeString_Handler<DataType> OnGetDataTypeString_DataType;
        // END Kistl.Generator.Templates.ObjectClasses.Method

        public override Type GetImplementedInterface()
        {
            return typeof(DataType);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (DataType)obj;
            var otherImpl = (DataTypeMemoryImpl)obj;
            var me = (DataType)this;

            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.Name = other.Name;
            me.ShowIconInLists = other.ShowIconInLists;
            me.ShowIdInLists = other.ShowIdInLists;
            me.ShowNameInLists = other.ShowNameInLists;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_DefaultIcon = otherImpl._fk_DefaultIcon;
            this._fk_Module = otherImpl._fk_Module;
            this._fk_RequestedKind = otherImpl._fk_RequestedKind;
        }

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }

		public override void UpdateParent(string propertyName, int? id)
		{
			int? __oldValue, __newValue = id;
			
			switch(propertyName)
			{
                case "ChangedBy":
                    __oldValue = _fk_ChangedBy;
                    NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                    _fk_ChangedBy = __newValue;
                    NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    break;
                case "CreatedBy":
                    __oldValue = _fk_CreatedBy;
                    NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                    _fk_CreatedBy = __newValue;
                    NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    break;
                case "DefaultIcon":
                    __oldValue = _fk_DefaultIcon;
                    NotifyPropertyChanging("DefaultIcon", __oldValue, __newValue);
                    _fk_DefaultIcon = __newValue;
                    NotifyPropertyChanged("DefaultIcon", __oldValue, __newValue);
                    break;
                case "Module":
                    __oldValue = _fk_Module;
                    NotifyPropertyChanging("Module", __oldValue, __newValue);
                    _fk_Module = __newValue;
                    NotifyPropertyChanged("Module", __oldValue, __newValue);
                    break;
                case "RequestedKind":
                    __oldValue = _fk_RequestedKind;
                    NotifyPropertyChanging("RequestedKind", __oldValue, __newValue);
                    _fk_RequestedKind = __newValue;
                    NotifyPropertyChanged("RequestedKind", __oldValue, __newValue);
                    break;
				default:
					base.UpdateParent(propertyName, id);
					break;
			}
		}

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Kistl.App.Base.IdentityMemoryImpl)Context.Find<Kistl.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Kistl.App.Base.IdentityMemoryImpl)Context.Find<Kistl.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;

            if (_fk_guid_DefaultIcon.HasValue)
                DefaultIconImpl = (Kistl.App.GUI.IconMemoryImpl)Context.FindPersistenceObject<Kistl.App.GUI.Icon>(_fk_guid_DefaultIcon.Value);
            else
            if (_fk_DefaultIcon.HasValue)
                DefaultIconImpl = (Kistl.App.GUI.IconMemoryImpl)Context.Find<Kistl.App.GUI.Icon>(_fk_DefaultIcon.Value);
            else
                DefaultIconImpl = null;

            if (_fk_guid_Module.HasValue)
                ModuleImpl = (Kistl.App.Base.ModuleMemoryImpl)Context.FindPersistenceObject<Kistl.App.Base.Module>(_fk_guid_Module.Value);
            else
            if (_fk_Module.HasValue)
                ModuleImpl = (Kistl.App.Base.ModuleMemoryImpl)Context.Find<Kistl.App.Base.Module>(_fk_Module.Value);
            else
                ModuleImpl = null;

            if (_fk_guid_RequestedKind.HasValue)
                RequestedKindImpl = (Kistl.App.GUI.ControlKindMemoryImpl)Context.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_guid_RequestedKind.Value);
            else
            if (_fk_RequestedKind.HasValue)
                RequestedKindImpl = (Kistl.App.GUI.ControlKindMemoryImpl)Context.Find<Kistl.App.GUI.ControlKind>(_fk_RequestedKind.Value);
            else
                RequestedKindImpl = null;
        }
        #region Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorMemoryImpl<DataTypeMemoryImpl, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("c007156e-5bb3-4c4e-8cb3-5823892a893b"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val),
                    // else
                    new PropertyDescriptorMemoryImpl<DataTypeMemoryImpl, DateTime>(
                        lazyCtx,
                        new Guid("1bd4a5bc-ef42-4bc0-bf5e-162dea22d91e"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val),
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<DataTypeMemoryImpl, ICollection<Kistl.App.Base.InstanceConstraint>>(
                        lazyCtx,
                        new Guid("eda15826-7251-4726-9f6b-65e7f24f6ad1"),
                        "Constraints",
                        null,
                        obj => obj.Constraints,
                        null), // lists are read-only properties
                    // else
                    new PropertyDescriptorMemoryImpl<DataTypeMemoryImpl, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("5c2ec701-9e7e-4340-a463-4fc2b8204f5d"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val),
                    // else
                    new PropertyDescriptorMemoryImpl<DataTypeMemoryImpl, DateTime>(
                        lazyCtx,
                        new Guid("6ab4d1f6-1989-489b-a733-1c449fad773d"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val),
                    // else
                    new PropertyDescriptorMemoryImpl<DataTypeMemoryImpl, Kistl.App.GUI.Icon>(
                        lazyCtx,
                        new Guid("b1402cda-de87-4b2a-bd65-a950b8dd7a9f"),
                        "DefaultIcon",
                        null,
                        obj => obj.DefaultIcon,
                        (obj, val) => obj.DefaultIcon = val),
                    // else
                    new PropertyDescriptorMemoryImpl<DataTypeMemoryImpl, string>(
                        lazyCtx,
                        new Guid("2cffd4f2-cb84-4f39-9bd1-19fd2e160bad"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val),
                    // else
                    new PropertyDescriptorMemoryImpl<DataTypeMemoryImpl, Guid>(
                        lazyCtx,
                        new Guid("1fdb011e-2098-4077-b5e9-dd2eeafa727c"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val),
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<DataTypeMemoryImpl, ICollection<Kistl.App.Base.Method>>(
                        lazyCtx,
                        new Guid("e9f8a1f1-a5ed-44a6-bbf3-9b040766f19f"),
                        "Methods",
                        null,
                        obj => obj.Methods,
                        null), // lists are read-only properties
                    // else
                    new PropertyDescriptorMemoryImpl<DataTypeMemoryImpl, Kistl.App.Base.Module>(
                        lazyCtx,
                        new Guid("4e1fb30b-e528-4968-95b0-f3a38eafe643"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val),
                    // else
                    new PropertyDescriptorMemoryImpl<DataTypeMemoryImpl, string>(
                        lazyCtx,
                        new Guid("083bbf12-aac6-4f5f-802a-d3701550bc84"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val),
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<DataTypeMemoryImpl, IList<Kistl.App.Base.Property>>(
                        lazyCtx,
                        new Guid("e7d91162-0aa8-4fe3-9e29-d0519781ceb7"),
                        "Properties",
                        null,
                        obj => obj.Properties,
                        null), // lists are read-only properties
                    // else
                    new PropertyDescriptorMemoryImpl<DataTypeMemoryImpl, Kistl.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("bd244ed4-5c39-4783-a03d-7bb31a8884fc"),
                        "RequestedKind",
                        null,
                        obj => obj.RequestedKind,
                        (obj, val) => obj.RequestedKind = val),
                    // else
                    new PropertyDescriptorMemoryImpl<DataTypeMemoryImpl, bool>(
                        lazyCtx,
                        new Guid("d5b0ff20-10c1-40ce-b18e-9846dc5d0b60"),
                        "ShowIconInLists",
                        null,
                        obj => obj.ShowIconInLists,
                        (obj, val) => obj.ShowIconInLists = val),
                    // else
                    new PropertyDescriptorMemoryImpl<DataTypeMemoryImpl, bool>(
                        lazyCtx,
                        new Guid("220925a1-ed82-4b08-a3fa-af31bda7f40e"),
                        "ShowIdInLists",
                        null,
                        obj => obj.ShowIdInLists,
                        (obj, val) => obj.ShowIdInLists = val),
                    // else
                    new PropertyDescriptorMemoryImpl<DataTypeMemoryImpl, bool>(
                        lazyCtx,
                        new Guid("60e64ab1-830d-4c20-9d2e-17049738e9c4"),
                        "ShowNameInLists",
                        null,
                        obj => obj.ShowNameInLists,
                        (obj, val) => obj.ShowNameInLists = val),
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_DataType")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_DataType != null)
            {
                OnToString_DataType(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<DataType> OnToString_DataType;

        [EventBasedMethod("OnPreSave_DataType")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_DataType != null) OnPreSave_DataType(this);
        }
        public static event ObjectEventHandler<DataType> OnPreSave_DataType;

        [EventBasedMethod("OnPostSave_DataType")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_DataType != null) OnPostSave_DataType(this);
        }
        public static event ObjectEventHandler<DataType> OnPostSave_DataType;

        [EventBasedMethod("OnCreated_DataType")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_DataType != null) OnCreated_DataType(this);
        }
        public static event ObjectEventHandler<DataType> OnCreated_DataType;

        [EventBasedMethod("OnDeleting_DataType")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_DataType != null) OnDeleting_DataType(this);
        }
        public static event ObjectEventHandler<DataType> OnDeleting_DataType;

        #endregion // Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(ChangedBy != null ? ChangedBy.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                BinarySerializer.ToStream(this._ChangedOn, binStream);
            }

			BinarySerializer.ToStream(eagerLoadLists, binStream);
			if (eagerLoadLists && auxObjects != null)
			{
				BinarySerializer.ToStream(true, binStream);
				BinarySerializer.ToStream(Constraints.Count, binStream);
				foreach(var obj in Constraints)
				{
					auxObjects.Add(obj);
					BinarySerializer.ToStream(obj.ID, binStream);
				}
			}
			else
			{
				BinarySerializer.ToStream(false, binStream);
			}
            BinarySerializer.ToStream(CreatedBy != null ? CreatedBy.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                BinarySerializer.ToStream(this._CreatedOn, binStream);
            }
            BinarySerializer.ToStream(DefaultIcon != null ? DefaultIcon.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._Description, binStream);
            BinarySerializer.ToStream(this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.ToStream(this._ExportGuid, binStream);
            }

			BinarySerializer.ToStream(eagerLoadLists, binStream);
			if (eagerLoadLists && auxObjects != null)
			{
				BinarySerializer.ToStream(true, binStream);
				BinarySerializer.ToStream(Methods.Count, binStream);
				foreach(var obj in Methods)
				{
					auxObjects.Add(obj);
					BinarySerializer.ToStream(obj.ID, binStream);
				}
			}
			else
			{
				BinarySerializer.ToStream(false, binStream);
			}
            BinarySerializer.ToStream(Module != null ? Module.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._Name, binStream);

			BinarySerializer.ToStream(eagerLoadLists, binStream);
			if (eagerLoadLists && auxObjects != null)
			{
				BinarySerializer.ToStream(true, binStream);
				BinarySerializer.ToStream(Properties.Count, binStream);
				foreach(var obj in Properties)
				{
					auxObjects.Add(obj);
					BinarySerializer.ToStream(obj.ID, binStream);
				}
			}
			else
			{
				BinarySerializer.ToStream(false, binStream);
			}
            BinarySerializer.ToStream(RequestedKind != null ? RequestedKind.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._ShowIconInLists, binStream);
            BinarySerializer.ToStream(this._ShowIdInLists, binStream);
            BinarySerializer.ToStream(this._ShowNameInLists, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            BinarySerializer.FromStream(out this._fk_ChangedBy, binStream);
            BinarySerializer.FromStream(out this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                BinarySerializer.FromStream(out this._ChangedOn, binStream);
            }

			BinarySerializer.FromStream(out Constraints_was_eagerLoaded, binStream);
			{
				bool containsList;
				BinarySerializer.FromStream(out containsList, binStream);
				if (containsList)
				{
					int numElements;
					BinarySerializer.FromStream(out numElements, binStream);
					ConstraintsIds = new List<int>(numElements);
					while (numElements-- > 0) 
					{
						int id;
						BinarySerializer.FromStream(out id, binStream);
						ConstraintsIds.Add(id);
					}
				}
			}
            BinarySerializer.FromStream(out this._fk_CreatedBy, binStream);
            BinarySerializer.FromStream(out this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                BinarySerializer.FromStream(out this._CreatedOn, binStream);
            }
            BinarySerializer.FromStream(out this._fk_DefaultIcon, binStream);
            BinarySerializer.FromStream(out this._Description, binStream);
            BinarySerializer.FromStream(out this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.FromStream(out this._ExportGuid, binStream);
            }

			BinarySerializer.FromStream(out Methods_was_eagerLoaded, binStream);
			{
				bool containsList;
				BinarySerializer.FromStream(out containsList, binStream);
				if (containsList)
				{
					int numElements;
					BinarySerializer.FromStream(out numElements, binStream);
					MethodsIds = new List<int>(numElements);
					while (numElements-- > 0) 
					{
						int id;
						BinarySerializer.FromStream(out id, binStream);
						MethodsIds.Add(id);
					}
				}
			}
            BinarySerializer.FromStream(out this._fk_Module, binStream);
            BinarySerializer.FromStream(out this._Name, binStream);

			BinarySerializer.FromStream(out Properties_was_eagerLoaded, binStream);
			{
				bool containsList;
				BinarySerializer.FromStream(out containsList, binStream);
				if (containsList)
				{
					int numElements;
					BinarySerializer.FromStream(out numElements, binStream);
					PropertiesIds = new List<int>(numElements);
					while (numElements-- > 0) 
					{
						int id;
						BinarySerializer.FromStream(out id, binStream);
						PropertiesIds.Add(id);
					}
				}
			}
            BinarySerializer.FromStream(out this._fk_RequestedKind, binStream);
            BinarySerializer.FromStream(out this._ShowIconInLists, binStream);
            BinarySerializer.FromStream(out this._ShowIdInLists, binStream);
            BinarySerializer.FromStream(out this._ShowNameInLists, binStream);
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            XmlStreamer.ToStream(ChangedBy != null ? ChangedBy.ID : (int?)null, xml, "ChangedBy", "Kistl.App.Base");
            XmlStreamer.ToStream(this._isChangedOnSet, xml, "IsChangedOnSet", "Kistl.App.Base");
            if (this._isChangedOnSet) {
                XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(CreatedBy != null ? CreatedBy.ID : (int?)null, xml, "CreatedBy", "Kistl.App.Base");
            XmlStreamer.ToStream(this._isCreatedOnSet, xml, "IsCreatedOnSet", "Kistl.App.Base");
            if (this._isCreatedOnSet) {
                XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(DefaultIcon != null ? DefaultIcon.ID : (int?)null, xml, "DefaultIcon", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._Description, xml, "Description", "Kistl.App.Base");
            XmlStreamer.ToStream(this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.Base");
            if (this._isExportGuidSet) {
                XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(Module != null ? Module.ID : (int?)null, xml, "Module", "Kistl.App.Base");
            XmlStreamer.ToStream(this._Name, xml, "Name", "Kistl.App.Base");
            XmlStreamer.ToStream(RequestedKind != null ? RequestedKind.ID : (int?)null, xml, "RequestedKind", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._ShowIconInLists, xml, "ShowIconInLists", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._ShowIdInLists, xml, "ShowIdInLists", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._ShowNameInLists, xml, "ShowNameInLists", "Kistl.App.GUI");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            XmlStreamer.FromStream(ref this._fk_ChangedBy, xml, "ChangedBy", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._isChangedOnSet, xml, "IsChangedOnSet", "Kistl.App.Base");
            if (this._isChangedOnSet) {
                XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            }
            XmlStreamer.FromStream(ref this._fk_CreatedBy, xml, "CreatedBy", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._isCreatedOnSet, xml, "IsCreatedOnSet", "Kistl.App.Base");
            if (this._isCreatedOnSet) {
                XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            }
            XmlStreamer.FromStream(ref this._fk_DefaultIcon, xml, "DefaultIcon", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.Base");
            if (this._isExportGuidSet) {
                XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "Kistl.App.Base");
            }
            XmlStreamer.FromStream(ref this._fk_Module, xml, "Module", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._Name, xml, "Name", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_RequestedKind, xml, "RequestedKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowIconInLists, xml, "ShowIconInLists", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowIdInLists, xml, "ShowIdInLists", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowNameInLists, xml, "ShowNameInLists", "Kistl.App.GUI");
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            System.Diagnostics.Debug.Assert(this._isChangedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            System.Diagnostics.Debug.Assert(this._isCreatedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(DefaultIcon != null ? DefaultIcon.ExportGuid : (Guid?)null, xml, "DefaultIcon", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._Description, xml, "Description", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(Module != null ? Module.ExportGuid : (Guid?)null, xml, "Module", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._Name, xml, "Name", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(RequestedKind != null ? RequestedKind.ExportGuid : (Guid?)null, xml, "RequestedKind", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._ShowIconInLists, xml, "ShowIconInLists", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._ShowIdInLists, xml, "ShowIdInLists", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._ShowNameInLists, xml, "ShowNameInLists", "Kistl.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // Import must have default value set
            XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            this._isChangedOnSet = true;
            // Import must have default value set
            XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            this._isCreatedOnSet = true;
            XmlStreamer.FromStream(ref this._fk_guid_DefaultIcon, xml, "DefaultIcon", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "Kistl.App.Base");
            // Import must have default value set
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "Kistl.App.Base");
            this._isExportGuidSet = true;
            XmlStreamer.FromStream(ref this._fk_guid_Module, xml, "Module", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._Name, xml, "Name", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_guid_RequestedKind, xml, "RequestedKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowIconInLists, xml, "ShowIconInLists", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowIdInLists, xml, "ShowIdInLists", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._ShowNameInLists, xml, "ShowNameInLists", "Kistl.App.GUI");
        }

        #endregion

    }
}