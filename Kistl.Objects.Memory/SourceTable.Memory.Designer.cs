// <autogenerated/>


namespace ZBox.App.SchemaMigration
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.DalProvider.Memory;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("SourceTable")]
    public class SourceTable__Implementation__Memory : BaseMemoryDataObject, SourceTable
    {
        [Obsolete]
        public SourceTable__Implementation__Memory()
            : base(null)
        {
            {
            }
        }

        public SourceTable__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
            : base(lazyCtx)
        {
            {
            }
        }


        /// <summary>
        /// 
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Comment
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Comment;
                if (OnComment_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnComment_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Comment != value)
                {
                    var __oldValue = _Comment;
                    var __newValue = value;
                    if(OnComment_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnComment_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Comment", __oldValue, __newValue);
                    _Comment = __newValue;
                    NotifyPropertyChanged("Comment", __oldValue, __newValue);
                    if(OnComment_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnComment_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Comment;
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnComment_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnComment_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnComment_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if(OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Description;
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnDescription_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for MigrationProject
		// rel(B): MigrationProject has SourceTables
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ZBox.App.SchemaMigration.MigrationProject MigrationProject
        {
            get
            {
				ZBox.App.SchemaMigration.MigrationProject __value;
                if (_fk_MigrationProject.HasValue)
                    __value = Context.Find<ZBox.App.SchemaMigration.MigrationProject>(_fk_MigrationProject.Value);
                else
                    __value = null;

				if(OnMigrationProject_Getter != null)
				{
					var e = new PropertyGetterEventArgs<ZBox.App.SchemaMigration.MigrationProject>(__value);
					OnMigrationProject_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_MigrationProject == null)
					return;
                else if (value != null && value.ID == _fk_MigrationProject)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = MigrationProject;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("MigrationProject", __oldValue, __newValue);
				
                if(OnMigrationProject_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<ZBox.App.SchemaMigration.MigrationProject>(__oldValue, __newValue);
					OnMigrationProject_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_MigrationProject = __newValue == null ? (int?)null : __newValue.ID;
				
				// now fixup redundant, inverse references
				// The inverse navigator will also fire events when changed, so should 
				// only be touched after setting the local value above. 
				// TODO: for complete correctness, the "other" Changing event should also fire 
				//       before the local value is changed
				if (__oldValue != null)
				{
					// remove from old list
					(__oldValue.SourceTables as OneNRelationList<ZBox.App.SchemaMigration.SourceTable>).RemoveWithoutClearParent(this);
				}

                if (__newValue != null)
                {
					// add to new list
					(__newValue.SourceTables as OneNRelationList<ZBox.App.SchemaMigration.SourceTable>).AddWithoutSetParent(this);
                }
				// everything is done. fire the Changed event
				NotifyPropertyChanged("MigrationProject", __oldValue, __newValue);

                if(OnMigrationProject_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<ZBox.App.SchemaMigration.MigrationProject>(__oldValue, __newValue);
					OnMigrationProject_PostSetter(this, e);
                }
                
            }
        }
        
        // normalize namespace for Templates
        private ZBox.App.SchemaMigration.MigrationProject MigrationProject__Implementation__
        {
			get
			{
				return MigrationProject;
			}
			set
			{
				MigrationProject = value;
			}
		}
        
        private int? _fk_MigrationProject;
        private Guid? _fk_guid_MigrationProject = null;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for MigrationProject
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceTable, ZBox.App.SchemaMigration.MigrationProject> OnMigrationProject_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceTable, ZBox.App.SchemaMigration.MigrationProject> OnMigrationProject_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceTable, ZBox.App.SchemaMigration.MigrationProject> OnMigrationProject_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if(OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Name;
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnName_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceTable, string> OnName_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // object list property
        // ApplyObjectListPropertyTemplate
		// Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<ZBox.App.SchemaMigration.SourceColumn> SourceColumn
        {
            get
            {
                if (_SourceColumnWrapper == null)
                {
                    List<ZBox.App.SchemaMigration.SourceColumn> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
						serverList = Context.GetListOf<ZBox.App.SchemaMigration.SourceColumn>(this, "SourceColumn");
					}
                    else
                    {
                        serverList = new List<ZBox.App.SchemaMigration.SourceColumn>();
                    }
                        
                    _SourceColumnWrapper = new OneNRelationList<ZBox.App.SchemaMigration.SourceColumn>(
                        "SourceTable",
                        null,
                        this,
                        () => this.NotifyPropertyChanged("SourceColumn", null, null),
                        serverList);
                }
                return _SourceColumnWrapper;
            }
        }
        
        private OneNRelationList<ZBox.App.SchemaMigration.SourceColumn> _SourceColumnWrapper;


        public override Type GetImplementedInterface()
        {
            return typeof(SourceTable);
        }

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (SourceTable)obj;
			var otherImpl = (SourceTable__Implementation__Memory)obj;
			var me = (SourceTable)this;

			me.Comment = other.Comment;
			me.Description = other.Description;
			me.Name = other.Name;
			this._fk_MigrationProject = otherImpl._fk_MigrationProject;
		}

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
		}

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			// fix direct object references

			if (_fk_guid_MigrationProject.HasValue)
				MigrationProject__Implementation__ = (ZBox.App.SchemaMigration.MigrationProject__Implementation__Memory)Context.FindPersistenceObject<ZBox.App.SchemaMigration.MigrationProject>(_fk_guid_MigrationProject.Value);
			else if (_fk_MigrationProject.HasValue)
				MigrationProject__Implementation__ = (ZBox.App.SchemaMigration.MigrationProject__Implementation__Memory)Context.Find<ZBox.App.SchemaMigration.MigrationProject>(_fk_MigrationProject.Value);
			else
				MigrationProject__Implementation__ = null;
		}
        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_SourceTable")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_SourceTable != null)
            {
                OnToString_SourceTable(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<SourceTable> OnToString_SourceTable;

        [EventBasedMethod("OnPreSave_SourceTable")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_SourceTable != null) OnPreSave_SourceTable(this);
        }
        public static event ObjectEventHandler<SourceTable> OnPreSave_SourceTable;

        [EventBasedMethod("OnPostSave_SourceTable")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_SourceTable != null) OnPostSave_SourceTable(this);
        }
        public static event ObjectEventHandler<SourceTable> OnPostSave_SourceTable;

        [EventBasedMethod("OnCreated_SourceTable")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_SourceTable != null) OnCreated_SourceTable(this);
        }
        public static event ObjectEventHandler<SourceTable> OnCreated_SourceTable;

        [EventBasedMethod("OnDeleting_SourceTable")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_SourceTable != null) OnDeleting_SourceTable(this);
        }
        public static event ObjectEventHandler<SourceTable> OnDeleting_SourceTable;


		private static readonly object _propertiesLock = new object();
		private static System.ComponentModel.PropertyDescriptor[] _properties;
		
		private void _InitializePropertyDescriptors(Func<IReadOnlyKistlContext> lazyCtx)
		{
			if (_properties != null) return;
			lock (_propertiesLock)
			{
				// recheck for a lost race after aquiring the lock
				if (_properties != null) return;
				
				_properties = new System.ComponentModel.PropertyDescriptor[] {
					// else
					new CustomPropertyDescriptor<SourceTable__Implementation__Memory, string>(
						lazyCtx,
						new Guid("86a05242-c667-4181-a7a7-1d50d20f9d0f"),
						"Comment",
						null,
						obj => obj.Comment,
						(obj, val) => obj.Comment = val),
					// else
					new CustomPropertyDescriptor<SourceTable__Implementation__Memory, string>(
						lazyCtx,
						new Guid("8b93e1d4-1e2a-44a8-91c3-0c71541934c6"),
						"Description",
						null,
						obj => obj.Description,
						(obj, val) => obj.Description = val),
					// else
					new CustomPropertyDescriptor<SourceTable__Implementation__Memory, ZBox.App.SchemaMigration.MigrationProject>(
						lazyCtx,
						new Guid("b26f101a-69dc-4339-bad7-3120373342a7"),
						"MigrationProject",
						null,
						obj => obj.MigrationProject,
						(obj, val) => obj.MigrationProject = val),
					// else
					new CustomPropertyDescriptor<SourceTable__Implementation__Memory, string>(
						lazyCtx,
						new Guid("f01c1095-cf9b-41f5-b89c-532a86a78cc5"),
						"Name",
						null,
						obj => obj.Name,
						(obj, val) => obj.Name = val),
					// property.IsAssociation() && !property.IsObjectReferencePropertySingle()
					new CustomPropertyDescriptor<SourceTable__Implementation__Memory, ICollection<ZBox.App.SchemaMigration.SourceColumn>>(
						lazyCtx,
						new Guid("0e435261-9490-4fbb-8268-f7f1f6607d2c"),
						"SourceColumn",
						null,
						obj => obj.SourceColumn,
						null), // lists are read-only properties
					// rel: MigrationProject has SourceTables (daf3f4eb-21bc-4ad1-87f1-aef06ade1281)
					// rel: SourceColumn belongs_to SourceTable (cd774e2e-93de-4f45-9fa8-daff40a61511)
				};
			}
		}
		
		protected override void CollectProperties(Func<IReadOnlyKistlContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
		{
			base.CollectProperties(props);
			_InitializePropertyDescriptors(lazyCtx);
			props.AddRange(_properties);
		}
	

		public override void UpdateParent(string propertyName, int? id)
		{
			int? __oldValue, __newValue = id;
			
			switch(propertyName)
			{
                case "MigrationProject":
                    __oldValue = _fk_MigrationProject;
                    NotifyPropertyChanging("MigrationProject", __oldValue, __newValue);
                    _fk_MigrationProject = __newValue;
                    NotifyPropertyChanged("MigrationProject", __oldValue, __newValue);
                    break;
				default:
					base.UpdateParent(propertyName, id);
					break;
			}
		}

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._Comment, binStream);
            BinarySerializer.ToStream(this._Description, binStream);
            BinarySerializer.ToStream(this._fk_MigrationProject, binStream);
            BinarySerializer.ToStream(this._Name, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._Comment, binStream);
            BinarySerializer.FromStream(out this._Description, binStream);
            BinarySerializer.FromStream(out this._fk_MigrationProject, binStream);
            BinarySerializer.FromStream(out this._Name, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._Comment, xml, "Comment", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._fk_MigrationProject, xml, "MigrationProject", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._Name, xml, "Name", "ZBox.App.SchemaMigration");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._Comment, xml, "Comment", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._fk_MigrationProject, xml, "MigrationProject", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._Name, xml, "Name", "ZBox.App.SchemaMigration");
        }

#endregion

    }


}