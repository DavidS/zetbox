// <autogenerated/>

namespace Kistl.App.GUI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;
    using Kistl.DalProvider.Base.RelationWrappers;

    using Kistl.DalProvider.Base;
    using Kistl.DalProvider.Memory;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("NavigationScreen")]
    public class NavigationScreenMemoryImpl : Kistl.DalProvider.Memory.DataObjectMemoryImpl, Kistl.API.IExportableInternal, NavigationScreen
    {
        [Obsolete]
        public NavigationScreenMemoryImpl()
            : base(null)
        {
        }

        public NavigationScreenMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Kistl.App.Base.IdentityMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_ChangedBy;


        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.Base.IdentityMemoryImpl ChangedByImpl
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return null;
                Kistl.App.Base.IdentityMemoryImpl __value;
                if (_fk_ChangedBy.HasValue)
                    __value = (Kistl.App.Base.IdentityMemoryImpl)Context.Find<Kistl.App.Base.Identity>(_fk_ChangedBy.Value);
                else
                    __value = null;

                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_ChangedBy == null)
                    return;
                else if (value != null && value.ID == _fk_ChangedBy)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = ChangedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_ChangedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationScreen, Kistl.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationScreen, Kistl.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationScreen, Kistl.App.Base.Identity> OnChangedBy_PostSetter;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime ChangedOn
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return default(DateTime);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("3fb6b366-facc-44e1-aadb-0b6417e4b53e"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'NavigationScreen.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime _ChangedOn;
        private bool _isChangedOnSet = false;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationScreen, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationScreen, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationScreen, DateTime> OnChangedOn_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // object list property
        // Kistl.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public IList<Kistl.App.GUI.NavigationScreen> Children
        {
            get
            {
                if (_Children == null)
                {
                    List<Kistl.App.GUI.NavigationScreen> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
                        serverList = Context.GetListOf<Kistl.App.GUI.NavigationScreen>(this, "Children");
                    }
                    else
                    {
                        serverList = new List<Kistl.App.GUI.NavigationScreen>();
                    }
    
                    _Children = new OneNRelationList<Kistl.App.GUI.NavigationScreen>(
                        "Parent",
                        "Children_pos",
                        this,
                        () => { this.NotifyPropertyChanged("Children", null, null); if(OnChildren_PostSetter != null && IsAttached) OnChildren_PostSetter(this); },
                        serverList);
                }
                return _Children;
            }
        }
    
        private OneNRelationList<Kistl.App.GUI.NavigationScreen> _Children;

public static event PropertyListChangedHandler<Kistl.App.GUI.NavigationScreen> OnChildren_PostSetter;

        /// <summary>
        /// Color of the ViewScreen or default color if empty
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public string Color
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Color;
                if (OnColor_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnColor_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Color != value)
                {
                    var __oldValue = _Color;
                    var __newValue = value;
                    if (OnColor_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnColor_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Color", __oldValue, __newValue);
                    _Color = __newValue;
                    NotifyPropertyChanged("Color", __oldValue, __newValue);
                    if (OnColor_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnColor_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Color;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationScreen, string> OnColor_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationScreen, string> OnColor_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationScreen, string> OnColor_PostSetter;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Kistl.App.Base.IdentityMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_CreatedBy;


        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.Base.IdentityMemoryImpl CreatedByImpl
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return null;
                Kistl.App.Base.IdentityMemoryImpl __value;
                if (_fk_CreatedBy.HasValue)
                    __value = (Kistl.App.Base.IdentityMemoryImpl)Context.Find<Kistl.App.Base.Identity>(_fk_CreatedBy.Value);
                else
                    __value = null;

                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_CreatedBy == null)
                    return;
                else if (value != null && value.ID == _fk_CreatedBy)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = CreatedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_CreatedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationScreen, Kistl.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationScreen, Kistl.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationScreen, Kistl.App.Base.Identity> OnCreatedBy_PostSetter;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime CreatedOn
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return default(DateTime);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("22b4d7f0-40cb-40a7-a421-2fffa59ccb94"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'NavigationScreen.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime _CreatedOn;
        private bool _isCreatedOnSet = false;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationScreen, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationScreen, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationScreen, DateTime> OnCreatedOn_PostSetter;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public Guid ExportGuid
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("9c987946-8816-48a6-bd21-b1120c3a78b4"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'NavigationScreen.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
            }
        }
        private Guid _ExportGuid;
        private bool _isExportGuidSet = false;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationScreen, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationScreen, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationScreen, Guid> OnExportGuid_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // collection entry list property
   		// Kistl.Generator.Templates.Properties.CollectionEntryListProperty
		public ICollection<Kistl.App.Base.Group> Groups
		{
			get
			{
				if (_Groups == null)
				{
					if (!Groups_was_eagerLoaded) Context.FetchRelation<NavigationScreen_accessed_by_Group_RelationEntryMemoryImpl>(new Guid("b88c12ac-eabe-4aee-913e-5edd9d2a193a"), RelationEndRole.A, this);
					_Groups 
						= new ObservableBSideCollectionWrapper<Kistl.App.GUI.NavigationScreen, Kistl.App.Base.Group, NavigationScreen_accessed_by_Group_RelationEntryMemoryImpl, ICollection<NavigationScreen_accessed_by_Group_RelationEntryMemoryImpl>>(
							this, 
							new RelationshipFilterASideCollection<NavigationScreen_accessed_by_Group_RelationEntryMemoryImpl>(this.Context, this));
				}
				return (ICollection<Kistl.App.Base.Group>)_Groups;
			}
		}

		private ObservableBSideCollectionWrapper<Kistl.App.GUI.NavigationScreen, Kistl.App.Base.Group, NavigationScreen_accessed_by_Group_RelationEntryMemoryImpl, ICollection<NavigationScreen_accessed_by_Group_RelationEntryMemoryImpl>> _Groups;
		
		private bool Groups_was_eagerLoaded = false;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=_fk_Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Kistl.App.Base.Module; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.Base.Module Module
        {
            get { return ModuleImpl; }
            set { ModuleImpl = (Kistl.App.Base.ModuleMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_Module;

        private Guid? _fk_guid_Module = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.Base.ModuleMemoryImpl ModuleImpl
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return null;
                Kistl.App.Base.ModuleMemoryImpl __value;
                if (_fk_Module.HasValue)
                    __value = (Kistl.App.Base.ModuleMemoryImpl)Context.Find<Kistl.App.Base.Module>(_fk_Module.Value);
                else
                    __value = null;

                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Module>(__value);
                    OnModule_Getter(this, e);
                    __value = (Kistl.App.Base.ModuleMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_Module == null)
                    return;
                else if (value != null && value.ID == _fk_Module)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = ModuleImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Module", __oldValue, __newValue);

                if (OnModule_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.ModuleMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_Module = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Module", __oldValue, __newValue);

                if (OnModule_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationScreen, Kistl.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationScreen, Kistl.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationScreen, Kistl.App.Base.Module> OnModule_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // fkBackingName=_fk_Parent; fkGuidBackingName=_fk_guid_Parent;
        // referencedInterface=Kistl.App.GUI.NavigationScreen; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=Children; is list;
        // PositionStorage=Children_pos;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.GUI.NavigationScreen Parent
        {
            get { return ParentImpl; }
            set { ParentImpl = (Kistl.App.GUI.NavigationScreenMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_Parent;

        private Guid? _fk_guid_Parent = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.GUI.NavigationScreenMemoryImpl ParentImpl
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return null;
                Kistl.App.GUI.NavigationScreenMemoryImpl __value;
                if (_fk_Parent.HasValue)
                    __value = (Kistl.App.GUI.NavigationScreenMemoryImpl)Context.Find<Kistl.App.GUI.NavigationScreen>(_fk_Parent.Value);
                else
                    __value = null;

                if (OnParent_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.NavigationScreen>(__value);
                    OnParent_Getter(this, e);
                    __value = (Kistl.App.GUI.NavigationScreenMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_Parent == null)
                    return;
                else if (value != null && value.ID == _fk_Parent)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = ParentImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Parent", __oldValue, __newValue);

                if (OnParent_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.NavigationScreen>(__oldValue, __newValue);
                    OnParent_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.NavigationScreenMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_Parent = __newValue == null ? (int?)null : __newValue.ID;

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.Children as IRelationListSync<Kistl.App.GUI.NavigationScreen>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.Children as IRelationListSync<Kistl.App.GUI.NavigationScreen>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("Parent", __oldValue, __newValue);

                if (OnParent_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.NavigationScreen>(__oldValue, __newValue);
                    OnParent_PostSetter(this, e);
                }
            }
        }
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingValueProperty
        public int? Children_pos
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return default(int?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Children_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Children_pos != value)
                {
                    var __oldValue = _Children_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("Children_pos", __oldValue, __newValue);
                    _Children_pos = __newValue;
                    NotifyPropertyChanged("Children_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _Children_pos;
        // END Kistl.Generator.Templates.Properties.NotifyingValueProperty
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationScreen, Kistl.App.GUI.NavigationScreen> OnParent_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationScreen, Kistl.App.GUI.NavigationScreen> OnParent_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationScreen, Kistl.App.GUI.NavigationScreen> OnParent_PostSetter;

        /// <summary>
        /// The title of this screen
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public string Title
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Title;
                if (OnTitle_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnTitle_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Title != value)
                {
                    var __oldValue = _Title;
                    var __newValue = value;
                    if (OnTitle_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnTitle_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Title", __oldValue, __newValue);
                    _Title = __newValue;
                    NotifyPropertyChanged("Title", __oldValue, __newValue);
                    if (OnTitle_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnTitle_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Title;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationScreen, string> OnTitle_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationScreen, string> OnTitle_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationScreen, string> OnTitle_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ViewModelDescriptor
        // fkBackingName=_fk_ViewModelDescriptor; fkGuidBackingName=_fk_guid_ViewModelDescriptor;
        // referencedInterface=Kistl.App.GUI.ViewModelDescriptor; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.GUI.ViewModelDescriptor ViewModelDescriptor
        {
            get { return ViewModelDescriptorImpl; }
            set { ViewModelDescriptorImpl = (Kistl.App.GUI.ViewModelDescriptorMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_ViewModelDescriptor;

        private Guid? _fk_guid_ViewModelDescriptor = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.GUI.ViewModelDescriptorMemoryImpl ViewModelDescriptorImpl
        {
            get
            {
                if (CurrentAccessRights == Kistl.API.AccessRights.None) return null;
                Kistl.App.GUI.ViewModelDescriptorMemoryImpl __value;
                if (_fk_ViewModelDescriptor.HasValue)
                    __value = (Kistl.App.GUI.ViewModelDescriptorMemoryImpl)Context.Find<Kistl.App.GUI.ViewModelDescriptor>(_fk_ViewModelDescriptor.Value);
                else
                    __value = null;

                if (OnViewModelDescriptor_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.ViewModelDescriptor>(__value);
                    OnViewModelDescriptor_Getter(this, e);
                    __value = (Kistl.App.GUI.ViewModelDescriptorMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_ViewModelDescriptor == null)
                    return;
                else if (value != null && value.ID == _fk_ViewModelDescriptor)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = ViewModelDescriptorImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ViewModelDescriptor", __oldValue, __newValue);

                if (OnViewModelDescriptor_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
                    OnViewModelDescriptor_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.ViewModelDescriptorMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_ViewModelDescriptor = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ViewModelDescriptor", __oldValue, __newValue);

                if (OnViewModelDescriptor_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
                    OnViewModelDescriptor_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ViewModelDescriptor
		public static event PropertyGetterHandler<Kistl.App.GUI.NavigationScreen, Kistl.App.GUI.ViewModelDescriptor> OnViewModelDescriptor_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.NavigationScreen, Kistl.App.GUI.ViewModelDescriptor> OnViewModelDescriptor_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.NavigationScreen, Kistl.App.GUI.ViewModelDescriptor> OnViewModelDescriptor_PostSetter;

        public override Type GetImplementedInterface()
        {
            return typeof(NavigationScreen);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (NavigationScreen)obj;
            var otherImpl = (NavigationScreenMemoryImpl)obj;
            var me = (NavigationScreen)this;

            me.ChangedOn = other.ChangedOn;
            me.Color = other.Color;
            me.CreatedOn = other.CreatedOn;
            me.ExportGuid = other.ExportGuid;
            me.Title = other.Title;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_Module = otherImpl._fk_Module;
            this.Children_pos = otherImpl.Children_pos;
            this._fk_Parent = otherImpl._fk_Parent;
            this._fk_ViewModelDescriptor = otherImpl._fk_ViewModelDescriptor;
        }

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }

		public override void UpdateParent(string propertyName, int? id)
		{
			int? __oldValue, __newValue = id;
			
			switch(propertyName)
			{
                case "ChangedBy":
                    __oldValue = _fk_ChangedBy;
                    NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                    _fk_ChangedBy = __newValue;
                    NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    break;
                case "CreatedBy":
                    __oldValue = _fk_CreatedBy;
                    NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                    _fk_CreatedBy = __newValue;
                    NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    break;
                case "Module":
                    __oldValue = _fk_Module;
                    NotifyPropertyChanging("Module", __oldValue, __newValue);
                    _fk_Module = __newValue;
                    NotifyPropertyChanged("Module", __oldValue, __newValue);
                    break;
                case "Parent":
                    __oldValue = _fk_Parent;
                    NotifyPropertyChanging("Parent", __oldValue, __newValue);
                    _fk_Parent = __newValue;
                    NotifyPropertyChanged("Parent", __oldValue, __newValue);
                    break;
                case "ViewModelDescriptor":
                    __oldValue = _fk_ViewModelDescriptor;
                    NotifyPropertyChanging("ViewModelDescriptor", __oldValue, __newValue);
                    _fk_ViewModelDescriptor = __newValue;
                    NotifyPropertyChanged("ViewModelDescriptor", __oldValue, __newValue);
                    break;
				default:
					base.UpdateParent(propertyName, id);
					break;
			}
		}

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Kistl.App.Base.IdentityMemoryImpl)Context.Find<Kistl.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Kistl.App.Base.IdentityMemoryImpl)Context.Find<Kistl.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;

            if (_fk_guid_Module.HasValue)
                ModuleImpl = (Kistl.App.Base.ModuleMemoryImpl)Context.FindPersistenceObject<Kistl.App.Base.Module>(_fk_guid_Module.Value);
            else
            if (_fk_Module.HasValue)
                ModuleImpl = (Kistl.App.Base.ModuleMemoryImpl)Context.Find<Kistl.App.Base.Module>(_fk_Module.Value);
            else
                ModuleImpl = null;

            if (_fk_guid_Parent.HasValue)
                ParentImpl = (Kistl.App.GUI.NavigationScreenMemoryImpl)Context.FindPersistenceObject<Kistl.App.GUI.NavigationScreen>(_fk_guid_Parent.Value);
            else
            if (_fk_Parent.HasValue)
                ParentImpl = (Kistl.App.GUI.NavigationScreenMemoryImpl)Context.Find<Kistl.App.GUI.NavigationScreen>(_fk_Parent.Value);
            else
                ParentImpl = null;

            if (_fk_guid_ViewModelDescriptor.HasValue)
                ViewModelDescriptorImpl = (Kistl.App.GUI.ViewModelDescriptorMemoryImpl)Context.FindPersistenceObject<Kistl.App.GUI.ViewModelDescriptor>(_fk_guid_ViewModelDescriptor.Value);
            else
            if (_fk_ViewModelDescriptor.HasValue)
                ViewModelDescriptorImpl = (Kistl.App.GUI.ViewModelDescriptorMemoryImpl)Context.Find<Kistl.App.GUI.ViewModelDescriptor>(_fk_ViewModelDescriptor.Value);
            else
                ViewModelDescriptorImpl = null;
        }
        #region Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationScreenMemoryImpl, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("5a54e4f1-4118-4cc7-b8a1-e2f25a9ac9df"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val),
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationScreenMemoryImpl, DateTime>(
                        lazyCtx,
                        new Guid("3fb6b366-facc-44e1-aadb-0b6417e4b53e"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val),
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<NavigationScreenMemoryImpl, IList<Kistl.App.GUI.NavigationScreen>>(
                        lazyCtx,
                        new Guid("87eecae1-aa07-4159-8953-716cd27bb5dd"),
                        "Children",
                        null,
                        obj => obj.Children,
                        null), // lists are read-only properties
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationScreenMemoryImpl, string>(
                        lazyCtx,
                        new Guid("39d7ecec-c192-4353-bfaa-941b5e877745"),
                        "Color",
                        null,
                        obj => obj.Color,
                        (obj, val) => obj.Color = val),
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationScreenMemoryImpl, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("f688a7e1-6833-4e78-ac7d-4dfd74242867"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val),
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationScreenMemoryImpl, DateTime>(
                        lazyCtx,
                        new Guid("22b4d7f0-40cb-40a7-a421-2fffa59ccb94"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val),
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationScreenMemoryImpl, Guid>(
                        lazyCtx,
                        new Guid("9c987946-8816-48a6-bd21-b1120c3a78b4"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val),
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<NavigationScreenMemoryImpl, ICollection<Kistl.App.Base.Group>>(
                        lazyCtx,
                        new Guid("7b01db75-218a-4040-bae9-aa82c253a620"),
                        "Groups",
                        null,
                        obj => obj.Groups,
                        null), // lists are read-only properties
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationScreenMemoryImpl, Kistl.App.Base.Module>(
                        lazyCtx,
                        new Guid("e45868e3-9638-4259-a908-16cb3f1d515d"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val),
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationScreenMemoryImpl, Kistl.App.GUI.NavigationScreen>(
                        lazyCtx,
                        new Guid("0d3e3599-3cf7-4025-8848-597194c3dc2f"),
                        "Parent",
                        null,
                        obj => obj.Parent,
                        (obj, val) => obj.Parent = val),
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationScreenMemoryImpl, string>(
                        lazyCtx,
                        new Guid("3d5d6b12-ab8a-4bda-8487-6f987cee1fae"),
                        "Title",
                        null,
                        obj => obj.Title,
                        (obj, val) => obj.Title = val),
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationScreenMemoryImpl, Kistl.App.GUI.ViewModelDescriptor>(
                        lazyCtx,
                        new Guid("60c43bca-219a-4346-859a-b2979a9f71a5"),
                        "ViewModelDescriptor",
                        null,
                        obj => obj.ViewModelDescriptor,
                        (obj, val) => obj.ViewModelDescriptor = val),
                    // position columns
                    // rel: Parent navigates_to Children (45cc7d94-b50d-4a2f-9351-d96e508027d8)
                    // rel.B.Type == cls && rel.B.HasPersistentOrder
                    new PropertyDescriptorMemoryImpl<NavigationScreenMemoryImpl, int?>(
                        lazyCtx,
                        null,
                        "Children_pos",
                        null,
                        obj => obj.Children_pos,
                        (obj, val) => obj.Children_pos = val),
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_NavigationScreen")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_NavigationScreen != null)
            {
                OnToString_NavigationScreen(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<NavigationScreen> OnToString_NavigationScreen;

        [EventBasedMethod("OnPreSave_NavigationScreen")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_NavigationScreen != null) OnPreSave_NavigationScreen(this);
        }
        public static event ObjectEventHandler<NavigationScreen> OnPreSave_NavigationScreen;

        [EventBasedMethod("OnPostSave_NavigationScreen")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_NavigationScreen != null) OnPostSave_NavigationScreen(this);
        }
        public static event ObjectEventHandler<NavigationScreen> OnPostSave_NavigationScreen;

        [EventBasedMethod("OnCreated_NavigationScreen")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_NavigationScreen != null) OnCreated_NavigationScreen(this);
        }
        public static event ObjectEventHandler<NavigationScreen> OnCreated_NavigationScreen;

        [EventBasedMethod("OnDeleting_NavigationScreen")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_NavigationScreen != null) OnDeleting_NavigationScreen(this);
        }
        public static event ObjectEventHandler<NavigationScreen> OnDeleting_NavigationScreen;

        #endregion // Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(ChangedBy != null ? ChangedBy.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                BinarySerializer.ToStream(this._ChangedOn, binStream);
            }
            BinarySerializer.ToStream(this._Color, binStream);
            BinarySerializer.ToStream(CreatedBy != null ? CreatedBy.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                BinarySerializer.ToStream(this._CreatedOn, binStream);
            }
            BinarySerializer.ToStream(this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.ToStream(this._ExportGuid, binStream);
            }

			BinarySerializer.ToStream(eagerLoadLists, binStream);
			if (eagerLoadLists && auxObjects != null)
			{
				foreach(var obj in Groups)
				{
					auxObjects.Add(obj);
				}
			}
            BinarySerializer.ToStream(Module != null ? Module.ID : (int?)null, binStream);
            BinarySerializer.ToStream(Parent != null ? Parent.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._Children_pos, binStream);
            BinarySerializer.ToStream(this._Title, binStream);
            BinarySerializer.ToStream(ViewModelDescriptor != null ? ViewModelDescriptor.ID : (int?)null, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            BinarySerializer.FromStream(out this._fk_ChangedBy, binStream);
            BinarySerializer.FromStream(out this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                BinarySerializer.FromStream(out this._ChangedOn, binStream);
            }
            BinarySerializer.FromStream(out this._Color, binStream);
            BinarySerializer.FromStream(out this._fk_CreatedBy, binStream);
            BinarySerializer.FromStream(out this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                BinarySerializer.FromStream(out this._CreatedOn, binStream);
            }
            BinarySerializer.FromStream(out this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.FromStream(out this._ExportGuid, binStream);
            }

			BinarySerializer.FromStream(out Groups_was_eagerLoaded, binStream);
            BinarySerializer.FromStream(out this._fk_Module, binStream);
            BinarySerializer.FromStream(out this._fk_Parent, binStream);
            BinarySerializer.FromStream(out this._Children_pos, binStream);
            BinarySerializer.FromStream(out this._Title, binStream);
            BinarySerializer.FromStream(out this._fk_ViewModelDescriptor, binStream);
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            XmlStreamer.ToStream(ChangedBy != null ? ChangedBy.ID : (int?)null, xml, "ChangedBy", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._isChangedOnSet, xml, "IsChangedOnSet", "Kistl.App.GUI");
            if (this._isChangedOnSet) {
                XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Kistl.App.GUI");
            }
            XmlStreamer.ToStream(this._Color, xml, "Color", "Kistl.App.GUI");
            XmlStreamer.ToStream(CreatedBy != null ? CreatedBy.ID : (int?)null, xml, "CreatedBy", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._isCreatedOnSet, xml, "IsCreatedOnSet", "Kistl.App.GUI");
            if (this._isCreatedOnSet) {
                XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Kistl.App.GUI");
            }
            XmlStreamer.ToStream(this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.GUI");
            if (this._isExportGuidSet) {
                XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "Kistl.App.GUI");
            }
            XmlStreamer.ToStream(Module != null ? Module.ID : (int?)null, xml, "Module", "Kistl.App.GUI");
            XmlStreamer.ToStream(Parent != null ? Parent.ID : (int?)null, xml, "Parent", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._Children_pos, xml, "Children_pos", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._Title, xml, "Title", "Kistl.App.GUI");
            XmlStreamer.ToStream(ViewModelDescriptor != null ? ViewModelDescriptor.ID : (int?)null, xml, "ViewModelDescriptor", "Kistl.App.GUI");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            XmlStreamer.FromStream(ref this._fk_ChangedBy, xml, "ChangedBy", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._isChangedOnSet, xml, "IsChangedOnSet", "Kistl.App.GUI");
            if (this._isChangedOnSet) {
                XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "Kistl.App.GUI");
            }
            XmlStreamer.FromStream(ref this._Color, xml, "Color", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_CreatedBy, xml, "CreatedBy", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._isCreatedOnSet, xml, "IsCreatedOnSet", "Kistl.App.GUI");
            if (this._isCreatedOnSet) {
                XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "Kistl.App.GUI");
            }
            XmlStreamer.FromStream(ref this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.GUI");
            if (this._isExportGuidSet) {
                XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "Kistl.App.GUI");
            }
            XmlStreamer.FromStream(ref this._fk_Module, xml, "Module", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_Parent, xml, "Parent", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._Children_pos, xml, "Children_pos", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._Title, xml, "Title", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_ViewModelDescriptor, xml, "ViewModelDescriptor", "Kistl.App.GUI");
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            System.Diagnostics.Debug.Assert(this._isChangedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._Color, xml, "Color", "Kistl.App.GUI");
            System.Diagnostics.Debug.Assert(this._isCreatedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(Module != null ? Module.ExportGuid : (Guid?)null, xml, "Module", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(Parent != null ? Parent.ExportGuid : (Guid?)null, xml, "Parent", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._Children_pos, xml, "Children_pos", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._Title, xml, "Title", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(ViewModelDescriptor != null ? ViewModelDescriptor.ExportGuid : (Guid?)null, xml, "ViewModelDescriptor", "Kistl.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // Import must have default value set
            XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "Kistl.App.GUI");
            this._isChangedOnSet = true;
            XmlStreamer.FromStream(ref this._Color, xml, "Color", "Kistl.App.GUI");
            // Import must have default value set
            XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "Kistl.App.GUI");
            this._isCreatedOnSet = true;
            // Import must have default value set
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "Kistl.App.GUI");
            this._isExportGuidSet = true;
            XmlStreamer.FromStream(ref this._fk_guid_Module, xml, "Module", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_Parent, xml, "Parent", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._Children_pos, xml, "Children_pos", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._Title, xml, "Title", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_ViewModelDescriptor, xml, "ViewModelDescriptor", "Kistl.App.GUI");
        }

        #endregion

    }
}