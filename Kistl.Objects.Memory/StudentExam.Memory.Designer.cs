// <autogenerated/>


namespace at.dasz.CourseOrganiser
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.DalProvider.Memory;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("StudentExam")]
    public class StudentExam__Implementation__Memory : BaseMemoryDataObject, StudentExam
    {
        [Obsolete]
        public StudentExam__Implementation__Memory()
            : base(null)
        {
            {
            }
        }

        public StudentExam__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
            : base(lazyCtx)
        {
            {
            }
        }


        /// <summary>
        /// 
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for Exam
		// rel(A): StudentExam passes Exam
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.CourseOrganiser.Exam Exam
        {
            get
            {
				at.dasz.CourseOrganiser.Exam __value;
                if (_fk_Exam.HasValue)
                    __value = Context.Find<at.dasz.CourseOrganiser.Exam>(_fk_Exam.Value);
                else
                    __value = null;

				if(OnExam_Getter != null)
				{
					var e = new PropertyGetterEventArgs<at.dasz.CourseOrganiser.Exam>(__value);
					OnExam_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_Exam == null)
					return;
                else if (value != null && value.ID == _fk_Exam)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = Exam;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("Exam", __oldValue, __newValue);
				
                if(OnExam_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<at.dasz.CourseOrganiser.Exam>(__oldValue, __newValue);
					OnExam_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_Exam = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("Exam", __oldValue, __newValue);

                if(OnExam_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<at.dasz.CourseOrganiser.Exam>(__oldValue, __newValue);
					OnExam_PostSetter(this, e);
                }
                
            }
        }
        
        // normalize namespace for Templates
        private at.dasz.CourseOrganiser.Exam Exam__Implementation__
        {
			get
			{
				return Exam;
			}
			set
			{
				Exam = value;
			}
		}
        
        private int? _fk_Exam;
        private Guid? _fk_guid_Exam = null;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for Exam
		public static event PropertyGetterHandler<at.dasz.CourseOrganiser.StudentExam, at.dasz.CourseOrganiser.Exam> OnExam_Getter;
		public static event PropertyPreSetterHandler<at.dasz.CourseOrganiser.StudentExam, at.dasz.CourseOrganiser.Exam> OnExam_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.CourseOrganiser.StudentExam, at.dasz.CourseOrganiser.Exam> OnExam_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual int? Score
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Score;
                if (OnScore_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<int?>(__result);
                    OnScore_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Score != value)
                {
                    var __oldValue = _Score;
                    var __newValue = value;
                    if(OnScore_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<int?>(__oldValue, __newValue);
                        OnScore_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Score", __oldValue, __newValue);
                    _Score = __newValue;
                    NotifyPropertyChanged("Score", __oldValue, __newValue);
                    if(OnScore_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<int?>(__oldValue, __newValue);
                        OnScore_PostSetter(this, __e);
                    }
                }
            }
        }
        private int? _Score;
		public static event PropertyGetterHandler<at.dasz.CourseOrganiser.StudentExam, int?> OnScore_Getter;
		public static event PropertyPreSetterHandler<at.dasz.CourseOrganiser.StudentExam, int?> OnScore_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.CourseOrganiser.StudentExam, int?> OnScore_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for Student
		// rel(A): StudentExam writtenby Student
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.CourseOrganiser.Student Student
        {
            get
            {
				at.dasz.CourseOrganiser.Student __value;
                if (_fk_Student.HasValue)
                    __value = Context.Find<at.dasz.CourseOrganiser.Student>(_fk_Student.Value);
                else
                    __value = null;

				if(OnStudent_Getter != null)
				{
					var e = new PropertyGetterEventArgs<at.dasz.CourseOrganiser.Student>(__value);
					OnStudent_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_Student == null)
					return;
                else if (value != null && value.ID == _fk_Student)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = Student;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("Student", __oldValue, __newValue);
				
                if(OnStudent_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<at.dasz.CourseOrganiser.Student>(__oldValue, __newValue);
					OnStudent_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_Student = __newValue == null ? (int?)null : __newValue.ID;
				
				// now fixup redundant, inverse references
				// The inverse navigator will also fire events when changed, so should 
				// only be touched after setting the local value above. 
				// TODO: for complete correctness, the "other" Changing event should also fire 
				//       before the local value is changed
				if (__oldValue != null)
				{
					// remove from old list
					(__oldValue.StudentExam as OneNRelationList<at.dasz.CourseOrganiser.StudentExam>).RemoveWithoutClearParent(this);
				}

                if (__newValue != null)
                {
					// add to new list
					(__newValue.StudentExam as OneNRelationList<at.dasz.CourseOrganiser.StudentExam>).AddWithoutSetParent(this);
                }
				// everything is done. fire the Changed event
				NotifyPropertyChanged("Student", __oldValue, __newValue);

                if(OnStudent_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<at.dasz.CourseOrganiser.Student>(__oldValue, __newValue);
					OnStudent_PostSetter(this, e);
                }
                
            }
        }
        
        // normalize namespace for Templates
        private at.dasz.CourseOrganiser.Student Student__Implementation__
        {
			get
			{
				return Student;
			}
			set
			{
				Student = value;
			}
		}
        
        private int? _fk_Student;
        private Guid? _fk_guid_Student = null;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for Student
		public static event PropertyGetterHandler<at.dasz.CourseOrganiser.StudentExam, at.dasz.CourseOrganiser.Student> OnStudent_Getter;
		public static event PropertyPreSetterHandler<at.dasz.CourseOrganiser.StudentExam, at.dasz.CourseOrganiser.Student> OnStudent_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.CourseOrganiser.StudentExam, at.dasz.CourseOrganiser.Student> OnStudent_PostSetter;

        public override Type GetImplementedInterface()
        {
            return typeof(StudentExam);
        }

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (StudentExam)obj;
			var otherImpl = (StudentExam__Implementation__Memory)obj;
			var me = (StudentExam)this;

			me.Score = other.Score;
			this._fk_Exam = otherImpl._fk_Exam;
			this._fk_Student = otherImpl._fk_Student;
		}

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
		}

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			// fix direct object references

			if (_fk_guid_Exam.HasValue)
				Exam__Implementation__ = (at.dasz.CourseOrganiser.Exam__Implementation__Memory)Context.FindPersistenceObject<at.dasz.CourseOrganiser.Exam>(_fk_guid_Exam.Value);
			else if (_fk_Exam.HasValue)
				Exam__Implementation__ = (at.dasz.CourseOrganiser.Exam__Implementation__Memory)Context.Find<at.dasz.CourseOrganiser.Exam>(_fk_Exam.Value);
			else
				Exam__Implementation__ = null;

			if (_fk_guid_Student.HasValue)
				Student__Implementation__ = (at.dasz.CourseOrganiser.Student__Implementation__Memory)Context.FindPersistenceObject<at.dasz.CourseOrganiser.Student>(_fk_guid_Student.Value);
			else if (_fk_Student.HasValue)
				Student__Implementation__ = (at.dasz.CourseOrganiser.Student__Implementation__Memory)Context.Find<at.dasz.CourseOrganiser.Student>(_fk_Student.Value);
			else
				Student__Implementation__ = null;
		}
        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_StudentExam")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_StudentExam != null)
            {
                OnToString_StudentExam(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<StudentExam> OnToString_StudentExam;

        [EventBasedMethod("OnPreSave_StudentExam")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_StudentExam != null) OnPreSave_StudentExam(this);
        }
        public static event ObjectEventHandler<StudentExam> OnPreSave_StudentExam;

        [EventBasedMethod("OnPostSave_StudentExam")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_StudentExam != null) OnPostSave_StudentExam(this);
        }
        public static event ObjectEventHandler<StudentExam> OnPostSave_StudentExam;

        [EventBasedMethod("OnCreated_StudentExam")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_StudentExam != null) OnCreated_StudentExam(this);
        }
        public static event ObjectEventHandler<StudentExam> OnCreated_StudentExam;

        [EventBasedMethod("OnDeleting_StudentExam")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_StudentExam != null) OnDeleting_StudentExam(this);
        }
        public static event ObjectEventHandler<StudentExam> OnDeleting_StudentExam;


		private static readonly object _propertiesLock = new object();
		private static System.ComponentModel.PropertyDescriptor[] _properties;
		
		private void _InitializePropertyDescriptors(Func<IReadOnlyKistlContext> lazyCtx)
		{
			if (_properties != null) return;
			lock (_propertiesLock)
			{
				// recheck for a lost race after aquiring the lock
				if (_properties != null) return;
				
				_properties = new System.ComponentModel.PropertyDescriptor[] {
					// else
					new CustomPropertyDescriptor<StudentExam__Implementation__Memory, at.dasz.CourseOrganiser.Exam>(
						lazyCtx,
						new Guid("4fe24a6b-6f71-4313-8b1e-6d1a96437abb"),
						"Exam",
						null,
						obj => obj.Exam,
						(obj, val) => obj.Exam = val),
					// else
					new CustomPropertyDescriptor<StudentExam__Implementation__Memory, int?>(
						lazyCtx,
						new Guid("b7e4ed77-9a3b-497f-9792-3e7341d9b960"),
						"Score",
						null,
						obj => obj.Score,
						(obj, val) => obj.Score = val),
					// else
					new CustomPropertyDescriptor<StudentExam__Implementation__Memory, at.dasz.CourseOrganiser.Student>(
						lazyCtx,
						new Guid("2fd40eb4-b358-4e7d-bf1e-4f49dd3e5efd"),
						"Student",
						null,
						obj => obj.Student,
						(obj, val) => obj.Student = val),
					// rel: StudentExam passes Exam (3e15530a-1753-4e97-9390-7235192a1a9e)
					// rel: StudentExam writtenby Student (da365b25-b8d4-43dd-91c7-f30cad09d600)
				};
			}
		}
		
		protected override void CollectProperties(Func<IReadOnlyKistlContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
		{
			base.CollectProperties(props);
			_InitializePropertyDescriptors(lazyCtx);
			props.AddRange(_properties);
		}
	

		public override void UpdateParent(string propertyName, int? id)
		{
			int? __oldValue, __newValue = id;
			
			switch(propertyName)
			{
                case "Exam":
                    __oldValue = _fk_Exam;
                    NotifyPropertyChanging("Exam", __oldValue, __newValue);
                    _fk_Exam = __newValue;
                    NotifyPropertyChanged("Exam", __oldValue, __newValue);
                    break;
                case "Student":
                    __oldValue = _fk_Student;
                    NotifyPropertyChanging("Student", __oldValue, __newValue);
                    _fk_Student = __newValue;
                    NotifyPropertyChanged("Student", __oldValue, __newValue);
                    break;
				default:
					base.UpdateParent(propertyName, id);
					break;
			}
		}

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._fk_Exam, binStream);
            BinarySerializer.ToStream(this._Score, binStream);
            BinarySerializer.ToStream(this._fk_Student, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_Exam, binStream);
            BinarySerializer.FromStream(out this._Score, binStream);
            BinarySerializer.FromStream(out this._fk_Student, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_Exam, xml, "Exam", "at.dasz.CourseOrganiser");
            XmlStreamer.ToStream(this._Score, xml, "Score", "at.dasz.CourseOrganiser");
            XmlStreamer.ToStream(this._fk_Student, xml, "Student", "at.dasz.CourseOrganiser");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_Exam, xml, "Exam", "at.dasz.CourseOrganiser");
            XmlStreamer.FromStream(ref this._Score, xml, "Score", "at.dasz.CourseOrganiser");
            XmlStreamer.FromStream(ref this._fk_Student, xml, "Student", "at.dasz.CourseOrganiser");
        }

#endregion

    }


}