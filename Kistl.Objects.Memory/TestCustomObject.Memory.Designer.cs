// <autogenerated/>

namespace Kistl.App.Test
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;
    using Kistl.DalProvider.Base.RelationWrappers;

    using Kistl.DalProvider.Base;
    using Kistl.DalProvider.Memory;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("TestCustomObject")]
    public class TestCustomObjectMemoryImpl : Kistl.DalProvider.Memory.DataObjectMemoryImpl, TestCustomObject
    {
        [Obsolete]
        public TestCustomObjectMemoryImpl()
            : base(null)
        {
            PhoneNumberMobileImpl = new Kistl.App.Test.TestPhoneCompoundObjectMemoryImpl(true, this, "PhoneNumberMobile");
            PhoneNumberOfficeImpl = new Kistl.App.Test.TestPhoneCompoundObjectMemoryImpl(false, this, "PhoneNumberOffice");
        }

        public TestCustomObjectMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
            PhoneNumberMobileImpl = new Kistl.App.Test.TestPhoneCompoundObjectMemoryImpl(true, this, "PhoneNumberMobile");
            PhoneNumberOfficeImpl = new Kistl.App.Test.TestPhoneCompoundObjectMemoryImpl(false, this, "PhoneNumberOffice");
        }

        /// <summary>
        /// Happy Birthday!
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime? Birthday
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(DateTime?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Birthday;
                if (OnBirthday_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnBirthday_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Birthday != value)
                {
                    var __oldValue = _Birthday;
                    var __newValue = value;
                    if (OnBirthday_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnBirthday_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Birthday", __oldValue, __newValue);
                    _Birthday = __newValue;
                    NotifyPropertyChanged("Birthday", __oldValue, __newValue);
                    if (OnBirthday_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnBirthday_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime? _Birthday;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Test.TestCustomObject, DateTime?> OnBirthday_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Test.TestCustomObject, DateTime?> OnBirthday_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Test.TestCustomObject, DateTime?> OnBirthday_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Test.TestCustomObject> OnBirthday_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // object list property
        // Kistl.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Test.Muhblah> MubBlah_List_Nav
        {
            get
            {
                if (_MubBlah_List_Nav == null)
                {
                    List<Kistl.App.Test.Muhblah> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
                        serverList = Context.GetListOf<Kistl.App.Test.Muhblah>(this, "MubBlah_List_Nav");
                    }
                    else
                    {
                        serverList = new List<Kistl.App.Test.Muhblah>();
                    }
    
                    _MubBlah_List_Nav = new OneNRelationList<Kistl.App.Test.Muhblah>(
                        "TestCustomObjects_Nav",
                        null,
                        this,
                        () => { this.NotifyPropertyChanged("MubBlah_List_Nav", null, null); if(OnMubBlah_List_Nav_PostSetter != null && IsAttached) OnMubBlah_List_Nav_PostSetter(this); },
                        serverList);
                }
                return _MubBlah_List_Nav;
            }
        }
    
        private OneNRelationList<Kistl.App.Test.Muhblah> _MubBlah_List_Nav;

public static event PropertyListChangedHandler<Kistl.App.Test.TestCustomObject> OnMubBlah_List_Nav_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Test.TestCustomObject> OnMubBlah_List_Nav_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for MubBlah_Nav
        // fkBackingName=_fk_MubBlah_Nav; fkGuidBackingName=_fk_guid_MubBlah_Nav;
        // referencedInterface=Kistl.App.Test.Muhblah; moduleNamespace=Kistl.App.Test;
        // inverse Navigator=TestCustomObjects_List_Nav; is list;
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.Test.Muhblah MubBlah_Nav
        {
            get { return MubBlah_NavImpl; }
            set { MubBlah_NavImpl = (Kistl.App.Test.MuhblahMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_MubBlah_Nav;


        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.Test.MuhblahMemoryImpl MubBlah_NavImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Test.MuhblahMemoryImpl __value;
                if (_fk_MubBlah_Nav.HasValue)
                    __value = (Kistl.App.Test.MuhblahMemoryImpl)Context.Find<Kistl.App.Test.Muhblah>(_fk_MubBlah_Nav.Value);
                else
                    __value = null;

                if (OnMubBlah_Nav_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Test.Muhblah>(__value);
                    OnMubBlah_Nav_Getter(this, e);
                    __value = (Kistl.App.Test.MuhblahMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_MubBlah_Nav == null)
                    return;
                else if (value != null && value.ID == _fk_MubBlah_Nav)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = MubBlah_NavImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("MubBlah_Nav", __oldValue, __newValue);

                if (OnMubBlah_Nav_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Test.Muhblah>(__oldValue, __newValue);
                    OnMubBlah_Nav_PreSetter(this, e);
                    __newValue = (Kistl.App.Test.MuhblahMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_MubBlah_Nav = __newValue == null ? (int?)null : __newValue.ID;

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.TestCustomObjects_List_Nav as IRelationListSync<Kistl.App.Test.TestCustomObject>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.TestCustomObjects_List_Nav as IRelationListSync<Kistl.App.Test.TestCustomObject>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("MubBlah_Nav", __oldValue, __newValue);

                if (OnMubBlah_Nav_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Test.Muhblah>(__oldValue, __newValue);
                    OnMubBlah_Nav_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for MubBlah_Nav
		public static event PropertyGetterHandler<Kistl.App.Test.TestCustomObject, Kistl.App.Test.Muhblah> OnMubBlah_Nav_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Test.TestCustomObject, Kistl.App.Test.Muhblah> OnMubBlah_Nav_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Test.TestCustomObject, Kistl.App.Test.Muhblah> OnMubBlah_Nav_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Test.TestCustomObject> OnMubBlah_Nav_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // collection entry list property
   		// Kistl.Generator.Templates.Properties.CollectionEntryListProperty
		public ICollection<Kistl.App.Test.Muhblah> MuhBlah_ManyList_Nav
		{
			get
			{
				if (_MuhBlah_ManyList_Nav == null)
				{
					Context.FetchRelation<Kistl.App.Test.Muhblah_has_TestCustomObject_RelationEntryMemoryImpl>(new Guid("d1e0da3e-ce64-4587-b62d-70c0f4371d97"), RelationEndRole.B, this);
					_MuhBlah_ManyList_Nav 
						= new ObservableASideCollectionWrapper<Kistl.App.Test.Muhblah, Kistl.App.Test.TestCustomObject, Kistl.App.Test.Muhblah_has_TestCustomObject_RelationEntryMemoryImpl, ICollection<Kistl.App.Test.Muhblah_has_TestCustomObject_RelationEntryMemoryImpl>>(
							this, 
							new RelationshipFilterBSideCollection<Kistl.App.Test.Muhblah_has_TestCustomObject_RelationEntryMemoryImpl>(this.Context, this));
				}
				return (ICollection<Kistl.App.Test.Muhblah>)_MuhBlah_ManyList_Nav;
			}
		}

		private ObservableASideCollectionWrapper<Kistl.App.Test.Muhblah, Kistl.App.Test.TestCustomObject, Kistl.App.Test.Muhblah_has_TestCustomObject_RelationEntryMemoryImpl, ICollection<Kistl.App.Test.Muhblah_has_TestCustomObject_RelationEntryMemoryImpl>> _MuhBlah_ManyList_Nav;

        public static event PropertyIsValidHandler<Kistl.App.Test.TestCustomObject> OnMuhBlah_ManyList_Nav_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for MuhBlah_One_Nav
        // fkBackingName=_fk_MuhBlah_One_Nav; fkGuidBackingName=_fk_guid_MuhBlah_One_Nav;
        // referencedInterface=Kistl.App.Test.Muhblah; moduleNamespace=Kistl.App.Test;
        // inverse Navigator=TestCustomObjects_One_Nav; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.Test.Muhblah MuhBlah_One_Nav
        {
            get { return MuhBlah_One_NavImpl; }
            set { MuhBlah_One_NavImpl = (Kistl.App.Test.MuhblahMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_MuhBlah_One_Nav;


        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.Test.MuhblahMemoryImpl MuhBlah_One_NavImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Test.MuhblahMemoryImpl __value;
                if (_fk_MuhBlah_One_Nav.HasValue)
                    __value = (Kistl.App.Test.MuhblahMemoryImpl)Context.Find<Kistl.App.Test.Muhblah>(_fk_MuhBlah_One_Nav.Value);
                else
                    __value = null;

                if (OnMuhBlah_One_Nav_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Test.Muhblah>(__value);
                    OnMuhBlah_One_Nav_Getter(this, e);
                    __value = (Kistl.App.Test.MuhblahMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_MuhBlah_One_Nav == null)
                    return;
                else if (value != null && value.ID == _fk_MuhBlah_One_Nav)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = MuhBlah_One_NavImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("MuhBlah_One_Nav", __oldValue, __newValue);

                if (OnMuhBlah_One_Nav_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Test.Muhblah>(__oldValue, __newValue);
                    OnMuhBlah_One_Nav_PreSetter(this, e);
                    __newValue = (Kistl.App.Test.MuhblahMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_MuhBlah_One_Nav = __newValue == null ? (int?)null : __newValue.ID;

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // unset old reference
                    __oldValue.TestCustomObjects_One_Nav = null;
                }

                if (__newValue != null)
                {
                    // set new reference
                    __newValue.TestCustomObjects_One_Nav = this;
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("MuhBlah_One_Nav", __oldValue, __newValue);

                if (OnMuhBlah_One_Nav_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Test.Muhblah>(__oldValue, __newValue);
                    OnMuhBlah_One_Nav_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for MuhBlah_One_Nav
		public static event PropertyGetterHandler<Kistl.App.Test.TestCustomObject, Kistl.App.Test.Muhblah> OnMuhBlah_One_Nav_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Test.TestCustomObject, Kistl.App.Test.Muhblah> OnMuhBlah_One_Nav_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Test.TestCustomObject, Kistl.App.Test.Muhblah> OnMuhBlah_One_Nav_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Test.TestCustomObject> OnMuhBlah_One_Nav_IsValid;

        /// <summary>
        /// Person&amp;apos;s Name
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public string PersonName
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _PersonName;
                if (OnPersonName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnPersonName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_PersonName != value)
                {
                    var __oldValue = _PersonName;
                    var __newValue = value;
                    if (OnPersonName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnPersonName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("PersonName", __oldValue, __newValue);
                    _PersonName = __newValue;
                    NotifyPropertyChanged("PersonName", __oldValue, __newValue);
                    if (OnPersonName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnPersonName_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _PersonName;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Test.TestCustomObject, string> OnPersonName_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Test.TestCustomObject, string> OnPersonName_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Test.TestCustomObject, string> OnPersonName_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Test.TestCustomObject> OnPersonName_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // CompoundObject property
        // BEGIN Kistl.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.Test.TestPhoneCompoundObject PhoneNumberMobile
        {
            get { return PhoneNumberMobileImpl; }
            set { PhoneNumberMobileImpl = (Kistl.App.Test.TestPhoneCompoundObjectMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        /// <summary>backing store for PhoneNumberMobile</summary>
        private Kistl.App.Test.TestPhoneCompoundObjectMemoryImpl _PhoneNumberMobile;

        /// <summary>backing property for PhoneNumberMobile, takes care of attaching/detaching the values</summary>
        public Kistl.App.Test.TestPhoneCompoundObjectMemoryImpl PhoneNumberMobileImpl
        {
            get 
			{ 
                if (!CurrentAccessRights.HasReadRights()) return null;
				return _PhoneNumberMobile; 
			}
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (!object.Equals(_PhoneNumberMobile, value))
                {
					var __oldValue = _PhoneNumberMobile;
					var __newValue = value;

					NotifyPropertyChanging("PhoneNumberMobile", __oldValue, __newValue);

					if (_PhoneNumberMobile != null)
					{ 
						_PhoneNumberMobile.DetachFromObject(this, "PhoneNumberMobile");
					}
					if (__newValue == null)
					{
						_PhoneNumberMobile = null;
					}
                    else
                    {
					    __newValue = (Kistl.App.Test.TestPhoneCompoundObjectMemoryImpl)__newValue.Clone();
					    _PhoneNumberMobile = __newValue;
					    _PhoneNumberMobile.AttachToObject(this, "PhoneNumberMobile");
                    }

					NotifyPropertyChanged("PhoneNumberMobile", __oldValue, __newValue);
				}
            }
        }
        // END Kistl.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        public static event PropertyIsValidHandler<Kistl.App.Test.TestCustomObject> OnPhoneNumberMobile_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // CompoundObject property
        // BEGIN Kistl.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.Test.TestPhoneCompoundObject PhoneNumberOffice
        {
            get { return PhoneNumberOfficeImpl; }
            set { PhoneNumberOfficeImpl = (Kistl.App.Test.TestPhoneCompoundObjectMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        /// <summary>backing store for PhoneNumberOffice</summary>
        private Kistl.App.Test.TestPhoneCompoundObjectMemoryImpl _PhoneNumberOffice;

        /// <summary>backing property for PhoneNumberOffice, takes care of attaching/detaching the values</summary>
        public Kistl.App.Test.TestPhoneCompoundObjectMemoryImpl PhoneNumberOfficeImpl
        {
            get 
			{ 
                if (!CurrentAccessRights.HasReadRights()) return null;
				return _PhoneNumberOffice; 
			}
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value == null)
                    throw new ArgumentNullException("value");
                if (!object.Equals(_PhoneNumberOffice, value))
                {
					var __oldValue = _PhoneNumberOffice;
					var __newValue = value;

					NotifyPropertyChanging("PhoneNumberOffice", __oldValue, __newValue);

					if (_PhoneNumberOffice != null)
					{ 
						_PhoneNumberOffice.DetachFromObject(this, "PhoneNumberOffice");
					}
					if (__newValue == null)
					{
						_PhoneNumberOffice = null;
					}
                    else
                    {
					    __newValue = (Kistl.App.Test.TestPhoneCompoundObjectMemoryImpl)__newValue.Clone();
					    _PhoneNumberOffice = __newValue;
					    _PhoneNumberOffice.AttachToObject(this, "PhoneNumberOffice");
                    }

					NotifyPropertyChanged("PhoneNumberOffice", __oldValue, __newValue);
				}
            }
        }
        // END Kistl.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        public static event PropertyIsValidHandler<Kistl.App.Test.TestCustomObject> OnPhoneNumberOffice_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // CompoundObject list property
		// Kistl.Generator.Templates.Properties.ValueCollectionProperty
		public ICollection<Kistl.App.Test.TestPhoneCompoundObject> PhoneNumbersOther
		{
			get
			{
				if (_PhoneNumbersOther == null)
				{
				    _PhoneNumbersOther 
				        = new ClientValueCollectionWrapper<TestCustomObject, Kistl.App.Test.TestPhoneCompoundObject, Kistl.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntry, Kistl.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryMemoryImpl, ObservableCollection<Kistl.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryMemoryImpl>>(
							this.Context,
				            this, 
				            () => { this.NotifyPropertyChanged("PhoneNumbersOther", null, null); if(OnPhoneNumbersOther_PostSetter != null && IsAttached) OnPhoneNumbersOther_PostSetter(this); },
				            _PhoneNumbersOtherCollection);
				}
				return _PhoneNumbersOther;
			}
		}

		private ClientValueCollectionWrapper<TestCustomObject, Kistl.App.Test.TestPhoneCompoundObject, Kistl.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntry, Kistl.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryMemoryImpl, ObservableCollection<Kistl.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryMemoryImpl>> _PhoneNumbersOther;
		private ObservableCollection<Kistl.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryMemoryImpl> _PhoneNumbersOtherCollection = new ObservableCollection<Kistl.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryMemoryImpl>();
public static event PropertyListChangedHandler<Kistl.App.Test.TestCustomObject> OnPhoneNumbersOther_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Test.TestCustomObject> OnPhoneNumbersOther_IsValid;

        public override Type GetImplementedInterface()
        {
            return typeof(TestCustomObject);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (TestCustomObject)obj;
            var otherImpl = (TestCustomObjectMemoryImpl)obj;
            var me = (TestCustomObject)this;

            me.Birthday = other.Birthday;
            me.PersonName = other.PersonName;
            if (me.PhoneNumberMobile == null && other.PhoneNumberMobile != null) {
                me.PhoneNumberMobile = (Kistl.App.Test.TestPhoneCompoundObject)other.PhoneNumberMobile.Clone();
            } else if (me.PhoneNumberMobile != null && other.PhoneNumberMobile == null) {
                me.PhoneNumberMobile = null;
            } else if (me.PhoneNumberMobile != null && other.PhoneNumberMobile != null) {
                me.PhoneNumberMobile.ApplyChangesFrom(other.PhoneNumberMobile);
            }
            if (me.PhoneNumberOffice == null && other.PhoneNumberOffice != null) {
                me.PhoneNumberOffice = (Kistl.App.Test.TestPhoneCompoundObject)other.PhoneNumberOffice.Clone();
            } else if (me.PhoneNumberOffice != null && other.PhoneNumberOffice == null) {
                me.PhoneNumberOffice = null;
            } else if (me.PhoneNumberOffice != null && other.PhoneNumberOffice != null) {
                me.PhoneNumberOffice.ApplyChangesFrom(other.PhoneNumberOffice);
            }
            SynchronizeCollections(this._PhoneNumbersOtherCollection, otherImpl._PhoneNumbersOtherCollection);
            this._fk_MubBlah_Nav = otherImpl._fk_MubBlah_Nav;
            this._fk_MuhBlah_One_Nav = otherImpl._fk_MuhBlah_One_Nav;
        }

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
            if (_PhoneNumbersOtherCollection != null)
                _PhoneNumbersOtherCollection.ForEach<IPersistenceObject>(i => ctx.Attach(i));
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "MubBlah_Nav":
                    {
                        var __oldValue = _fk_MubBlah_Nav;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("MubBlah_Nav", __oldValue, __newValue);
                        _fk_MubBlah_Nav = __newValue;
                        NotifyPropertyChanged("MubBlah_Nav", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_MubBlah_Nav.HasValue)
                MubBlah_NavImpl = (Kistl.App.Test.MuhblahMemoryImpl)Context.Find<Kistl.App.Test.Muhblah>(_fk_MubBlah_Nav.Value);
            else
                MubBlah_NavImpl = null;

            if (_fk_MuhBlah_One_Nav.HasValue)
                MuhBlah_One_NavImpl = (Kistl.App.Test.MuhblahMemoryImpl)Context.Find<Kistl.App.Test.Muhblah>(_fk_MuhBlah_One_Nav.Value);
            else
                MuhBlah_One_NavImpl = null;
        }
        #region Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorMemoryImpl<TestCustomObject, DateTime?>(
                        lazyCtx,
                        new Guid("bdcf86b8-4c47-4c50-b340-d9323344c7f0"),
                        "Birthday",
                        null,
                        obj => obj.Birthday,
                        (obj, val) => obj.Birthday = val,
						obj => OnBirthday_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<TestCustomObject, ICollection<Kistl.App.Test.Muhblah>>(
                        lazyCtx,
                        new Guid("4a929ef5-f211-47b4-92c3-4961da6d5173"),
                        "MubBlah_List_Nav",
                        null,
                        obj => obj.MubBlah_List_Nav,
                        null, // lists are read-only properties
                        obj => OnMubBlah_List_Nav_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<TestCustomObject, Kistl.App.Test.Muhblah>(
                        lazyCtx,
                        new Guid("3251497d-5214-4e42-976e-f36c3d9541de"),
                        "MubBlah_Nav",
                        null,
                        obj => obj.MubBlah_Nav,
                        (obj, val) => obj.MubBlah_Nav = val,
						obj => OnMubBlah_Nav_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<TestCustomObject, ICollection<Kistl.App.Test.Muhblah>>(
                        lazyCtx,
                        new Guid("9c4217f2-47d8-47b5-a324-7601ecabc7b0"),
                        "MuhBlah_ManyList_Nav",
                        null,
                        obj => obj.MuhBlah_ManyList_Nav,
                        null, // lists are read-only properties
                        obj => OnMuhBlah_ManyList_Nav_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<TestCustomObject, Kistl.App.Test.Muhblah>(
                        lazyCtx,
                        new Guid("e7b207d3-5d25-4716-85b3-564f10eac210"),
                        "MuhBlah_One_Nav",
                        null,
                        obj => obj.MuhBlah_One_Nav,
                        (obj, val) => obj.MuhBlah_One_Nav = val,
						obj => OnMuhBlah_One_Nav_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<TestCustomObject, string>(
                        lazyCtx,
                        new Guid("bd501a1f-a0a3-4ddf-b6c2-8fdc9ffdfabd"),
                        "PersonName",
                        null,
                        obj => obj.PersonName,
                        (obj, val) => obj.PersonName = val,
						obj => OnPersonName_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<TestCustomObject, Kistl.App.Test.TestPhoneCompoundObject>(
                        lazyCtx,
                        new Guid("05e41070-e88a-4270-ab1c-94cd2e7d41d1"),
                        "PhoneNumberMobile",
                        null,
                        obj => obj.PhoneNumberMobile,
                        (obj, val) => obj.PhoneNumberMobile = val,
						obj => OnPhoneNumberMobile_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<TestCustomObject, Kistl.App.Test.TestPhoneCompoundObject>(
                        lazyCtx,
                        new Guid("465e10ec-4e5e-4e8f-831f-44562dd0d68b"),
                        "PhoneNumberOffice",
                        null,
                        obj => obj.PhoneNumberOffice,
                        (obj, val) => obj.PhoneNumberOffice = val,
						obj => OnPhoneNumberOffice_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<TestCustomObject, ICollection<Kistl.App.Test.TestPhoneCompoundObject>>(
                        lazyCtx,
                        new Guid("0c0c1101-118a-4ce2-806c-d30a03b19dde"),
                        "PhoneNumbersOther",
                        null,
                        obj => obj.PhoneNumbersOther,
                        null, // lists are read-only properties
                        obj => OnPhoneNumbersOther_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_TestCustomObject")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_TestCustomObject != null)
            {
                OnToString_TestCustomObject(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<TestCustomObject> OnToString_TestCustomObject;

		[System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_TestCustomObject")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
			var b = base.ObjectIsValid();
            e.IsValid = b.IsValid;
			e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_TestCustomObject != null)
            {
                OnObjectIsValid_TestCustomObject(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<TestCustomObject> OnObjectIsValid_TestCustomObject;

        [EventBasedMethod("OnNotifyPreSave_TestCustomObject")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_TestCustomObject != null) OnNotifyPreSave_TestCustomObject(this);
        }
        public static event ObjectEventHandler<TestCustomObject> OnNotifyPreSave_TestCustomObject;

        [EventBasedMethod("OnNotifyPostSave_TestCustomObject")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_TestCustomObject != null) OnNotifyPostSave_TestCustomObject(this);
        }
        public static event ObjectEventHandler<TestCustomObject> OnNotifyPostSave_TestCustomObject;

        [EventBasedMethod("OnNotifyCreated_TestCustomObject")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("Birthday");
            SetNotInitializedProperty("MubBlah_Nav");
            SetNotInitializedProperty("MuhBlah_One_Nav");
            SetNotInitializedProperty("PersonName");
            SetNotInitializedProperty("PhoneNumberMobile");
            SetNotInitializedProperty("PhoneNumberOffice");
            base.NotifyCreated();
            if (OnNotifyCreated_TestCustomObject != null) OnNotifyCreated_TestCustomObject(this);
        }
        public static event ObjectEventHandler<TestCustomObject> OnNotifyCreated_TestCustomObject;

        [EventBasedMethod("OnNotifyDeleting_TestCustomObject")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_TestCustomObject != null) OnNotifyDeleting_TestCustomObject(this);
        }
        public static event ObjectEventHandler<TestCustomObject> OnNotifyDeleting_TestCustomObject;

        #endregion // Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this._Birthday, binStream);
            BinarySerializer.ToStream(MubBlah_Nav != null ? MubBlah_Nav.ID : (int?)null, binStream);
            BinarySerializer.ToStream(MuhBlah_One_Nav != null ? MuhBlah_One_Nav.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._PersonName, binStream);
			BinarySerializer.ToStream(this.PhoneNumberMobile, binStream);
			BinarySerializer.ToStream(this.PhoneNumberOffice, binStream);
            BinarySerializer.ToStreamCollectionEntries(this._PhoneNumbersOtherCollection, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._Birthday, binStream);
            BinarySerializer.FromStream(out this._fk_MubBlah_Nav, binStream);
            BinarySerializer.FromStream(out this._fk_MuhBlah_One_Nav, binStream);
            BinarySerializer.FromStream(out this._PersonName, binStream);
			{
                // use backing store to avoid notifications
				Kistl.App.Test.TestPhoneCompoundObjectMemoryImpl tmp;
				BinarySerializer.FromStream(out tmp, binStream);
	            this.PhoneNumberMobileImpl = tmp;
                if (this.PhoneNumberMobileImpl != null)
                    this.PhoneNumberMobileImpl.AttachToObject(this, "PhoneNumberMobile");
	        }
			{
                // use backing store to avoid notifications
				Kistl.App.Test.TestPhoneCompoundObjectMemoryImpl tmp;
				BinarySerializer.FromStream(out tmp, binStream);
	            this.PhoneNumberOfficeImpl = tmp;
                if (this.PhoneNumberOfficeImpl != null)
                    this.PhoneNumberOfficeImpl.AttachToObject(this, "PhoneNumberOffice");
	        }
            BinarySerializer.FromStreamCollectionEntries(this, this._PhoneNumbersOtherCollection, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this._Birthday, xml, "Birthday", "Kistl.App.Test");
            XmlStreamer.ToStream(MubBlah_Nav != null ? MubBlah_Nav.ID : (int?)null, xml, "MubBlah_Nav", "Kistl.App.Test");
            XmlStreamer.ToStream(MuhBlah_One_Nav != null ? MuhBlah_One_Nav.ID : (int?)null, xml, "MuhBlah_One_Nav", "Kistl.App.Test");
            XmlStreamer.ToStream(this._PersonName, xml, "PersonName", "Kistl.App.Test");
			// TODO: Add XML Serializer here
			// TODO: Add XML Serializer here
            XmlStreamer.ToStreamCollectionEntries(this._PhoneNumbersOtherCollection, xml, "PhoneNumbersOther", "Kistl.App.Test");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._Birthday, xml, "Birthday", "Kistl.App.Test");
            XmlStreamer.FromStream(ref this._fk_MubBlah_Nav, xml, "MubBlah_Nav", "Kistl.App.Test");
            XmlStreamer.FromStream(ref this._fk_MuhBlah_One_Nav, xml, "MuhBlah_One_Nav", "Kistl.App.Test");
            XmlStreamer.FromStream(ref this._PersonName, xml, "PersonName", "Kistl.App.Test");
            // TODO: Add XML Serializer here
            // TODO: Add XML Serializer here
            XmlStreamer.FromStreamCollectionEntries(this, this._PhoneNumbersOtherCollection, xml, "PhoneNumbersOther", "Kistl.App.Test");
            result.AddRange(this._PhoneNumbersOtherCollection.Cast<IPersistenceObject>());
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

    }
}