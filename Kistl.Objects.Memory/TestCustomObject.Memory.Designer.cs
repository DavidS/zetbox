// <autogenerated/>


namespace Kistl.App.Test
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.DalProvider.Memory;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("TestCustomObject")]
    public class TestCustomObject__Implementation__Memory : BaseMemoryDataObject, TestCustomObject
    {
        [Obsolete]
        public TestCustomObject__Implementation__Memory()
            : base(null)
        {
            {
                PhoneNumberOffice__Implementation__Memory = new Kistl.App.Test.TestPhoneCompoundObject__Implementation__Memory(this, "PhoneNumberOffice");
            }
        }

        public TestCustomObject__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
            : base(lazyCtx)
        {
            {
                PhoneNumberOffice__Implementation__Memory = new Kistl.App.Test.TestPhoneCompoundObject__Implementation__Memory(this, "PhoneNumberOffice");
            }
        }


        /// <summary>
        /// Happy Birthday!
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual DateTime? Birthday
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Birthday;
                if (OnBirthday_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnBirthday_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Birthday != value)
                {
                    var __oldValue = _Birthday;
                    var __newValue = value;
                    if(OnBirthday_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnBirthday_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Birthday", __oldValue, __newValue);
                    _Birthday = __newValue;
                    NotifyPropertyChanged("Birthday", __oldValue, __newValue);
                    if(OnBirthday_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnBirthday_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime? _Birthday;
		public static event PropertyGetterHandler<Kistl.App.Test.TestCustomObject, DateTime?> OnBirthday_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Test.TestCustomObject, DateTime?> OnBirthday_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Test.TestCustomObject, DateTime?> OnBirthday_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // object list property
        // ApplyObjectListPropertyTemplate
		// Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Test.Muhblah> MubBlah_List_Nav
        {
            get
            {
                if (_MubBlah_List_NavWrapper == null)
                {
                    List<Kistl.App.Test.Muhblah> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
						serverList = Context.GetListOf<Kistl.App.Test.Muhblah>(this, "MubBlah_List_Nav");
					}
                    else
                    {
                        serverList = new List<Kistl.App.Test.Muhblah>();
                    }
                        
                    _MubBlah_List_NavWrapper = new OneNRelationList<Kistl.App.Test.Muhblah>(
                        "TestCustomObjects_Nav",
                        null,
                        this,
                        () => this.NotifyPropertyChanged("MubBlah_List_Nav", null, null),
                        serverList);
                }
                return _MubBlah_List_NavWrapper;
            }
        }
        
        private OneNRelationList<Kistl.App.Test.Muhblah> _MubBlah_List_NavWrapper;


        /// <summary>
        /// 
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for MubBlah_Nav
		// rel(B): MuhBlah_Role has TestCustomObjects_List_Role
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.Muhblah MubBlah_Nav
        {
            get
            {
				Kistl.App.Test.Muhblah __value;
                if (_fk_MubBlah_Nav.HasValue)
                    __value = Context.Find<Kistl.App.Test.Muhblah>(_fk_MubBlah_Nav.Value);
                else
                    __value = null;

				if(OnMubBlah_Nav_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Test.Muhblah>(__value);
					OnMubBlah_Nav_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_MubBlah_Nav == null)
					return;
                else if (value != null && value.ID == _fk_MubBlah_Nav)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = MubBlah_Nav;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("MubBlah_Nav", __oldValue, __newValue);
				
                if(OnMubBlah_Nav_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Test.Muhblah>(__oldValue, __newValue);
					OnMubBlah_Nav_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_MubBlah_Nav = __newValue == null ? (int?)null : __newValue.ID;
				
				// now fixup redundant, inverse references
				// The inverse navigator will also fire events when changed, so should 
				// only be touched after setting the local value above. 
				// TODO: for complete correctness, the "other" Changing event should also fire 
				//       before the local value is changed
				if (__oldValue != null)
				{
					// remove from old list
					(__oldValue.TestCustomObjects_List_Nav as OneNRelationList<Kistl.App.Test.TestCustomObject>).RemoveWithoutClearParent(this);
				}

                if (__newValue != null)
                {
					// add to new list
					(__newValue.TestCustomObjects_List_Nav as OneNRelationList<Kistl.App.Test.TestCustomObject>).AddWithoutSetParent(this);
                }
				// everything is done. fire the Changed event
				NotifyPropertyChanged("MubBlah_Nav", __oldValue, __newValue);

                if(OnMubBlah_Nav_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Test.Muhblah>(__oldValue, __newValue);
					OnMubBlah_Nav_PostSetter(this, e);
                }
                
            }
        }
        
        // normalize namespace for Templates
        private Kistl.App.Test.Muhblah MubBlah_Nav__Implementation__
        {
			get
			{
				return MubBlah_Nav;
			}
			set
			{
				MubBlah_Nav = value;
			}
		}
        
        private int? _fk_MubBlah_Nav;
        private Guid? _fk_guid_MubBlah_Nav = null;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for MubBlah_Nav
		public static event PropertyGetterHandler<Kistl.App.Test.TestCustomObject, Kistl.App.Test.Muhblah> OnMubBlah_Nav_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Test.TestCustomObject, Kistl.App.Test.Muhblah> OnMubBlah_Nav_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Test.TestCustomObject, Kistl.App.Test.Muhblah> OnMubBlah_Nav_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // collection reference property
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.CollectionEntryListProperty
		public ICollection<Kistl.App.Test.Muhblah> MuhBlah_ManyList_Nav
		{
			get
			{
				if (_MuhBlah_ManyList_Nav == null)
				{
					Context.FetchRelation<Muhblah_has_TestCustomObject_RelationEntry__Implementation__Memory>(new Guid("d1e0da3e-ce64-4587-b62d-70c0f4371d97"), RelationEndRole.B, this);
					_MuhBlah_ManyList_Nav 
						= new ClientRelationASideCollectionWrapper<Kistl.App.Test.Muhblah, Kistl.App.Test.TestCustomObject, Muhblah_has_TestCustomObject_RelationEntry__Implementation__Memory>(
							this, 
							new RelationshipFilterBSideCollection<Muhblah_has_TestCustomObject_RelationEntry__Implementation__Memory>(this.Context, this));
				}
				return _MuhBlah_ManyList_Nav;
			}
		}

		private ClientRelationASideCollectionWrapper<Kistl.App.Test.Muhblah, Kistl.App.Test.TestCustomObject, Muhblah_has_TestCustomObject_RelationEntry__Implementation__Memory> _MuhBlah_ManyList_Nav;

        /// <summary>
        /// 
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for MuhBlah_One_Nav
		// rel(B): MuhBlah_One_Role loves TestCustomObjects_One_Role
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.Muhblah MuhBlah_One_Nav
        {
            get
            {
				Kistl.App.Test.Muhblah __value;
                if (_fk_MuhBlah_One_Nav.HasValue)
                    __value = Context.Find<Kistl.App.Test.Muhblah>(_fk_MuhBlah_One_Nav.Value);
                else
                    __value = null;

				if(OnMuhBlah_One_Nav_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Test.Muhblah>(__value);
					OnMuhBlah_One_Nav_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_MuhBlah_One_Nav == null)
					return;
                else if (value != null && value.ID == _fk_MuhBlah_One_Nav)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = MuhBlah_One_Nav;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("MuhBlah_One_Nav", __oldValue, __newValue);
				
                if(OnMuhBlah_One_Nav_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Test.Muhblah>(__oldValue, __newValue);
					OnMuhBlah_One_Nav_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_MuhBlah_One_Nav = __newValue == null ? (int?)null : __newValue.ID;
				
				// now fixup redundant, inverse references
				// The inverse navigator will also fire events when changed, so should 
				// only be touched after setting the local value above. 
				// TODO: for complete correctness, the "other" Changing event should also fire 
				//       before the local value is changed
				if (__oldValue != null)
				{
					// unset old reference
					__oldValue.TestCustomObjects_One_Nav = null;
				}

                if (__newValue != null)
                {
					// set new reference
                    __newValue.TestCustomObjects_One_Nav = this;
                }
				// everything is done. fire the Changed event
				NotifyPropertyChanged("MuhBlah_One_Nav", __oldValue, __newValue);

                if(OnMuhBlah_One_Nav_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Test.Muhblah>(__oldValue, __newValue);
					OnMuhBlah_One_Nav_PostSetter(this, e);
                }
                
            }
        }
        
        // normalize namespace for Templates
        private Kistl.App.Test.Muhblah MuhBlah_One_Nav__Implementation__
        {
			get
			{
				return MuhBlah_One_Nav;
			}
			set
			{
				MuhBlah_One_Nav = value;
			}
		}
        
        private int? _fk_MuhBlah_One_Nav;
        private Guid? _fk_guid_MuhBlah_One_Nav = null;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for MuhBlah_One_Nav
		public static event PropertyGetterHandler<Kistl.App.Test.TestCustomObject, Kistl.App.Test.Muhblah> OnMuhBlah_One_Nav_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Test.TestCustomObject, Kistl.App.Test.Muhblah> OnMuhBlah_One_Nav_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Test.TestCustomObject, Kistl.App.Test.Muhblah> OnMuhBlah_One_Nav_PostSetter;

        /// <summary>
        /// Person&apos;s Name
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string PersonName
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _PersonName;
                if (OnPersonName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnPersonName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_PersonName != value)
                {
                    var __oldValue = _PersonName;
                    var __newValue = value;
                    if(OnPersonName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnPersonName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("PersonName", __oldValue, __newValue);
                    _PersonName = __newValue;
                    NotifyPropertyChanged("PersonName", __oldValue, __newValue);
                    if(OnPersonName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnPersonName_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _PersonName;
		public static event PropertyGetterHandler<Kistl.App.Test.TestCustomObject, string> OnPersonName_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Test.TestCustomObject, string> OnPersonName_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Test.TestCustomObject, string> OnPersonName_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // CompoundObject property
		// Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        public Kistl.App.Test.TestPhoneCompoundObject PhoneNumberMobile
        {
            get { return PhoneNumberMobile__Implementation__Memory; }
            set { PhoneNumberMobile__Implementation__Memory = (Kistl.App.Test.TestPhoneCompoundObject__Implementation__Memory)value; }
        }
        
        /// <summary>backing store for PhoneNumberMobile</summary>
        private Kistl.App.Test.TestPhoneCompoundObject__Implementation__Memory _PhoneNumberMobileStore;
        
        /// <summary>backing property for PhoneNumberMobile, takes care of attaching/detaching the values</summary>
        private Kistl.App.Test.TestPhoneCompoundObject__Implementation__Memory PhoneNumberMobile__Implementation__Memory {
            get { return _PhoneNumberMobileStore; }
            set {
                var __oldValue = _PhoneNumberMobileStore;
                var __newValue = value;

                NotifyPropertyChanging("PhoneNumberMobile", __oldValue, __newValue);
                
				if (_PhoneNumberMobileStore != null) _PhoneNumberMobileStore.DetachFromObject(this, "PhoneNumberMobile");
                _PhoneNumberMobileStore = value != null ? (Kistl.App.Test.TestPhoneCompoundObject__Implementation__Memory)value.Clone() : null;
				if (_PhoneNumberMobileStore != null) _PhoneNumberMobileStore.AttachToObject(this, "PhoneNumberMobile");

                NotifyPropertyChanged("PhoneNumberMobile", __oldValue, __newValue);
            }
		}
  
        /// <summary>
        /// 
        /// </summary>
        // CompoundObject property
		// Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        public Kistl.App.Test.TestPhoneCompoundObject PhoneNumberOffice
        {
            get { return PhoneNumberOffice__Implementation__Memory; }
            set { PhoneNumberOffice__Implementation__Memory = (Kistl.App.Test.TestPhoneCompoundObject__Implementation__Memory)value; }
        }
        
        /// <summary>backing store for PhoneNumberOffice</summary>
        private Kistl.App.Test.TestPhoneCompoundObject__Implementation__Memory _PhoneNumberOfficeStore;
        
        /// <summary>backing property for PhoneNumberOffice, takes care of attaching/detaching the values</summary>
        private Kistl.App.Test.TestPhoneCompoundObject__Implementation__Memory PhoneNumberOffice__Implementation__Memory {
            get { return _PhoneNumberOfficeStore; }
            set {
				            
                if (value == null)
					throw new ArgumentNullException("value");
                var __oldValue = _PhoneNumberOfficeStore;
                var __newValue = value;

                NotifyPropertyChanging("PhoneNumberOffice", __oldValue, __newValue);
                
				if (_PhoneNumberOfficeStore != null) _PhoneNumberOfficeStore.DetachFromObject(this, "PhoneNumberOffice");
                _PhoneNumberOfficeStore = value != null ? (Kistl.App.Test.TestPhoneCompoundObject__Implementation__Memory)value.Clone() : null;
				if (_PhoneNumberOfficeStore != null) _PhoneNumberOfficeStore.AttachToObject(this, "PhoneNumberOffice");

                NotifyPropertyChanged("PhoneNumberOffice", __oldValue, __newValue);
            }
		}
  
        /// <summary>
        /// 
        /// </summary>
        // CompoundObject list property
		// Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ValueCollectionProperty
		public ICollection<Kistl.App.Test.TestPhoneCompoundObject> PhoneNumbersOther
		{
			get
			{
				if (_PhoneNumbersOtherWrapper == null)
				{
				    _PhoneNumbersOtherWrapper 
				        = new ClientValueCollectionWrapper<TestCustomObject, Kistl.App.Test.TestPhoneCompoundObject, TestCustomObject_PhoneNumbersOther_CollectionEntry__Implementation__Memory, IList<TestCustomObject_PhoneNumbersOther_CollectionEntry__Implementation__Memory>>(
							this.Context,
				            this, 
				            // () => this.NotifyPropertyChanged("PhoneNumbersOther", null, null),
				            _PhoneNumbersOther);
				}
				return _PhoneNumbersOtherWrapper;
			}
		}

		private ClientValueCollectionWrapper<TestCustomObject, Kistl.App.Test.TestPhoneCompoundObject, TestCustomObject_PhoneNumbersOther_CollectionEntry__Implementation__Memory, IList<TestCustomObject_PhoneNumbersOther_CollectionEntry__Implementation__Memory>> _PhoneNumbersOtherWrapper;
		private IList<TestCustomObject_PhoneNumbersOther_CollectionEntry__Implementation__Memory> _PhoneNumbersOther = new List<TestCustomObject_PhoneNumbersOther_CollectionEntry__Implementation__Memory>();

        public override Type GetImplementedInterface()
        {
            return typeof(TestCustomObject);
        }

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (TestCustomObject)obj;
			var otherImpl = (TestCustomObject__Implementation__Memory)obj;
			var me = (TestCustomObject)this;

			me.Birthday = other.Birthday;
			me.PersonName = other.PersonName;
			me.PhoneNumberMobile = other.PhoneNumberMobile != null ? (Kistl.App.Test.TestPhoneCompoundObject)other.PhoneNumberMobile.Clone() : null;
			me.PhoneNumberOffice = other.PhoneNumberOffice != null ? (Kistl.App.Test.TestPhoneCompoundObject)other.PhoneNumberOffice.Clone() : null;
			this._fk_MubBlah_Nav = otherImpl._fk_MubBlah_Nav;
			this._fk_MuhBlah_One_Nav = otherImpl._fk_MuhBlah_One_Nav;
		}

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
			_PhoneNumbersOther.ForEach<IValueCollectionEntry>(i => ctx.Attach(i));
		}

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
			// fix direct object references

			if (_fk_guid_MubBlah_Nav.HasValue)
				MubBlah_Nav__Implementation__ = (Kistl.App.Test.Muhblah__Implementation__Memory)Context.FindPersistenceObject<Kistl.App.Test.Muhblah>(_fk_guid_MubBlah_Nav.Value);
			else if (_fk_MubBlah_Nav.HasValue)
				MubBlah_Nav__Implementation__ = (Kistl.App.Test.Muhblah__Implementation__Memory)Context.Find<Kistl.App.Test.Muhblah>(_fk_MubBlah_Nav.Value);
			else
				MubBlah_Nav__Implementation__ = null;

			if (_fk_guid_MuhBlah_One_Nav.HasValue)
				MuhBlah_One_Nav__Implementation__ = (Kistl.App.Test.Muhblah__Implementation__Memory)Context.FindPersistenceObject<Kistl.App.Test.Muhblah>(_fk_guid_MuhBlah_One_Nav.Value);
			else if (_fk_MuhBlah_One_Nav.HasValue)
				MuhBlah_One_Nav__Implementation__ = (Kistl.App.Test.Muhblah__Implementation__Memory)Context.Find<Kistl.App.Test.Muhblah>(_fk_MuhBlah_One_Nav.Value);
			else
				MuhBlah_One_Nav__Implementation__ = null;
		}
        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_TestCustomObject")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_TestCustomObject != null)
            {
                OnToString_TestCustomObject(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<TestCustomObject> OnToString_TestCustomObject;

        [EventBasedMethod("OnPreSave_TestCustomObject")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_TestCustomObject != null) OnPreSave_TestCustomObject(this);
        }
        public static event ObjectEventHandler<TestCustomObject> OnPreSave_TestCustomObject;

        [EventBasedMethod("OnPostSave_TestCustomObject")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_TestCustomObject != null) OnPostSave_TestCustomObject(this);
        }
        public static event ObjectEventHandler<TestCustomObject> OnPostSave_TestCustomObject;

        [EventBasedMethod("OnCreated_TestCustomObject")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_TestCustomObject != null) OnCreated_TestCustomObject(this);
        }
        public static event ObjectEventHandler<TestCustomObject> OnCreated_TestCustomObject;

        [EventBasedMethod("OnDeleting_TestCustomObject")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_TestCustomObject != null) OnDeleting_TestCustomObject(this);
        }
        public static event ObjectEventHandler<TestCustomObject> OnDeleting_TestCustomObject;


		private static readonly object _propertiesLock = new object();
		private static System.ComponentModel.PropertyDescriptor[] _properties;
		
		private void _InitializePropertyDescriptors(Func<IReadOnlyKistlContext> lazyCtx)
		{
			if (_properties != null) return;
			lock (_propertiesLock)
			{
				// recheck for a lost race after aquiring the lock
				if (_properties != null) return;
				
				_properties = new System.ComponentModel.PropertyDescriptor[] {
					// else
					new CustomPropertyDescriptor<TestCustomObject__Implementation__Memory, DateTime?>(
						lazyCtx,
						new Guid("bdcf86b8-4c47-4c50-b340-d9323344c7f0"),
						"Birthday",
						null,
						obj => obj.Birthday,
						(obj, val) => obj.Birthday = val),
					// property.IsAssociation() && !property.IsObjectReferencePropertySingle()
					new CustomPropertyDescriptor<TestCustomObject__Implementation__Memory, ICollection<Kistl.App.Test.Muhblah>>(
						lazyCtx,
						new Guid("4a929ef5-f211-47b4-92c3-4961da6d5173"),
						"MubBlah_List_Nav",
						null,
						obj => obj.MubBlah_List_Nav,
						null), // lists are read-only properties
					// else
					new CustomPropertyDescriptor<TestCustomObject__Implementation__Memory, Kistl.App.Test.Muhblah>(
						lazyCtx,
						new Guid("3251497d-5214-4e42-976e-f36c3d9541de"),
						"MubBlah_Nav",
						null,
						obj => obj.MubBlah_Nav,
						(obj, val) => obj.MubBlah_Nav = val),
					// property.IsAssociation() && !property.IsObjectReferencePropertySingle()
					new CustomPropertyDescriptor<TestCustomObject__Implementation__Memory, ICollection<Kistl.App.Test.Muhblah>>(
						lazyCtx,
						new Guid("9c4217f2-47d8-47b5-a324-7601ecabc7b0"),
						"MuhBlah_ManyList_Nav",
						null,
						obj => obj.MuhBlah_ManyList_Nav,
						null), // lists are read-only properties
					// else
					new CustomPropertyDescriptor<TestCustomObject__Implementation__Memory, Kistl.App.Test.Muhblah>(
						lazyCtx,
						new Guid("e7b207d3-5d25-4716-85b3-564f10eac210"),
						"MuhBlah_One_Nav",
						null,
						obj => obj.MuhBlah_One_Nav,
						(obj, val) => obj.MuhBlah_One_Nav = val),
					// else
					new CustomPropertyDescriptor<TestCustomObject__Implementation__Memory, string>(
						lazyCtx,
						new Guid("bd501a1f-a0a3-4ddf-b6c2-8fdc9ffdfabd"),
						"PersonName",
						null,
						obj => obj.PersonName,
						(obj, val) => obj.PersonName = val),
					// else
					new CustomPropertyDescriptor<TestCustomObject__Implementation__Memory, Kistl.App.Test.TestPhoneCompoundObject>(
						lazyCtx,
						new Guid("05e41070-e88a-4270-ab1c-94cd2e7d41d1"),
						"PhoneNumberMobile",
						null,
						obj => obj.PhoneNumberMobile,
						(obj, val) => obj.PhoneNumberMobile = val),
					// else
					new CustomPropertyDescriptor<TestCustomObject__Implementation__Memory, Kistl.App.Test.TestPhoneCompoundObject>(
						lazyCtx,
						new Guid("465e10ec-4e5e-4e8f-831f-44562dd0d68b"),
						"PhoneNumberOffice",
						null,
						obj => obj.PhoneNumberOffice,
						(obj, val) => obj.PhoneNumberOffice = val),
					// property.IsAssociation() && !property.IsObjectReferencePropertySingle()
					new CustomPropertyDescriptor<TestCustomObject__Implementation__Memory, ICollection<Kistl.App.Test.TestPhoneCompoundObject>>(
						lazyCtx,
						new Guid("0c0c1101-118a-4ce2-806c-d30a03b19dde"),
						"PhoneNumbersOther",
						null,
						obj => obj.PhoneNumbersOther,
						null), // lists are read-only properties
					// rel: MuhBlah_Role has TestCustomObjects_List_Role (bd379747-6864-4c4e-95a8-319ff917fd60)
					// rel: MuhBlah_List_Role hasOther TestCustomObjects_Role (804f4d1e-ca7d-45e2-b9a3-3f89a6874768)
				};
			}
		}
		
		protected override void CollectProperties(Func<IReadOnlyKistlContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
		{
			base.CollectProperties(props);
			_InitializePropertyDescriptors(lazyCtx);
			props.AddRange(_properties);
		}
	

		public override void UpdateParent(string propertyName, int? id)
		{
			int? __oldValue, __newValue = id;
			
			switch(propertyName)
			{
                case "MubBlah_Nav":
                    __oldValue = _fk_MubBlah_Nav;
                    NotifyPropertyChanging("MubBlah_Nav", __oldValue, __newValue);
                    _fk_MubBlah_Nav = __newValue;
                    NotifyPropertyChanged("MubBlah_Nav", __oldValue, __newValue);
                    break;
				default:
					base.UpdateParent(propertyName, id);
					break;
			}
		}

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._Birthday, binStream);
            BinarySerializer.ToStream(this._fk_MubBlah_Nav, binStream);
            BinarySerializer.ToStream(this._fk_MuhBlah_One_Nav, binStream);
            BinarySerializer.ToStream(this._PersonName, binStream);
			BinarySerializer.ToStream(this.PhoneNumberMobile, binStream);
			BinarySerializer.ToStream(this.PhoneNumberOffice, binStream);
            BinarySerializer.ToStreamCollectionEntries(this._PhoneNumbersOther, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._Birthday, binStream);
            BinarySerializer.FromStream(out this._fk_MubBlah_Nav, binStream);
            BinarySerializer.FromStream(out this._fk_MuhBlah_One_Nav, binStream);
            BinarySerializer.FromStream(out this._PersonName, binStream);
			{
				// trick compiler into generating correct temporary variable
				var tmp = this.PhoneNumberMobile__Implementation__Memory;
				BinarySerializer.FromStream(out tmp, binStream);
				// use setter to de-/attach everything correctly
	            this.PhoneNumberMobile__Implementation__Memory = tmp;
	        }
			{
				// trick compiler into generating correct temporary variable
				var tmp = this.PhoneNumberOffice__Implementation__Memory;
				BinarySerializer.FromStream(out tmp, binStream);
				// use setter to de-/attach everything correctly
	            this.PhoneNumberOffice__Implementation__Memory = tmp;
	        }
            BinarySerializer.FromStreamCollectionEntries(this._PhoneNumbersOther, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._Birthday, xml, "Birthday", "Kistl.App.Test");
            XmlStreamer.ToStream(this._fk_MubBlah_Nav, xml, "MubBlah_Nav", "Kistl.App.Test");
            XmlStreamer.ToStream(this._fk_MuhBlah_One_Nav, xml, "MuhBlah_One_Nav", "Kistl.App.Test");
            XmlStreamer.ToStream(this._PersonName, xml, "PersonName", "Kistl.App.Test");
			// TODO: Add XML Serializer here
			// TODO: Add XML Serializer here
            XmlStreamer.ToStreamCollectionEntries(this._PhoneNumbersOther, xml, "PhoneNumbersOther", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._Birthday, xml, "Birthday", "Kistl.App.Test");
            XmlStreamer.FromStream(ref this._fk_MubBlah_Nav, xml, "MubBlah_Nav", "Kistl.App.Test");
            XmlStreamer.FromStream(ref this._fk_MuhBlah_One_Nav, xml, "MuhBlah_One_Nav", "Kistl.App.Test");
            XmlStreamer.FromStream(ref this._PersonName, xml, "PersonName", "Kistl.App.Test");
			// TODO: Add XML Serializer here
			// TODO: Add XML Serializer here
            XmlStreamer.FromStreamCollectionEntries(this._PhoneNumbersOther, xml, "PhoneNumbersOther", "http://dasz.at/Kistl");
        }

#endregion

    }


}