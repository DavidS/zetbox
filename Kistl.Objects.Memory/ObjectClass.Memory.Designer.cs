// <autogenerated/>

namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;
    using Kistl.DalProvider.Base.RelationWrappers;

    using Kistl.DalProvider.Base;
    using Kistl.DalProvider.Memory;

    /// <summary>
    /// Metadefinition Object for ObjectClasses.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("ObjectClass")]
    public class ObjectClassMemoryImpl : Kistl.App.Base.DataTypeMemoryImpl, ObjectClass
    {
        [Obsolete]
        public ObjectClassMemoryImpl()
            : base(null)
        {
        }

        public ObjectClassMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// 
        /// </summary>
        // object list property
        // Kistl.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Base.AccessControl> AccessControlList
        {
            get
            {
                if (_AccessControlList == null)
                {
                    List<Kistl.App.Base.AccessControl> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
                        serverList = Context.GetListOf<Kistl.App.Base.AccessControl>(this, "AccessControlList");
                    }
                    else
                    {
                        serverList = new List<Kistl.App.Base.AccessControl>();
                    }
    
                    _AccessControlList = new OneNRelationList<Kistl.App.Base.AccessControl>(
                        "ObjectClass",
                        null,
                        this,
                        () => { this.NotifyPropertyChanged("AccessControlList", null, null); if(OnAccessControlList_PostSetter != null && IsAttached) OnAccessControlList_PostSetter(this); },
                        serverList);
                }
                return _AccessControlList;
            }
        }
    
        private OneNRelationList<Kistl.App.Base.AccessControl> _AccessControlList;

public static event PropertyListChangedHandler<Kistl.App.Base.ObjectClass> OnAccessControlList_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.ObjectClass> OnAccessControlList_IsValid;

        /// <summary>
        /// Pointer auf die Basisklasse
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for BaseObjectClass
        // fkBackingName=_fk_BaseObjectClass; fkGuidBackingName=_fk_guid_BaseObjectClass;
        // referencedInterface=Kistl.App.Base.ObjectClass; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=SubClasses; is list;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.Base.ObjectClass BaseObjectClass
        {
            get { return BaseObjectClassImpl; }
            set { BaseObjectClassImpl = (Kistl.App.Base.ObjectClassMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_BaseObjectClass;

        private Guid? _fk_guid_BaseObjectClass = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.Base.ObjectClassMemoryImpl BaseObjectClassImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.ObjectClassMemoryImpl __value;
                if (_fk_BaseObjectClass.HasValue)
                    __value = (Kistl.App.Base.ObjectClassMemoryImpl)Context.Find<Kistl.App.Base.ObjectClass>(_fk_BaseObjectClass.Value);
                else
                    __value = null;

                if (OnBaseObjectClass_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.ObjectClass>(__value);
                    OnBaseObjectClass_Getter(this, e);
                    __value = (Kistl.App.Base.ObjectClassMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_BaseObjectClass == null)
                    return;
                else if (value != null && value.ID == _fk_BaseObjectClass)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = BaseObjectClassImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("BaseObjectClass", __oldValue, __newValue);

                if (OnBaseObjectClass_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.ObjectClass>(__oldValue, __newValue);
                    OnBaseObjectClass_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.ObjectClassMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_BaseObjectClass = __newValue == null ? (int?)null : __newValue.ID;

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.SubClasses as IRelationListSync<Kistl.App.Base.ObjectClass>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.SubClasses as IRelationListSync<Kistl.App.Base.ObjectClass>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("BaseObjectClass", __oldValue, __newValue);

                if (OnBaseObjectClass_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.ObjectClass>(__oldValue, __newValue);
                    OnBaseObjectClass_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for BaseObjectClass
		public static event PropertyGetterHandler<Kistl.App.Base.ObjectClass, Kistl.App.Base.ObjectClass> OnBaseObjectClass_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.ObjectClass, Kistl.App.Base.ObjectClass> OnBaseObjectClass_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.ObjectClass, Kistl.App.Base.ObjectClass> OnBaseObjectClass_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.ObjectClass> OnBaseObjectClass_IsValid;

        /// <summary>
        /// The default ViewModel to use for this ObjectClass
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultViewModelDescriptor
        // fkBackingName=_fk_DefaultViewModelDescriptor; fkGuidBackingName=_fk_guid_DefaultViewModelDescriptor;
        // referencedInterface=Kistl.App.GUI.ViewModelDescriptor; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.GUI.ViewModelDescriptor DefaultViewModelDescriptor
        {
            get { return DefaultViewModelDescriptorImpl; }
            set { DefaultViewModelDescriptorImpl = (Kistl.App.GUI.ViewModelDescriptorMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_DefaultViewModelDescriptor;

        private Guid? _fk_guid_DefaultViewModelDescriptor = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.GUI.ViewModelDescriptorMemoryImpl DefaultViewModelDescriptorImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.ViewModelDescriptorMemoryImpl __value;
                if (_fk_DefaultViewModelDescriptor.HasValue)
                    __value = (Kistl.App.GUI.ViewModelDescriptorMemoryImpl)Context.Find<Kistl.App.GUI.ViewModelDescriptor>(_fk_DefaultViewModelDescriptor.Value);
                else
                    __value = null;

                if (OnDefaultViewModelDescriptor_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.ViewModelDescriptor>(__value);
                    OnDefaultViewModelDescriptor_Getter(this, e);
                    __value = (Kistl.App.GUI.ViewModelDescriptorMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_DefaultViewModelDescriptor == null)
                    return;
                else if (value != null && value.ID == _fk_DefaultViewModelDescriptor)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = DefaultViewModelDescriptorImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultViewModelDescriptor", __oldValue, __newValue);

                if (OnDefaultViewModelDescriptor_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
                    OnDefaultViewModelDescriptor_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.ViewModelDescriptorMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_DefaultViewModelDescriptor = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultViewModelDescriptor", __oldValue, __newValue);

                if (OnDefaultViewModelDescriptor_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
                    OnDefaultViewModelDescriptor_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultViewModelDescriptor
		public static event PropertyGetterHandler<Kistl.App.Base.ObjectClass, Kistl.App.GUI.ViewModelDescriptor> OnDefaultViewModelDescriptor_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.ObjectClass, Kistl.App.GUI.ViewModelDescriptor> OnDefaultViewModelDescriptor_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.ObjectClass, Kistl.App.GUI.ViewModelDescriptor> OnDefaultViewModelDescriptor_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.ObjectClass> OnDefaultViewModelDescriptor_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // object list property
        // Kistl.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.GUI.ObjectClassFilterConfiguration> FilterConfigurations
        {
            get
            {
                if (_FilterConfigurations == null)
                {
                    List<Kistl.App.GUI.ObjectClassFilterConfiguration> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
                        serverList = Context.GetListOf<Kistl.App.GUI.ObjectClassFilterConfiguration>(this, "FilterConfigurations");
                    }
                    else
                    {
                        serverList = new List<Kistl.App.GUI.ObjectClassFilterConfiguration>();
                    }
    
                    _FilterConfigurations = new OneNRelationList<Kistl.App.GUI.ObjectClassFilterConfiguration>(
                        "ObjectClass",
                        null,
                        this,
                        () => { this.NotifyPropertyChanged("FilterConfigurations", null, null); if(OnFilterConfigurations_PostSetter != null && IsAttached) OnFilterConfigurations_PostSetter(this); },
                        serverList);
                }
                return _FilterConfigurations;
            }
        }
    
        private OneNRelationList<Kistl.App.GUI.ObjectClassFilterConfiguration> _FilterConfigurations;

public static event PropertyListChangedHandler<Kistl.App.Base.ObjectClass> OnFilterConfigurations_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.ObjectClass> OnFilterConfigurations_IsValid;

        /// <summary>
        /// Class is abstract
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public bool IsAbstract
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsAbstract;
                if (OnIsAbstract_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsAbstract_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_IsAbstract != value)
                {
                    var __oldValue = _IsAbstract;
                    var __newValue = value;
                    if (OnIsAbstract_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsAbstract_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsAbstract", __oldValue, __newValue);
                    _IsAbstract = __newValue;
                    NotifyPropertyChanged("IsAbstract", __oldValue, __newValue);
                    if (OnIsAbstract_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsAbstract_PostSetter(this, __e);
                    }
                }
            }
        }
        private bool _IsAbstract;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsAbstract_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsAbstract_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsAbstract_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.ObjectClass> OnIsAbstract_IsValid;

        /// <summary>
        /// if true then all Instances appear in FozenContext.
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public bool IsFrozenObject
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsFrozenObject;
                if (OnIsFrozenObject_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsFrozenObject_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_IsFrozenObject != value)
                {
                    var __oldValue = _IsFrozenObject;
                    var __newValue = value;
                    if (OnIsFrozenObject_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsFrozenObject_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsFrozenObject", __oldValue, __newValue);
                    _IsFrozenObject = __newValue;
                    NotifyPropertyChanged("IsFrozenObject", __oldValue, __newValue);
                    if (OnIsFrozenObject_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsFrozenObject_PostSetter(this, __e);
                    }
                }
            }
        }
        private bool _IsFrozenObject;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsFrozenObject_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsFrozenObject_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsFrozenObject_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.ObjectClass> OnIsFrozenObject_IsValid;

        /// <summary>
        /// Setting this to true marks the instances of this class as &amp;quot;simple.&amp;quot; At first this will only mean that they&apos;ll be displayed inline.
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public bool IsSimpleObject
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsSimpleObject;
                if (OnIsSimpleObject_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsSimpleObject_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_IsSimpleObject != value)
                {
                    var __oldValue = _IsSimpleObject;
                    var __newValue = value;
                    if (OnIsSimpleObject_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsSimpleObject_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsSimpleObject", __oldValue, __newValue);
                    _IsSimpleObject = __newValue;
                    NotifyPropertyChanged("IsSimpleObject", __oldValue, __newValue);
                    if (OnIsSimpleObject_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsSimpleObject_PostSetter(this, __e);
                    }
                }
            }
        }
        private bool _IsSimpleObject;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsSimpleObject_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsSimpleObject_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.ObjectClass, bool> OnIsSimpleObject_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.ObjectClass> OnIsSimpleObject_IsValid;

        /// <summary>
        /// Liste der vererbten Klassen
        /// </summary>
        // object list property
        // Kistl.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Base.ObjectClass> SubClasses
        {
            get
            {
                if (_SubClasses == null)
                {
                    List<Kistl.App.Base.ObjectClass> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
                        serverList = Context.GetListOf<Kistl.App.Base.ObjectClass>(this, "SubClasses");
                    }
                    else
                    {
                        serverList = new List<Kistl.App.Base.ObjectClass>();
                    }
    
                    _SubClasses = new OneNRelationList<Kistl.App.Base.ObjectClass>(
                        "BaseObjectClass",
                        null,
                        this,
                        () => { this.NotifyPropertyChanged("SubClasses", null, null); if(OnSubClasses_PostSetter != null && IsAttached) OnSubClasses_PostSetter(this); },
                        serverList);
                }
                return _SubClasses;
            }
        }
    
        private OneNRelationList<Kistl.App.Base.ObjectClass> _SubClasses;

public static event PropertyListChangedHandler<Kistl.App.Base.ObjectClass> OnSubClasses_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.ObjectClass> OnSubClasses_IsValid;

        /// <summary>
        /// Tabellenname in der Datenbank
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public string TableName
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _TableName;
                if (OnTableName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnTableName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_TableName != value)
                {
                    var __oldValue = _TableName;
                    var __newValue = value;
                    if (OnTableName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnTableName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TableName", __oldValue, __newValue);
                    _TableName = __newValue;
                    NotifyPropertyChanged("TableName", __oldValue, __newValue);
                    if (OnTableName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnTableName_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _TableName;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Base.ObjectClass, string> OnTableName_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.ObjectClass, string> OnTableName_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.ObjectClass, string> OnTableName_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.ObjectClass> OnTableName_IsValid;

        /// <summary>
        /// Creates, if needed, all default  Methods
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnCreateDefaultMethods_ObjectClass")]
        public virtual void CreateDefaultMethods()
        {
            // base.CreateDefaultMethods();
            if (OnCreateDefaultMethods_ObjectClass != null)
            {
                OnCreateDefaultMethods_ObjectClass(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method ObjectClass.CreateDefaultMethods");
            }
        }
        public delegate void CreateDefaultMethods_Handler<T>(T obj);
        public static event CreateDefaultMethods_Handler<ObjectClass> OnCreateDefaultMethods_ObjectClass;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnCreateDefaultMethods_ObjectClass_CanExec;

        [EventBasedMethod("OnCreateDefaultMethods_ObjectClass_CanExec")]
        public virtual bool CreateDefaultMethodsCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnCreateDefaultMethods_ObjectClass_CanExec != null)
				{
					OnCreateDefaultMethods_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnCreateDefaultMethods_ObjectClass_CanExecReason;

        [EventBasedMethod("OnCreateDefaultMethods_ObjectClass_CanExecReason")]
        public virtual string CreateDefaultMethodsCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnCreateDefaultMethods_ObjectClass_CanExecReason != null)
				{
					OnCreateDefaultMethods_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Creates a new Method for this class
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnCreateMethod_ObjectClass")]
        public virtual Kistl.App.Base.Method CreateMethod()
        {
            var e = new MethodReturnEventArgs<Kistl.App.Base.Method>();
            if (OnCreateMethod_ObjectClass != null)
            {
                OnCreateMethod_ObjectClass(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ObjectClass.CreateMethod");
            }
            return e.Result;
        }
        public delegate void CreateMethod_Handler<T>(T obj, MethodReturnEventArgs<Kistl.App.Base.Method> ret);
        public static event CreateMethod_Handler<ObjectClass> OnCreateMethod_ObjectClass;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnCreateMethod_ObjectClass_CanExec;

        [EventBasedMethod("OnCreateMethod_ObjectClass_CanExec")]
        public virtual bool CreateMethodCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnCreateMethod_ObjectClass_CanExec != null)
				{
					OnCreateMethod_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnCreateMethod_ObjectClass_CanExecReason;

        [EventBasedMethod("OnCreateMethod_ObjectClass_CanExecReason")]
        public virtual string CreateMethodCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnCreateMethod_ObjectClass_CanExecReason != null)
				{
					OnCreateMethod_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Implements the &quot;Create new Relation&quot; use case
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnCreateRelation_ObjectClass")]
        public virtual Kistl.App.Base.Relation CreateRelation()
        {
            var e = new MethodReturnEventArgs<Kistl.App.Base.Relation>();
            if (OnCreateRelation_ObjectClass != null)
            {
                OnCreateRelation_ObjectClass(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ObjectClass.CreateRelation");
            }
            return e.Result;
        }
        public delegate void CreateRelation_Handler<T>(T obj, MethodReturnEventArgs<Kistl.App.Base.Relation> ret);
        public static event CreateRelation_Handler<ObjectClass> OnCreateRelation_ObjectClass;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnCreateRelation_ObjectClass_CanExec;

        [EventBasedMethod("OnCreateRelation_ObjectClass_CanExec")]
        public virtual bool CreateRelationCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnCreateRelation_ObjectClass_CanExec != null)
				{
					OnCreateRelation_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnCreateRelation_ObjectClass_CanExecReason;

        [EventBasedMethod("OnCreateRelation_ObjectClass_CanExecReason")]
        public virtual string CreateRelationCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnCreateRelation_ObjectClass_CanExecReason != null)
				{
					OnCreateRelation_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the resulting Type of this Datatype Meta Object.
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDataType_ObjectClass")]
        public override System.Type GetDataType()
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetDataType_ObjectClass != null)
            {
                OnGetDataType_ObjectClass(this, e);
            }
            else
            {
                e.Result = base.GetDataType();
            }
            return e.Result;
        }
        public static event GetDataType_Handler<ObjectClass> OnGetDataType_ObjectClass;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnGetDataType_ObjectClass_CanExec;

        [EventBasedMethod("OnGetDataType_ObjectClass_CanExec")]
        public override bool GetDataTypeCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetDataType_ObjectClass_CanExec != null)
				{
					OnGetDataType_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetDataTypeCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnGetDataType_ObjectClass_CanExecReason;

        [EventBasedMethod("OnGetDataType_ObjectClass_CanExecReason")]
        public override string GetDataTypeCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetDataType_ObjectClass_CanExecReason != null)
				{
					OnGetDataType_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetDataTypeCanExecReason;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the String representation of this Datatype Meta Object.
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDataTypeString_ObjectClass")]
        public override string GetDataTypeString()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetDataTypeString_ObjectClass != null)
            {
                OnGetDataTypeString_ObjectClass(this, e);
            }
            else
            {
                e.Result = base.GetDataTypeString();
            }
            return e.Result;
        }
        public static event GetDataTypeString_Handler<ObjectClass> OnGetDataTypeString_ObjectClass;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnGetDataTypeString_ObjectClass_CanExec;

        [EventBasedMethod("OnGetDataTypeString_ObjectClass_CanExec")]
        public override bool GetDataTypeStringCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetDataTypeString_ObjectClass_CanExec != null)
				{
					OnGetDataTypeString_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetDataTypeStringCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnGetDataTypeString_ObjectClass_CanExecReason;

        [EventBasedMethod("OnGetDataTypeString_ObjectClass_CanExecReason")]
        public override string GetDataTypeStringCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetDataTypeString_ObjectClass_CanExecReason != null)
				{
					OnGetDataTypeString_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetDataTypeStringCanExecReason;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetInheritedMethods_ObjectClass")]
        public virtual IEnumerable<Kistl.App.Base.Method> GetInheritedMethods()
        {
            var e = new MethodReturnEventArgs<IEnumerable<Kistl.App.Base.Method>>();
            if (OnGetInheritedMethods_ObjectClass != null)
            {
                OnGetInheritedMethods_ObjectClass(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ObjectClass.GetInheritedMethods");
            }
            return e.Result;
        }
        public delegate void GetInheritedMethods_Handler<T>(T obj, MethodReturnEventArgs<IEnumerable<Kistl.App.Base.Method>> ret);
        public static event GetInheritedMethods_Handler<ObjectClass> OnGetInheritedMethods_ObjectClass;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnGetInheritedMethods_ObjectClass_CanExec;

        [EventBasedMethod("OnGetInheritedMethods_ObjectClass_CanExec")]
        public virtual bool GetInheritedMethodsCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetInheritedMethods_ObjectClass_CanExec != null)
				{
					OnGetInheritedMethods_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnGetInheritedMethods_ObjectClass_CanExecReason;

        [EventBasedMethod("OnGetInheritedMethods_ObjectClass_CanExecReason")]
        public virtual string GetInheritedMethodsCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetInheritedMethods_ObjectClass_CanExecReason != null)
				{
					OnGetInheritedMethods_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetName_ObjectClass")]
        public virtual string GetName()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetName_ObjectClass != null)
            {
                OnGetName_ObjectClass(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ObjectClass.GetName");
            }
            return e.Result;
        }
        public delegate void GetName_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetName_Handler<ObjectClass> OnGetName_ObjectClass;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnGetName_ObjectClass_CanExec;

        [EventBasedMethod("OnGetName_ObjectClass_CanExec")]
        public virtual bool GetNameCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetName_ObjectClass_CanExec != null)
				{
					OnGetName_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnGetName_ObjectClass_CanExecReason;

        [EventBasedMethod("OnGetName_ObjectClass_CanExecReason")]
        public virtual string GetNameCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetName_ObjectClass_CanExecReason != null)
				{
					OnGetName_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Implements all available interfaces as Properties and Methods
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnImplementInterfaces_ObjectClass")]
        public override void ImplementInterfaces()
        {
            // base.ImplementInterfaces();
            if (OnImplementInterfaces_ObjectClass != null)
            {
                OnImplementInterfaces_ObjectClass(this);
            }
            else
            {
                base.ImplementInterfaces();
            }
        }
        public static event ImplementInterfaces_Handler<ObjectClass> OnImplementInterfaces_ObjectClass;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnImplementInterfaces_ObjectClass_CanExec;

        [EventBasedMethod("OnImplementInterfaces_ObjectClass_CanExec")]
        public override bool ImplementInterfacesCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnImplementInterfaces_ObjectClass_CanExec != null)
				{
					OnImplementInterfaces_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = base.ImplementInterfacesCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnImplementInterfaces_ObjectClass_CanExecReason;

        [EventBasedMethod("OnImplementInterfaces_ObjectClass_CanExecReason")]
        public override string ImplementInterfacesCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnImplementInterfaces_ObjectClass_CanExecReason != null)
				{
					OnImplementInterfaces_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.ImplementInterfacesCanExecReason;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(ObjectClass);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ObjectClass)obj;
            var otherImpl = (ObjectClassMemoryImpl)obj;
            var me = (ObjectClass)this;

            me.IsAbstract = other.IsAbstract;
            me.IsFrozenObject = other.IsFrozenObject;
            me.IsSimpleObject = other.IsSimpleObject;
            me.TableName = other.TableName;
            this._fk_BaseObjectClass = otherImpl._fk_BaseObjectClass;
            this._fk_DefaultViewModelDescriptor = otherImpl._fk_DefaultViewModelDescriptor;
        }

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "BaseObjectClass":
                    {
                        var __oldValue = _fk_BaseObjectClass;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("BaseObjectClass", __oldValue, __newValue);
                        _fk_BaseObjectClass = __newValue;
                        NotifyPropertyChanged("BaseObjectClass", __oldValue, __newValue);
                    }
                    break;
                case "DefaultViewModelDescriptor":
                    {
                        var __oldValue = _fk_DefaultViewModelDescriptor;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("DefaultViewModelDescriptor", __oldValue, __newValue);
                        _fk_DefaultViewModelDescriptor = __newValue;
                        NotifyPropertyChanged("DefaultViewModelDescriptor", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_BaseObjectClass.HasValue)
                BaseObjectClassImpl = (Kistl.App.Base.ObjectClassMemoryImpl)Context.FindPersistenceObject<Kistl.App.Base.ObjectClass>(_fk_guid_BaseObjectClass.Value);
            else
            if (_fk_BaseObjectClass.HasValue)
                BaseObjectClassImpl = (Kistl.App.Base.ObjectClassMemoryImpl)Context.Find<Kistl.App.Base.ObjectClass>(_fk_BaseObjectClass.Value);
            else
                BaseObjectClassImpl = null;

            if (_fk_guid_DefaultViewModelDescriptor.HasValue)
                DefaultViewModelDescriptorImpl = (Kistl.App.GUI.ViewModelDescriptorMemoryImpl)Context.FindPersistenceObject<Kistl.App.GUI.ViewModelDescriptor>(_fk_guid_DefaultViewModelDescriptor.Value);
            else
            if (_fk_DefaultViewModelDescriptor.HasValue)
                DefaultViewModelDescriptorImpl = (Kistl.App.GUI.ViewModelDescriptorMemoryImpl)Context.Find<Kistl.App.GUI.ViewModelDescriptor>(_fk_DefaultViewModelDescriptor.Value);
            else
                DefaultViewModelDescriptorImpl = null;
        }
        #region Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<ObjectClass, ICollection<Kistl.App.Base.AccessControl>>(
                        lazyCtx,
                        new Guid("4514093c-0a1f-4644-b4a6-3389f1ca7aa8"),
                        "AccessControlList",
                        null,
                        obj => obj.AccessControlList,
                        null, // lists are read-only properties
                        obj => OnAccessControlList_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<ObjectClass, Kistl.App.Base.ObjectClass>(
                        lazyCtx,
                        new Guid("ad060d41-bc7a-41b8-a3e3-ec9302c8c714"),
                        "BaseObjectClass",
                        null,
                        obj => obj.BaseObjectClass,
                        (obj, val) => obj.BaseObjectClass = val,
						obj => OnBaseObjectClass_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<ObjectClass, Kistl.App.GUI.ViewModelDescriptor>(
                        lazyCtx,
                        new Guid("11adedb9-d32a-4da9-b986-0534e65df760"),
                        "DefaultViewModelDescriptor",
                        null,
                        obj => obj.DefaultViewModelDescriptor,
                        (obj, val) => obj.DefaultViewModelDescriptor = val,
						obj => OnDefaultViewModelDescriptor_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<ObjectClass, ICollection<Kistl.App.GUI.ObjectClassFilterConfiguration>>(
                        lazyCtx,
                        new Guid("bd526c1f-a6ac-40b6-8f81-66aaf553129f"),
                        "FilterConfigurations",
                        null,
                        obj => obj.FilterConfigurations,
                        null, // lists are read-only properties
                        obj => OnFilterConfigurations_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<ObjectClass, bool>(
                        lazyCtx,
                        new Guid("e9d1402e-3580-4084-8836-c44844683191"),
                        "IsAbstract",
                        null,
                        obj => obj.IsAbstract,
                        (obj, val) => obj.IsAbstract = val,
						obj => OnIsAbstract_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<ObjectClass, bool>(
                        lazyCtx,
                        new Guid("13c33710-ea02-4621-ad50-294a1f36b07d"),
                        "IsFrozenObject",
                        null,
                        obj => obj.IsFrozenObject,
                        (obj, val) => obj.IsFrozenObject = val,
						obj => OnIsFrozenObject_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<ObjectClass, bool>(
                        lazyCtx,
                        new Guid("edc853d3-0d02-4492-9159-c548c7713e9b"),
                        "IsSimpleObject",
                        null,
                        obj => obj.IsSimpleObject,
                        (obj, val) => obj.IsSimpleObject = val,
						obj => OnIsSimpleObject_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<ObjectClass, ICollection<Kistl.App.Base.ObjectClass>>(
                        lazyCtx,
                        new Guid("0914de6e-966c-46fc-9359-e4da6c3608b1"),
                        "SubClasses",
                        null,
                        obj => obj.SubClasses,
                        null, // lists are read-only properties
                        obj => OnSubClasses_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<ObjectClass, string>(
                        lazyCtx,
                        new Guid("2a5e5111-199c-4dce-8369-ce35ee741568"),
                        "TableName",
                        null,
                        obj => obj.TableName,
                        (obj, val) => obj.TableName = val,
						obj => OnTableName_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_ObjectClass")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_ObjectClass != null)
            {
                OnToString_ObjectClass(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<ObjectClass> OnToString_ObjectClass;

        [EventBasedMethod("OnPreSave_ObjectClass")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_ObjectClass != null) OnPreSave_ObjectClass(this);
        }
        public static event ObjectEventHandler<ObjectClass> OnPreSave_ObjectClass;

        [EventBasedMethod("OnPostSave_ObjectClass")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_ObjectClass != null) OnPostSave_ObjectClass(this);
        }
        public static event ObjectEventHandler<ObjectClass> OnPostSave_ObjectClass;

        [EventBasedMethod("OnCreated_ObjectClass")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_ObjectClass != null) OnCreated_ObjectClass(this);
        }
        public static event ObjectEventHandler<ObjectClass> OnCreated_ObjectClass;

        [EventBasedMethod("OnDeleting_ObjectClass")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_ObjectClass != null) OnDeleting_ObjectClass(this);
        }
        public static event ObjectEventHandler<ObjectClass> OnDeleting_ObjectClass;

        #endregion // Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(BaseObjectClass != null ? BaseObjectClass.ID : (int?)null, binStream);
            BinarySerializer.ToStream(DefaultViewModelDescriptor != null ? DefaultViewModelDescriptor.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._IsAbstract, binStream);
            BinarySerializer.ToStream(this._IsFrozenObject, binStream);
            BinarySerializer.ToStream(this._IsSimpleObject, binStream);
            BinarySerializer.ToStream(this._TableName, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._fk_BaseObjectClass, binStream);
            BinarySerializer.FromStream(out this._fk_DefaultViewModelDescriptor, binStream);
            BinarySerializer.FromStream(out this._IsAbstract, binStream);
            BinarySerializer.FromStream(out this._IsFrozenObject, binStream);
            BinarySerializer.FromStream(out this._IsSimpleObject, binStream);
            BinarySerializer.FromStream(out this._TableName, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(BaseObjectClass != null ? BaseObjectClass.ID : (int?)null, xml, "BaseObjectClass", "Kistl.App.Base");
            XmlStreamer.ToStream(DefaultViewModelDescriptor != null ? DefaultViewModelDescriptor.ID : (int?)null, xml, "DefaultViewModelDescriptor", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._IsAbstract, xml, "IsAbstract", "Kistl.App.Base");
            XmlStreamer.ToStream(this._IsFrozenObject, xml, "IsFrozenObject", "Kistl.App.Base");
            XmlStreamer.ToStream(this._IsSimpleObject, xml, "IsSimpleObject", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._TableName, xml, "TableName", "Kistl.App.Base");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._fk_BaseObjectClass, xml, "BaseObjectClass", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_DefaultViewModelDescriptor, xml, "DefaultViewModelDescriptor", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._IsAbstract, xml, "IsAbstract", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._IsFrozenObject, xml, "IsFrozenObject", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._IsSimpleObject, xml, "IsSimpleObject", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._TableName, xml, "TableName", "Kistl.App.Base");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            base.Export(xml, modules);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(BaseObjectClass != null ? BaseObjectClass.ExportGuid : (Guid?)null, xml, "BaseObjectClass", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(DefaultViewModelDescriptor != null ? DefaultViewModelDescriptor.ExportGuid : (Guid?)null, xml, "DefaultViewModelDescriptor", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._IsAbstract, xml, "IsAbstract", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._IsFrozenObject, xml, "IsFrozenObject", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this._IsSimpleObject, xml, "IsSimpleObject", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._TableName, xml, "TableName", "Kistl.App.Base");
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            base.MergeImport(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.FromStream(ref this._fk_guid_BaseObjectClass, xml, "BaseObjectClass", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_guid_DefaultViewModelDescriptor, xml, "DefaultViewModelDescriptor", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._IsAbstract, xml, "IsAbstract", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._IsFrozenObject, xml, "IsFrozenObject", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._IsSimpleObject, xml, "IsSimpleObject", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._TableName, xml, "TableName", "Kistl.App.Base");
        }

        #endregion

    }
}