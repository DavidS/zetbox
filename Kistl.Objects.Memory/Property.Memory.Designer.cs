// <autogenerated/>


namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.DalProvider.Memory;

    /// <summary>
    /// Metadefinition Object for Properties. This class is abstract.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("Property")]
    public abstract class Property__Implementation__Memory : BaseMemoryDataObject, Kistl.API.IExportableInternal, Property
    {
        [Obsolete]
        public Property__Implementation__Memory()
            : base(null)
        {
            {
            }
        }

        public Property__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
            : base(lazyCtx)
        {
            {
            }
        }


        /// <summary>
        /// A space separated list of category names containing this Property
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string CategoryTags
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CategoryTags;
                if (OnCategoryTags_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnCategoryTags_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_CategoryTags != value)
                {
                    var __oldValue = _CategoryTags;
                    var __newValue = value;
                    if(OnCategoryTags_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnCategoryTags_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CategoryTags", __oldValue, __newValue);
                    _CategoryTags = __newValue;
                    NotifyPropertyChanged("CategoryTags", __oldValue, __newValue);
                    if(OnCategoryTags_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnCategoryTags_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _CategoryTags;
		public static event PropertyGetterHandler<Kistl.App.Base.Property, string> OnCategoryTags_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, string> OnCategoryTags_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, string> OnCategoryTags_PostSetter;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for ChangedBy
		// rel(A): Property was ChangedBy
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity ChangedBy
        {
            get
            {
				Kistl.App.Base.Identity __value;
                if (_fk_ChangedBy.HasValue)
                    __value = Context.Find<Kistl.App.Base.Identity>(_fk_ChangedBy.Value);
                else
                    __value = null;

				if(OnChangedBy_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
					OnChangedBy_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_ChangedBy == null)
					return;
                else if (value != null && value.ID == _fk_ChangedBy)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = ChangedBy;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
				
                if(OnChangedBy_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
					OnChangedBy_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_ChangedBy = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);

                if(OnChangedBy_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
					OnChangedBy_PostSetter(this, e);
                }
                
            }
        }
        
        private int? _fk_ChangedBy;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Identity> OnChangedBy_PostSetter;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual DateTime? ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if(OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime? _ChangedOn;
		public static event PropertyGetterHandler<Kistl.App.Base.Property, DateTime?> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, DateTime?> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, DateTime?> OnChangedOn_PostSetter;

        /// <summary>
        /// The list of constraints applying to this Property
        /// </summary>
        // object list property
        // ApplyObjectListPropertyTemplate
		// Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Base.Constraint> Constraints
        {
            get
            {
                if (_ConstraintsWrapper == null)
                {
                    List<Kistl.App.Base.Constraint> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
						if(ConstraintsIds != null)
						{
							serverList = ConstraintsIds.Select(id => Context.Find<Kistl.App.Base.Constraint>(id)).ToList();
							ConstraintsIds = null; // allow id list to be garbage collected
						}
						else
						{
							serverList = Context.GetListOf<Kistl.App.Base.Constraint>(this, "Constraints");
						}
					}
                    else
                    {
                        serverList = new List<Kistl.App.Base.Constraint>();
                    }
                        
                    _ConstraintsWrapper = new OneNRelationList<Kistl.App.Base.Constraint>(
                        "ConstrainedProperty",
                        null,
                        this,
                        () => this.NotifyPropertyChanged("Constraints", null, null),
                        serverList);
                }
                return _ConstraintsWrapper;
            }
        }
        
        private OneNRelationList<Kistl.App.Base.Constraint> _ConstraintsWrapper;

		private List<int> ConstraintsIds;
		private bool Constraints_was_eagerLoaded = false;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for CreatedBy
		// rel(A): Property was CreatedBy
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity CreatedBy
        {
            get
            {
				Kistl.App.Base.Identity __value;
                if (_fk_CreatedBy.HasValue)
                    __value = Context.Find<Kistl.App.Base.Identity>(_fk_CreatedBy.Value);
                else
                    __value = null;

				if(OnCreatedBy_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
					OnCreatedBy_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_CreatedBy == null)
					return;
                else if (value != null && value.ID == _fk_CreatedBy)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = CreatedBy;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
				
                if(OnCreatedBy_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
					OnCreatedBy_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_CreatedBy = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);

                if(OnCreatedBy_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
					OnCreatedBy_PostSetter(this, e);
                }
                
            }
        }
        
        private int? _fk_CreatedBy;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Identity> OnCreatedBy_PostSetter;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual DateTime? CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if(OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime? _CreatedOn;
		public static event PropertyGetterHandler<Kistl.App.Base.Property, DateTime?> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, DateTime?> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, DateTime?> OnCreatedOn_PostSetter;

        /// <summary>
        /// Property can have a default value
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for DefaultValue
		// rel(A): Property has DefaultValue
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.DefaultPropertyValue DefaultValue
        {
            get
            {
				Kistl.App.Base.DefaultPropertyValue __value;
                if (_fk_DefaultValue.HasValue)
                    __value = Context.Find<Kistl.App.Base.DefaultPropertyValue>(_fk_DefaultValue.Value);
                else
                    __value = null;

				if(OnDefaultValue_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Base.DefaultPropertyValue>(__value);
					OnDefaultValue_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_DefaultValue == null)
					return;
                else if (value != null && value.ID == _fk_DefaultValue)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = DefaultValue;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("DefaultValue", __oldValue, __newValue);
				
                if(OnDefaultValue_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Base.DefaultPropertyValue>(__oldValue, __newValue);
					OnDefaultValue_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_DefaultValue = __newValue == null ? (int?)null : __newValue.ID;
				
				// now fixup redundant, inverse references
				// The inverse navigator will also fire events when changed, so should 
				// only be touched after setting the local value above. 
				// TODO: for complete correctness, the "other" Changing event should also fire 
				//       before the local value is changed
				if (__oldValue != null)
				{
					// unset old reference
					__oldValue.Property = null;
				}

                if (__newValue != null)
                {
					// set new reference
                    __newValue.Property = this;
                }
				// everything is done. fire the Changed event
				NotifyPropertyChanged("DefaultValue", __oldValue, __newValue);

                if(OnDefaultValue_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Base.DefaultPropertyValue>(__oldValue, __newValue);
					OnDefaultValue_PostSetter(this, e);
                }
                
            }
        }
        
        private int? _fk_DefaultValue;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for DefaultValue
		public static event PropertyGetterHandler<Kistl.App.Base.Property, Kistl.App.Base.DefaultPropertyValue> OnDefaultValue_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.DefaultPropertyValue> OnDefaultValue_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.DefaultPropertyValue> OnDefaultValue_PostSetter;

        /// <summary>
        /// Description of this Property
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if(OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Description;
		public static event PropertyGetterHandler<Kistl.App.Base.Property, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, string> OnDescription_PostSetter;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        private bool _isExportGuidSet = false;
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet) {
                    var __p = FrozenContext.Single.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("ca0a099d-3f4c-4604-8303-d751e57041bb"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        __result = this._ExportGuid = (Guid)__p.DefaultValue.GetDefaultValue();
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Property.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if(OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
            }
        }
        private Guid _ExportGuid;
		public static event PropertyGetterHandler<Kistl.App.Base.Property, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, Guid> OnExportGuid_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for FilterConfiguration
		// rel(A): Property Has FilterConfiguration
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.FilterConfiguration FilterConfiguration
        {
            get
            {
				Kistl.App.GUI.FilterConfiguration __value;
                if (_fk_FilterConfiguration.HasValue)
                    __value = Context.Find<Kistl.App.GUI.FilterConfiguration>(_fk_FilterConfiguration.Value);
                else
                    __value = null;

				if(OnFilterConfiguration_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.GUI.FilterConfiguration>(__value);
					OnFilterConfiguration_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_FilterConfiguration == null)
					return;
                else if (value != null && value.ID == _fk_FilterConfiguration)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = FilterConfiguration;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("FilterConfiguration", __oldValue, __newValue);
				
                if(OnFilterConfiguration_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.FilterConfiguration>(__oldValue, __newValue);
					OnFilterConfiguration_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_FilterConfiguration = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("FilterConfiguration", __oldValue, __newValue);

                if(OnFilterConfiguration_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.FilterConfiguration>(__oldValue, __newValue);
					OnFilterConfiguration_PostSetter(this, e);
                }
                
            }
        }
        
        private int? _fk_FilterConfiguration;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for FilterConfiguration
		public static event PropertyGetterHandler<Kistl.App.Base.Property, Kistl.App.GUI.FilterConfiguration> OnFilterConfiguration_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, Kistl.App.GUI.FilterConfiguration> OnFilterConfiguration_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, Kistl.App.GUI.FilterConfiguration> OnFilterConfiguration_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // object list property
        // ApplyObjectListPropertyTemplate
		// Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Base.PropertyInvocation> Invocations
        {
            get
            {
                if (_InvocationsWrapper == null)
                {
                    List<Kistl.App.Base.PropertyInvocation> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
						if(InvocationsIds != null)
						{
							serverList = InvocationsIds.Select(id => Context.Find<Kistl.App.Base.PropertyInvocation>(id)).ToList();
							InvocationsIds = null; // allow id list to be garbage collected
						}
						else
						{
							serverList = Context.GetListOf<Kistl.App.Base.PropertyInvocation>(this, "Invocations");
						}
					}
                    else
                    {
                        serverList = new List<Kistl.App.Base.PropertyInvocation>();
                    }
                        
                    _InvocationsWrapper = new OneNRelationList<Kistl.App.Base.PropertyInvocation>(
                        "InvokeOnProperty",
                        null,
                        this,
                        () => this.NotifyPropertyChanged("Invocations", null, null),
                        serverList);
                }
                return _InvocationsWrapper;
            }
        }
        
        private OneNRelationList<Kistl.App.Base.PropertyInvocation> _InvocationsWrapper;

		private List<int> InvocationsIds;
		private bool Invocations_was_eagerLoaded = false;

        /// <summary>
        /// Zugehörig zum Modul
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for Module
		// rel(A): BaseProperty has Module
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Module Module
        {
            get
            {
				Kistl.App.Base.Module __value;
                if (_fk_Module.HasValue)
                    __value = Context.Find<Kistl.App.Base.Module>(_fk_Module.Value);
                else
                    __value = null;

				if(OnModule_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Base.Module>(__value);
					OnModule_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_Module == null)
					return;
                else if (value != null && value.ID == _fk_Module)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = Module;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("Module", __oldValue, __newValue);
				
                if(OnModule_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
					OnModule_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_Module = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("Module", __oldValue, __newValue);

                if(OnModule_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
					OnModule_PostSetter(this, e);
                }
                
            }
        }
        
        private int? _fk_Module;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Module> OnModule_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingDataProperty
        public virtual string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if(OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Name;
		public static event PropertyGetterHandler<Kistl.App.Base.Property, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, string> OnName_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for ObjectClass
		// rel(B): ObjectClass has Properties
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.DataType ObjectClass
        {
            get
            {
				Kistl.App.Base.DataType __value;
                if (_fk_ObjectClass.HasValue)
                    __value = Context.Find<Kistl.App.Base.DataType>(_fk_ObjectClass.Value);
                else
                    __value = null;

				if(OnObjectClass_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Base.DataType>(__value);
					OnObjectClass_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_ObjectClass == null)
					return;
                else if (value != null && value.ID == _fk_ObjectClass)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = ObjectClass;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("ObjectClass", __oldValue, __newValue);
				
                if(OnObjectClass_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Base.DataType>(__oldValue, __newValue);
					OnObjectClass_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_ObjectClass = __newValue == null ? (int?)null : __newValue.ID;
				
				// now fixup redundant, inverse references
				// The inverse navigator will also fire events when changed, so should 
				// only be touched after setting the local value above. 
				// TODO: for complete correctness, the "other" Changing event should also fire 
				//       before the local value is changed
				if (__oldValue != null)
				{
					// remove from old list
					(__oldValue.Properties as OneNRelationList<Kistl.App.Base.Property>).RemoveWithoutClearParent(this);
				}

                if (__newValue != null)
                {
					// add to new list
					(__newValue.Properties as OneNRelationList<Kistl.App.Base.Property>).AddWithoutSetParent(this);
                }
				// everything is done. fire the Changed event
				NotifyPropertyChanged("ObjectClass", __oldValue, __newValue);

                if(OnObjectClass_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Base.DataType>(__oldValue, __newValue);
					OnObjectClass_PostSetter(this, e);
                }
                
            }
        }
        
        private int? _fk_ObjectClass;
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? Properties_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Properties_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Properties_pos != value)
                {
                    var __oldValue = _Properties_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("Properties_pos", __oldValue, __newValue);
                    _Properties_pos = __newValue;
                    NotifyPropertyChanged("Properties_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _Properties_pos;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for ObjectClass
		public static event PropertyGetterHandler<Kistl.App.Base.Property, Kistl.App.Base.DataType> OnObjectClass_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.DataType> OnObjectClass_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.DataType> OnObjectClass_PostSetter;

        /// <summary>
        /// The ViewModel to use for values of this Property
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for ValueModelDescriptor
		// rel(A): Property has ValueModelDescriptor
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ViewModelDescriptor ValueModelDescriptor
        {
            get
            {
				Kistl.App.GUI.ViewModelDescriptor __value;
                if (_fk_ValueModelDescriptor.HasValue)
                    __value = Context.Find<Kistl.App.GUI.ViewModelDescriptor>(_fk_ValueModelDescriptor.Value);
                else
                    __value = null;

				if(OnValueModelDescriptor_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.GUI.ViewModelDescriptor>(__value);
					OnValueModelDescriptor_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_ValueModelDescriptor == null)
					return;
                else if (value != null && value.ID == _fk_ValueModelDescriptor)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = ValueModelDescriptor;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("ValueModelDescriptor", __oldValue, __newValue);
				
                if(OnValueModelDescriptor_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
					OnValueModelDescriptor_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_ValueModelDescriptor = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("ValueModelDescriptor", __oldValue, __newValue);

                if(OnValueModelDescriptor_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
					OnValueModelDescriptor_PostSetter(this, e);
                }
                
            }
        }
        
        private int? _fk_ValueModelDescriptor;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for ValueModelDescriptor
		public static event PropertyGetterHandler<Kistl.App.Base.Property, Kistl.App.GUI.ViewModelDescriptor> OnValueModelDescriptor_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, Kistl.App.GUI.ViewModelDescriptor> OnValueModelDescriptor_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, Kistl.App.GUI.ViewModelDescriptor> OnValueModelDescriptor_PostSetter;

        /// <summary>
        /// Returns the resulting Type of this Property Meta Object.
        /// </summary>
		[EventBasedMethod("OnGetPropertyType_Property")]
		public virtual System.Type GetPropertyType() 
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetPropertyType_Property != null)
            {
                OnGetPropertyType_Property(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Property.GetPropertyType");
            }
            return e.Result;
        }
		public delegate void GetPropertyType_Handler<T>(T obj, MethodReturnEventArgs<System.Type> ret);
		public static event GetPropertyType_Handler<Property> OnGetPropertyType_Property;



        /// <summary>
        /// Returns the String representation of this Property Meta Object.
        /// </summary>
		[EventBasedMethod("OnGetPropertyTypeString_Property")]
		public virtual string GetPropertyTypeString() 
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetPropertyTypeString_Property != null)
            {
                OnGetPropertyTypeString_Property(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Property.GetPropertyTypeString");
            }
            return e.Result;
        }
		public delegate void GetPropertyTypeString_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
		public static event GetPropertyTypeString_Handler<Property> OnGetPropertyTypeString_Property;



        public override Type GetImplementedInterface()
        {
            return typeof(Property);
        }

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Property)obj;
			var otherImpl = (Property__Implementation__Memory)obj;
			var me = (Property)this;

			me.CategoryTags = other.CategoryTags;
			me.ChangedOn = other.ChangedOn;
			me.CreatedOn = other.CreatedOn;
			me.Description = other.Description;
			me.ExportGuid = other.ExportGuid;
			me.Name = other.Name;
			this._fk_ChangedBy = otherImpl._fk_ChangedBy;
			this._fk_CreatedBy = otherImpl._fk_CreatedBy;
			this._fk_DefaultValue = otherImpl._fk_DefaultValue;
			this._fk_FilterConfiguration = otherImpl._fk_FilterConfiguration;
			this._fk_Module = otherImpl._fk_Module;
			this.Properties_pos = otherImpl.Properties_pos;
			this._fk_ObjectClass = otherImpl._fk_ObjectClass;
			this._fk_ValueModelDescriptor = otherImpl._fk_ValueModelDescriptor;
		}

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Property")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Property != null)
            {
                OnToString_Property(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Property> OnToString_Property;

        [EventBasedMethod("OnPreSave_Property")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_Property != null) OnPreSave_Property(this);
        }
        public static event ObjectEventHandler<Property> OnPreSave_Property;

        [EventBasedMethod("OnPostSave_Property")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_Property != null) OnPostSave_Property(this);
        }
        public static event ObjectEventHandler<Property> OnPostSave_Property;

        [EventBasedMethod("OnCreated_Property")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_Property != null) OnCreated_Property(this);
        }
        public static event ObjectEventHandler<Property> OnCreated_Property;

        [EventBasedMethod("OnDeleting_Property")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_Property != null) OnDeleting_Property(this);
        }
        public static event ObjectEventHandler<Property> OnDeleting_Property;


		private static readonly object _propertiesLock = new object();
		private static System.ComponentModel.PropertyDescriptor[] _properties;
		
		private void _InitializePropertyDescriptors(Func<IReadOnlyKistlContext> lazyCtx)
		{
			if (_properties != null) return;
			lock (_propertiesLock)
			{
				// recheck for a lost race after aquiring the lock
				if (_properties != null) return;
				
				_properties = new System.ComponentModel.PropertyDescriptor[] {
					// else
					new CustomPropertyDescriptor<Property__Implementation__Memory, string>(
						lazyCtx,
						new Guid("13418a59-a804-4bc7-88ed-4d3509940301"),
						"CategoryTags",
						null,
						obj => obj.CategoryTags,
						(obj, val) => obj.CategoryTags = val),
					// else
					new CustomPropertyDescriptor<Property__Implementation__Memory, Kistl.App.Base.Identity>(
						lazyCtx,
						new Guid("f96e3f68-a293-4ed9-ba3a-2b172847fb46"),
						"ChangedBy",
						null,
						obj => obj.ChangedBy,
						(obj, val) => obj.ChangedBy = val),
					// else
					new CustomPropertyDescriptor<Property__Implementation__Memory, DateTime?>(
						lazyCtx,
						new Guid("d828264c-7c90-4050-a03d-3ea1829ce9d9"),
						"ChangedOn",
						null,
						obj => obj.ChangedOn,
						(obj, val) => obj.ChangedOn = val),
					// property.IsAssociation() && !property.IsObjectReferencePropertySingle()
					new CustomPropertyDescriptor<Property__Implementation__Memory, ICollection<Kistl.App.Base.Constraint>>(
						lazyCtx,
						new Guid("fd8f14da-e647-48cb-8593-3a30984f5c96"),
						"Constraints",
						null,
						obj => obj.Constraints,
						null), // lists are read-only properties
					// else
					new CustomPropertyDescriptor<Property__Implementation__Memory, Kistl.App.Base.Identity>(
						lazyCtx,
						new Guid("6b965c5e-31b9-4fa9-a5f0-7ea6c8b8e976"),
						"CreatedBy",
						null,
						obj => obj.CreatedBy,
						(obj, val) => obj.CreatedBy = val),
					// else
					new CustomPropertyDescriptor<Property__Implementation__Memory, DateTime?>(
						lazyCtx,
						new Guid("767fbab2-f9b4-41a9-9218-f60e0624b64f"),
						"CreatedOn",
						null,
						obj => obj.CreatedOn,
						(obj, val) => obj.CreatedOn = val),
					// else
					new CustomPropertyDescriptor<Property__Implementation__Memory, Kistl.App.Base.DefaultPropertyValue>(
						lazyCtx,
						new Guid("590d6a36-2e4b-41bd-a51e-298aba90ce72"),
						"DefaultValue",
						null,
						obj => obj.DefaultValue,
						(obj, val) => obj.DefaultValue = val),
					// else
					new CustomPropertyDescriptor<Property__Implementation__Memory, string>(
						lazyCtx,
						new Guid("5905ae85-6a44-4dbd-9752-49cac467d3cd"),
						"Description",
						null,
						obj => obj.Description,
						(obj, val) => obj.Description = val),
					// else
					new CustomPropertyDescriptor<Property__Implementation__Memory, Guid>(
						lazyCtx,
						new Guid("ca0a099d-3f4c-4604-8303-d751e57041bb"),
						"ExportGuid",
						null,
						obj => obj.ExportGuid,
						(obj, val) => obj.ExportGuid = val),
					// else
					new CustomPropertyDescriptor<Property__Implementation__Memory, Kistl.App.GUI.FilterConfiguration>(
						lazyCtx,
						new Guid("dbf93142-1769-4f53-bcbc-71325e1d5ce7"),
						"FilterConfiguration",
						null,
						obj => obj.FilterConfiguration,
						(obj, val) => obj.FilterConfiguration = val),
					// property.IsAssociation() && !property.IsObjectReferencePropertySingle()
					new CustomPropertyDescriptor<Property__Implementation__Memory, ICollection<Kistl.App.Base.PropertyInvocation>>(
						lazyCtx,
						new Guid("dddba981-ca47-4995-a9cc-d649bf5dd8a3"),
						"Invocations",
						null,
						obj => obj.Invocations,
						null), // lists are read-only properties
					// else
					new CustomPropertyDescriptor<Property__Implementation__Memory, Kistl.App.Base.Module>(
						lazyCtx,
						new Guid("2105acf5-0b98-4d0b-9be4-049a502a4f03"),
						"Module",
						null,
						obj => obj.Module,
						(obj, val) => obj.Module = val),
					// else
					new CustomPropertyDescriptor<Property__Implementation__Memory, string>(
						lazyCtx,
						new Guid("8c474623-7e53-4ca6-a996-f3b5a8c72834"),
						"Name",
						null,
						obj => obj.Name,
						(obj, val) => obj.Name = val),
					// else
					new CustomPropertyDescriptor<Property__Implementation__Memory, Kistl.App.Base.DataType>(
						lazyCtx,
						new Guid("bdaacacd-c8cb-45cf-a329-28f942337273"),
						"ObjectClass",
						null,
						obj => obj.ObjectClass,
						(obj, val) => obj.ObjectClass = val),
					// else
					new CustomPropertyDescriptor<Property__Implementation__Memory, Kistl.App.GUI.ViewModelDescriptor>(
						lazyCtx,
						new Guid("84e0996a-081f-4a17-a34d-54cf23991301"),
						"ValueModelDescriptor",
						null,
						obj => obj.ValueModelDescriptor,
						(obj, val) => obj.ValueModelDescriptor = val),
					// rel: ObjectClass has Properties (f7e487a4-6922-40bf-a404-24ce6accbb83)
					// rel.B.Type == cls && rel.B.HasPersistentOrder
					new CustomPropertyDescriptor<Property__Implementation__Memory, int?>(
						lazyCtx,
						null,
						"Properties_pos",
						null,
						obj => obj.Properties_pos,
						(obj, val) => obj.Properties_pos = val),
					// rel: ConstrainedProperty has Constraints (6fa271a3-e365-4b8d-9cb1-575d7a3b5d6a)
					// rel: BaseProperty has Module (bffae7c3-c5f3-4139-ae96-577f4c9fed8f)
					// rel: InvokeOnProperty has Invocations (dd9f5bf9-8a0e-432b-a7bb-5ba97e12face)
					// rel: Property has ValueModelDescriptor (3437ea5d-d926-4a0b-a848-9dafedf7ad6a)
					// rel: Property was ChangedBy (88098240-78f7-43eb-8c0d-746c8dfeba63)
					// rel: Property was CreatedBy (3c085354-3ef4-49b2-bb95-80d5295519f1)
					// rel: Visual has Property (73178882-7f93-444b-bf93-75db193904cf)
				};
			}
		}
		
		protected override void CollectProperties(Func<IReadOnlyKistlContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
		{
			base.CollectProperties(props);
			_InitializePropertyDescriptors(lazyCtx);
			props.AddRange(_properties);
		}
	

		public override void UpdateParent(string propertyName, int? id)
		{
			int? __oldValue, __newValue = id;
			
			switch(propertyName)
			{
                case "ChangedBy":
                    __oldValue = _fk_ChangedBy;
                    NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                    _fk_ChangedBy = __newValue;
                    NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    break;
                case "CreatedBy":
                    __oldValue = _fk_CreatedBy;
                    NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                    _fk_CreatedBy = __newValue;
                    NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    break;
                case "FilterConfiguration":
                    __oldValue = _fk_FilterConfiguration;
                    NotifyPropertyChanging("FilterConfiguration", __oldValue, __newValue);
                    _fk_FilterConfiguration = __newValue;
                    NotifyPropertyChanged("FilterConfiguration", __oldValue, __newValue);
                    break;
                case "Module":
                    __oldValue = _fk_Module;
                    NotifyPropertyChanging("Module", __oldValue, __newValue);
                    _fk_Module = __newValue;
                    NotifyPropertyChanged("Module", __oldValue, __newValue);
                    break;
                case "ObjectClass":
                    __oldValue = _fk_ObjectClass;
                    NotifyPropertyChanging("ObjectClass", __oldValue, __newValue);
                    _fk_ObjectClass = __newValue;
                    NotifyPropertyChanged("ObjectClass", __oldValue, __newValue);
                    break;
                case "ValueModelDescriptor":
                    __oldValue = _fk_ValueModelDescriptor;
                    NotifyPropertyChanging("ValueModelDescriptor", __oldValue, __newValue);
                    _fk_ValueModelDescriptor = __newValue;
                    NotifyPropertyChanged("ValueModelDescriptor", __oldValue, __newValue);
                    break;
				default:
					base.UpdateParent(propertyName, id);
					break;
			}
		}

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._CategoryTags, binStream);
            BinarySerializer.ToStream(this._fk_ChangedBy, binStream);
            BinarySerializer.ToStream(this._ChangedOn, binStream);

			BinarySerializer.ToStream(eagerLoadLists, binStream);
			if(eagerLoadLists)
			{
				BinarySerializer.ToStream(true, binStream);
				BinarySerializer.ToStream(Constraints.Count, binStream);
				foreach(var obj in Constraints)
				{
					if (auxObjects != null) {
						auxObjects.Add(obj);
					}
					BinarySerializer.ToStream(obj.ID, binStream);
				}
			}
			else
			{
				BinarySerializer.ToStream(false, binStream);
			}
            BinarySerializer.ToStream(this._fk_CreatedBy, binStream);
            BinarySerializer.ToStream(this._CreatedOn, binStream);
            BinarySerializer.ToStream(this._fk_DefaultValue, binStream);
            BinarySerializer.ToStream(this._Description, binStream);
            BinarySerializer.ToStream(this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.ToStream(this._ExportGuid, binStream);
            }
            BinarySerializer.ToStream(this._fk_FilterConfiguration, binStream);

			BinarySerializer.ToStream(eagerLoadLists, binStream);
			if(eagerLoadLists)
			{
				BinarySerializer.ToStream(true, binStream);
				BinarySerializer.ToStream(Invocations.Count, binStream);
				foreach(var obj in Invocations)
				{
					if (auxObjects != null) {
						auxObjects.Add(obj);
					}
					BinarySerializer.ToStream(obj.ID, binStream);
				}
			}
			else
			{
				BinarySerializer.ToStream(false, binStream);
			}
            BinarySerializer.ToStream(this._fk_Module, binStream);
            BinarySerializer.ToStream(this._Name, binStream);
            BinarySerializer.ToStream(this._fk_ObjectClass, binStream);
            BinarySerializer.ToStream(this._Properties_pos, binStream);
            BinarySerializer.ToStream(this._fk_ValueModelDescriptor, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._CategoryTags, binStream);
            BinarySerializer.FromStream(out this._fk_ChangedBy, binStream);
            BinarySerializer.FromStream(out this._ChangedOn, binStream);

			BinarySerializer.FromStream(out Constraints_was_eagerLoaded, binStream);
			{
				bool containsList;
				BinarySerializer.FromStream(out containsList, binStream);
				if(containsList)
				{
					int numElements;
					BinarySerializer.FromStream(out numElements, binStream);
					ConstraintsIds = new List<int>(numElements);
					while (numElements-- > 0) 
					{
						int id;
						BinarySerializer.FromStream(out id, binStream);
						ConstraintsIds.Add(id);
					}
				}
			}
            BinarySerializer.FromStream(out this._fk_CreatedBy, binStream);
            BinarySerializer.FromStream(out this._CreatedOn, binStream);
            BinarySerializer.FromStream(out this._fk_DefaultValue, binStream);
            BinarySerializer.FromStream(out this._Description, binStream);
            BinarySerializer.FromStream(out this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.FromStream(out this._ExportGuid, binStream);
            }
            BinarySerializer.FromStream(out this._fk_FilterConfiguration, binStream);

			BinarySerializer.FromStream(out Invocations_was_eagerLoaded, binStream);
			{
				bool containsList;
				BinarySerializer.FromStream(out containsList, binStream);
				if(containsList)
				{
					int numElements;
					BinarySerializer.FromStream(out numElements, binStream);
					InvocationsIds = new List<int>(numElements);
					while (numElements-- > 0) 
					{
						int id;
						BinarySerializer.FromStream(out id, binStream);
						InvocationsIds.Add(id);
					}
				}
			}
            BinarySerializer.FromStream(out this._fk_Module, binStream);
            BinarySerializer.FromStream(out this._Name, binStream);
            BinarySerializer.FromStream(out this._fk_ObjectClass, binStream);
            BinarySerializer.FromStream(out this._Properties_pos, binStream);
            BinarySerializer.FromStream(out this._fk_ValueModelDescriptor, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._CategoryTags, xml, "CategoryTags", "Kistl.App.Base");
            XmlStreamer.ToStream(this._fk_ChangedBy, xml, "ChangedBy", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            XmlStreamer.ToStream(this._fk_CreatedBy, xml, "CreatedBy", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            XmlStreamer.ToStream(this._fk_DefaultValue, xml, "DefaultValue", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._Description, xml, "Description", "Kistl.App.Base");
            XmlStreamer.ToStream(this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.Base");
            if (this._isExportGuidSet) {
                XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(this._fk_FilterConfiguration, xml, "FilterConfiguration", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_Module, xml, "Module", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._Name, xml, "Name", "Kistl.App.Base");
            XmlStreamer.ToStream(this._fk_ObjectClass, xml, "ObjectClass", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._Properties_pos, xml, "Properties_pos", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_ValueModelDescriptor, xml, "ValueModelDescriptor", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._CategoryTags, xml, "CategoryTags", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_ChangedBy, xml, "ChangedBy", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_CreatedBy, xml, "CreatedBy", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_DefaultValue, xml, "DefaultValue", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.Base");
            if (this._isExportGuidSet) {
                XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "Kistl.App.Base");
            }
            XmlStreamer.FromStream(ref this._fk_FilterConfiguration, xml, "FilterConfiguration", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_Module, xml, "Module", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._Name, xml, "Name", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._fk_ObjectClass, xml, "ObjectClass", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._Properties_pos, xml, "Properties_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_ValueModelDescriptor, xml, "ValueModelDescriptor", "http://dasz.at/Kistl");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
    
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._CategoryTags, xml, "CategoryTags", "Kistl.App.Base");
    
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
    
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
    
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._Description, xml, "Description", "Kistl.App.Base");
    
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._Name, xml, "Name", "Kistl.App.Base");
	
            if (modules.Contains("*") || modules.Contains("http://dasz.at/Kistl")) XmlStreamer.ToStream(this._Properties_pos, xml, "Properties_pos", "http://dasz.at/Kistl");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._CategoryTags, xml, "CategoryTags", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "Kistl.App.Base");
            this._isExportGuidSet = true;
            XmlStreamer.FromStream(ref this._Name, xml, "Name", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._Properties_pos, xml, "Properties_pos", "http://dasz.at/Kistl");
        }

#endregion

    }


}