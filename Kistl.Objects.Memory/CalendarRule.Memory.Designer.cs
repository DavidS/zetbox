// <autogenerated/>

namespace Kistl.App.Calendar
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;
    using Kistl.DalProvider.Base.RelationWrappers;

    using Kistl.DalProvider.Base;
    using Kistl.DalProvider.Memory;

    /// <summary>
    /// Abstract base class for Calendar Rules describing recurrent working hours
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("CalendarRule")]
    public abstract class CalendarRuleMemoryImpl : Kistl.DalProvider.Memory.DataObjectMemoryImpl, CalendarRule, Kistl.API.IExportableInternal
    {
        [Obsolete]
        public CalendarRuleMemoryImpl()
            : base(null)
        {
        }

        public CalendarRuleMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Calendar
        // fkBackingName=_fk_Calendar; fkGuidBackingName=_fk_guid_Calendar;
        // referencedInterface=Kistl.App.Calendar.Calendar; moduleNamespace=Kistl.App.Calendar;
        // inverse Navigator=CalendarRules; is list;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.Calendar.Calendar Calendar
        {
            get { return CalendarImpl; }
            set { CalendarImpl = (Kistl.App.Calendar.CalendarMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_Calendar;

        private Guid? _fk_guid_Calendar = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.Calendar.CalendarMemoryImpl CalendarImpl
        {
            get
            {
                Kistl.App.Calendar.CalendarMemoryImpl __value;
                if (_fk_Calendar.HasValue)
                    __value = (Kistl.App.Calendar.CalendarMemoryImpl)Context.Find<Kistl.App.Calendar.Calendar>(_fk_Calendar.Value);
                else
                    __value = null;

                if (OnCalendar_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Calendar.Calendar>(__value);
                    OnCalendar_Getter(this, e);
                    __value = (Kistl.App.Calendar.CalendarMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_Calendar == null)
                    return;
                else if (value != null && value.ID == _fk_Calendar)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = CalendarImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Calendar", __oldValue, __newValue);

                if (OnCalendar_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Calendar.Calendar>(__oldValue, __newValue);
                    OnCalendar_PreSetter(this, e);
                    __newValue = (Kistl.App.Calendar.CalendarMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_Calendar = __newValue == null ? (int?)null : __newValue.ID;

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.CalendarRules as IRelationListSync<Kistl.App.Calendar.CalendarRule>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.CalendarRules as IRelationListSync<Kistl.App.Calendar.CalendarRule>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("Calendar", __oldValue, __newValue);

                if (OnCalendar_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Calendar.Calendar>(__oldValue, __newValue);
                    OnCalendar_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Calendar
		public static event PropertyGetterHandler<Kistl.App.Calendar.CalendarRule, Kistl.App.Calendar.Calendar> OnCalendar_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Calendar.CalendarRule, Kistl.App.Calendar.Calendar> OnCalendar_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Calendar.CalendarRule, Kistl.App.Calendar.Calendar> OnCalendar_PostSetter;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=Kistl.App.Calendar;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Kistl.App.Base.IdentityMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_ChangedBy;


        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.Base.IdentityMemoryImpl ChangedByImpl
        {
            get
            {
                Kistl.App.Base.IdentityMemoryImpl __value;
                if (_fk_ChangedBy.HasValue)
                    __value = (Kistl.App.Base.IdentityMemoryImpl)Context.Find<Kistl.App.Base.Identity>(_fk_ChangedBy.Value);
                else
                    __value = null;

                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_ChangedBy == null)
                    return;
                else if (value != null && value.ID == _fk_ChangedBy)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = ChangedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_ChangedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Kistl.App.Calendar.CalendarRule, Kistl.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Calendar.CalendarRule, Kistl.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Calendar.CalendarRule, Kistl.App.Base.Identity> OnChangedBy_PostSetter;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("ddab18cc-3278-4ac5-8a76-25d23b1cb7be"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'CalendarRule.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime _ChangedOn;
        private bool _isChangedOnSet = false;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Calendar.CalendarRule, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Calendar.CalendarRule, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Calendar.CalendarRule, DateTime> OnChangedOn_PostSetter;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=Kistl.App.Calendar;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Kistl.App.Base.IdentityMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_CreatedBy;


        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.Base.IdentityMemoryImpl CreatedByImpl
        {
            get
            {
                Kistl.App.Base.IdentityMemoryImpl __value;
                if (_fk_CreatedBy.HasValue)
                    __value = (Kistl.App.Base.IdentityMemoryImpl)Context.Find<Kistl.App.Base.Identity>(_fk_CreatedBy.Value);
                else
                    __value = null;

                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_CreatedBy == null)
                    return;
                else if (value != null && value.ID == _fk_CreatedBy)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = CreatedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_CreatedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Kistl.App.Calendar.CalendarRule, Kistl.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Calendar.CalendarRule, Kistl.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Calendar.CalendarRule, Kistl.App.Base.Identity> OnCreatedBy_PostSetter;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("d61d2a16-f80d-449f-9850-0301a43fdc71"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'CalendarRule.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime _CreatedOn;
        private bool _isCreatedOnSet = false;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Calendar.CalendarRule, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Calendar.CalendarRule, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Calendar.CalendarRule, DateTime> OnCreatedOn_PostSetter;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("c730faff-a917-4f89-9a49-b65374cb4de1"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'CalendarRule.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
            }
        }
        private Guid _ExportGuid;
        private bool _isExportGuidSet = false;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Calendar.CalendarRule, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Calendar.CalendarRule, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Calendar.CalendarRule, Guid> OnExportGuid_PostSetter;

        /// <summary>
        /// True if the day is a working day, regardless of the working hours. E.g. Saturday is a working day (in Austria), but most people aktually don&apos;t work.
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public bool IsWorkingDay
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsWorkingDay;
                if (!_isIsWorkingDaySet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("09cfc4e1-c106-46ec-825d-31226d8df335"));
                    if (__p != null) {
                        _isIsWorkingDaySet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._IsWorkingDay = (bool)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'CalendarRule.IsWorkingDay'");
                    }
                }
                if (OnIsWorkingDay_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsWorkingDay_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isIsWorkingDaySet = true;
                if (_IsWorkingDay != value)
                {
                    var __oldValue = _IsWorkingDay;
                    var __newValue = value;
                    if (OnIsWorkingDay_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsWorkingDay_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsWorkingDay", __oldValue, __newValue);
                    _IsWorkingDay = __newValue;
                    NotifyPropertyChanged("IsWorkingDay", __oldValue, __newValue);
                    if (OnIsWorkingDay_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsWorkingDay_PostSetter(this, __e);
                    }
                }
            }
        }
        private bool _IsWorkingDay;
        private bool _isIsWorkingDaySet = false;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Calendar.CalendarRule, bool> OnIsWorkingDay_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Calendar.CalendarRule, bool> OnIsWorkingDay_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Calendar.CalendarRule, bool> OnIsWorkingDay_PostSetter;

        /// <summary>
        /// Optional member of a module
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=_fk_Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Kistl.App.Base.Module; moduleNamespace=Kistl.App.Calendar;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.Base.Module Module
        {
            get { return ModuleImpl; }
            set { ModuleImpl = (Kistl.App.Base.ModuleMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_Module;

        private Guid? _fk_guid_Module = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.Base.ModuleMemoryImpl ModuleImpl
        {
            get
            {
                Kistl.App.Base.ModuleMemoryImpl __value;
                if (_fk_Module.HasValue)
                    __value = (Kistl.App.Base.ModuleMemoryImpl)Context.Find<Kistl.App.Base.Module>(_fk_Module.Value);
                else
                    __value = null;

                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Module>(__value);
                    OnModule_Getter(this, e);
                    __value = (Kistl.App.Base.ModuleMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_Module == null)
                    return;
                else if (value != null && value.ID == _fk_Module)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = ModuleImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Module", __oldValue, __newValue);

                if (OnModule_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.ModuleMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_Module = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Module", __oldValue, __newValue);

                if (OnModule_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Kistl.App.Calendar.CalendarRule, Kistl.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Calendar.CalendarRule, Kistl.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Calendar.CalendarRule, Kistl.App.Base.Module> OnModule_PostSetter;

        /// <summary>
        /// The name of the Rule
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Name;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Calendar.CalendarRule, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Calendar.CalendarRule, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Calendar.CalendarRule, string> OnName_PostSetter;

        /// <summary>
        /// Optional valid from date
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime? ValidFrom
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ValidFrom;
                if (OnValidFrom_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnValidFrom_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ValidFrom != value)
                {
                    var __oldValue = _ValidFrom;
                    var __newValue = value;
                    if (OnValidFrom_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnValidFrom_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ValidFrom", __oldValue, __newValue);
                    _ValidFrom = __newValue;
                    NotifyPropertyChanged("ValidFrom", __oldValue, __newValue);
                    if (OnValidFrom_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnValidFrom_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime? _ValidFrom;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Calendar.CalendarRule, DateTime?> OnValidFrom_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Calendar.CalendarRule, DateTime?> OnValidFrom_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Calendar.CalendarRule, DateTime?> OnValidFrom_PostSetter;

        /// <summary>
        /// Optional valid until date
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime? ValidUntil
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ValidUntil;
                if (OnValidUntil_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnValidUntil_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ValidUntil != value)
                {
                    var __oldValue = _ValidUntil;
                    var __newValue = value;
                    if (OnValidUntil_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnValidUntil_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ValidUntil", __oldValue, __newValue);
                    _ValidUntil = __newValue;
                    NotifyPropertyChanged("ValidUntil", __oldValue, __newValue);
                    if (OnValidUntil_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnValidUntil_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime? _ValidUntil;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Calendar.CalendarRule, DateTime?> OnValidUntil_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Calendar.CalendarRule, DateTime?> OnValidUntil_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Calendar.CalendarRule, DateTime?> OnValidUntil_PostSetter;

        /// <summary>
        /// The amount of working hours. 0 if it&apos;s a free day.
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public decimal WorkingHours
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _WorkingHours;
                if (OnWorkingHours_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<decimal>(__result);
                    OnWorkingHours_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_WorkingHours != value)
                {
                    var __oldValue = _WorkingHours;
                    var __newValue = value;
                    if (OnWorkingHours_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<decimal>(__oldValue, __newValue);
                        OnWorkingHours_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("WorkingHours", __oldValue, __newValue);
                    _WorkingHours = __newValue;
                    NotifyPropertyChanged("WorkingHours", __oldValue, __newValue);
                    if (OnWorkingHours_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<decimal>(__oldValue, __newValue);
                        OnWorkingHours_PostSetter(this, __e);
                    }
                }
            }
        }
        private decimal _WorkingHours;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Kistl.App.Calendar.CalendarRule, decimal> OnWorkingHours_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Calendar.CalendarRule, decimal> OnWorkingHours_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Calendar.CalendarRule, decimal> OnWorkingHours_PostSetter;

        /// <summary>
        /// Checks if the Rule applies to the given date
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnAppliesTo_CalendarRule")]
        public virtual bool AppliesTo(System.DateTime date)
        {
            var e = new MethodReturnEventArgs<bool>();
            if (OnAppliesTo_CalendarRule != null)
            {
                OnAppliesTo_CalendarRule(this, e, date);
            }
            else
            {
                throw new NotImplementedException("No handler registered on CalendarRule.AppliesTo");
            }
            return e.Result;
        }
        public delegate void AppliesTo_Handler<T>(T obj, MethodReturnEventArgs<bool> ret, System.DateTime date);
        public static event AppliesTo_Handler<CalendarRule> OnAppliesTo_CalendarRule;
        // END Kistl.Generator.Templates.ObjectClasses.Method

        public override Type GetImplementedInterface()
        {
            return typeof(CalendarRule);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (CalendarRule)obj;
            var otherImpl = (CalendarRuleMemoryImpl)obj;
            var me = (CalendarRule)this;

            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.ExportGuid = other.ExportGuid;
            me.IsWorkingDay = other.IsWorkingDay;
            me.Name = other.Name;
            me.ValidFrom = other.ValidFrom;
            me.ValidUntil = other.ValidUntil;
            me.WorkingHours = other.WorkingHours;
            this._fk_Calendar = otherImpl._fk_Calendar;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_Module = otherImpl._fk_Module;
        }

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }

		public override void UpdateParent(string propertyName, int? id)
		{
			int? __oldValue, __newValue = id;
			
			switch(propertyName)
			{
                case "Calendar":
                    __oldValue = _fk_Calendar;
                    NotifyPropertyChanging("Calendar", __oldValue, __newValue);
                    _fk_Calendar = __newValue;
                    NotifyPropertyChanged("Calendar", __oldValue, __newValue);
                    break;
                case "ChangedBy":
                    __oldValue = _fk_ChangedBy;
                    NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                    _fk_ChangedBy = __newValue;
                    NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    break;
                case "CreatedBy":
                    __oldValue = _fk_CreatedBy;
                    NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                    _fk_CreatedBy = __newValue;
                    NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    break;
                case "Module":
                    __oldValue = _fk_Module;
                    NotifyPropertyChanging("Module", __oldValue, __newValue);
                    _fk_Module = __newValue;
                    NotifyPropertyChanged("Module", __oldValue, __newValue);
                    break;
				default:
					base.UpdateParent(propertyName, id);
					break;
			}
		}

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_Calendar.HasValue)
                CalendarImpl = (Kistl.App.Calendar.CalendarMemoryImpl)Context.FindPersistenceObject<Kistl.App.Calendar.Calendar>(_fk_guid_Calendar.Value);
            else
            if (_fk_Calendar.HasValue)
                CalendarImpl = (Kistl.App.Calendar.CalendarMemoryImpl)Context.Find<Kistl.App.Calendar.Calendar>(_fk_Calendar.Value);
            else
                CalendarImpl = null;

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Kistl.App.Base.IdentityMemoryImpl)Context.Find<Kistl.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Kistl.App.Base.IdentityMemoryImpl)Context.Find<Kistl.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;

            if (_fk_guid_Module.HasValue)
                ModuleImpl = (Kistl.App.Base.ModuleMemoryImpl)Context.FindPersistenceObject<Kistl.App.Base.Module>(_fk_guid_Module.Value);
            else
            if (_fk_Module.HasValue)
                ModuleImpl = (Kistl.App.Base.ModuleMemoryImpl)Context.Find<Kistl.App.Base.Module>(_fk_Module.Value);
            else
                ModuleImpl = null;
        }
        #region Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorMemoryImpl<CalendarRuleMemoryImpl, Kistl.App.Calendar.Calendar>(
                        lazyCtx,
                        new Guid("115c1d4c-ddd3-4d33-ae74-a6b676fc0dfa"),
                        "Calendar",
                        null,
                        obj => obj.Calendar,
                        (obj, val) => obj.Calendar = val),
                    // else
                    new PropertyDescriptorMemoryImpl<CalendarRuleMemoryImpl, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("a14bfc87-c65e-4111-8245-3fbb31189392"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val),
                    // else
                    new PropertyDescriptorMemoryImpl<CalendarRuleMemoryImpl, DateTime>(
                        lazyCtx,
                        new Guid("ddab18cc-3278-4ac5-8a76-25d23b1cb7be"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val),
                    // else
                    new PropertyDescriptorMemoryImpl<CalendarRuleMemoryImpl, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("0556d238-5f1e-4f01-b7b1-13f562726942"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val),
                    // else
                    new PropertyDescriptorMemoryImpl<CalendarRuleMemoryImpl, DateTime>(
                        lazyCtx,
                        new Guid("d61d2a16-f80d-449f-9850-0301a43fdc71"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val),
                    // else
                    new PropertyDescriptorMemoryImpl<CalendarRuleMemoryImpl, Guid>(
                        lazyCtx,
                        new Guid("c730faff-a917-4f89-9a49-b65374cb4de1"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val),
                    // else
                    new PropertyDescriptorMemoryImpl<CalendarRuleMemoryImpl, bool>(
                        lazyCtx,
                        new Guid("09cfc4e1-c106-46ec-825d-31226d8df335"),
                        "IsWorkingDay",
                        null,
                        obj => obj.IsWorkingDay,
                        (obj, val) => obj.IsWorkingDay = val),
                    // else
                    new PropertyDescriptorMemoryImpl<CalendarRuleMemoryImpl, Kistl.App.Base.Module>(
                        lazyCtx,
                        new Guid("7fc947a4-09c5-433b-a26e-5014663e3931"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val),
                    // else
                    new PropertyDescriptorMemoryImpl<CalendarRuleMemoryImpl, string>(
                        lazyCtx,
                        new Guid("88bd31d8-6963-49ed-8ac8-31d438744eef"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val),
                    // else
                    new PropertyDescriptorMemoryImpl<CalendarRuleMemoryImpl, DateTime?>(
                        lazyCtx,
                        new Guid("940552fc-7cb1-4512-9096-54c3e70f7a1f"),
                        "ValidFrom",
                        null,
                        obj => obj.ValidFrom,
                        (obj, val) => obj.ValidFrom = val),
                    // else
                    new PropertyDescriptorMemoryImpl<CalendarRuleMemoryImpl, DateTime?>(
                        lazyCtx,
                        new Guid("4fced9a6-fe27-44a2-a21d-17a09c720588"),
                        "ValidUntil",
                        null,
                        obj => obj.ValidUntil,
                        (obj, val) => obj.ValidUntil = val),
                    // else
                    new PropertyDescriptorMemoryImpl<CalendarRuleMemoryImpl, decimal>(
                        lazyCtx,
                        new Guid("20370deb-580a-44e6-b201-f5740ee5e330"),
                        "WorkingHours",
                        null,
                        obj => obj.WorkingHours,
                        (obj, val) => obj.WorkingHours = val),
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_CalendarRule")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_CalendarRule != null)
            {
                OnToString_CalendarRule(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<CalendarRule> OnToString_CalendarRule;

        [EventBasedMethod("OnPreSave_CalendarRule")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_CalendarRule != null) OnPreSave_CalendarRule(this);
        }
        public static event ObjectEventHandler<CalendarRule> OnPreSave_CalendarRule;

        [EventBasedMethod("OnPostSave_CalendarRule")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_CalendarRule != null) OnPostSave_CalendarRule(this);
        }
        public static event ObjectEventHandler<CalendarRule> OnPostSave_CalendarRule;

        [EventBasedMethod("OnCreated_CalendarRule")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_CalendarRule != null) OnCreated_CalendarRule(this);
        }
        public static event ObjectEventHandler<CalendarRule> OnCreated_CalendarRule;

        [EventBasedMethod("OnDeleting_CalendarRule")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_CalendarRule != null) OnDeleting_CalendarRule(this);
        }
        public static event ObjectEventHandler<CalendarRule> OnDeleting_CalendarRule;

        #endregion // Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(Calendar != null ? Calendar.ID : (int?)null, binStream);
            BinarySerializer.ToStream(ChangedBy != null ? ChangedBy.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                BinarySerializer.ToStream(this._ChangedOn, binStream);
            }
            BinarySerializer.ToStream(CreatedBy != null ? CreatedBy.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                BinarySerializer.ToStream(this._CreatedOn, binStream);
            }
            BinarySerializer.ToStream(this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.ToStream(this._ExportGuid, binStream);
            }
            BinarySerializer.ToStream(this._isIsWorkingDaySet, binStream);
            if (this._isIsWorkingDaySet) {
                BinarySerializer.ToStream(this._IsWorkingDay, binStream);
            }
            BinarySerializer.ToStream(Module != null ? Module.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._Name, binStream);
            BinarySerializer.ToStream(this._ValidFrom, binStream);
            BinarySerializer.ToStream(this._ValidUntil, binStream);
            BinarySerializer.ToStream(this._WorkingHours, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            BinarySerializer.FromStream(out this._fk_Calendar, binStream);
            BinarySerializer.FromStream(out this._fk_ChangedBy, binStream);
            BinarySerializer.FromStream(out this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                BinarySerializer.FromStream(out this._ChangedOn, binStream);
            }
            BinarySerializer.FromStream(out this._fk_CreatedBy, binStream);
            BinarySerializer.FromStream(out this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                BinarySerializer.FromStream(out this._CreatedOn, binStream);
            }
            BinarySerializer.FromStream(out this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.FromStream(out this._ExportGuid, binStream);
            }
            BinarySerializer.FromStream(out this._isIsWorkingDaySet, binStream);
            if (this._isIsWorkingDaySet) {
                BinarySerializer.FromStream(out this._IsWorkingDay, binStream);
            }
            BinarySerializer.FromStream(out this._fk_Module, binStream);
            BinarySerializer.FromStream(out this._Name, binStream);
            BinarySerializer.FromStream(out this._ValidFrom, binStream);
            BinarySerializer.FromStream(out this._ValidUntil, binStream);
            BinarySerializer.FromStream(out this._WorkingHours, binStream);
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            XmlStreamer.ToStream(Calendar != null ? Calendar.ID : (int?)null, xml, "Calendar", "Kistl.App.Calendar");
            XmlStreamer.ToStream(ChangedBy != null ? ChangedBy.ID : (int?)null, xml, "ChangedBy", "Kistl.App.Calendar");
            XmlStreamer.ToStream(this._isChangedOnSet, xml, "IsChangedOnSet", "Kistl.App.Calendar");
            if (this._isChangedOnSet) {
                XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Kistl.App.Calendar");
            }
            XmlStreamer.ToStream(CreatedBy != null ? CreatedBy.ID : (int?)null, xml, "CreatedBy", "Kistl.App.Calendar");
            XmlStreamer.ToStream(this._isCreatedOnSet, xml, "IsCreatedOnSet", "Kistl.App.Calendar");
            if (this._isCreatedOnSet) {
                XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Kistl.App.Calendar");
            }
            XmlStreamer.ToStream(this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.Calendar");
            if (this._isExportGuidSet) {
                XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "Kistl.App.Calendar");
            }
            XmlStreamer.ToStream(this._isIsWorkingDaySet, xml, "IsIsWorkingDaySet", "Kistl.App.Calendar");
            if (this._isIsWorkingDaySet) {
                XmlStreamer.ToStream(this._IsWorkingDay, xml, "IsWorkingDay", "Kistl.App.Calendar");
            }
            XmlStreamer.ToStream(Module != null ? Module.ID : (int?)null, xml, "Module", "Kistl.App.Calendar");
            XmlStreamer.ToStream(this._Name, xml, "Name", "Kistl.App.Calendar");
            XmlStreamer.ToStream(this._ValidFrom, xml, "ValidFrom", "Kistl.App.Calendar");
            XmlStreamer.ToStream(this._ValidUntil, xml, "ValidUntil", "Kistl.App.Calendar");
            XmlStreamer.ToStream(this._WorkingHours, xml, "WorkingHours", "Kistl.App.Calendar");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            XmlStreamer.FromStream(ref this._fk_Calendar, xml, "Calendar", "Kistl.App.Calendar");
            XmlStreamer.FromStream(ref this._fk_ChangedBy, xml, "ChangedBy", "Kistl.App.Calendar");
            XmlStreamer.FromStream(ref this._isChangedOnSet, xml, "IsChangedOnSet", "Kistl.App.Calendar");
            if (this._isChangedOnSet) {
                XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "Kistl.App.Calendar");
            }
            XmlStreamer.FromStream(ref this._fk_CreatedBy, xml, "CreatedBy", "Kistl.App.Calendar");
            XmlStreamer.FromStream(ref this._isCreatedOnSet, xml, "IsCreatedOnSet", "Kistl.App.Calendar");
            if (this._isCreatedOnSet) {
                XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "Kistl.App.Calendar");
            }
            XmlStreamer.FromStream(ref this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.Calendar");
            if (this._isExportGuidSet) {
                XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "Kistl.App.Calendar");
            }
            XmlStreamer.FromStream(ref this._isIsWorkingDaySet, xml, "IsIsWorkingDaySet", "Kistl.App.Calendar");
            if (this._isIsWorkingDaySet) {
                XmlStreamer.FromStream(ref this._IsWorkingDay, xml, "IsWorkingDay", "Kistl.App.Calendar");
            }
            XmlStreamer.FromStream(ref this._fk_Module, xml, "Module", "Kistl.App.Calendar");
            XmlStreamer.FromStream(ref this._Name, xml, "Name", "Kistl.App.Calendar");
            XmlStreamer.FromStream(ref this._ValidFrom, xml, "ValidFrom", "Kistl.App.Calendar");
            XmlStreamer.FromStream(ref this._ValidUntil, xml, "ValidUntil", "Kistl.App.Calendar");
            XmlStreamer.FromStream(ref this._WorkingHours, xml, "WorkingHours", "Kistl.App.Calendar");
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            if (modules.Contains("*") || modules.Contains("Kistl.App.Calendar")) XmlStreamer.ToStream(Calendar != null ? Calendar.ExportGuid : (Guid?)null, xml, "Calendar", "Kistl.App.Calendar");
            System.Diagnostics.Debug.Assert(this._isChangedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Calendar")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Kistl.App.Calendar");
            System.Diagnostics.Debug.Assert(this._isCreatedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Calendar")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Kistl.App.Calendar");
            System.Diagnostics.Debug.Assert(this._isIsWorkingDaySet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Calendar")) XmlStreamer.ToStream(this._IsWorkingDay, xml, "IsWorkingDay", "Kistl.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Calendar")) XmlStreamer.ToStream(Module != null ? Module.ExportGuid : (Guid?)null, xml, "Module", "Kistl.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Calendar")) XmlStreamer.ToStream(this._Name, xml, "Name", "Kistl.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Calendar")) XmlStreamer.ToStream(this._ValidFrom, xml, "ValidFrom", "Kistl.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Calendar")) XmlStreamer.ToStream(this._ValidUntil, xml, "ValidUntil", "Kistl.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Calendar")) XmlStreamer.ToStream(this._WorkingHours, xml, "WorkingHours", "Kistl.App.Calendar");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._fk_guid_Calendar, xml, "Calendar", "Kistl.App.Calendar");
            // Import must have default value set
            XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "Kistl.App.Calendar");
            this._isChangedOnSet = true;
            // Import must have default value set
            XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "Kistl.App.Calendar");
            this._isCreatedOnSet = true;
            // Import must have default value set
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "Kistl.App.Calendar");
            this._isExportGuidSet = true;
            // Import must have default value set
            XmlStreamer.FromStream(ref this._IsWorkingDay, xml, "IsWorkingDay", "Kistl.App.Calendar");
            this._isIsWorkingDaySet = true;
            XmlStreamer.FromStream(ref this._fk_guid_Module, xml, "Module", "Kistl.App.Calendar");
            XmlStreamer.FromStream(ref this._Name, xml, "Name", "Kistl.App.Calendar");
            XmlStreamer.FromStream(ref this._ValidFrom, xml, "ValidFrom", "Kistl.App.Calendar");
            XmlStreamer.FromStream(ref this._ValidUntil, xml, "ValidUntil", "Kistl.App.Calendar");
            XmlStreamer.FromStream(ref this._WorkingHours, xml, "WorkingHours", "Kistl.App.Calendar");
        }

        #endregion

    }
}