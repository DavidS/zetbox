// <autogenerated/>


namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;

    using Kistl.DalProvider.Memory;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("InvokingConstraint")]
    public class InvokingConstraint__Implementation__Memory : Kistl.App.Base.Constraint__Implementation__Memory, InvokingConstraint
    {
        [Obsolete]
        public InvokingConstraint__Implementation__Memory()
            : base(null)
        {
            {
            }
        }

        public InvokingConstraint__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
            : base(lazyCtx)
        {
            {
            }
        }


        /// <summary>
        /// 
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for GetErrorTextInvocation
		// rel(A): Constraint invokes GetErrorTextInvocation
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.ConstraintInvocation GetErrorTextInvocation
        {
            get
            {
				Kistl.App.Base.ConstraintInvocation __value;
                if (_fk_GetErrorTextInvocation.HasValue)
                    __value = Context.Find<Kistl.App.Base.ConstraintInvocation>(_fk_GetErrorTextInvocation.Value);
                else
                    __value = null;

				if(OnGetErrorTextInvocation_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Base.ConstraintInvocation>(__value);
					OnGetErrorTextInvocation_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_GetErrorTextInvocation == null)
					return;
                else if (value != null && value.ID == _fk_GetErrorTextInvocation)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = GetErrorTextInvocation;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("GetErrorTextInvocation", __oldValue, __newValue);
				
                if(OnGetErrorTextInvocation_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Base.ConstraintInvocation>(__oldValue, __newValue);
					OnGetErrorTextInvocation_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_GetErrorTextInvocation = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("GetErrorTextInvocation", __oldValue, __newValue);

                if(OnGetErrorTextInvocation_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Base.ConstraintInvocation>(__oldValue, __newValue);
					OnGetErrorTextInvocation_PostSetter(this, e);
                }
                
            }
        }
        
        private int? _fk_GetErrorTextInvocation;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for GetErrorTextInvocation
		public static event PropertyGetterHandler<Kistl.App.Base.InvokingConstraint, Kistl.App.Base.ConstraintInvocation> OnGetErrorTextInvocation_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.InvokingConstraint, Kistl.App.Base.ConstraintInvocation> OnGetErrorTextInvocation_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.InvokingConstraint, Kistl.App.Base.ConstraintInvocation> OnGetErrorTextInvocation_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // object reference property
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for IsValidInvocation
		// rel(A): Constraint invokes IsValidInvocation
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.ConstraintInvocation IsValidInvocation
        {
            get
            {
				Kistl.App.Base.ConstraintInvocation __value;
                if (_fk_IsValidInvocation.HasValue)
                    __value = Context.Find<Kistl.App.Base.ConstraintInvocation>(_fk_IsValidInvocation.Value);
                else
                    __value = null;

				if(OnIsValidInvocation_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Kistl.App.Base.ConstraintInvocation>(__value);
					OnIsValidInvocation_Getter(this, e);
					__value = e.Result;
				}
                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_IsValidInvocation == null)
					return;
                else if (value != null && value.ID == _fk_IsValidInvocation)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = IsValidInvocation;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("IsValidInvocation", __oldValue, __newValue);
				
                if(OnIsValidInvocation_PreSetter != null && IsAttached)
                {
					var e = new PropertyPreSetterEventArgs<Kistl.App.Base.ConstraintInvocation>(__oldValue, __newValue);
					OnIsValidInvocation_PreSetter(this, e);
					__newValue = e.Result;
                }
                
				// next, set the local reference
                _fk_IsValidInvocation = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("IsValidInvocation", __oldValue, __newValue);

                if(OnIsValidInvocation_PostSetter != null && IsAttached)
                {
					var e = new PropertyPostSetterEventArgs<Kistl.App.Base.ConstraintInvocation>(__oldValue, __newValue);
					OnIsValidInvocation_PostSetter(this, e);
                }
                
            }
        }
        
        private int? _fk_IsValidInvocation;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for IsValidInvocation
		public static event PropertyGetterHandler<Kistl.App.Base.InvokingConstraint, Kistl.App.Base.ConstraintInvocation> OnIsValidInvocation_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.InvokingConstraint, Kistl.App.Base.ConstraintInvocation> OnIsValidInvocation_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.InvokingConstraint, Kistl.App.Base.ConstraintInvocation> OnIsValidInvocation_PostSetter;

        /// <summary>
        /// 
        /// </summary>
		[EventBasedMethod("OnGetErrorText_InvokingConstraint")]
		public override string GetErrorText(System.Object constrainedObject, System.Object constrainedValue) 
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetErrorText_InvokingConstraint != null)
            {
                OnGetErrorText_InvokingConstraint(this, e, constrainedObject, constrainedValue);
            }
            else
            {
                e.Result = base.GetErrorText(constrainedObject, constrainedValue);
            }
            return e.Result;
        }
		public static event GetErrorText_Handler<InvokingConstraint> OnGetErrorText_InvokingConstraint;



        /// <summary>
        /// 
        /// </summary>
		[EventBasedMethod("OnIsValid_InvokingConstraint")]
		public override bool IsValid(System.Object constrainedObject, System.Object constrainedValue) 
        {
            var e = new MethodReturnEventArgs<bool>();
            if (OnIsValid_InvokingConstraint != null)
            {
                OnIsValid_InvokingConstraint(this, e, constrainedObject, constrainedValue);
            }
            else
            {
                e.Result = base.IsValid(constrainedObject, constrainedValue);
            }
            return e.Result;
        }
		public static event IsValid_Handler<InvokingConstraint> OnIsValid_InvokingConstraint;



        public override Type GetImplementedInterface()
        {
            return typeof(InvokingConstraint);
        }

		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (InvokingConstraint)obj;
			var otherImpl = (InvokingConstraint__Implementation__Memory)obj;
			var me = (InvokingConstraint)this;

			this._fk_GetErrorTextInvocation = otherImpl._fk_GetErrorTextInvocation;
			this._fk_IsValidInvocation = otherImpl._fk_IsValidInvocation;
		}

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
		}

        // tail template
   		// Kistl.Server.Generators.Templates.Implementation.ObjectClasses.Tail

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_InvokingConstraint")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_InvokingConstraint != null)
            {
                OnToString_InvokingConstraint(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<InvokingConstraint> OnToString_InvokingConstraint;

        [EventBasedMethod("OnPreSave_InvokingConstraint")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_InvokingConstraint != null) OnPreSave_InvokingConstraint(this);
        }
        public static event ObjectEventHandler<InvokingConstraint> OnPreSave_InvokingConstraint;

        [EventBasedMethod("OnPostSave_InvokingConstraint")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_InvokingConstraint != null) OnPostSave_InvokingConstraint(this);
        }
        public static event ObjectEventHandler<InvokingConstraint> OnPostSave_InvokingConstraint;

        [EventBasedMethod("OnCreated_InvokingConstraint")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_InvokingConstraint != null) OnCreated_InvokingConstraint(this);
        }
        public static event ObjectEventHandler<InvokingConstraint> OnCreated_InvokingConstraint;

        [EventBasedMethod("OnDeleting_InvokingConstraint")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_InvokingConstraint != null) OnDeleting_InvokingConstraint(this);
        }
        public static event ObjectEventHandler<InvokingConstraint> OnDeleting_InvokingConstraint;


		private static readonly object _propertiesLock = new object();
		private static System.ComponentModel.PropertyDescriptor[] _properties;
		
		private void _InitializePropertyDescriptors(Func<IReadOnlyKistlContext> lazyCtx)
		{
			if (_properties != null) return;
			lock (_propertiesLock)
			{
				// recheck for a lost race after aquiring the lock
				if (_properties != null) return;
				
				_properties = new System.ComponentModel.PropertyDescriptor[] {
					// else
					new CustomPropertyDescriptor<InvokingConstraint__Implementation__Memory, Kistl.App.Base.ConstraintInvocation>(
						lazyCtx,
						new Guid("3b5d70f7-b6fd-4e39-b912-5a644a5de716"),
						"GetErrorTextInvocation",
						null,
						obj => obj.GetErrorTextInvocation,
						(obj, val) => obj.GetErrorTextInvocation = val),
					// else
					new CustomPropertyDescriptor<InvokingConstraint__Implementation__Memory, Kistl.App.Base.ConstraintInvocation>(
						lazyCtx,
						new Guid("3c98da56-1c21-4849-87b1-81bf72d17e70"),
						"IsValidInvocation",
						null,
						obj => obj.IsValidInvocation,
						(obj, val) => obj.IsValidInvocation = val),
				};
			}
		}
		
		protected override void CollectProperties(Func<IReadOnlyKistlContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
		{
			base.CollectProperties(props);
			_InitializePropertyDescriptors(lazyCtx);
			props.AddRange(_properties);
		}
	

		public override void UpdateParent(string propertyName, int? id)
		{
			int? __oldValue, __newValue = id;
			
			switch(propertyName)
			{
                case "GetErrorTextInvocation":
                    __oldValue = _fk_GetErrorTextInvocation;
                    NotifyPropertyChanging("GetErrorTextInvocation", __oldValue, __newValue);
                    _fk_GetErrorTextInvocation = __newValue;
                    NotifyPropertyChanged("GetErrorTextInvocation", __oldValue, __newValue);
                    break;
                case "IsValidInvocation":
                    __oldValue = _fk_IsValidInvocation;
                    NotifyPropertyChanging("IsValidInvocation", __oldValue, __newValue);
                    _fk_IsValidInvocation = __newValue;
                    NotifyPropertyChanged("IsValidInvocation", __oldValue, __newValue);
                    break;
				default:
					base.UpdateParent(propertyName, id);
					break;
			}
		}

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._fk_GetErrorTextInvocation, binStream);
            BinarySerializer.ToStream(this._fk_IsValidInvocation, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_GetErrorTextInvocation, binStream);
            BinarySerializer.FromStream(out this._fk_IsValidInvocation, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_GetErrorTextInvocation, xml, "GetErrorTextInvocation", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_IsValidInvocation, xml, "IsValidInvocation", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_GetErrorTextInvocation, xml, "GetErrorTextInvocation", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_IsValidInvocation, xml, "IsValidInvocation", "http://dasz.at/Kistl");
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            base.Export(xml, modules);
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            
            base.MergeImport(xml);
        }

#endregion

    }


}