// <autogenerated/>

namespace at.dasz.DocumentManagement
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;
    using Kistl.DalProvider.Base.RelationWrappers;

    using Kistl.DalProvider.Base;
    using Kistl.DalProvider.Memory;

    /// <summary>
    /// Files beeing imported by the import service.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("ImportedFile")]
    public class ImportedFileMemoryImpl : at.dasz.DocumentManagement.StaticFileMemoryImpl, ImportedFile
    {
        [Obsolete]
        public ImportedFileMemoryImpl()
            : base(null)
        {
        }

        public ImportedFileMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// Handles the change of the current blob
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnHandleBlobChange_ImportedFile")]
        public override Kistl.App.Base.Blob HandleBlobChange(Kistl.App.Base.Blob oldBlob, Kistl.App.Base.Blob newBlob)
        {
            var e = new MethodReturnEventArgs<Kistl.App.Base.Blob>();
            if (OnHandleBlobChange_ImportedFile != null)
            {
                OnHandleBlobChange_ImportedFile(this, e, oldBlob, newBlob);
            }
            else
            {
                e.Result = base.HandleBlobChange(oldBlob, newBlob);
            }
            return e.Result;
        }
        public static event HandleBlobChange_Handler<ImportedFile> OnHandleBlobChange_ImportedFile;
        // END Kistl.Generator.Templates.ObjectClasses.Method

        /// <summary>
        /// Converts the imported file to a document
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnMakeDocument_ImportedFile")]
        public virtual at.dasz.DocumentManagement.Document MakeDocument()
        {
            var e = new MethodReturnEventArgs<at.dasz.DocumentManagement.Document>();
            if (OnMakeDocument_ImportedFile != null)
            {
                OnMakeDocument_ImportedFile(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ImportedFile.MakeDocument");
            }
            return e.Result;
        }
        public delegate void MakeDocument_Handler<T>(T obj, MethodReturnEventArgs<at.dasz.DocumentManagement.Document> ret);
        public static event MakeDocument_Handler<ImportedFile> OnMakeDocument_ImportedFile;
        // END Kistl.Generator.Templates.ObjectClasses.Method

        /// <summary>
        /// Öffnet das Dokument schreibgeschützt
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnOpen_ImportedFile")]
        public override void Open()
        {
            // base.Open();
            if (OnOpen_ImportedFile != null)
            {
                OnOpen_ImportedFile(this);
            }
            else
            {
                base.Open();
            }
        }
        public static event Open_Handler<ImportedFile> OnOpen_ImportedFile;
        // END Kistl.Generator.Templates.ObjectClasses.Method

        /// <summary>
        /// Uploads a new Content
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnUpload_ImportedFile")]
        public override void Upload()
        {
            // base.Upload();
            if (OnUpload_ImportedFile != null)
            {
                OnUpload_ImportedFile(this);
            }
            else
            {
                base.Upload();
            }
        }
        public static event Upload_Handler<ImportedFile> OnUpload_ImportedFile;
        // END Kistl.Generator.Templates.ObjectClasses.Method

        public override Type GetImplementedInterface()
        {
            return typeof(ImportedFile);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ImportedFile)obj;
            var otherImpl = (ImportedFileMemoryImpl)obj;
            var me = (ImportedFile)this;

        }

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references
        }
        #region Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #endregion // Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_ImportedFile")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_ImportedFile != null)
            {
                OnToString_ImportedFile(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<ImportedFile> OnToString_ImportedFile;

        [EventBasedMethod("OnPreSave_ImportedFile")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_ImportedFile != null) OnPreSave_ImportedFile(this);
        }
        public static event ObjectEventHandler<ImportedFile> OnPreSave_ImportedFile;

        [EventBasedMethod("OnPostSave_ImportedFile")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_ImportedFile != null) OnPostSave_ImportedFile(this);
        }
        public static event ObjectEventHandler<ImportedFile> OnPostSave_ImportedFile;

        [EventBasedMethod("OnCreated_ImportedFile")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_ImportedFile != null) OnCreated_ImportedFile(this);
        }
        public static event ObjectEventHandler<ImportedFile> OnCreated_ImportedFile;

        [EventBasedMethod("OnDeleting_ImportedFile")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_ImportedFile != null) OnDeleting_ImportedFile(this);
        }
        public static event ObjectEventHandler<ImportedFile> OnDeleting_ImportedFile;

        #endregion // Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            if (!CurrentAccessRights.HasReadRights()) return;
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            if (!CurrentAccessRights.HasReadRights()) return;
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            base.Export(xml, modules);
            if (!CurrentAccessRights.HasReadRights()) return;
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            base.MergeImport(xml);
            if (!CurrentAccessRights.HasReadRights()) return;
        }

        #endregion

    }
}