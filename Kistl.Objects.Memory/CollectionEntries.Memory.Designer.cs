// <autogenerated/>

using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;
using System.Linq;

using Kistl.API;
    using Kistl.DalProvider.Memory;

namespace Kistl.App.Base
{
    [System.Diagnostics.DebuggerDisplay("CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry__Implementation__Memory")]
    public class CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable
    {
		[Obsolete]
		public CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry__Implementation__Memory() : base(null) {}
		
		public CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
           // Kistl.Server.Generators.Templates.Implementation.CollectionEntries.ExportGuidProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        public Guid RelationID { get { return new Guid("47595643-e8d0-48ef-82c7-2d24de8a784e"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Base.CalculatedObjectReferenceProperty)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.Property)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): CalculatedReference dependsOn InputProperties
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.CalculatedObjectReferenceProperty A
        {
            get
            {
				Kistl.App.Base.CalculatedObjectReferenceProperty __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<Kistl.App.Base.CalculatedObjectReferenceProperty>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): CalculatedReference dependsOn InputProperties
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Property B
        {
            get
            {
				Kistl.App.Base.Property __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<Kistl.App.Base.Property>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry__Implementation__Memory)obj;
			var me = (CalculatedObjectReferenceProperty_dependsOn_Property_RelationEntry__Implementation__Memory)this;
			
		}		
		
		

    }
}

namespace at.dasz.DocumentManagement
{
	using Kistl.App.Base;
    [System.Diagnostics.DebuggerDisplay("Document_has_Blob_RelationEntry__Implementation__Memory")]
    public class Document_has_Blob_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, Document_has_Blob_RelationEntry, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable
    {
		[Obsolete]
		public Document_has_Blob_RelationEntry__Implementation__Memory() : base(null) {}
		
		public Document_has_Blob_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
           // Kistl.Server.Generators.Templates.Implementation.CollectionEntries.ExportGuidProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        public Guid RelationID { get { return new Guid("69d27812-e981-443b-a94b-dfe1a95f3aad"); } }
        public IDataObject AObject { get { return A; } set { A = (at.dasz.DocumentManagement.Document)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.Blob)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): Document has Revisions
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.DocumentManagement.Document A
        {
            get
            {
				at.dasz.DocumentManagement.Document __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<at.dasz.DocumentManagement.Document>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? A_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
                    var __oldValue = _A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    _A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _A_pos;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): Document has Revisions
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Blob B
        {
            get
            {
				Kistl.App.Base.Blob __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<Kistl.App.Base.Blob>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? B_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
                    var __oldValue = _B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    _B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _B_pos;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
public int? AIndex { get { return A_pos; } set { A_pos = value; } }
        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
public int? BIndex { get { return B_pos; } set { B_pos = value; } }
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
	
            if (modules.Contains("*") || modules.Contains("http://dasz.at/Kistl")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
	
            if (modules.Contains("*") || modules.Contains("http://dasz.at/Kistl")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
	
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
	
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(Document_has_Blob_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Document_has_Blob_RelationEntry__Implementation__Memory)obj;
			var me = (Document_has_Blob_RelationEntry__Implementation__Memory)this;
			
            me.AIndex = other.AIndex;
            me.BIndex = other.BIndex;
		}		
		
		

    }
}

namespace Kistl.App.Base
{
    [System.Diagnostics.DebuggerDisplay("Group_memberOf_Group_RelationEntry__Implementation__Memory")]
    public class Group_memberOf_Group_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, Group_memberOf_Group_RelationEntry, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable
    {
		[Obsolete]
		public Group_memberOf_Group_RelationEntry__Implementation__Memory() : base(null) {}
		
		public Group_memberOf_Group_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
           // Kistl.Server.Generators.Templates.Implementation.CollectionEntries.ExportGuidProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        public Guid RelationID { get { return new Guid("3e7ba7e0-1774-4b1f-b5b3-2b90c77805af"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Base.Group)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.Group)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): Group memberOf ParentGroup
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Group A
        {
            get
            {
				Kistl.App.Base.Group __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<Kistl.App.Base.Group>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): Group memberOf ParentGroup
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Group B
        {
            get
            {
				Kistl.App.Base.Group __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<Kistl.App.Base.Group>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(Group_memberOf_Group_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Group_memberOf_Group_RelationEntry__Implementation__Memory)obj;
			var me = (Group_memberOf_Group_RelationEntry__Implementation__Memory)this;
			
		}		
		
		

    }
}

namespace at.dasz.CourseOrganiser
{
    [System.Diagnostics.DebuggerDisplay("GroupExcercise_accomplished_by_Student_RelationEntry__Implementation__Memory")]
    public class GroupExcercise_accomplished_by_Student_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, GroupExcercise_accomplished_by_Student_RelationEntry
    {
		[Obsolete]
		public GroupExcercise_accomplished_by_Student_RelationEntry__Implementation__Memory() : base(null) {}
		
		public GroupExcercise_accomplished_by_Student_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("464d1407-fbdb-44f1-896e-b6dedad82ce2"); } }
        public IDataObject AObject { get { return A; } set { A = (at.dasz.CourseOrganiser.GroupExcercise)value; } }
        public IDataObject BObject { get { return B; } set { B = (at.dasz.CourseOrganiser.Student)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): GroupExcercise accomplished_by Students
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.CourseOrganiser.GroupExcercise A
        {
            get
            {
				at.dasz.CourseOrganiser.GroupExcercise __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<at.dasz.CourseOrganiser.GroupExcercise>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): GroupExcercise accomplished_by Students
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.CourseOrganiser.Student B
        {
            get
            {
				at.dasz.CourseOrganiser.Student __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<at.dasz.CourseOrganiser.Student>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(GroupExcercise_accomplished_by_Student_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (GroupExcercise_accomplished_by_Student_RelationEntry__Implementation__Memory)obj;
			var me = (GroupExcercise_accomplished_by_Student_RelationEntry__Implementation__Memory)this;
			
		}		
		
		

    }
}

namespace Kistl.App.Base
{
    [System.Diagnostics.DebuggerDisplay("Identity_memberOf_Group_RelationEntry__Implementation__Memory")]
    public class Identity_memberOf_Group_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, Identity_memberOf_Group_RelationEntry
    {
		[Obsolete]
		public Identity_memberOf_Group_RelationEntry__Implementation__Memory() : base(null) {}
		
		public Identity_memberOf_Group_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("3efb7ae8-ba6b-40e3-9482-b45d1c101743"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Base.Identity)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.Group)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): Identities memberOf Groups
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity A
        {
            get
            {
				Kistl.App.Base.Identity __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<Kistl.App.Base.Identity>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): Identities memberOf Groups
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Group B
        {
            get
            {
				Kistl.App.Base.Group __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<Kistl.App.Base.Group>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(Identity_memberOf_Group_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Identity_memberOf_Group_RelationEntry__Implementation__Memory)obj;
			var me = (Identity_memberOf_Group_RelationEntry__Implementation__Memory)this;
			
		}		
		
		

    }
}

namespace Kistl.App.Test
{
    [System.Diagnostics.DebuggerDisplay("Muhblah_has_TestCustomObject_RelationEntry__Implementation__Memory")]
    public class Muhblah_has_TestCustomObject_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, Muhblah_has_TestCustomObject_RelationEntry
    {
		[Obsolete]
		public Muhblah_has_TestCustomObject_RelationEntry__Implementation__Memory() : base(null) {}
		
		public Muhblah_has_TestCustomObject_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("d1e0da3e-ce64-4587-b62d-70c0f4371d97"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Test.Muhblah)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Test.TestCustomObject)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): MuhBlah_ManyList_Role has TestCustomObjects_ManyList_Role
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.Muhblah A
        {
            get
            {
				Kistl.App.Test.Muhblah __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<Kistl.App.Test.Muhblah>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): MuhBlah_ManyList_Role has TestCustomObjects_ManyList_Role
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.TestCustomObject B
        {
            get
            {
				Kistl.App.Test.TestCustomObject __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<Kistl.App.Test.TestCustomObject>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(Muhblah_has_TestCustomObject_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Muhblah_has_TestCustomObject_RelationEntry__Implementation__Memory)obj;
			var me = (Muhblah_has_TestCustomObject_RelationEntry__Implementation__Memory)this;
			
		}		
		
		

    }
}

namespace Kistl.App.Base
{
    [System.Diagnostics.DebuggerDisplay("ObjectClass_implements_Interface_RelationEntry__Implementation__Memory")]
    public class ObjectClass_implements_Interface_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, ObjectClass_implements_Interface_RelationEntry
    {
		[Obsolete]
		public ObjectClass_implements_Interface_RelationEntry__Implementation__Memory() : base(null) {}
		
		public ObjectClass_implements_Interface_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
           // Kistl.Server.Generators.Templates.Implementation.CollectionEntries.ExportGuidProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        public Guid RelationID { get { return new Guid("692c1064-37a2-4be3-a81e-4cb91f673aa3"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Base.ObjectClass)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.Interface)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): ObjectClass implements ImplementsInterfaces
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.ObjectClass A
        {
            get
            {
				Kistl.App.Base.ObjectClass __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<Kistl.App.Base.ObjectClass>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): ObjectClass implements ImplementsInterfaces
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Interface B
        {
            get
            {
				Kistl.App.Base.Interface __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<Kistl.App.Base.Interface>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(ObjectClass_implements_Interface_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (ObjectClass_implements_Interface_RelationEntry__Implementation__Memory)obj;
			var me = (ObjectClass_implements_Interface_RelationEntry__Implementation__Memory)this;
			
		}		
		
		

    }
}

namespace Kistl.App.Projekte
{
    [System.Diagnostics.DebuggerDisplay("Projekt_haben_Mitarbeiter_RelationEntry__Implementation__Memory")]
    public class Projekt_haben_Mitarbeiter_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, Projekt_haben_Mitarbeiter_RelationEntry
    {
		[Obsolete]
		public Projekt_haben_Mitarbeiter_RelationEntry__Implementation__Memory() : base(null) {}
		
		public Projekt_haben_Mitarbeiter_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("c7b3cf10-cdc8-454c-826c-04a0f7e5ef3e"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Projekte.Projekt)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Projekte.Mitarbeiter)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): Projekte haben Mitarbeiter
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Projekte.Projekt A
        {
            get
            {
				Kistl.App.Projekte.Projekt __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<Kistl.App.Projekte.Projekt>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? A_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
                    var __oldValue = _A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    _A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _A_pos;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): Projekte haben Mitarbeiter
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Projekte.Mitarbeiter B
        {
            get
            {
				Kistl.App.Projekte.Mitarbeiter __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<Kistl.App.Projekte.Mitarbeiter>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? B_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
                    var __oldValue = _B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    _B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _B_pos;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
public int? AIndex { get { return A_pos; } set { A_pos = value; } }
        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
public int? BIndex { get { return B_pos; } set { B_pos = value; } }
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Projekte");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Projekte");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Projekte");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Projekte");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(Projekt_haben_Mitarbeiter_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Projekt_haben_Mitarbeiter_RelationEntry__Implementation__Memory)obj;
			var me = (Projekt_haben_Mitarbeiter_RelationEntry__Implementation__Memory)this;
			
            me.AIndex = other.AIndex;
            me.BIndex = other.BIndex;
		}		
		
		

    }
}

namespace Kistl.App.Base
{
    [System.Diagnostics.DebuggerDisplay("RoleMembership_resolves_Relation_RelationEntry__Implementation__Memory")]
    public class RoleMembership_resolves_Relation_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, RoleMembership_resolves_Relation_RelationEntry
    {
		[Obsolete]
		public RoleMembership_resolves_Relation_RelationEntry__Implementation__Memory() : base(null) {}
		
		public RoleMembership_resolves_Relation_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
           // Kistl.Server.Generators.Templates.Implementation.CollectionEntries.ExportGuidProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        public Guid RelationID { get { return new Guid("f74d425f-e733-4cba-baca-f4a05fbc0a80"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Base.RoleMembership)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.Relation)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): RoleMembership resolves Relations
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.RoleMembership A
        {
            get
            {
				Kistl.App.Base.RoleMembership __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<Kistl.App.Base.RoleMembership>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? A_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
                    var __oldValue = _A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    _A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _A_pos;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): RoleMembership resolves Relations
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Relation B
        {
            get
            {
				Kistl.App.Base.Relation __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<Kistl.App.Base.Relation>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? B_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
                    var __oldValue = _B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    _B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _B_pos;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
public int? AIndex { get { return A_pos; } set { A_pos = value; } }
        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
public int? BIndex { get { return B_pos; } set { B_pos = value; } }
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
	
            if (modules.Contains("*") || modules.Contains("http://dasz.at/Kistl")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
	
            if (modules.Contains("*") || modules.Contains("http://dasz.at/Kistl")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
	
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Base");
	
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(RoleMembership_resolves_Relation_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (RoleMembership_resolves_Relation_RelationEntry__Implementation__Memory)obj;
			var me = (RoleMembership_resolves_Relation_RelationEntry__Implementation__Memory)this;
			
            me.AIndex = other.AIndex;
            me.BIndex = other.BIndex;
		}		
		
		

    }
}

namespace at.dasz.CourseOrganiser
{
    [System.Diagnostics.DebuggerDisplay("Student_attend_Semester_RelationEntry__Implementation__Memory")]
    public class Student_attend_Semester_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, Student_attend_Semester_RelationEntry
    {
		[Obsolete]
		public Student_attend_Semester_RelationEntry__Implementation__Memory() : base(null) {}
		
		public Student_attend_Semester_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("e10ddd77-ead7-41f8-8ef7-20ebaaeee705"); } }
        public IDataObject AObject { get { return A; } set { A = (at.dasz.CourseOrganiser.Student)value; } }
        public IDataObject BObject { get { return B; } set { B = (at.dasz.CourseOrganiser.Semester)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): Students attend Semesters
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.CourseOrganiser.Student A
        {
            get
            {
				at.dasz.CourseOrganiser.Student __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<at.dasz.CourseOrganiser.Student>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): Students attend Semesters
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.CourseOrganiser.Semester B
        {
            get
            {
				at.dasz.CourseOrganiser.Semester __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<at.dasz.CourseOrganiser.Semester>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(Student_attend_Semester_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Student_attend_Semester_RelationEntry__Implementation__Memory)obj;
			var me = (Student_attend_Semester_RelationEntry__Implementation__Memory)this;
			
		}		
		
		

    }
}

namespace Kistl.App.GUI
{
    [System.Diagnostics.DebuggerDisplay("Template_hasMenu_Visual_RelationEntry__Implementation__Memory")]
    public class Template_hasMenu_Visual_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, Template_hasMenu_Visual_RelationEntry
    {
		[Obsolete]
		public Template_hasMenu_Visual_RelationEntry__Implementation__Memory() : base(null) {}
		
		public Template_hasMenu_Visual_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("81ff3089-57da-478c-8be5-fd23abc222a2"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.GUI.Template)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.GUI.Visual)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): Template hasMenu Menu
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Template A
        {
            get
            {
				Kistl.App.GUI.Template __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<Kistl.App.GUI.Template>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): Template hasMenu Menu
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual B
        {
            get
            {
				Kistl.App.GUI.Visual __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<Kistl.App.GUI.Visual>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(Template_hasMenu_Visual_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Template_hasMenu_Visual_RelationEntry__Implementation__Memory)obj;
			var me = (Template_hasMenu_Visual_RelationEntry__Implementation__Memory)this;
			
		}		
		
		

    }
}

namespace Kistl.App.Test
{
    [System.Diagnostics.DebuggerDisplay("TestStudent_füllt_aus_Fragebogen_RelationEntry__Implementation__Memory")]
    public class TestStudent_füllt_aus_Fragebogen_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, TestStudent_füllt_aus_Fragebogen_RelationEntry
    {
		[Obsolete]
		public TestStudent_füllt_aus_Fragebogen_RelationEntry__Implementation__Memory() : base(null) {}
		
		public TestStudent_füllt_aus_Fragebogen_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("6819ca86-571c-4d59-bc30-cc1fb0decc9e"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Test.TestStudent)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Test.Fragebogen)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): Student füllt_aus Testbogen
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.TestStudent A
        {
            get
            {
				Kistl.App.Test.TestStudent __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<Kistl.App.Test.TestStudent>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): Student füllt_aus Testbogen
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.Fragebogen B
        {
            get
            {
				Kistl.App.Test.Fragebogen __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<Kistl.App.Test.Fragebogen>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(TestStudent_füllt_aus_Fragebogen_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (TestStudent_füllt_aus_Fragebogen_RelationEntry__Implementation__Memory)obj;
			var me = (TestStudent_füllt_aus_Fragebogen_RelationEntry__Implementation__Memory)this;
			
		}		
		
		

    }
}

namespace Kistl.App.Base
{
    [System.Diagnostics.DebuggerDisplay("TypeRef_hasGenericArguments_TypeRef_RelationEntry__Implementation__Memory")]
    public class TypeRef_hasGenericArguments_TypeRef_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, TypeRef_hasGenericArguments_TypeRef_RelationEntry
    {
		[Obsolete]
		public TypeRef_hasGenericArguments_TypeRef_RelationEntry__Implementation__Memory() : base(null) {}
		
		public TypeRef_hasGenericArguments_TypeRef_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
           // Kistl.Server.Generators.Templates.Implementation.CollectionEntries.ExportGuidProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        public Guid RelationID { get { return new Guid("8b41ffa4-8ffa-4d96-b4e5-708188045c71"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Base.TypeRef)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.TypeRef)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): TypeRef hasGenericArguments GenericArguments
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.TypeRef A
        {
            get
            {
				Kistl.App.Base.TypeRef __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<Kistl.App.Base.TypeRef>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? A_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
                    var __oldValue = _A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    _A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _A_pos;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): TypeRef hasGenericArguments GenericArguments
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.TypeRef B
        {
            get
            {
				Kistl.App.Base.TypeRef __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<Kistl.App.Base.TypeRef>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual int? B_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
                    var __oldValue = _B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    _B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                }
            }
        }
        private int? _B_pos;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
public int? AIndex { get { return A_pos; } set { A_pos = value; } }
        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
public int? BIndex { get { return B_pos; } set { B_pos = value; } }
#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
            BinarySerializer.ToStream(this._A_pos, binStream);
            BinarySerializer.ToStream(this._B_pos, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
            BinarySerializer.FromStream(out this._A_pos, binStream);
            BinarySerializer.FromStream(out this._B_pos, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
	
            if (modules.Contains("*") || modules.Contains("http://dasz.at/Kistl")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
	
            if (modules.Contains("*") || modules.Contains("http://dasz.at/Kistl")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
	
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Kistl.App.Base");
	
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._A_pos, xml, "A_pos", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._B_pos, xml, "B_pos", "Kistl.App.Base");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(TypeRef_hasGenericArguments_TypeRef_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (TypeRef_hasGenericArguments_TypeRef_RelationEntry__Implementation__Memory)obj;
			var me = (TypeRef_hasGenericArguments_TypeRef_RelationEntry__Implementation__Memory)this;
			
            me.AIndex = other.AIndex;
            me.BIndex = other.BIndex;
		}		
		
		

    }
}

namespace Kistl.App.Base
{
    [System.Diagnostics.DebuggerDisplay("UniqueConstraint_ensures_unique_on_Property_RelationEntry__Implementation__Memory")]
    public class UniqueConstraint_ensures_unique_on_Property_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, UniqueConstraint_ensures_unique_on_Property_RelationEntry
    {
		[Obsolete]
		public UniqueConstraint_ensures_unique_on_Property_RelationEntry__Implementation__Memory() : base(null) {}
		
		public UniqueConstraint_ensures_unique_on_Property_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
           // Kistl.Server.Generators.Templates.Implementation.CollectionEntries.ExportGuidProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        public Guid RelationID { get { return new Guid("29235ba6-5979-4ed8-8e75-6bd0837c7f28"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.Base.UniqueConstraint)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.Property)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): UniqueContraints ensures_unique_on Properties
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.UniqueConstraint A
        {
            get
            {
				Kistl.App.Base.UniqueConstraint __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<Kistl.App.Base.UniqueConstraint>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): UniqueContraints ensures_unique_on Properties
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Property B
        {
            get
            {
				Kistl.App.Base.Property __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<Kistl.App.Base.Property>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(UniqueConstraint_ensures_unique_on_Property_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (UniqueConstraint_ensures_unique_on_Property_RelationEntry__Implementation__Memory)obj;
			var me = (UniqueConstraint_ensures_unique_on_Property_RelationEntry__Implementation__Memory)this;
			
		}		
		
		

    }
}

namespace Kistl.App.GUI
{
	using Kistl.App.Base;
    [System.Diagnostics.DebuggerDisplay("ViewDescriptor_supports_TypeRef_RelationEntry__Implementation__Memory")]
    public class ViewDescriptor_supports_TypeRef_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, ViewDescriptor_supports_TypeRef_RelationEntry
    {
		[Obsolete]
		public ViewDescriptor_supports_TypeRef_RelationEntry__Implementation__Memory() : base(null) {}
		
		public ViewDescriptor_supports_TypeRef_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
           // Kistl.Server.Generators.Templates.Implementation.CollectionEntries.ExportGuidProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        public Guid RelationID { get { return new Guid("786dae2f-cb6e-454d-93fd-192541df928d"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.GUI.ViewDescriptor)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Base.TypeRef)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): ViewDescriptor supports ViewModelTypeRefs
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ViewDescriptor A
        {
            get
            {
				Kistl.App.GUI.ViewDescriptor __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<Kistl.App.GUI.ViewDescriptor>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): ViewDescriptor supports ViewModelTypeRefs
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.TypeRef B
        {
            get
            {
				Kistl.App.Base.TypeRef __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<Kistl.App.Base.TypeRef>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(ViewDescriptor_supports_TypeRef_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (ViewDescriptor_supports_TypeRef_RelationEntry__Implementation__Memory)obj;
			var me = (ViewDescriptor_supports_TypeRef_RelationEntry__Implementation__Memory)this;
			
		}		
		
		

    }
}

namespace Kistl.App.GUI
{
    [System.Diagnostics.DebuggerDisplay("ViewModelDescriptor_displayedBy_ControlKind_RelationEntry__Implementation__Memory")]
    public class ViewModelDescriptor_displayedBy_ControlKind_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, Kistl.API.IExportableInternal, Kistl.App.Base.IExportable, ViewModelDescriptor_displayedBy_ControlKind_RelationEntry
    {
		[Obsolete]
		public ViewModelDescriptor_displayedBy_ControlKind_RelationEntry__Implementation__Memory() : base(null) {}
		
		public ViewModelDescriptor_displayedBy_ControlKind_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
           // Kistl.Server.Generators.Templates.Implementation.CollectionEntries.ExportGuidProperty
        public virtual Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid == Guid.Empty) {
                    __result = _ExportGuid = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                }
            }
        }
        private Guid _ExportGuid;
        public Guid RelationID { get { return new Guid("5404456a-4527-4e40-a660-b4a5e96e4a47"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.GUI.ViewModelDescriptor)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.GUI.ControlKind)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): Presentable displayedBy SecondaryControlKinds
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ViewModelDescriptor A
        {
            get
            {
				Kistl.App.GUI.ViewModelDescriptor __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<Kistl.App.GUI.ViewModelDescriptor>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): Presentable displayedBy SecondaryControlKinds
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ControlKind B
        {
            get
            {
				Kistl.App.GUI.ControlKind __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<Kistl.App.GUI.ControlKind>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._ExportGuid, binStream);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._ExportGuid, binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(ViewModelDescriptor_displayedBy_ControlKind_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (ViewModelDescriptor_displayedBy_ControlKind_RelationEntry__Implementation__Memory)obj;
			var me = (ViewModelDescriptor_displayedBy_ControlKind_RelationEntry__Implementation__Memory)this;
			
		}		
		
		

    }
}

namespace Kistl.App.GUI
{
    [System.Diagnostics.DebuggerDisplay("Visual_contains_Visual_RelationEntry__Implementation__Memory")]
    public class Visual_contains_Visual_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, Visual_contains_Visual_RelationEntry
    {
		[Obsolete]
		public Visual_contains_Visual_RelationEntry__Implementation__Memory() : base(null) {}
		
		public Visual_contains_Visual_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("4d4e1ffd-f362-40e2-9fe1-0711ded83241"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.GUI.Visual)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.GUI.Visual)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): Visual contains Children
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual A
        {
            get
            {
				Kistl.App.GUI.Visual __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<Kistl.App.GUI.Visual>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): Visual contains Children
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual B
        {
            get
            {
				Kistl.App.GUI.Visual __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<Kistl.App.GUI.Visual>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(Visual_contains_Visual_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Visual_contains_Visual_RelationEntry__Implementation__Memory)obj;
			var me = (Visual_contains_Visual_RelationEntry__Implementation__Memory)this;
			
		}		
		
		

    }
}

namespace Kistl.App.GUI
{
    [System.Diagnostics.DebuggerDisplay("Visual_hasContextMenu_Visual_RelationEntry__Implementation__Memory")]
    public class Visual_hasContextMenu_Visual_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, Visual_hasContextMenu_Visual_RelationEntry
    {
		[Obsolete]
		public Visual_hasContextMenu_Visual_RelationEntry__Implementation__Memory() : base(null) {}
		
		public Visual_hasContextMenu_Visual_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("358c14b9-fef5-495d-8d44-04e84186830e"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.GUI.Visual)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.GUI.Visual)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): Visual hasContextMenu ContextMenu
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual A
        {
            get
            {
				Kistl.App.GUI.Visual __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<Kistl.App.GUI.Visual>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): Visual hasContextMenu ContextMenu
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.Visual B
        {
            get
            {
				Kistl.App.GUI.Visual __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<Kistl.App.GUI.Visual>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(Visual_hasContextMenu_Visual_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Visual_hasContextMenu_Visual_RelationEntry__Implementation__Memory)obj;
			var me = (Visual_hasContextMenu_Visual_RelationEntry__Implementation__Memory)this;
			
		}		
		
		

    }
}

namespace Kistl.App.TimeRecords
{
	using Kistl.App.Projekte;
    [System.Diagnostics.DebuggerDisplay("WorkEffortAccount_has_Mitarbeiter_RelationEntry__Implementation__Memory")]
    public class WorkEffortAccount_has_Mitarbeiter_RelationEntry__Implementation__Memory : BaseMemoryCollectionEntry, WorkEffortAccount_has_Mitarbeiter_RelationEntry
    {
		[Obsolete]
		public WorkEffortAccount_has_Mitarbeiter_RelationEntry__Implementation__Memory() : base(null) {}
		
		public WorkEffortAccount_has_Mitarbeiter_RelationEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public Guid RelationID { get { return new Guid("7db412de-b90b-48ba-8340-1e6ac8c8fbaf"); } }
        public IDataObject AObject { get { return A; } set { A = (Kistl.App.TimeRecords.WorkEffortAccount)value; } }
        public IDataObject BObject { get { return B; } set { B = (Kistl.App.Projekte.Mitarbeiter)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A
		// rel(A): WorkEffortAccount has Mitarbeiter
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.TimeRecords.WorkEffortAccount A
        {
            get
            {
				Kistl.App.TimeRecords.WorkEffortAccount __value;
                if (_fk_A.HasValue)
                    __value = Context.Find<Kistl.App.TimeRecords.WorkEffortAccount>(_fk_A.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_A == null)
					return;
                else if (value != null && value.ID == _fk_A)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = A;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("A", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("A", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_A;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// BEGIN Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B
		// rel(B): WorkEffortAccount has Mitarbeiter
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Projekte.Mitarbeiter B
        {
            get
            {
				Kistl.App.Projekte.Mitarbeiter __value;
                if (_fk_B.HasValue)
                    __value = Context.Find<Kistl.App.Projekte.Mitarbeiter>(_fk_B.Value);
                else
                    __value = null;

                    
                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if(value != null && value.Context != this.Context) throw new WrongKistlContextException();
                
                // shortcut noops
                if (value == null && _fk_B == null)
					return;
                else if (value != null && value.ID == _fk_B)
					return;
			           
	            // cache old value to remove inverse references later
                var __oldValue = B;
				var __newValue = value;

				// Changing Event fires before anything is touched
				NotifyPropertyChanging("B", __oldValue, __newValue);
				
                
				// next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;
				
				// everything is done. fire the Changed event
				NotifyPropertyChanged("B", __oldValue, __newValue);

                
            }
        }
        
        private int? _fk_B;
		// END Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.ObjectReferencePropertyTemplate for B

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._fk_B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._fk_B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._fk_B, xml, "B", "http://dasz.at/Kistl");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(WorkEffortAccount_has_Mitarbeiter_RelationEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (WorkEffortAccount_has_Mitarbeiter_RelationEntry__Implementation__Memory)obj;
			var me = (WorkEffortAccount_has_Mitarbeiter_RelationEntry__Implementation__Memory)this;
			
		}		
		
		

    }
}

namespace Kistl.App.Projekte
{
    [System.Diagnostics.DebuggerDisplay("Kunde_EMails_CollectionEntry__Implementation__Memory")]
    public class Kunde_EMails_CollectionEntry__Implementation__Memory : BaseMemoryCollectionEntry, Kunde_EMails_CollectionEntry
    {
		[Obsolete]
		public Kunde_EMails_CollectionEntry__Implementation__Memory() : base(null) {}
		
		public Kunde_EMails_CollectionEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public IDataObject ParentObject { get { return Parent; } set { Parent = (Kunde)value; } }
        public object ValueObject { get { return Value; } set { Value = (string)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>

        public Kunde A
        {
            get
            {
                if (_ACache != null && _ACache.ID == _fk_A)
                    return _ACache;

                if (_fk_A.HasValue)
                    _ACache = this.Context.Find<Kunde>(_fk_A.Value);
                else
                    _ACache = null;

                return _ACache;
            }
            set
            {
                if (value == null && !_fk_A.HasValue)
                    return;
                if (value != null && _fk_A.HasValue && value.ID == _fk_A.Value)
                    return;

                _ACache = value;
                if (value != null)
					fk_A = value.ID;
				else
					fk_A = null;
            }
        }
        private Kunde _ACache;

        public int? fk_A
        {
            get
            {
                return _fk_A;
            }
            set
            {
                if (_fk_A != value)
                {
					var __oldValue = _fk_A;
                    NotifyPropertyChanging("A", __oldValue, value);
                    _fk_A = value;
                    NotifyPropertyChanged("A", __oldValue, value);
                }
            }
        }

        // backing store for serialization
        private int? _fk_A;
        
public Kunde Parent { get { return A; } set { A = value; } }

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // value type property
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.NotifyingValueProperty
        public virtual string B
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B != value)
                {
                    var __oldValue = _B;
                    var __newValue = value;
                    NotifyPropertyChanging("B", __oldValue, __newValue);
                    _B = __newValue;
                    NotifyPropertyChanged("B", __oldValue, __newValue);
                }
            }
        }
        private string _B;
public string Value { get { return B; } set { B = value; } }

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._fk_A, binStream);
            BinarySerializer.ToStream(this._B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
            BinarySerializer.FromStream(out this._B, binStream);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.ToStream(this._B, xml, "B", "Kistl.App.Projekte");
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
            XmlStreamer.FromStream(ref this._B, xml, "B", "Kistl.App.Projekte");
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(Kunde_EMails_CollectionEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (Kunde_EMails_CollectionEntry__Implementation__Memory)obj;
			var me = (Kunde_EMails_CollectionEntry__Implementation__Memory)this;
			
            me._fk_A = other._fk_A;
            me.B = other.B;
		}		
		
		

    }
}

namespace Kistl.App.Test
{
    [System.Diagnostics.DebuggerDisplay("TestCustomObject_PhoneNumbersOther_CollectionEntry__Implementation__Memory")]
    public class TestCustomObject_PhoneNumbersOther_CollectionEntry__Implementation__Memory : BaseMemoryCollectionEntry, TestCustomObject_PhoneNumbersOther_CollectionEntry
    {
		[Obsolete]
		public TestCustomObject_PhoneNumbersOther_CollectionEntry__Implementation__Memory() : base(null) {}
		
		public TestCustomObject_PhoneNumbersOther_CollectionEntry__Implementation__Memory(Func<IReadOnlyKistlContext> lazyCtx)
			: base(lazyCtx)
		{
		}
    
           // Kistl.Server.Generators.Templates.Implementation.ObjectClasses.IdProperty
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                }
            }
        }
        private int _ID;
        public IDataObject ParentObject { get { return Parent; } set { Parent = (TestCustomObject)value; } }
        public object ValueObject { get { return Value; } set { Value = (Kistl.App.Test.TestPhoneCompoundObject)value; } }

        /// <summary>
        /// Reference to the A-Side member of this CollectionEntry
        /// </summary>

        public TestCustomObject A
        {
            get
            {
                if (_ACache != null && _ACache.ID == _fk_A)
                    return _ACache;

                if (_fk_A.HasValue)
                    _ACache = this.Context.Find<TestCustomObject>(_fk_A.Value);
                else
                    _ACache = null;

                return _ACache;
            }
            set
            {
                if (value == null && !_fk_A.HasValue)
                    return;
                if (value != null && _fk_A.HasValue && value.ID == _fk_A.Value)
                    return;

                _ACache = value;
                if (value != null)
					fk_A = value.ID;
				else
					fk_A = null;
            }
        }
        private TestCustomObject _ACache;

        public int? fk_A
        {
            get
            {
                return _fk_A;
            }
            set
            {
                if (_fk_A != value)
                {
					var __oldValue = _fk_A;
                    NotifyPropertyChanging("A", __oldValue, value);
                    _fk_A = value;
                    NotifyPropertyChanged("A", __oldValue, value);
                }
            }
        }

        // backing store for serialization
        private int? _fk_A;
        
public TestCustomObject Parent { get { return A; } set { A = value; } }

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
		// Kistl.DalProvider.Memory.Generator.Implementation.ObjectClasses.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        public Kistl.App.Test.TestPhoneCompoundObject B
        {
            get { return B__Implementation__Memory; }
            set { B__Implementation__Memory = (Kistl.App.Test.TestPhoneCompoundObject__Implementation__Memory)value; }
        }
        
        /// <summary>backing store for B</summary>
        private Kistl.App.Test.TestPhoneCompoundObject__Implementation__Memory _BStore;
        
        /// <summary>backing property for B, takes care of attaching/detaching the values</summary>
        private Kistl.App.Test.TestPhoneCompoundObject__Implementation__Memory B__Implementation__Memory {
            get { return _BStore; }
            set {
                var __oldValue = _BStore;
                var __newValue = value;

                NotifyPropertyChanging("B", __oldValue, __newValue);
                
				if (_BStore != null) _BStore.DetachFromObject(this, "B");
                _BStore = value != null ? (Kistl.App.Test.TestPhoneCompoundObject__Implementation__Memory)value.Clone() : null;
				if (_BStore != null) _BStore.AttachToObject(this, "B");

                NotifyPropertyChanged("B", __oldValue, __newValue);
            }
		}
  public Kistl.App.Test.TestPhoneCompoundObject Value { get { return B; } set { B = value; } }

#region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this._fk_A, binStream);
			BinarySerializer.ToStream(this.B, binStream);
        }

        public override void FromStream(System.IO.BinaryReader binStream)
        {
            
            base.FromStream(binStream);
            BinarySerializer.FromStream(out this._fk_A, binStream);
			{
				// trick compiler into generating correct temporary variable
				var tmp = this.B__Implementation__Memory;
				BinarySerializer.FromStream(out tmp, binStream);
				// use setter to de-/attach everything correctly
	            this.B__Implementation__Memory = tmp;
	        }
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            
            base.ToStream(xml);
            XmlStreamer.ToStream(this._fk_A, xml, "A", "http://dasz.at/Kistl");
			// TODO: Add XML Serializer here
        }

        public override void FromStream(System.Xml.XmlReader xml)
        {
            
            base.FromStream(xml);
            XmlStreamer.FromStream(ref this._fk_A, xml, "A", "http://dasz.at/Kistl");
			// TODO: Add XML Serializer here
        }

#endregion

		public override Type GetImplementedInterface()
		{
			return typeof(TestCustomObject_PhoneNumbersOther_CollectionEntry);
		}
	
		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
	
		}
		
		public override void ApplyChangesFrom(IPersistenceObject obj)
		{
			base.ApplyChangesFrom(obj);
			var other = (TestCustomObject_PhoneNumbersOther_CollectionEntry__Implementation__Memory)obj;
			var me = (TestCustomObject_PhoneNumbersOther_CollectionEntry__Implementation__Memory)this;
			
            me._fk_A = other._fk_A;
            me.B = other.B;
		}		
		
		

    }
}
