// <autogenerated/>

namespace ZBox.App.SchemaMigration
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;
    using Kistl.DalProvider.Base.RelationWrappers;

    using Kistl.DalProvider.Base;
    using Kistl.DalProvider.Memory;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("StagingDatabase")]
    public class StagingDatabaseMemoryImpl : Kistl.DalProvider.Memory.DataObjectMemoryImpl, Kistl.API.IExportableInternal, StagingDatabase
    {
        [Obsolete]
        public StagingDatabaseMemoryImpl()
            : base(null)
        {
        }

        public StagingDatabaseMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=ZBox.App.SchemaMigration;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Kistl.App.Base.IdentityMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_ChangedBy;


        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.Base.IdentityMemoryImpl ChangedByImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.IdentityMemoryImpl __value;
                if (_fk_ChangedBy.HasValue)
                    __value = (Kistl.App.Base.IdentityMemoryImpl)Context.Find<Kistl.App.Base.Identity>(_fk_ChangedBy.Value);
                else
                    __value = null;

                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_ChangedBy == null)
                    return;
                else if (value != null && value.ID == _fk_ChangedBy)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = ChangedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_ChangedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Kistl.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Kistl.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Kistl.App.Base.Identity> OnChangedBy_PostSetter;

        public event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime ChangedOn
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(DateTime);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("16652536-fb87-4b1b-866e-ec2fb68a8ae2"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'StagingDatabase.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime _ChangedOn;
        private bool _isChangedOnSet = false;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, DateTime> OnChangedOn_PostSetter;

        public event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnChangedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public string ConnectionStringKey
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ConnectionStringKey;
                if (OnConnectionStringKey_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnConnectionStringKey_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ConnectionStringKey != value)
                {
                    var __oldValue = _ConnectionStringKey;
                    var __newValue = value;
                    if (OnConnectionStringKey_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnConnectionStringKey_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ConnectionStringKey", __oldValue, __newValue);
                    _ConnectionStringKey = __newValue;
                    NotifyPropertyChanged("ConnectionStringKey", __oldValue, __newValue);
                    if (OnConnectionStringKey_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnConnectionStringKey_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _ConnectionStringKey;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnConnectionStringKey_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnConnectionStringKey_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnConnectionStringKey_PostSetter;

        public event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnConnectionStringKey_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=ZBox.App.SchemaMigration;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public Kistl.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Kistl.App.Base.IdentityMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_CreatedBy;


        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Kistl.App.Base.IdentityMemoryImpl CreatedByImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.IdentityMemoryImpl __value;
                if (_fk_CreatedBy.HasValue)
                    __value = (Kistl.App.Base.IdentityMemoryImpl)Context.Find<Kistl.App.Base.Identity>(_fk_CreatedBy.Value);
                else
                    __value = null;

                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_CreatedBy == null)
                    return;
                else if (value != null && value.ID == _fk_CreatedBy)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = CreatedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_CreatedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Kistl.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Kistl.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Kistl.App.Base.Identity> OnCreatedBy_PostSetter;

        public event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime CreatedOn
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(DateTime);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("d402f8a4-dc92-4041-a295-50257057e656"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'StagingDatabase.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
            }
        }
        private DateTime _CreatedOn;
        private bool _isCreatedOnSet = false;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, DateTime> OnCreatedOn_PostSetter;

        public event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnCreatedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public string Description
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Description;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnDescription_PostSetter;

        public event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnDescription_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("6bc56e55-16c4-4c94-8c20-12861844e053"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'StagingDatabase.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
            }
        }
        private Guid _ExportGuid;
        private bool _isExportGuidSet = false;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, Guid> OnExportGuid_PostSetter;

        public event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for MigrationProject
        // fkBackingName=_fk_MigrationProject; fkGuidBackingName=_fk_guid_MigrationProject;
        // referencedInterface=ZBox.App.SchemaMigration.MigrationProject; moduleNamespace=ZBox.App.SchemaMigration;
        // inverse Navigator=StagingDatabases; is list;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Kistl.Generator.Templates.Properties.DelegatingProperty
        public ZBox.App.SchemaMigration.MigrationProject MigrationProject
        {
            get { return MigrationProjectImpl; }
            set { MigrationProjectImpl = (ZBox.App.SchemaMigration.MigrationProjectMemoryImpl)value; }
        }
        // END Kistl.Generator.Templates.Properties.DelegatingProperty

        private int? _fk_MigrationProject;

        private Guid? _fk_guid_MigrationProject = null;

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal ZBox.App.SchemaMigration.MigrationProjectMemoryImpl MigrationProjectImpl
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                ZBox.App.SchemaMigration.MigrationProjectMemoryImpl __value;
                if (_fk_MigrationProject.HasValue)
                    __value = (ZBox.App.SchemaMigration.MigrationProjectMemoryImpl)Context.Find<ZBox.App.SchemaMigration.MigrationProject>(_fk_MigrationProject.Value);
                else
                    __value = null;

                if (OnMigrationProject_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<ZBox.App.SchemaMigration.MigrationProject>(__value);
                    OnMigrationProject_Getter(this, e);
                    __value = (ZBox.App.SchemaMigration.MigrationProjectMemoryImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noops
                if (value == null && _fk_MigrationProject == null)
                    return;
                else if (value != null && value.ID == _fk_MigrationProject)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = MigrationProjectImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("MigrationProject", __oldValue, __newValue);

                if (OnMigrationProject_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<ZBox.App.SchemaMigration.MigrationProject>(__oldValue, __newValue);
                    OnMigrationProject_PreSetter(this, e);
                    __newValue = (ZBox.App.SchemaMigration.MigrationProjectMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_MigrationProject = __newValue == null ? (int?)null : __newValue.ID;

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.StagingDatabases as IRelationListSync<ZBox.App.SchemaMigration.StagingDatabase>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.StagingDatabases as IRelationListSync<ZBox.App.SchemaMigration.StagingDatabase>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("MigrationProject", __oldValue, __newValue);

                if (OnMigrationProject_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<ZBox.App.SchemaMigration.MigrationProject>(__oldValue, __newValue);
                    OnMigrationProject_PostSetter(this, e);
                }
            }
        }
        // END Kistl.Generator.Templates.Properties.ObjectReferencePropertyTemplate for MigrationProject
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, ZBox.App.SchemaMigration.MigrationProject> OnMigrationProject_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, ZBox.App.SchemaMigration.MigrationProject> OnMigrationProject_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, ZBox.App.SchemaMigration.MigrationProject> OnMigrationProject_PostSetter;

        public event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnMigrationProject_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public string OriginConnectionStringKey
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _OriginConnectionStringKey;
                if (OnOriginConnectionStringKey_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnOriginConnectionStringKey_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_OriginConnectionStringKey != value)
                {
                    var __oldValue = _OriginConnectionStringKey;
                    var __newValue = value;
                    if (OnOriginConnectionStringKey_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnOriginConnectionStringKey_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("OriginConnectionStringKey", __oldValue, __newValue);
                    _OriginConnectionStringKey = __newValue;
                    NotifyPropertyChanged("OriginConnectionStringKey", __oldValue, __newValue);
                    if (OnOriginConnectionStringKey_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnOriginConnectionStringKey_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _OriginConnectionStringKey;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnOriginConnectionStringKey_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnOriginConnectionStringKey_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnOriginConnectionStringKey_PostSetter;

        public event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnOriginConnectionStringKey_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Kistl.Generator.Templates.Properties.NotifyingDataProperty
        public string Schema
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Schema;
                if (OnSchema_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnSchema_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Schema != value)
                {
                    var __oldValue = _Schema;
                    var __newValue = value;
                    if (OnSchema_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnSchema_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Schema", __oldValue, __newValue);
                    _Schema = __newValue;
                    NotifyPropertyChanged("Schema", __oldValue, __newValue);
                    if (OnSchema_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnSchema_PostSetter(this, __e);
                    }
                }
            }
        }
        private string _Schema;
        // END Kistl.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnSchema_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnSchema_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.StagingDatabase, string> OnSchema_PostSetter;

        public event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnSchema_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // object list property
        // Kistl.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<ZBox.App.SchemaMigration.SourceTable> SourceTables
        {
            get
            {
                if (_SourceTables == null)
                {
                    List<ZBox.App.SchemaMigration.SourceTable> serverList;
                    if (Helper.IsPersistedObject(this))
                    {
                        serverList = Context.GetListOf<ZBox.App.SchemaMigration.SourceTable>(this, "SourceTables");
                    }
                    else
                    {
                        serverList = new List<ZBox.App.SchemaMigration.SourceTable>();
                    }
    
                    _SourceTables = new OneNRelationList<ZBox.App.SchemaMigration.SourceTable>(
                        "StagingDatabase",
                        null,
                        this,
                        () => { this.NotifyPropertyChanged("SourceTables", null, null); if(OnSourceTables_PostSetter != null && IsAttached) OnSourceTables_PostSetter(this); },
                        serverList);
                }
                return _SourceTables;
            }
        }
    
        private OneNRelationList<ZBox.App.SchemaMigration.SourceTable> _SourceTables;

public static event PropertyListChangedHandler<ZBox.App.SchemaMigration.StagingDatabase> OnSourceTables_PostSetter;

        public event PropertyIsValidHandler<ZBox.App.SchemaMigration.StagingDatabase> OnSourceTables_IsValid;

        public override Type GetImplementedInterface()
        {
            return typeof(StagingDatabase);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (StagingDatabase)obj;
            var otherImpl = (StagingDatabaseMemoryImpl)obj;
            var me = (StagingDatabase)this;

            me.ChangedOn = other.ChangedOn;
            me.ConnectionStringKey = other.ConnectionStringKey;
            me.CreatedOn = other.CreatedOn;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.OriginConnectionStringKey = other.OriginConnectionStringKey;
            me.Schema = other.Schema;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_MigrationProject = otherImpl._fk_MigrationProject;
        }

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "ChangedBy":
                    {
                        var __oldValue = _fk_ChangedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        _fk_ChangedBy = __newValue;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = _fk_CreatedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        _fk_CreatedBy = __newValue;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                case "MigrationProject":
                    {
                        var __oldValue = _fk_MigrationProject;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("MigrationProject", __oldValue, __newValue);
                        _fk_MigrationProject = __newValue;
                        NotifyPropertyChanged("MigrationProject", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Kistl.App.Base.IdentityMemoryImpl)Context.Find<Kistl.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Kistl.App.Base.IdentityMemoryImpl)Context.Find<Kistl.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;

            if (_fk_guid_MigrationProject.HasValue)
                MigrationProjectImpl = (ZBox.App.SchemaMigration.MigrationProjectMemoryImpl)Context.FindPersistenceObject<ZBox.App.SchemaMigration.MigrationProject>(_fk_guid_MigrationProject.Value);
            else
            if (_fk_MigrationProject.HasValue)
                MigrationProjectImpl = (ZBox.App.SchemaMigration.MigrationProjectMemoryImpl)Context.Find<ZBox.App.SchemaMigration.MigrationProject>(_fk_MigrationProject.Value);
            else
                MigrationProjectImpl = null;
        }
        #region Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorMemoryImpl<StagingDatabase, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("ee3476a8-1715-4dc2-a2b2-13e4a2a27e10"),
                        "ChangedBy",
                        null,
                        obj => ((StagingDatabaseMemoryImpl)obj).ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => ((StagingDatabaseMemoryImpl)obj).OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<StagingDatabase, DateTime>(
                        lazyCtx,
                        new Guid("16652536-fb87-4b1b-866e-ec2fb68a8ae2"),
                        "ChangedOn",
                        null,
                        obj => ((StagingDatabaseMemoryImpl)obj).ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => ((StagingDatabaseMemoryImpl)obj).OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<StagingDatabase, string>(
                        lazyCtx,
                        new Guid("6aa09a38-a4be-4095-bf8d-9799bd56a14d"),
                        "ConnectionStringKey",
                        null,
                        obj => ((StagingDatabaseMemoryImpl)obj).ConnectionStringKey,
                        (obj, val) => obj.ConnectionStringKey = val,
						obj => ((StagingDatabaseMemoryImpl)obj).OnConnectionStringKey_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<StagingDatabase, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("9db15b1e-a55e-444c-9fa7-9dd66d9b13f6"),
                        "CreatedBy",
                        null,
                        obj => ((StagingDatabaseMemoryImpl)obj).CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => ((StagingDatabaseMemoryImpl)obj).OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<StagingDatabase, DateTime>(
                        lazyCtx,
                        new Guid("d402f8a4-dc92-4041-a295-50257057e656"),
                        "CreatedOn",
                        null,
                        obj => ((StagingDatabaseMemoryImpl)obj).CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => ((StagingDatabaseMemoryImpl)obj).OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<StagingDatabase, string>(
                        lazyCtx,
                        new Guid("157ecaf4-3ee5-4d78-8148-ab936de50523"),
                        "Description",
                        null,
                        obj => ((StagingDatabaseMemoryImpl)obj).Description,
                        (obj, val) => obj.Description = val,
						obj => ((StagingDatabaseMemoryImpl)obj).OnDescription_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<StagingDatabase, Guid>(
                        lazyCtx,
                        new Guid("6bc56e55-16c4-4c94-8c20-12861844e053"),
                        "ExportGuid",
                        null,
                        obj => ((StagingDatabaseMemoryImpl)obj).ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => ((StagingDatabaseMemoryImpl)obj).OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<StagingDatabase, ZBox.App.SchemaMigration.MigrationProject>(
                        lazyCtx,
                        new Guid("8edc845c-6d39-45f7-ae28-434f0a1ef503"),
                        "MigrationProject",
                        null,
                        obj => ((StagingDatabaseMemoryImpl)obj).MigrationProject,
                        (obj, val) => obj.MigrationProject = val,
						obj => ((StagingDatabaseMemoryImpl)obj).OnMigrationProject_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<StagingDatabase, string>(
                        lazyCtx,
                        new Guid("f82f3e1f-3275-4fcf-a362-71f7175f40f1"),
                        "OriginConnectionStringKey",
                        null,
                        obj => ((StagingDatabaseMemoryImpl)obj).OriginConnectionStringKey,
                        (obj, val) => obj.OriginConnectionStringKey = val,
						obj => ((StagingDatabaseMemoryImpl)obj).OnOriginConnectionStringKey_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<StagingDatabase, string>(
                        lazyCtx,
                        new Guid("601a0dc6-ec58-4092-a53c-c902fcc85379"),
                        "Schema",
                        null,
                        obj => ((StagingDatabaseMemoryImpl)obj).Schema,
                        (obj, val) => obj.Schema = val,
						obj => ((StagingDatabaseMemoryImpl)obj).OnSchema_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<StagingDatabase, ICollection<ZBox.App.SchemaMigration.SourceTable>>(
                        lazyCtx,
                        new Guid("e468c835-8c9c-4776-83ce-f54b1f4634a4"),
                        "SourceTables",
                        null,
                        obj => obj.SourceTables,
                        null, // lists are read-only properties
                        obj => ((StagingDatabaseMemoryImpl)obj).OnSourceTables_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_StagingDatabase")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_StagingDatabase != null)
            {
                OnToString_StagingDatabase(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<StagingDatabase> OnToString_StagingDatabase;

        [EventBasedMethod("OnPreSave_StagingDatabase")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_StagingDatabase != null) OnPreSave_StagingDatabase(this);
        }
        public static event ObjectEventHandler<StagingDatabase> OnPreSave_StagingDatabase;

        [EventBasedMethod("OnPostSave_StagingDatabase")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_StagingDatabase != null) OnPostSave_StagingDatabase(this);
        }
        public static event ObjectEventHandler<StagingDatabase> OnPostSave_StagingDatabase;

        [EventBasedMethod("OnCreated_StagingDatabase")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_StagingDatabase != null) OnCreated_StagingDatabase(this);
        }
        public static event ObjectEventHandler<StagingDatabase> OnCreated_StagingDatabase;

        [EventBasedMethod("OnDeleting_StagingDatabase")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_StagingDatabase != null) OnDeleting_StagingDatabase(this);
        }
        public static event ObjectEventHandler<StagingDatabase> OnDeleting_StagingDatabase;

        #endregion // Kistl.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(ChangedBy != null ? ChangedBy.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                BinarySerializer.ToStream(this._ChangedOn, binStream);
            }
            BinarySerializer.ToStream(this._ConnectionStringKey, binStream);
            BinarySerializer.ToStream(CreatedBy != null ? CreatedBy.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                BinarySerializer.ToStream(this._CreatedOn, binStream);
            }
            BinarySerializer.ToStream(this._Description, binStream);
            BinarySerializer.ToStream(this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.ToStream(this._ExportGuid, binStream);
            }
            BinarySerializer.ToStream(MigrationProject != null ? MigrationProject.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._OriginConnectionStringKey, binStream);
            BinarySerializer.ToStream(this._Schema, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._fk_ChangedBy, binStream);
            BinarySerializer.FromStream(out this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                BinarySerializer.FromStream(out this._ChangedOn, binStream);
            }
            BinarySerializer.FromStream(out this._ConnectionStringKey, binStream);
            BinarySerializer.FromStream(out this._fk_CreatedBy, binStream);
            BinarySerializer.FromStream(out this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                BinarySerializer.FromStream(out this._CreatedOn, binStream);
            }
            BinarySerializer.FromStream(out this._Description, binStream);
            BinarySerializer.FromStream(out this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.FromStream(out this._ExportGuid, binStream);
            }
            BinarySerializer.FromStream(out this._fk_MigrationProject, binStream);
            BinarySerializer.FromStream(out this._OriginConnectionStringKey, binStream);
            BinarySerializer.FromStream(out this._Schema, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(ChangedBy != null ? ChangedBy.ID : (int?)null, xml, "ChangedBy", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._isChangedOnSet, xml, "IsChangedOnSet", "ZBox.App.SchemaMigration");
            if (this._isChangedOnSet) {
                XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream(this._ConnectionStringKey, xml, "ConnectionStringKey", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(CreatedBy != null ? CreatedBy.ID : (int?)null, xml, "CreatedBy", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._isCreatedOnSet, xml, "IsCreatedOnSet", "ZBox.App.SchemaMigration");
            if (this._isCreatedOnSet) {
                XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream(this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._isExportGuidSet, xml, "IsExportGuidSet", "ZBox.App.SchemaMigration");
            if (this._isExportGuidSet) {
                XmlStreamer.ToStream(this._ExportGuid, xml, "ExportGuid", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream(MigrationProject != null ? MigrationProject.ID : (int?)null, xml, "MigrationProject", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._OriginConnectionStringKey, xml, "OriginConnectionStringKey", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._Schema, xml, "Schema", "ZBox.App.SchemaMigration");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._fk_ChangedBy, xml, "ChangedBy", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._isChangedOnSet, xml, "IsChangedOnSet", "ZBox.App.SchemaMigration");
            if (this._isChangedOnSet) {
                XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.FromStream(ref this._ConnectionStringKey, xml, "ConnectionStringKey", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._fk_CreatedBy, xml, "CreatedBy", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._isCreatedOnSet, xml, "IsCreatedOnSet", "ZBox.App.SchemaMigration");
            if (this._isCreatedOnSet) {
                XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._isExportGuidSet, xml, "IsExportGuidSet", "ZBox.App.SchemaMigration");
            if (this._isExportGuidSet) {
                XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.FromStream(ref this._fk_MigrationProject, xml, "MigrationProject", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._OriginConnectionStringKey, xml, "OriginConnectionStringKey", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._Schema, xml, "Schema", "ZBox.App.SchemaMigration");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            System.Diagnostics.Debug.Assert(this._isChangedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._ConnectionStringKey, xml, "ConnectionStringKey", "ZBox.App.SchemaMigration");
            System.Diagnostics.Debug.Assert(this._isCreatedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(MigrationProject != null ? MigrationProject.ExportGuid : (Guid?)null, xml, "MigrationProject", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._OriginConnectionStringKey, xml, "OriginConnectionStringKey", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this._Schema, xml, "Schema", "ZBox.App.SchemaMigration");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            // Import must have default value set
            XmlStreamer.FromStream(ref this._ChangedOn, xml, "ChangedOn", "ZBox.App.SchemaMigration");
            this._isChangedOnSet = true;
            XmlStreamer.FromStream(ref this._ConnectionStringKey, xml, "ConnectionStringKey", "ZBox.App.SchemaMigration");
            // Import must have default value set
            XmlStreamer.FromStream(ref this._CreatedOn, xml, "CreatedOn", "ZBox.App.SchemaMigration");
            this._isCreatedOnSet = true;
            XmlStreamer.FromStream(ref this._Description, xml, "Description", "ZBox.App.SchemaMigration");
            // Import must have default value set
            XmlStreamer.FromStream(ref this._ExportGuid, xml, "ExportGuid", "ZBox.App.SchemaMigration");
            this._isExportGuidSet = true;
            XmlStreamer.FromStream(ref this._fk_guid_MigrationProject, xml, "MigrationProject", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._OriginConnectionStringKey, xml, "OriginConnectionStringKey", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._Schema, xml, "Schema", "ZBox.App.SchemaMigration");
        }

        #endregion

    }
}