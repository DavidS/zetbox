<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.ObjectListProperty"
	ClassName="Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ObjectListProperty" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="serializationList" Type="Kistl.Server.Generators.Templates.Implementation.SerializationMembersList" %>
<%@ Parameter Name="rel" Type="Relation" %>
<%@ Parameter Name="endRole" Type="RelationEndRole" %>
<%
    RelationEnd relEnd = rel.GetEndFromRole(endRole);
    RelationEnd otherEnd = rel.GetOtherEnd(relEnd);

	// the name of the property to create
	string name = relEnd.Navigator.PropertyName;
	// the ef-visible property's name
	string efName = name + Kistl.API.Helper.ImplementationSuffix;
	// the name of the private backing store for the conversion wrapper list
	string wrapperName = "_" + name + "Wrapper";
	// the name of the wrapper class for wrapping the EntityCollection
	string wrapperClass = rel.NeedsPositionStorage(otherEnd.GetRole()) ? "EntityListWrapper" : "EntityCollectionWrapper";
	
	// the name of the EF association
	string assocName = rel.GetAssociationName();
	string targetRoleName = otherEnd.RoleName;

	// which generic interface to use for the collection
	string exposedListType = rel.NeedsPositionStorage(otherEnd.GetRole()) ? "IList" : "ICollection";

	// which Kistl interface this is 
	string thisInterface = relEnd.Type.GetDataTypeString();
	// which Kistl interface this list contains
	string referencedInterface = otherEnd.Type.GetDataTypeString();
	// the actual implementation class of the list's elements
	string referencedImplementation = otherEnd.Type.GetDataTypeString() + Kistl.API.Helper.ImplementationSuffix;

	// whether or not the collection will be eagerly loaded
	bool eagerLoading = relEnd.Navigator != null && relEnd.Navigator.EagerLoading;

%>
   		// <%= this.GetType() %>
	    // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public <%= exposedListType %><<%= referencedInterface %>> <%= name %>
        {
            get
            {
                if (<%= wrapperName %> == null)
                {
                    <%= wrapperName %> = new <%= wrapperClass %><<%= referencedInterface %>, <%= referencedImplementation %>>(
                            this.Context, <%= efName %><%
	// TODO: improve this!
	if (rel.NeedsPositionStorage(otherEnd.GetRole()))
	{
		this.WriteObjects(", \"", relEnd.RoleName, "\"");
	}
                            %>);
                }
                return <%= wrapperName %>;
            }
        }
        
        [EdmRelationshipNavigationProperty("Model", "<%= assocName %>", "<%= targetRoleName %>")]
        public EntityCollection<<%= referencedImplementation %>> <%= efName %>
        {
            get
            {
                var c = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<<%= referencedImplementation %>>(
                        "Model.<%= assocName %>",
                        "<%= targetRoleName %>");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !c.IsLoaded)
                {
                    c.Load();
                }
                return c;
            }
        }
        private <%= wrapperClass %><<%= referencedInterface %>, <%= referencedImplementation %>> <%= wrapperName %>;

<%
	if (eagerLoading)
	{
%>
		private List<int> <%= name %>Ids;
<%
	
		if (serializationList != null)
		{
			serializationList.Add("Implementation.ObjectClasses.EagerLoadingSerialization", Kistl.Server.Generators.Templates.Implementation.SerializerType.Binary, null, null, name, true);
		}
	}
%>

