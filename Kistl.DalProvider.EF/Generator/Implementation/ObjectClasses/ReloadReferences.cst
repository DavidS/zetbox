<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.ReloadReferences"
	ClassName="Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.ReloadReferences" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="cls" Type="ObjectClass" %>

		public override void ReloadReferences()
		{
			// Do not reload references if the current object has been deleted.
			// TODO: enable when MemoryContext uses MemoryDataObjects
			//if (this.ObjectState == DataObjectState.Deleted) return;
<%
	if (cls.BaseObjectClass != null) {
%>
			base.ReloadReferences();
			
<%
	}
%>
			// fix direct object references
<%
	foreach(var prop in cls.Properties.OfType<ObjectReferenceProperty>()
		.Where(orp => !orp.IsList())
		.OrderBy(orp => orp.ObjectClass.Name)
		.ThenBy(orp => orp.Name))
	{
		Relation rel = Kistl.App.Extensions.RelationExtensions.Lookup(ctx, prop);
		RelationEnd relEnd = rel.GetEnd(prop);
        RelationEnd otherEnd = rel.GetOtherEnd(relEnd);
        
        string referencedInterface = otherEnd.Type.GetDataTypeString();
        string referencedImplementation = otherEnd.Type.GetDataTypeString() + Kistl.API.Helper.ImplementationSuffix;
        string name = prop.Name;
		string efName = name + Kistl.API.Helper.ImplementationSuffix;
		string fkBackingName = "_fk_" + name;
		string fkGuidBackingName = "_fk_guid_" + name;

		ReloadOneReference.Call(Host, ctx, referencedInterface, referencedImplementation, name, efName, fkBackingName, fkGuidBackingName);
	}
%>
		}