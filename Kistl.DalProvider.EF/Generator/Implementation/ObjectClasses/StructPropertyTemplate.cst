<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.StructPropertyTemplate"
	ClassName="Kistl.DalProvider.EF.Generator.Implementation.ObjectClasses.StructPropertyTemplate" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="serializationList" Type="Kistl.Server.Generators.Templates.Implementation.SerializationMembersList" %>
<%@ Parameter Name="prop" Type="StructProperty" %>
<%

	string name = prop.PropertyName;
	string efName = name + Kistl.API.Helper.ImplementationSuffix;
	string backingName = "_" + name;

	string structType = prop.GetPropertyTypeString();
	string structImplementationType = structType + Kistl.API.Helper.ImplementationSuffix;

%>
   		// <%= this.GetType() %>
        // implement the user-visible interface
        public <%= structType %> <%= name %>
        {
            get
            {
                return <%= efName %>;
            }
        }
        
        /// <summary>backing store for <%= name %></summary>
        private <%= structImplementationType %> <%= backingName %>;
        
        /// <summary>backing property for <%= name %>, takes care of attaching/detaching the values, mapped via EF</summary>
        [XmlIgnore()]
        [EdmComplexProperty()]
        public <%= structImplementationType %> <%= efName %>
        {
            get
            {
                return <%= backingName %>;
            }
            set
            {
                if (value == null)
					throw new ArgumentNullException("value");
                
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (!object.Equals(<%= backingName %>, value))
                {
					var __oldValue = <%= backingName %>;
                    NotifyPropertyChanging("<%= name %>", "<%= efName %>", __oldValue, value);
                    if (<%= backingName %> != null)
                    {
						<%= backingName %>.DetachFromObject(this, "<%= name %>");
					}
                    <%= backingName %> = (<%= structImplementationType %>)value;
					<%= backingName %>.AttachToObject(this, "<%= name %>");
                    NotifyPropertyChanged("<%= name %>", "<%= efName %>", __oldValue, value);
                }
            }
        }


<%
        AddSerialization(serializationList, efName);
%>  