<%@ CodeTemplate Language="C#" 
	Name="Implementation.EfModel.ModelCsdlEntityTypeFields"
	CodeFile="Implementation.EfModel.ModelCsdlEntityTypeFields.cs" 
	ClassName="Kistl.DalProvider.EF.Generator.Implementation.EfModel.ModelCsdlEntityTypeFields" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.API.Server" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Import Namespace="Kistl.Server.Generators" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="IKistlContext" %>
<%@ Parameter Name="properties" Type="IEnumerable<Property>" %>
<%

	/*
	 * TODO: Actually, all this should die and become a bunch of polymorphic calls.
	 */

	foreach(var p in properties.OrderBy(p => p.PropertyName))
	{
		// TODO: implement IsNullable everywhere
		if (p is ObjectReferenceProperty)
		{
		    var prop = p as ObjectReferenceProperty;
		    var rel = Kistl.App.Extensions.RelationExtensions.Lookup(ctx, prop);
			var relEnd = rel.GetEnd(prop);
			var otherEnd = rel.GetOtherEnd(relEnd);
			
			if (rel.Storage == StorageType.Separate)
			{
				Debug.Assert(relEnd != null);
%>
    <NavigationProperty Name="<%= p.PropertyName + Kistl.API.Helper.ImplementationSuffix %>"
                        Relationship="Model.<%= rel.GetRelationAssociationName(relEnd.GetRole()) %>"
                        FromRole="<%= relEnd.RoleName %>"
                        ToRole="CollectionEntry" />
<%
			}
			else
			{
%>
    <NavigationProperty Name="<%= p.PropertyName + Kistl.API.Helper.ImplementationSuffix %>"
                        Relationship="Model.<%= rel.GetAssociationName() %>"
                        FromRole="<%= relEnd.RoleName %>"
                        ToRole="<%= otherEnd.RoleName %>" />
<%

				if (rel.NeedsPositionStorage(relEnd.GetRole()))
				{
%>
    <Property Name="<%= p.PropertyName + Kistl.API.Helper.PositionSuffix %>" Type="Int32" Nullable="true" />
<%
				}
			}
		}
		else if (p is ValueTypeProperty)
		{
			var prop = (ValueTypeProperty)p;
			if (prop.IsList)
			{
%>
    <NavigationProperty Name="<%= prop.PropertyName + Kistl.API.Helper.ImplementationSuffix %>"
                        Relationship="Model.<%= prop.GetAssociationName() %>"
                        FromRole="<%= prop.ObjectClass.ClassName %>"
                        ToRole="CollectionEntry" />
<%
			}
			else
			{
%>
    <%= ModelCsdl.PlainPropertyDefinitionFromValueType((ValueTypeProperty)p) %>
<%
			}
		}
		else if (p is StructProperty)
		{
			var prop = (StructProperty)p;
			if (prop.IsList)
			{
%>
    <NavigationProperty Name="<%= prop.PropertyName + Kistl.API.Helper.ImplementationSuffix %>"
                        Relationship="Model.<%= prop.GetAssociationName() %>"
                        FromRole="<%= prop.ObjectClass.ClassName %>"
                        ToRole="CollectionEntry" />
<%
			}
			else
			{
			// Nullable Complex types are not supported by EF
%>
    <Property Name="<%= p.PropertyName + Kistl.API.Helper.ImplementationSuffix %>"
              Type="Model.<%= prop.StructDefinition.ClassName %>"
              Nullable="false" />
<%
			}
		}	
	}
%>