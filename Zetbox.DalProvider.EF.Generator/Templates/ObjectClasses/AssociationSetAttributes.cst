<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#" 
	Name="ObjectClasses.AssociationSetAttributes"
	ClassName="Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.AssociationSetAttributes" 
	Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Xml;
using System.Xml.Serialization;

using Zetbox.API;
using Zetbox.DalProvider.Ef;

<%
	foreach (var rel in ctx.GetQuery<Relation>().ToList().OrderBy(r => r.GetAssociationName()))
	{
%>

	/*
<%
	RelationDebugTemplate.Call(Host, ctx, rel);
%>
	*/
<%
		switch (rel.Storage)
		{
			case StorageType.MergeIntoA:
			case StorageType.MergeIntoB:
			case StorageType.Replicate:
%>

// basic association
[assembly: EdmRelationship(
    "Model", "<%= rel.GetAssociationName() %>",
    "<%= rel.A.RoleName %>", RelationshipMultiplicity.<%= rel.A.Multiplicity.ToCsdlRelationshipMultiplicity() %>, typeof(<%= rel.A.Type.GetDataTypeString() + ImplementationSuffix %>),
    "<%= rel.B.RoleName %>", RelationshipMultiplicity.<%= rel.B.Multiplicity.ToCsdlRelationshipMultiplicity() %>, typeof(<%= rel.B.Type.GetDataTypeString() + ImplementationSuffix %>)
    )]

<%
				break;
			case StorageType.Separate:
%>

// The association from A to the CollectionEntry
[assembly: EdmRelationship("Model", "<%= rel.GetRelationAssociationName(RelationEndRole.A) %>",
    "<%= rel.A.RoleName %>", RelationshipMultiplicity.ZeroOrOne, typeof(<%= rel.A.Type.GetDataTypeString() + ImplementationSuffix %>),
    "CollectionEntry", RelationshipMultiplicity.Many, typeof(<%= rel.GetRelationFullName() + ImplementationSuffix %>)
    )]
// The association from B to the CollectionEntry
[assembly: EdmRelationship("Model", "<%= rel.GetRelationAssociationName(RelationEndRole.B) %>",
    "<%= rel.B.RoleName %>", RelationshipMultiplicity.ZeroOrOne, typeof(<%= rel.B.Type.GetDataTypeString() + ImplementationSuffix %>),
    "CollectionEntry", RelationshipMultiplicity.Many, typeof(<%= rel.GetRelationFullName() + ImplementationSuffix %>)
    )]
<%
				break;
			default:
				throw new NotImplementedException(String.Format("Unknown StorageHint.{0} preference", rel.Storage));
		}
	}

%>

<%
	foreach (var prop in ctx.GetQuery<ValueTypeProperty>()
		.Where(p => p.IsList && !p.IsCalculated)
        .Where(p => p.ObjectClass is ObjectClass)
		.OrderBy(p => p.ObjectClass.Name)
		.ThenBy(p => p.Name))
	{
%>

// object-value association
[assembly: EdmRelationship(
    "Model", "<%= prop.GetAssociationName() %>",
    "<%= prop.ObjectClass.Name %>", RelationshipMultiplicity.ZeroOrOne, typeof(<%= prop.ObjectClass.Module.Namespace + "." + prop.ObjectClass.Name + ImplementationSuffix %>),
    "CollectionEntry", RelationshipMultiplicity.Many, typeof(<%= prop.GetCollectionEntryFullName() + ImplementationSuffix %>)
    )]

<%
	}
%>

<%
	foreach (var prop in ctx.GetQuery<CompoundObjectProperty>()
		.Where(p => p.IsList) // && !p.IsCalculated)
        .Where(p => p.ObjectClass is ObjectClass)
		.OrderBy(p => p.ObjectClass.Name)
		.ThenBy(p => p.Name))
	{
%>

// object-struct association
[assembly: EdmRelationship(
    "Model", "<%= prop.GetAssociationName() %>",
    "<%= prop.ObjectClass.Name %>", RelationshipMultiplicity.ZeroOrOne, typeof(<%= prop.ObjectClass.Module.Namespace + "." + prop.ObjectClass.Name + ImplementationSuffix %>),
    "CollectionEntry", RelationshipMultiplicity.Many, typeof(<%= prop.GetCollectionEntryFullName() + ImplementationSuffix %>)
    )]

<%
	}
%>

<%
	foreach (var cls in ctx.GetQuery<ObjectClass>().Where(c => c.BaseObjectClass == null)
		.OrderBy(c => c.Name))
	{
		if (cls.NeedsRightsTable())
		{
%>
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("Model", "<%= Construct.SecurityRulesFKName(cls) %>", 
	"<%= cls.Name %>", 
	global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, 
	typeof(<%= cls.Module.Namespace + "." + cls.Name + ImplementationSuffix %>), 
	"<%= Construct.SecurityRulesClassName(cls) %>", 
	global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, 
	typeof(<%= cls.Module.Namespace + "." + Construct.SecurityRulesClassName(cls) + ImplementationSuffix %>))]
<%
		}
	}
%>