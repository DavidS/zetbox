<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#" 
	Name="Properties.EnumerationPropertyTemplate"
	ClassName="Zetbox.DalProvider.Ef.Generator.Templates.Properties.EnumerationPropertyTemplate" 
	Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="serializationList" Type="Zetbox.Generator.Templates.Serialization.SerializationMembersList" %>
<%@ Parameter Name="prop" Type="EnumerationProperty" %>
<%@ Parameter Name="callGetterSetterEvents" Type="bool" %>
<%

	string interfaceName = prop.ObjectClass.Name;

	string name = prop.Name;
	string efName = name + ImplementationPropertySuffix;
	string backingName = "_" + name;

	bool isNullable = prop.Constraints.OfType<NotNullableConstraint>().Count() == 0;
	string enumType = prop.GetElementTypeString();
	string eventName = "On" + name;

    bool isCalculated = prop.IsCalculated;

%>
   		// <%= this.GetType() %>
        // implement the user-visible interface
        public <%= enumType %> <%= name %>
        {
            get
            {
<%
				if(callGetterSetterEvents)
				{
%>
				var __value = <%= backingName %>;
				if(<%= eventName %>_Getter != null)
				{
					var e = new PropertyGetterEventArgs<<%= enumType %>>(__value);
					<%= eventName %>_Getter(this, e);
					__value = e.Result;
				}
                return __value;
<% 
				}
				else
				{
%>
				return <%= backingName %>;
<%
				}
%>            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (<%= backingName %> != value)
                {
					var __oldValue = <%= backingName %>;
					var __newValue = value;
<% if(callGetterSetterEvents && !isCalculated) {                                                        %>
                    if(<%= eventName %>_PreSetter != null)
                    {
						var e = new PropertyPreSetterEventArgs<<%= enumType %>>(__oldValue, __newValue);
						<%= eventName %>_PreSetter(this, e);
						__newValue = e.Result;
                    }
<% }                                                                                                    %>					
                    NotifyPropertyChanging("<%= name %>", __oldValue, __newValue);
                    <%= backingName %> = value;
                    NotifyPropertyChanged("<%= name %>", __oldValue, __newValue);
<% if(!isCalculated) {                                                                                  %>
                    if(IsAttached) UpdateChangedInfo = true;
<% } else {                                                                                             %>					
                    <%= backingName %>_IsDirty = false;
<% }                                                                                                    %>					
<% if(callGetterSetterEvents && !isCalculated) {                                                        %>
                    if(<%= eventName %>_PostSetter != null)
                    {
						var e = new PropertyPostSetterEventArgs<<%= enumType %>>(__oldValue, __newValue);
						<%= eventName %>_PostSetter(this, e);
                    }
<% }                                                                                                    %>					
                }
            }
        }

<% EfScalarPropHelper.ApplyBackingStoreDefinition(this, enumType, backingName, efName); %>
<% if (isCalculated) {                                                                                  %>
        private bool <%= backingName %>_IsDirty = false;
<% }                                                                                                    %>					
        
        /// <summary>EF sees only this property, for <%= UglyXmlEncode(name) %></summary>
        [XmlIgnore()]
        [EdmScalarProperty()]
        public int<%= isNullable ? "?" : String.Empty %> <%= efName %>
        {
            get
            {
                return (int<%= isNullable ? "?" : String.Empty %>)this.<%= name %>;
            }
            set
            {
                this.<%= name %> = (<%= enumType %>)value;
            }
        }
        
<%
    AddSerialization(serializationList);
%>