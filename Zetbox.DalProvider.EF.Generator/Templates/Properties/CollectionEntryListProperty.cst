<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#" 
    Name="Properties.CollectionEntryListProperty"
    ClassName="Zetbox.DalProvider.Ef.Generator.Templates.Properties.CollectionEntryListProperty" 
    Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="serializationList" Type="Zetbox.Generator.Templates.Serialization.SerializationMembersList" %>
<%@ Parameter Name="rel" Type="Relation" %>
<%@ Parameter Name="endRole" Type="RelationEndRole" %>
<%

    RelationEnd relEnd = rel.GetEndFromRole(endRole);
    RelationEnd otherEnd = rel.GetOtherEnd(relEnd);

    // the name of the property to create
    // TODO: Case #1168
    // Interface & Client Assembly generation uses the navigation property, EntityFramework Implementation uses the role name
    string name = relEnd.Navigator.Name;
    // the ef-visible property's name
    string efName = name + ImplementationPropertySuffix;
    // the name of the IDs list
    string idsListName = efName + "Ids";
    // the name of the private backing store for the conversion wrapper list
    string wrapperName = "_" + name;
    // the name of the wrapper class for wrapping the other end
    string wrapperClass = "undefined wrapper class";
    if (rel.NeedsPositionStorage(endRole))
    {
        if (otherEnd.GetRole() == RelationEndRole.A)
        {
            wrapperClass = "ASideListWrapper";
        }
        else if (otherEnd.GetRole() == RelationEndRole.B)
        {
            wrapperClass = "BSideListWrapper";
        }
    }
    else
    {
        if (otherEnd.GetRole() == RelationEndRole.A)
        {
            wrapperClass = "ASideCollectionWrapper";
        }
        else if (otherEnd.GetRole() == RelationEndRole.B)
        {
            wrapperClass = "BSideCollectionWrapper";
        }
    }

    // the name of the CollectionEntry type
    string ceName = rel.GetRelationFullName() + ImplementationSuffix;

    // the name of the EF association to the CollectionEntry
    string assocName = rel.GetRelationAssociationName(endRole);
    // this class' role name in this association
    string roleName = relEnd.RoleName;
    // this targeted role name 
    string targetRoleName = "CollectionEntry";

    // which generic interface to use for the collection
    string exposedListType = rel.NeedsPositionStorage(endRole) ? "IList" : "ICollection";

    // which Zetbox interface this is 
    string thisInterface = relEnd.Type.GetDataTypeString();
    // which Zetbox interface this list contains
    string referencedInterface = otherEnd.Type.GetDataTypeString();
    // the actual implementation class of the list's elements
    string referencedImplementation = otherEnd.Type.GetDataTypeString() + ImplementationSuffix;

    // whether or not the collection will be eagerly loaded
    bool eagerLoading = relEnd.Navigator != null && relEnd.Navigator.EagerLoading;

   	string eventName = "On" + name + "_PostSetter";
%>
        // <%= this.GetType() %>
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public <%= exposedListType %><<%= referencedInterface %>> <%= name %>
        {
            get
            {
                if (<%= wrapperName %> == null)
                {
                    <%= wrapperName %> = new <%= wrapperClass %><<%= rel.A.Type.GetDataTypeString() %>, <%= rel.B.Type.GetDataTypeString() %>, <%= ceName %>, EntityCollection<<%= ceName %>>>(
                            this,
                            <%= efName %>);
                }
                return <%= wrapperName %>;
            }
        }
        
        [EdmRelationshipNavigationProperty("Model", "<%= assocName %>", "<%= targetRoleName %>")]
        public EntityCollection<<%= ceName %>> <%= efName %>
        {
            get
            {
                return Get<%= efName %>Collection();
            }
        }

        private EntityCollection<<%= ceName %>> _<%= efName %>EntityCollection;
        internal EntityCollection<<%= ceName %>> Get<%= efName %>Collection()
        {
            if (_<%= efName %>EntityCollection == null)
            {
                _<%= efName %>EntityCollection
                    = ((IEntityWithRelationships)(this)).RelationshipManager
                        .GetRelatedCollection<<%= ceName %>>(
                            "Model.<%= assocName %>",
                            "<%= targetRoleName %>");
                // the EntityCollection has to be loaded before attaching the AssociationChanged event
                // because the event is triggered while relation entries are loaded from the database
                // although that does not require notification of the business logic.
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !_<%= efName %>EntityCollection.IsLoaded)
                {
                    _<%= efName %>EntityCollection.Load();
                }
                _<%= efName %>EntityCollection.AssociationChanged += (s, e) => { this.NotifyPropertyChanged("<%= name %>", null, null); if(<%= eventName %> != null && IsAttached) <%= eventName%>(this); };
            }
            return _<%= efName %>EntityCollection;
        }
        private <%= wrapperClass %><<%= rel.A.Type.GetDataTypeString() %>, <%= rel.B.Type.GetDataTypeString() %>, <%= ceName %>, EntityCollection<<%= ceName %>>> <%= wrapperName %>;
<% if (eagerLoading) { %>
        private bool <%= name %>_was_eagerLoaded = false;
<% } %>

        public Zetbox.API.Async.ZbTask TriggerFetch<%= name %>Async()
        {
            return new Zetbox.API.Async.ZbTask<<%= exposedListType %><<%= referencedInterface %>>>(this.<%= name %>);
        }

<% AddSerialization(serializationList, name, eagerLoading); %>
