<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#"
    Name="Properties.ValueCollectionProperty"
    ClassName="Zetbox.DalProvider.Ef.Generator.Templates.Properties.ValueCollectionProperty"
    Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="serializationList" Type="Zetbox.Generator.Templates.Serialization.SerializationMembersList" %>
<%@ Parameter Name="prop" Type="Property" %>
<%

    Debug.Assert(prop is ValueTypeProperty ? ((ValueTypeProperty)prop).IsList : ((CompoundObjectProperty)prop).IsList);
    bool hasPersistentOrder = prop is ValueTypeProperty ? ((ValueTypeProperty)prop).HasPersistentOrder : ((CompoundObjectProperty)prop).HasPersistentOrder;

    // the name of the property to create
    string name = prop.Name;
    // the ef-visible property's name
    string efName = name + ImplementationPropertySuffix;
    // the name of the private backing store for the conversion wrapper list
    string wrapperName = "_" + name;
    // the name of the wrapper class for wrapping the EntityCollection
    string wrapperClass = (hasPersistentOrder ? "EfValueListWrapper" : "EfValueCollectionWrapper");

    // the name of the EF association
    string assocName = prop.GetAssociationName();
    string targetRoleName = "CollectionEntry";

    // which generic interface to use for the collection
    string exposedListType = hasPersistentOrder ? "IList" : "ICollection";

    // which Zetbox interface this is
    string thisInterface = prop.ObjectClass.Name;
    // which type this list contains
    string referencedType = prop.GetElementTypeString();
    // collection entries in this list
    string referencedCollectionEntry = prop.GetCollectionEntryFullName() + ImplementationSuffix;

    AddSerialization(serializationList, efName);
    var eventName = "On" + name + "_PostSetter";
%>
        // <%= this.GetType() %>
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public <%= exposedListType %><<%= referencedType %>> <%= name %>
        {
            get
            {
                if (<%= wrapperName %> == null)
                {
                    <%= wrapperName %> = new <%= wrapperClass %><<%= thisInterface %>, <%= referencedType %>, <%= referencedCollectionEntry %>, EntityCollection<<%= referencedCollectionEntry %>>>(
                        this.Context,
                        this,
                        null, // see Get<%= efName %>Collection()
                        <%= efName %>);
                }
                return <%= wrapperName %>;
            }
        }

        [EdmRelationshipNavigationProperty("Model", "<%= assocName %>", "<%= targetRoleName %>")]
        public EntityCollection<<%= referencedCollectionEntry %>> <%= efName %>
        {
            get
            {
                return Get<%= efName %>Collection();
            }
        }

        internal EntityCollection<<%= referencedCollectionEntry %>> Get<%= efName %>Collection()
        {
            if (_<%= efName %>EntityCollection == null)
            {
                _<%= efName %>EntityCollection = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<<%= referencedCollectionEntry %>>(
                        "Model.<%= assocName %>",
                        "<%= targetRoleName %>");
                // the EntityCollection has to be loaded before attaching the AssociationChanged event
                // because the event is triggered while relation entries are loaded from the database
                // although that does not require notification of the business logic.
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !_<%= efName %>EntityCollection.IsLoaded)
                {
                    _<%= efName %>EntityCollection.Load();
                }
                _<%= efName %>EntityCollection.AssociationChanged += (s, e) => { this.NotifyPropertyChanged("<%= name %>", null, null); if (<%= eventName %> != null && IsAttached) <%= eventName%>(this); };
            }
            return _<%= efName %>EntityCollection;
        }
        private EntityCollection<<%= referencedCollectionEntry %>> _<%= efName %>EntityCollection;
        private <%= wrapperClass %><<%= thisInterface %>, <%= referencedType %>, <%= referencedCollectionEntry %>, EntityCollection<<%= referencedCollectionEntry %>>> <%= wrapperName %>;
