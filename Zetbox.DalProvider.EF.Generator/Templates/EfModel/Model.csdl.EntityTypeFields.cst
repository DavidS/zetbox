<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
ï»¿<%@ CodeTemplate Language="C#" 
	Name="EfModel.ModelCsdlEntityTypeFields"
	ClassName="Zetbox.DalProvider.Ef.Generator.Templates.EfModel.ModelCsdlEntityTypeFields" 
	Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="properties" Type="IEnumerable<Property>" %>
<%

	/*
	 * TODO: Actually, all this should die and become a bunch of polymorphic calls.
     * See also Zetbox.DalProvider.NHibernate.Generator.Templates.Mappings.PropertiesHbm
	 */

	foreach(var p in properties.OrderBy(p => p.Name))
	{
		// TODO: implement IsNullable everywhere
		if (p is ObjectReferenceProperty)
		{
		    var prop = p as ObjectReferenceProperty;
		    var rel = Zetbox.App.Extensions.RelationExtensions.Lookup(ctx, prop);
			var relEnd = rel.GetEnd(prop);
			var otherEnd = rel.GetOtherEnd(relEnd);
			
			if (rel.Storage == StorageType.Separate)
			{
				Debug.Assert(relEnd != null);
%>
    <NavigationProperty Name="<%= p.Name + ImplementationPropertySuffix %>"
                        Relationship="Model.<%= rel.GetRelationAssociationName(relEnd.GetRole()) %>"
                        FromRole="<%= relEnd.RoleName %>"
                        ToRole="CollectionEntry" />
<%
			}
			else
			{
%>
    <NavigationProperty Name="<%= p.Name + ImplementationPropertySuffix %>"
                        Relationship="Model.<%= rel.GetAssociationName() %>"
                        FromRole="<%= relEnd.RoleName %>"
                        ToRole="<%= otherEnd.RoleName %>" />
<%

				if (rel.NeedsPositionStorage(relEnd.GetRole()))
				{
%>
    <Property Name="<%= Construct.ListPositionPropertyName(relEnd) %>" Type="Int32" Nullable="true" />
<%
				}
			}
		}
		else if (p is ValueTypeProperty)
		{
			var prop = (ValueTypeProperty)p;
			if (prop.IsList && !prop.IsCalculated)
			{
%>
    <NavigationProperty Name="<%= prop.Name + ImplementationPropertySuffix %>"
                        Relationship="Model.<%= prop.GetAssociationName() %>"
                        FromRole="<%= prop.ObjectClass.Name %>"
                        ToRole="CollectionEntry" />
<%
			}
			else
			{
%>
    <%= ModelCsdl.PlainPropertyDefinitionFromValueType((ValueTypeProperty)p, p.Name, ImplementationPropertySuffix) %>
<%
			}
		}
		else if (p is CompoundObjectProperty)
		{
			var prop = (CompoundObjectProperty)p;
			if (prop.IsList)
			{
%>
    <NavigationProperty Name="<%= prop.Name + ImplementationPropertySuffix %>"
                        Relationship="Model.<%= prop.GetAssociationName() %>"
                        FromRole="<%= prop.ObjectClass.Name %>"
                        ToRole="CollectionEntry" />
<%
			}
			else
			{
			// Nullable Complex types are not supported by EF
%>
    <Property Name="<%= p.Name + ImplementationPropertySuffix %>"
              Type="Model.<%= prop.CompoundObjectDefinition.Name %>"
              Nullable="false" />
<%
			}
		}	
	}
%>