<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
ï»¿<%@ CodeTemplate Language="C#" 
	Name="EfModel.ModelSsdlEntityTypeColumns"
	ClassName="Zetbox.DalProvider.Ef.Generator.Templates.EfModel.ModelSsdlEntityTypeColumns" 
	Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="properties" Type="IEnumerable<Property>" %>
<%@ Parameter Name="prefix" Type="string" %>
<%@ Parameter Name="schemaProvider" Type="ISchemaProvider" %>
<%

	/*
	 * TODO: Actually, all this should die and become a bunch of polymorphic calls.
	 */

	foreach(var p in properties)
	{
		// TODO: implement IsNullable everywhere
		
		if (p is CompoundObjectProperty)
		{
%>		
    <Property Name="<%= Construct.NestedColumnName(p, prefix) %>" Type="<%= schemaProvider.DbTypeToNative(DbType.Boolean) %>" Nullable="false" />
<%    
			ApplyEntityTypeColumnDefs(
				((CompoundObjectProperty)p).CompoundObjectDefinition.Properties.Cast<Property>().OrderBy(prop => prop.Name),
				Construct.NestedColumnName(p, prefix),
				schemaProvider);
		}
		else if (p is ObjectReferenceProperty)
		{
			throw new ArgumentException("properties", String.Format("contains ObjectReferenceProperty {0}, but this template cannot work with that", p));
		}
		else
		{
			string propertyName = Construct.NestedColumnName(p, prefix);
			string sqlTypeName = schemaProvider.DbTypeToNative(DbTypeMapper.GetDbTypeForProperty(p.GetType()));
			
			string maxLengthAttr = String.Empty;
			if (p is StringProperty)
			{
				int maxLength = ((StringProperty)p).GetMaxLength();
				if (maxLength != int.MaxValue)
				{
					// must have one space at the end
					maxLengthAttr = String.Format("MaxLength=\"{0}\" ", maxLength);
				}
			}
			
			string precScaleAttr = String.Empty;
			if (p is DecimalProperty)
			{
				DecimalProperty dp = (DecimalProperty)p;
				// must have one space at the end
				precScaleAttr = String.Format("Precision=\"{0}\" Scale=\"{1}\" ", dp.Precision, dp.Scale);
			}
			
			string nullableAttr = String.Empty;
			if (p.IsValueTypePropertySingle())
			{
				// must have one space at the end
				nullableAttr = String.Format("Nullable=\"{0}\" ", ((Property)p).IsNullable().ToString().ToLowerInvariant());
			}
%>
    <Property Name="<%= propertyName %>" Type="<%= sqlTypeName %>" <%= maxLengthAttr %><%= precScaleAttr %><%= nullableAttr %>/>
<%
		}
	}
%>