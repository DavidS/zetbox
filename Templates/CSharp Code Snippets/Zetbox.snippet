<?xml version="1.0" encoding="UTF-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>SimpleCommand snippet</Title>
      <Author>dasz.at OG</Author>
      <Description>Inserts a simple Command to a ViewModel.</Description>
      <Shortcut>smplcmd</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>Name</ID>
          <Type>String</Type>
          <ToolTip>Replace with a name.</ToolTip>
          <Default>Name</Default>
        </Literal>
        <Literal>
          <ID>Label</ID>
          <Type>String</Type>
          <ToolTip>Replace with a Label.</ToolTip>
          <Default>Command</Default>
        </Literal>
        <Literal>
          <ID>Tooltip</ID>
          <Type>String</Type>
          <ToolTip>Replace with a Tooltip.</ToolTip>
          <Default>Tooltip</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp" Kind="method body">
        <![CDATA[private ICommandViewModel _$Name$Command = null;
        public ICommandViewModel $Name$Command
        {
            get
            {
                if (_$Name$Command == null)
                {
                    _$Name$Command = ViewModelFactory.CreateViewModel<SimpleCommandViewModel.Factory>().Invoke(DataContext, this, "$Label$", "$Tooltip$", $Name$, null, null);
                }
                return _$Name$Command;
            }
        }			

		public void $Name$()
		{
		}]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Asynchronous Property snippet</Title>
      <Author>dasz.at OG</Author>
      <Description>Inserts a simple asynchronous cached property.</Description>
      <Shortcut>propasync</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>Name</ID>
          <Type>String</Type>
          <ToolTip>Replace with a name.</ToolTip>
          <Default>Name</Default>
        </Literal>
        <Literal>
          <ID>Type</ID>
          <Type>String</Type>
          <ToolTip>Replace with a type.</ToolTip>
          <Default>string</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp" Kind="method body">
        <![CDATA[#region $Name$Async

        private PropertyTask<$Type$> _$Name$Task;
        private PropertyTask<$Type$> Ensure$Name$Task()
        {
            if (_$Name$Task != null) return _$Name$Task;

            return _$Name$Task = new PropertyTask<$Type$>(
                notifier: () =>
                {
                    OnPropertyChanged("$Name$");
                    OnPropertyChanged("$Name$Async");
                },
                createTask: () =>
                {
                    return new ZbTask<$Type$>(default($Type$));
                },
                set: ($Type$ value) =>
                {
					throw new NotImplementedException();
                });
        }

        private $Type$ $Name$
        {
            get { return Ensure$Name$Task().Get(); }
            set { Ensure$Name$Task().Set(value); }
        }

        private $Type$ $Name$Async
        {
            get { return Ensure$Name$Task().GetAsync(); }
            set { $Name$ = value; }
        }

        #endregion]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>