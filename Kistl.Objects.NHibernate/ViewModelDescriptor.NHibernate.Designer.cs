// <autogenerated/>

namespace Kistl.App.GUI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;
    using Kistl.DalProvider.Base.RelationWrappers;

    using Kistl.API.Utils;
    using Kistl.DalProvider.Base;
    using Kistl.DalProvider.NHibernate;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("ViewModelDescriptor")]
    public class ViewModelDescriptorNHibernateImpl : Kistl.DalProvider.NHibernate.DataObjectNHibernateImpl, Kistl.API.IExportableInternal, ViewModelDescriptor
    {
        public ViewModelDescriptorNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public ViewModelDescriptorNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new ViewModelDescriptorProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public ViewModelDescriptorNHibernateImpl(Func<IFrozenContext> lazyCtx, ViewModelDescriptorProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
            _isExportGuidSet = Proxy.ID > 0;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly ViewModelDescriptorProxy Proxy;

        /// <summary>
        /// The default ControlKind to use for displaying this Presentable readonly. Defaults to DefaultKind with editing disabled.
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultDisplayKind
        // fkBackingName=this.Proxy.DefaultDisplayKind; fkGuidBackingName=_fk_guid_DefaultDisplayKind;
        // referencedInterface=Kistl.App.GUI.ControlKind; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ControlKind DefaultDisplayKind
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.ControlKindNHibernateImpl __value = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultDisplayKind);

                if (OnDefaultDisplayKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.ControlKind>(__value);
                    OnDefaultDisplayKind_Getter(this, e);
                    __value = (Kistl.App.GUI.ControlKindNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.DefaultDisplayKind == null)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultDisplayKind);
                var __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                    return;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultDisplayKind", __oldValue, __newValue);

                if (OnDefaultDisplayKind_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultDisplayKind_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.DefaultDisplayKind = null;
                }
                else
                {
                    this.Proxy.DefaultDisplayKind = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultDisplayKind", __oldValue, __newValue);

                if (OnDefaultDisplayKind_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultDisplayKind_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for DefaultDisplayKind's id, used on dehydration only</summary>
        private int? _fk_DefaultDisplayKind = null;

        /// <summary>Backing store for DefaultDisplayKind's guid, used on import only</summary>
        private Guid? _fk_guid_DefaultDisplayKind = null;

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultDisplayKind
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultDisplayKind_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultDisplayKind_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultDisplayKind_PostSetter;

        /// <summary>
        /// The default ControlKind to use for this Presentable.
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultEditorKind
        // fkBackingName=this.Proxy.DefaultEditorKind; fkGuidBackingName=_fk_guid_DefaultEditorKind;
        // referencedInterface=Kistl.App.GUI.ControlKind; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ControlKind DefaultEditorKind
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.ControlKindNHibernateImpl __value = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultEditorKind);

                if (OnDefaultEditorKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.ControlKind>(__value);
                    OnDefaultEditorKind_Getter(this, e);
                    __value = (Kistl.App.GUI.ControlKindNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.DefaultEditorKind == null)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultEditorKind);
                var __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                    return;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultEditorKind", __oldValue, __newValue);

                if (OnDefaultEditorKind_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultEditorKind_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.DefaultEditorKind = null;
                }
                else
                {
                    this.Proxy.DefaultEditorKind = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultEditorKind", __oldValue, __newValue);

                if (OnDefaultEditorKind_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultEditorKind_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for DefaultEditorKind's id, used on dehydration only</summary>
        private int? _fk_DefaultEditorKind = null;

        /// <summary>Backing store for DefaultEditorKind's guid, used on import only</summary>
        private Guid? _fk_guid_DefaultEditorKind = null;

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultEditorKind
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultEditorKind_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultEditorKind_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultEditorKind_PostSetter;

        /// <summary>
        /// The default ControlKind to use for displaying this Presentable readonly in a GridCell. Defaults to DefaultDisplayKind.
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellDisplayKind
        // fkBackingName=this.Proxy.DefaultGridCellDisplayKind; fkGuidBackingName=_fk_guid_DefaultGridCellDisplayKind;
        // referencedInterface=Kistl.App.GUI.ControlKind; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ControlKind DefaultGridCellDisplayKind
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.ControlKindNHibernateImpl __value = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultGridCellDisplayKind);

                if (OnDefaultGridCellDisplayKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.ControlKind>(__value);
                    OnDefaultGridCellDisplayKind_Getter(this, e);
                    __value = (Kistl.App.GUI.ControlKindNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.DefaultGridCellDisplayKind == null)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultGridCellDisplayKind);
                var __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                    return;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultGridCellDisplayKind", __oldValue, __newValue);

                if (OnDefaultGridCellDisplayKind_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellDisplayKind_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.DefaultGridCellDisplayKind = null;
                }
                else
                {
                    this.Proxy.DefaultGridCellDisplayKind = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultGridCellDisplayKind", __oldValue, __newValue);

                if (OnDefaultGridCellDisplayKind_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellDisplayKind_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for DefaultGridCellDisplayKind's id, used on dehydration only</summary>
        private int? _fk_DefaultGridCellDisplayKind = null;

        /// <summary>Backing store for DefaultGridCellDisplayKind's guid, used on import only</summary>
        private Guid? _fk_guid_DefaultGridCellDisplayKind = null;

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellDisplayKind
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellDisplayKind_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellDisplayKind_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellDisplayKind_PostSetter;

        /// <summary>
        /// The default ControlKind for displaying this model in a GridCell in editing mode. Defaults to DefaultKind.
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellEditorKind
        // fkBackingName=this.Proxy.DefaultGridCellEditorKind; fkGuidBackingName=_fk_guid_DefaultGridCellEditorKind;
        // referencedInterface=Kistl.App.GUI.ControlKind; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ControlKind DefaultGridCellEditorKind
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.ControlKindNHibernateImpl __value = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultGridCellEditorKind);

                if (OnDefaultGridCellEditorKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.ControlKind>(__value);
                    OnDefaultGridCellEditorKind_Getter(this, e);
                    __value = (Kistl.App.GUI.ControlKindNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.DefaultGridCellEditorKind == null)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultGridCellEditorKind);
                var __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                    return;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultGridCellEditorKind", __oldValue, __newValue);

                if (OnDefaultGridCellEditorKind_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellEditorKind_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.DefaultGridCellEditorKind = null;
                }
                else
                {
                    this.Proxy.DefaultGridCellEditorKind = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultGridCellEditorKind", __oldValue, __newValue);

                if (OnDefaultGridCellEditorKind_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellEditorKind_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for DefaultGridCellEditorKind's id, used on dehydration only</summary>
        private int? _fk_DefaultGridCellEditorKind = null;

        /// <summary>Backing store for DefaultGridCellEditorKind's guid, used on import only</summary>
        private Guid? _fk_guid_DefaultGridCellEditorKind = null;

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellEditorKind
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellEditorKind_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellEditorKind_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellEditorKind_PostSetter;

        /// <summary>
        /// .The default ControlKind for displaying this model in a GridCell befor editing starts. Defaults to DefaultGridCellDisplayKind.
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellPreEditorKind
        // fkBackingName=this.Proxy.DefaultGridCellPreEditorKind; fkGuidBackingName=_fk_guid_DefaultGridCellPreEditorKind;
        // referencedInterface=Kistl.App.GUI.ControlKind; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ControlKind DefaultGridCellPreEditorKind
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.ControlKindNHibernateImpl __value = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultGridCellPreEditorKind);

                if (OnDefaultGridCellPreEditorKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.ControlKind>(__value);
                    OnDefaultGridCellPreEditorKind_Getter(this, e);
                    __value = (Kistl.App.GUI.ControlKindNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.DefaultGridCellPreEditorKind == null)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultGridCellPreEditorKind);
                var __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                    return;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultGridCellPreEditorKind", __oldValue, __newValue);

                if (OnDefaultGridCellPreEditorKind_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellPreEditorKind_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.DefaultGridCellPreEditorKind = null;
                }
                else
                {
                    this.Proxy.DefaultGridCellPreEditorKind = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultGridCellPreEditorKind", __oldValue, __newValue);

                if (OnDefaultGridCellPreEditorKind_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellPreEditorKind_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for DefaultGridCellPreEditorKind's id, used on dehydration only</summary>
        private int? _fk_DefaultGridCellPreEditorKind = null;

        /// <summary>Backing store for DefaultGridCellPreEditorKind's guid, used on import only</summary>
        private Guid? _fk_guid_DefaultGridCellPreEditorKind = null;

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellPreEditorKind
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellPreEditorKind_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellPreEditorKind_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind> OnDefaultGridCellPreEditorKind_PostSetter;

        /// <summary>
        /// describe this ViewModel
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Description
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Description != value)
                {
                    var __oldValue = Proxy.Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    Proxy.Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
            }
        }
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, string> OnDescription_PostSetter;

        /// <summary>
        /// Export Guid
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchExportGuidOrDefault();
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
            }
        }

        private Guid FetchExportGuidOrDefault()
        {
            var __result = Proxy.ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("77ce1e5b-f244-4279-af13-b3e75b55f933"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ExportGuid = (Guid)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Kistl.App.GUI.ViewModelDescriptor.ExportGuid'");
                    }
                }
            return __result;
        }

        private bool _isExportGuidSet = false;
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Guid> OnExportGuid_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=this.Proxy.Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Kistl.App.Base.Module; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Module Module
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.ModuleNHibernateImpl __value = (Kistl.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);

                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Module>(__value);
                    OnModule_Getter(this, e);
                    __value = (Kistl.App.Base.ModuleNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.Module == null)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);
                var __newValue = (Kistl.App.Base.ModuleNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                    return;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Module", __oldValue, __newValue);

                if (OnModule_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.ModuleNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.Module = null;
                }
                else
                {
                    this.Proxy.Module = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Module", __oldValue, __newValue);

                if (OnModule_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for Module's id, used on dehydration only</summary>
        private int? _fk_Module = null;

        /// <summary>Backing store for Module's guid, used on import only</summary>
        private Guid? _fk_guid_Module = null;

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.Base.Module> OnModule_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // collection entry list property
   		// Kistl.DalProvider.NHibernate.Generator.Templates.Properties.CollectionEntryListProperty
		public ICollection<Kistl.App.GUI.ControlKind> SecondaryControlKinds
		{
			get
			{
				if (_SecondaryControlKinds == null)
				{
					_SecondaryControlKinds 
						= new NHibernateBSideCollectionWrapper<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind, Kistl.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryNHibernateImpl>(
							this, 
							new ProjectedCollection<Kistl.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryNHibernateImpl.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryProxy, Kistl.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryNHibernateImpl>(
                                this.Proxy.SecondaryControlKinds,
                                p => (Kistl.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryNHibernateImpl)OurContext.AttachAndWrap(p),
                                ce => (Kistl.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryNHibernateImpl.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryProxy)((NHibernatePersistenceObject)ce).NHibernateProxy),
                            entry => (IRelationListSync<Kistl.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryNHibernateImpl>)null);
                    if (SecondaryControlKinds_was_eagerLoaded) { SecondaryControlKinds_was_eagerLoaded = false; }
				}
				return (ICollection<Kistl.App.GUI.ControlKind>)_SecondaryControlKinds;
			}
		}

		private NHibernateBSideCollectionWrapper<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.GUI.ControlKind, Kistl.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryNHibernateImpl> _SecondaryControlKinds;
		// ignored, but required for Serialization
        private bool SecondaryControlKinds_was_eagerLoaded = false;

        /// <summary>
        /// The described CLR class&amp;apos; reference
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ViewModelRef
        // fkBackingName=this.Proxy.ViewModelRef; fkGuidBackingName=_fk_guid_ViewModelRef;
        // referencedInterface=Kistl.App.Base.TypeRef; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.TypeRef ViewModelRef
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.TypeRefNHibernateImpl __value = (Kistl.App.Base.TypeRefNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ViewModelRef);

                if (OnViewModelRef_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.TypeRef>(__value);
                    OnViewModelRef_Getter(this, e);
                    __value = (Kistl.App.Base.TypeRefNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.ViewModelRef == null)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.Base.TypeRefNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ViewModelRef);
                var __newValue = (Kistl.App.Base.TypeRefNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                    return;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ViewModelRef", __oldValue, __newValue);

                if (OnViewModelRef_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.TypeRef>(__oldValue, __newValue);
                    OnViewModelRef_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.TypeRefNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.ViewModelRef = null;
                }
                else
                {
                    this.Proxy.ViewModelRef = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ViewModelRef", __oldValue, __newValue);

                if (OnViewModelRef_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.TypeRef>(__oldValue, __newValue);
                    OnViewModelRef_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for ViewModelRef's id, used on dehydration only</summary>
        private int? _fk_ViewModelRef = null;

        /// <summary>Backing store for ViewModelRef's guid, used on import only</summary>
        private Guid? _fk_guid_ViewModelRef = null;

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ViewModelRef
		public static event PropertyGetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.Base.TypeRef> OnViewModelRef_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.Base.TypeRef> OnViewModelRef_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.GUI.ViewModelDescriptor, Kistl.App.Base.TypeRef> OnViewModelRef_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetName_ViewModelDescriptor")]
        public virtual string GetName()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetName_ViewModelDescriptor != null)
            {
                OnGetName_ViewModelDescriptor(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ViewModelDescriptor.GetName");
            }
            return e.Result;
        }
        public delegate void GetName_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetName_Handler<ViewModelDescriptor> OnGetName_ViewModelDescriptor;
        // END Kistl.Generator.Templates.ObjectClasses.Method

        public override Type GetImplementedInterface()
        {
            return typeof(ViewModelDescriptor);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ViewModelDescriptor)obj;
            var otherImpl = (ViewModelDescriptorNHibernateImpl)obj;
            var me = (ViewModelDescriptor)this;

            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            this._fk_DefaultDisplayKind = otherImpl._fk_DefaultDisplayKind;
            this._fk_DefaultEditorKind = otherImpl._fk_DefaultEditorKind;
            this._fk_DefaultGridCellDisplayKind = otherImpl._fk_DefaultGridCellDisplayKind;
            this._fk_DefaultGridCellEditorKind = otherImpl._fk_DefaultGridCellEditorKind;
            this._fk_DefaultGridCellPreEditorKind = otherImpl._fk_DefaultGridCellPreEditorKind;
            this._fk_Module = otherImpl._fk_Module;
            this._fk_ViewModelRef = otherImpl._fk_ViewModelRef;
        }

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
            var nhCtx = (NHibernateContext)ctx;
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "DefaultDisplayKind":
                    {
                        var __oldValue = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultDisplayKind);
                        var __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)parentObj;
                        NotifyPropertyChanging("DefaultDisplayKind", __oldValue, __newValue);
                        this.Proxy.DefaultDisplayKind = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("DefaultDisplayKind", __oldValue, __newValue);
                    }
                    break;
                case "DefaultEditorKind":
                    {
                        var __oldValue = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultEditorKind);
                        var __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)parentObj;
                        NotifyPropertyChanging("DefaultEditorKind", __oldValue, __newValue);
                        this.Proxy.DefaultEditorKind = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("DefaultEditorKind", __oldValue, __newValue);
                    }
                    break;
                case "DefaultGridCellDisplayKind":
                    {
                        var __oldValue = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultGridCellDisplayKind);
                        var __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)parentObj;
                        NotifyPropertyChanging("DefaultGridCellDisplayKind", __oldValue, __newValue);
                        this.Proxy.DefaultGridCellDisplayKind = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("DefaultGridCellDisplayKind", __oldValue, __newValue);
                    }
                    break;
                case "DefaultGridCellEditorKind":
                    {
                        var __oldValue = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultGridCellEditorKind);
                        var __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)parentObj;
                        NotifyPropertyChanging("DefaultGridCellEditorKind", __oldValue, __newValue);
                        this.Proxy.DefaultGridCellEditorKind = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("DefaultGridCellEditorKind", __oldValue, __newValue);
                    }
                    break;
                case "DefaultGridCellPreEditorKind":
                    {
                        var __oldValue = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultGridCellPreEditorKind);
                        var __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)parentObj;
                        NotifyPropertyChanging("DefaultGridCellPreEditorKind", __oldValue, __newValue);
                        this.Proxy.DefaultGridCellPreEditorKind = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("DefaultGridCellPreEditorKind", __oldValue, __newValue);
                    }
                    break;
                case "Module":
                    {
                        var __oldValue = (Kistl.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);
                        var __newValue = (Kistl.App.Base.ModuleNHibernateImpl)parentObj;
                        NotifyPropertyChanging("Module", __oldValue, __newValue);
                        this.Proxy.Module = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("Module", __oldValue, __newValue);
                    }
                    break;
                case "ViewModelRef":
                    {
                        var __oldValue = (Kistl.App.Base.TypeRefNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ViewModelRef);
                        var __newValue = (Kistl.App.Base.TypeRefNHibernateImpl)parentObj;
                        NotifyPropertyChanging("ViewModelRef", __oldValue, __newValue);
                        this.Proxy.ViewModelRef = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("ViewModelRef", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_DefaultDisplayKind.HasValue)
                this.Proxy.DefaultDisplayKind = ((Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_guid_DefaultDisplayKind.Value)).Proxy;
            else
            if (_fk_DefaultDisplayKind.HasValue)
                this.Proxy.DefaultDisplayKind = ((Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_DefaultDisplayKind.Value)).Proxy;
            else
                this.Proxy.DefaultDisplayKind = null;

            if (_fk_guid_DefaultEditorKind.HasValue)
                this.Proxy.DefaultEditorKind = ((Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_guid_DefaultEditorKind.Value)).Proxy;
            else
            if (_fk_DefaultEditorKind.HasValue)
                this.Proxy.DefaultEditorKind = ((Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_DefaultEditorKind.Value)).Proxy;
            else
                this.Proxy.DefaultEditorKind = null;

            if (_fk_guid_DefaultGridCellDisplayKind.HasValue)
                this.Proxy.DefaultGridCellDisplayKind = ((Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_guid_DefaultGridCellDisplayKind.Value)).Proxy;
            else
            if (_fk_DefaultGridCellDisplayKind.HasValue)
                this.Proxy.DefaultGridCellDisplayKind = ((Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_DefaultGridCellDisplayKind.Value)).Proxy;
            else
                this.Proxy.DefaultGridCellDisplayKind = null;

            if (_fk_guid_DefaultGridCellEditorKind.HasValue)
                this.Proxy.DefaultGridCellEditorKind = ((Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_guid_DefaultGridCellEditorKind.Value)).Proxy;
            else
            if (_fk_DefaultGridCellEditorKind.HasValue)
                this.Proxy.DefaultGridCellEditorKind = ((Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_DefaultGridCellEditorKind.Value)).Proxy;
            else
                this.Proxy.DefaultGridCellEditorKind = null;

            if (_fk_guid_DefaultGridCellPreEditorKind.HasValue)
                this.Proxy.DefaultGridCellPreEditorKind = ((Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_guid_DefaultGridCellPreEditorKind.Value)).Proxy;
            else
            if (_fk_DefaultGridCellPreEditorKind.HasValue)
                this.Proxy.DefaultGridCellPreEditorKind = ((Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_DefaultGridCellPreEditorKind.Value)).Proxy;
            else
                this.Proxy.DefaultGridCellPreEditorKind = null;

            if (_fk_guid_Module.HasValue)
                this.Proxy.Module = ((Kistl.App.Base.ModuleNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.Module>(_fk_guid_Module.Value)).Proxy;
            else
            if (_fk_Module.HasValue)
                this.Proxy.Module = ((Kistl.App.Base.ModuleNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.Module>(_fk_Module.Value)).Proxy;
            else
                this.Proxy.Module = null;

            if (_fk_guid_ViewModelRef.HasValue)
                this.Proxy.ViewModelRef = ((Kistl.App.Base.TypeRefNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.TypeRef>(_fk_guid_ViewModelRef.Value)).Proxy;
            else
            if (_fk_ViewModelRef.HasValue)
                this.Proxy.ViewModelRef = ((Kistl.App.Base.TypeRefNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.TypeRef>(_fk_ViewModelRef.Value)).Proxy;
            else
                this.Proxy.ViewModelRef = null;
        }
        #region Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorNHibernateImpl<ViewModelDescriptorNHibernateImpl, Kistl.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("067ed744-cd2c-4c8b-9829-cf7d0b16df60"),
                        "DefaultDisplayKind",
                        null,
                        obj => obj.DefaultDisplayKind,
                        (obj, val) => obj.DefaultDisplayKind = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<ViewModelDescriptorNHibernateImpl, Kistl.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("b535115c-b847-479d-bdea-a7994ae6eeca"),
                        "DefaultEditorKind",
                        null,
                        obj => obj.DefaultEditorKind,
                        (obj, val) => obj.DefaultEditorKind = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<ViewModelDescriptorNHibernateImpl, Kistl.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("20fb1478-5e20-48e3-b418-c101397d15d1"),
                        "DefaultGridCellDisplayKind",
                        null,
                        obj => obj.DefaultGridCellDisplayKind,
                        (obj, val) => obj.DefaultGridCellDisplayKind = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<ViewModelDescriptorNHibernateImpl, Kistl.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("7a093e89-a9ea-46ca-aeb6-cd3a1740714a"),
                        "DefaultGridCellEditorKind",
                        null,
                        obj => obj.DefaultGridCellEditorKind,
                        (obj, val) => obj.DefaultGridCellEditorKind = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<ViewModelDescriptorNHibernateImpl, Kistl.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("6c744476-35e0-4cef-a221-f02abc81566c"),
                        "DefaultGridCellPreEditorKind",
                        null,
                        obj => obj.DefaultGridCellPreEditorKind,
                        (obj, val) => obj.DefaultGridCellPreEditorKind = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<ViewModelDescriptorNHibernateImpl, string>(
                        lazyCtx,
                        new Guid("93e25648-50f9-40d8-8753-e5dadab68e1d"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<ViewModelDescriptorNHibernateImpl, Guid>(
                        lazyCtx,
                        new Guid("77ce1e5b-f244-4279-af13-b3e75b55f933"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<ViewModelDescriptorNHibernateImpl, Kistl.App.Base.Module>(
                        lazyCtx,
                        new Guid("0b7135d3-dedc-4091-a0c4-690c1b4a2b6d"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val),
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<ViewModelDescriptorNHibernateImpl, ICollection<Kistl.App.GUI.ControlKind>>(
                        lazyCtx,
                        new Guid("5e2e007c-2e90-4ba6-9c9d-46e62b662ff9"),
                        "SecondaryControlKinds",
                        null,
                        obj => obj.SecondaryControlKinds,
                        null), // lists are read-only properties
                    // else
                    new PropertyDescriptorNHibernateImpl<ViewModelDescriptorNHibernateImpl, Kistl.App.Base.TypeRef>(
                        lazyCtx,
                        new Guid("554288d1-f5f4-4b22-908b-01525a1d0f9b"),
                        "ViewModelRef",
                        null,
                        obj => obj.ViewModelRef,
                        (obj, val) => obj.ViewModelRef = val),
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Kistl.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_ViewModelDescriptor")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_ViewModelDescriptor != null)
            {
                OnToString_ViewModelDescriptor(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<ViewModelDescriptor> OnToString_ViewModelDescriptor;

        [EventBasedMethod("OnPreSave_ViewModelDescriptor")]
        public override void NotifyPreSave()
        {
            FetchExportGuidOrDefault();
            base.NotifyPreSave();
            if (OnPreSave_ViewModelDescriptor != null) OnPreSave_ViewModelDescriptor(this);
        }
        public static event ObjectEventHandler<ViewModelDescriptor> OnPreSave_ViewModelDescriptor;

        [EventBasedMethod("OnPostSave_ViewModelDescriptor")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_ViewModelDescriptor != null) OnPostSave_ViewModelDescriptor(this);
        }
        public static event ObjectEventHandler<ViewModelDescriptor> OnPostSave_ViewModelDescriptor;

        [EventBasedMethod("OnCreated_ViewModelDescriptor")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_ViewModelDescriptor != null) OnCreated_ViewModelDescriptor(this);
        }
        public static event ObjectEventHandler<ViewModelDescriptor> OnCreated_ViewModelDescriptor;

        [EventBasedMethod("OnDeleting_ViewModelDescriptor")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_ViewModelDescriptor != null) OnDeleting_ViewModelDescriptor(this);
        }
        public static event ObjectEventHandler<ViewModelDescriptor> OnDeleting_ViewModelDescriptor;

        #endregion // Kistl.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods
        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow Descriptor_has_ViewModelRef
            if (this.ViewModelRef != null && this.ViewModelRef.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.ViewModelRef);

            // Follow Presentable_has_DefaultKind
            if (this.DefaultEditorKind != null && this.DefaultEditorKind.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.DefaultEditorKind);

            // Follow ViewModel_displayed_by_DefaultDisplayKind
            if (this.DefaultDisplayKind != null && this.DefaultDisplayKind.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.DefaultDisplayKind);

            // Follow ViewModel_displayed_by_DefaultGridCellEditorKind
            if (this.DefaultGridCellEditorKind != null && this.DefaultGridCellEditorKind.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.DefaultGridCellEditorKind);

            // Follow ViewModel_displayed_by_DefaultGridDisplayKind
            if (this.DefaultGridCellDisplayKind != null && this.DefaultGridCellDisplayKind.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.DefaultGridCellDisplayKind);

            // Follow ViewModelDescriptor_displayedInGridBy_DefaultGridCellKind
            if (this.DefaultGridCellPreEditorKind != null && this.DefaultGridCellPreEditorKind.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.DefaultGridCellPreEditorKind);

            // Follow ViewModelDescriptor_has_Module
            if (this.Module != null && this.Module.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.Module);

            return result;
        }

        public override List<NHibernatePersistenceObject> GetChildrenToDelete()
        {
            var result = base.GetChildrenToDelete();

            // Follow Application_opens_a_WorkspaceViewModel
            result.AddRange(Context.AttachedObjects
                .OfType<Kistl.App.GUI.Application>()
                .Where(child => child.WorkspaceViewModel == this
                    && child.ObjectState == DataObjectState.Deleted)
                .Cast<NHibernatePersistenceObject>());

            // Follow FilterConfiguration_has_ViewModelDescriptor
            result.AddRange(Context.AttachedObjects
                .OfType<Kistl.App.GUI.FilterConfiguration>()
                .Where(child => child.ViewModelDescriptor == this
                    && child.ObjectState == DataObjectState.Deleted)
                .Cast<NHibernatePersistenceObject>());

            // Follow Presentable_has_DefaultViewModelDescriptor
            result.AddRange(Context.AttachedObjects
                .OfType<Kistl.App.Base.ObjectClass>()
                .Where(child => child.DefaultViewModelDescriptor == this
                    && child.ObjectState == DataObjectState.Deleted)
                .Cast<NHibernatePersistenceObject>());

            // Follow Presentable_may_has_DefaultPropViewModelDescriptor
            result.AddRange(Context.AttachedObjects
                .OfType<Kistl.App.Base.CompoundObject>()
                .Where(child => child.DefaultPropertyViewModelDescriptor == this
                    && child.ObjectState == DataObjectState.Deleted)
                .Cast<NHibernatePersistenceObject>());

            // Follow Property_has_ValueModelDescriptor
            result.AddRange(Context.AttachedObjects
                .OfType<Kistl.App.Base.Property>()
                .Where(child => child.ValueModelDescriptor == this
                    && child.ObjectState == DataObjectState.Deleted)
                .Cast<NHibernatePersistenceObject>());

            // Follow Screen_modeled_by_ViewModelDescriptor
            result.AddRange(Context.AttachedObjects
                .OfType<Kistl.App.GUI.NavigationEntry>()
                .Where(child => child.ViewModelDescriptor == this
                    && child.ObjectState == DataObjectState.Deleted)
                .Cast<NHibernatePersistenceObject>());

            return result;
        }


        public class ViewModelDescriptorProxy
            : IProxyObject, ISortKey<int>
        {
            public ViewModelDescriptorProxy()
            {
                SecondaryControlKinds = new Collection<Kistl.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryNHibernateImpl.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryProxy>();
            }

            public virtual int ID { get; set; }

            public virtual Type ZBoxWrapper { get { return typeof(ViewModelDescriptorNHibernateImpl); } }
            public virtual Type ZBoxProxy { get { return typeof(ViewModelDescriptorProxy); } }

            public virtual Kistl.App.GUI.ControlKindNHibernateImpl.ControlKindProxy DefaultDisplayKind { get; set; }

            public virtual Kistl.App.GUI.ControlKindNHibernateImpl.ControlKindProxy DefaultEditorKind { get; set; }

            public virtual Kistl.App.GUI.ControlKindNHibernateImpl.ControlKindProxy DefaultGridCellDisplayKind { get; set; }

            public virtual Kistl.App.GUI.ControlKindNHibernateImpl.ControlKindProxy DefaultGridCellEditorKind { get; set; }

            public virtual Kistl.App.GUI.ControlKindNHibernateImpl.ControlKindProxy DefaultGridCellPreEditorKind { get; set; }

            public virtual string Description { get; set; }

            public virtual Guid ExportGuid { get; set; }

            public virtual Kistl.App.Base.ModuleNHibernateImpl.ModuleProxy Module { get; set; }

            public virtual ICollection<Kistl.App.GUI.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryNHibernateImpl.ViewModelDescriptor_displayedBy_ControlKind_RelationEntryProxy> SecondaryControlKinds { get; set; }

            public virtual Kistl.App.Base.TypeRefNHibernateImpl.TypeRefProxy ViewModelRef { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }
        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this.Proxy.DefaultDisplayKind != null ? OurContext.GetIdFromProxy(this.Proxy.DefaultDisplayKind) : (int?)null, binStream);
            BinarySerializer.ToStream(this.Proxy.DefaultEditorKind != null ? OurContext.GetIdFromProxy(this.Proxy.DefaultEditorKind) : (int?)null, binStream);
            BinarySerializer.ToStream(this.Proxy.DefaultGridCellDisplayKind != null ? OurContext.GetIdFromProxy(this.Proxy.DefaultGridCellDisplayKind) : (int?)null, binStream);
            BinarySerializer.ToStream(this.Proxy.DefaultGridCellEditorKind != null ? OurContext.GetIdFromProxy(this.Proxy.DefaultGridCellEditorKind) : (int?)null, binStream);
            BinarySerializer.ToStream(this.Proxy.DefaultGridCellPreEditorKind != null ? OurContext.GetIdFromProxy(this.Proxy.DefaultGridCellPreEditorKind) : (int?)null, binStream);
            BinarySerializer.ToStream(this.Proxy.Description, binStream);
            BinarySerializer.ToStream(this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.ToStream(this.Proxy.ExportGuid, binStream);
            }
            BinarySerializer.ToStream(this.Proxy.Module != null ? OurContext.GetIdFromProxy(this.Proxy.Module) : (int?)null, binStream);
            BinarySerializer.ToStream(this.Proxy.ViewModelRef != null ? OurContext.GetIdFromProxy(this.Proxy.ViewModelRef) : (int?)null, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._fk_DefaultDisplayKind, binStream);
            BinarySerializer.FromStream(out this._fk_DefaultEditorKind, binStream);
            BinarySerializer.FromStream(out this._fk_DefaultGridCellDisplayKind, binStream);
            BinarySerializer.FromStream(out this._fk_DefaultGridCellEditorKind, binStream);
            BinarySerializer.FromStream(out this._fk_DefaultGridCellPreEditorKind, binStream);
            {
                string tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.Description = tmp;
            }
            BinarySerializer.FromStream(out this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                Guid tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.ExportGuid = tmp;
            }
            BinarySerializer.FromStream(out this._fk_Module, binStream);
            BinarySerializer.FromStream(out this._fk_ViewModelRef, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this.Proxy.DefaultDisplayKind != null ? OurContext.GetIdFromProxy(this.Proxy.DefaultDisplayKind) : (int?)null, xml, "DefaultDisplayKind", "Kistl.App.GUI");
            XmlStreamer.ToStream(this.Proxy.DefaultEditorKind != null ? OurContext.GetIdFromProxy(this.Proxy.DefaultEditorKind) : (int?)null, xml, "DefaultEditorKind", "Kistl.App.GUI");
            XmlStreamer.ToStream(this.Proxy.DefaultGridCellDisplayKind != null ? OurContext.GetIdFromProxy(this.Proxy.DefaultGridCellDisplayKind) : (int?)null, xml, "DefaultGridCellDisplayKind", "Kistl.App.GUI");
            XmlStreamer.ToStream(this.Proxy.DefaultGridCellEditorKind != null ? OurContext.GetIdFromProxy(this.Proxy.DefaultGridCellEditorKind) : (int?)null, xml, "DefaultGridCellEditorKind", "Kistl.App.GUI");
            XmlStreamer.ToStream(this.Proxy.DefaultGridCellPreEditorKind != null ? OurContext.GetIdFromProxy(this.Proxy.DefaultGridCellPreEditorKind) : (int?)null, xml, "DefaultGridCellPreEditorKind", "Kistl.App.GUI");
            XmlStreamer.ToStream(this.Proxy.Description, xml, "Description", "Kistl.App.GUI");
            XmlStreamer.ToStream(this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.GUI");
            if (this._isExportGuidSet) {
                XmlStreamer.ToStream(this.Proxy.ExportGuid, xml, "ExportGuid", "Kistl.App.GUI");
            }
            XmlStreamer.ToStream(this.Proxy.Module != null ? OurContext.GetIdFromProxy(this.Proxy.Module) : (int?)null, xml, "Module", "Kistl.App.GUI");
            XmlStreamer.ToStream(this.Proxy.ViewModelRef != null ? OurContext.GetIdFromProxy(this.Proxy.ViewModelRef) : (int?)null, xml, "ViewModelRef", "Kistl.App.GUI");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._fk_DefaultDisplayKind, xml, "DefaultDisplayKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_DefaultEditorKind, xml, "DefaultEditorKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_DefaultGridCellDisplayKind, xml, "DefaultGridCellDisplayKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_DefaultGridCellEditorKind, xml, "DefaultGridCellEditorKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_DefaultGridCellPreEditorKind, xml, "DefaultGridCellPreEditorKind", "Kistl.App.GUI");
            {
                // yuck
                string tmp = this.Proxy.Description;
                XmlStreamer.FromStream(ref tmp, xml, "Description", "Kistl.App.GUI");
                this.Proxy.Description = tmp;
            }
            XmlStreamer.FromStream(ref this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.GUI");
            if (this._isExportGuidSet) {
                // yuck
                Guid tmp = this.Proxy.ExportGuid;
                XmlStreamer.FromStream(ref tmp, xml, "ExportGuid", "Kistl.App.GUI");
                this.Proxy.ExportGuid = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_Module, xml, "Module", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_ViewModelRef, xml, "ViewModelRef", "Kistl.App.GUI");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this.Proxy.DefaultDisplayKind != null ? this.Proxy.DefaultDisplayKind.ExportGuid : (Guid?)null, xml, "DefaultDisplayKind", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this.Proxy.DefaultEditorKind != null ? this.Proxy.DefaultEditorKind.ExportGuid : (Guid?)null, xml, "DefaultEditorKind", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this.Proxy.DefaultGridCellDisplayKind != null ? this.Proxy.DefaultGridCellDisplayKind.ExportGuid : (Guid?)null, xml, "DefaultGridCellDisplayKind", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this.Proxy.DefaultGridCellEditorKind != null ? this.Proxy.DefaultGridCellEditorKind.ExportGuid : (Guid?)null, xml, "DefaultGridCellEditorKind", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this.Proxy.DefaultGridCellPreEditorKind != null ? this.Proxy.DefaultGridCellPreEditorKind.ExportGuid : (Guid?)null, xml, "DefaultGridCellPreEditorKind", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this.Proxy.Description, xml, "Description", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this.Proxy.Module != null ? this.Proxy.Module.ExportGuid : (Guid?)null, xml, "Module", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this.Proxy.ViewModelRef != null ? this.Proxy.ViewModelRef.ExportGuid : (Guid?)null, xml, "ViewModelRef", "Kistl.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.FromStream(ref this._fk_guid_DefaultDisplayKind, xml, "DefaultDisplayKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_DefaultEditorKind, xml, "DefaultEditorKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_DefaultGridCellDisplayKind, xml, "DefaultGridCellDisplayKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_DefaultGridCellEditorKind, xml, "DefaultGridCellEditorKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_DefaultGridCellPreEditorKind, xml, "DefaultGridCellPreEditorKind", "Kistl.App.GUI");
            {
                // yuck
                string tmp = this.Proxy.Description;
                XmlStreamer.FromStream(ref tmp, xml, "Description", "Kistl.App.GUI");
                this.Proxy.Description = tmp;
            }
            // Import must have default value set
            {
                // yuck
                Guid tmp = this.Proxy.ExportGuid;
                XmlStreamer.FromStream(ref tmp, xml, "ExportGuid", "Kistl.App.GUI");
                this.Proxy.ExportGuid = tmp;
                this._isExportGuidSet = true;
            }
            XmlStreamer.FromStream(ref this._fk_guid_Module, xml, "Module", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_ViewModelRef, xml, "ViewModelRef", "Kistl.App.GUI");
        }

        #endregion

    }
}