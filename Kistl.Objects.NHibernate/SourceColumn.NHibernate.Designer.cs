// <autogenerated/>

namespace ZBox.App.SchemaMigration
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;
    using Kistl.DalProvider.Base.RelationWrappers;

    using Kistl.API.Utils;
    using Kistl.DalProvider.Base;
    using Kistl.DalProvider.NHibernate;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("SourceColumn")]
    public class SourceColumnNHibernateImpl : Kistl.DalProvider.NHibernate.DataObjectNHibernateImpl, Kistl.API.IExportableInternal, SourceColumn
    {
        public SourceColumnNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public SourceColumnNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new SourceColumnProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public SourceColumnNHibernateImpl(Func<IFrozenContext> lazyCtx, SourceColumnProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
            _isCreatedOnSet = Proxy.ID > 0;
            _isChangedOnSet = Proxy.ID > 0;
            _isExportGuidSet = Proxy.ID > 0;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly SourceColumnProxy Proxy;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=this.Proxy.ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=ZBox.App.SchemaMigration;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity ChangedBy
        {
            get
            {
                Kistl.App.Base.IdentityNHibernateImpl __value = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);

                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.ChangedBy == null)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                var __newValue = (Kistl.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                    return;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.ChangedBy = null;
                }
                else
                {
                    this.Proxy.ChangedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for ChangedBy's id, used on dehydration only</summary>
        private int? _fk_ChangedBy = null;


        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, Kistl.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, Kistl.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, Kistl.App.Base.Identity> OnChangedBy_PostSetter;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchChangedOnOrDefault();
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (Proxy.ChangedOn != value)
                {
                    var __oldValue = Proxy.ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    Proxy.ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
            }
        }

        private DateTime FetchChangedOnOrDefault()
        {
            var __result = Proxy.ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("ddd4df6a-e085-45fe-b900-f3995dcb1845"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'ZBox.App.SchemaMigration.SourceColumn.ChangedOn'");
                    }
                }
            return __result;
        }

        private bool _isChangedOnSet = false;
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, DateTime> OnChangedOn_PostSetter;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Comment
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Comment;
                if (OnComment_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnComment_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Comment != value)
                {
                    var __oldValue = Proxy.Comment;
                    var __newValue = value;
                    if (OnComment_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnComment_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Comment", __oldValue, __newValue);
                    Proxy.Comment = __newValue;
                    NotifyPropertyChanged("Comment", __oldValue, __newValue);
                    if (OnComment_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnComment_PostSetter(this, __e);
                    }
                }
            }
        }
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnComment_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnComment_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnComment_PostSetter;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=this.Proxy.CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=ZBox.App.SchemaMigration;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity CreatedBy
        {
            get
            {
                Kistl.App.Base.IdentityNHibernateImpl __value = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);

                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.CreatedBy == null)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                var __newValue = (Kistl.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                    return;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.CreatedBy = null;
                }
                else
                {
                    this.Proxy.CreatedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for CreatedBy's id, used on dehydration only</summary>
        private int? _fk_CreatedBy = null;


        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, Kistl.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, Kistl.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, Kistl.App.Base.Identity> OnCreatedBy_PostSetter;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchCreatedOnOrDefault();
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (Proxy.CreatedOn != value)
                {
                    var __oldValue = Proxy.CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    Proxy.CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
            }
        }

        private DateTime FetchCreatedOnOrDefault()
        {
            var __result = Proxy.CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("bb5f31d0-072d-45ec-a455-0234ccc31867"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'ZBox.App.SchemaMigration.SourceColumn.CreatedOn'");
                    }
                }
            return __result;
        }

        private bool _isCreatedOnSet = false;
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, DateTime> OnCreatedOn_PostSetter;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public ZBox.App.SchemaMigration.ColumnType DbType
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.DbType;
                if (OnDbType_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<ZBox.App.SchemaMigration.ColumnType>(__result);
                    OnDbType_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.DbType != value)
                {
                    var __oldValue = Proxy.DbType;
                    var __newValue = value;
                    if (OnDbType_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<ZBox.App.SchemaMigration.ColumnType>(__oldValue, __newValue);
                        OnDbType_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("DbType", __oldValue, __newValue);
                    Proxy.DbType = __newValue;
                    NotifyPropertyChanged("DbType", __oldValue, __newValue);
                    if (OnDbType_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<ZBox.App.SchemaMigration.ColumnType>(__oldValue, __newValue);
                        OnDbType_PostSetter(this, __e);
                    }
                }
            }
        }
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.ColumnType> OnDbType_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.ColumnType> OnDbType_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.ColumnType> OnDbType_PostSetter;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Description != value)
                {
                    var __oldValue = Proxy.Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    Proxy.Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
            }
        }
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnDescription_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // collection entry list property
   		// Kistl.DalProvider.NHibernate.Generator.Templates.Properties.CollectionEntryListProperty
		public IList<Kistl.App.Base.Property> DestinationProperty
		{
			get
			{
				if (_DestinationProperty == null)
				{
					_DestinationProperty 
						= new NHibernateBSideListWrapper<ZBox.App.SchemaMigration.SourceColumn, Kistl.App.Base.Property, SourceColumn_created_Property_RelationEntryNHibernateImpl>(
							this, 
							new ProjectedCollection<SourceColumn_created_Property_RelationEntryNHibernateImpl.SourceColumn_created_Property_RelationEntryProxy, SourceColumn_created_Property_RelationEntryNHibernateImpl>(
                                this.Proxy.DestinationProperty,
                                p => (SourceColumn_created_Property_RelationEntryNHibernateImpl)OurContext.AttachAndWrap(p),
                                ce => (SourceColumn_created_Property_RelationEntryNHibernateImpl.SourceColumn_created_Property_RelationEntryProxy)((NHibernatePersistenceObject)ce).NHibernateProxy),
                            entry => (IRelationListSync<SourceColumn_created_Property_RelationEntryNHibernateImpl>)null);
                    if (DestinationProperty_was_eagerLoaded) { DestinationProperty_was_eagerLoaded = false; }
				}
				return (IList<Kistl.App.Base.Property>)_DestinationProperty;
			}
		}

		private NHibernateBSideListWrapper<ZBox.App.SchemaMigration.SourceColumn, Kistl.App.Base.Property, SourceColumn_created_Property_RelationEntryNHibernateImpl> _DestinationProperty;
		// ignored, but required for Serialization
        private bool DestinationProperty_was_eagerLoaded = false;

        /// <summary>
        /// 
        /// </summary>
        // object list property

        // Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<ZBox.App.SchemaMigration.SourceEnum> EnumEntries
        {
            get
            {
                if (_EnumEntries == null)
                {
                    _EnumEntries = new OneNRelationList<ZBox.App.SchemaMigration.SourceEnum>(
                        "SourceColumn",
                        null,
                        this,
                        () => this.NotifyPropertyChanging("EnumEntries", null, null),
                        () => { this.NotifyPropertyChanged("EnumEntries", null, null); if(OnEnumEntries_PostSetter != null && IsAttached) OnEnumEntries_PostSetter(this); },
                        new ProjectedCollection<ZBox.App.SchemaMigration.SourceEnumNHibernateImpl.SourceEnumProxy, ZBox.App.SchemaMigration.SourceEnum>(
                            Proxy.EnumEntries,
                            p => (ZBox.App.SchemaMigration.SourceEnum)OurContext.AttachAndWrap(p),
                            d => (ZBox.App.SchemaMigration.SourceEnumNHibernateImpl.SourceEnumProxy)((NHibernatePersistenceObject)d).NHibernateProxy));
                }
                return _EnumEntries;
            }
        }
    
        private OneNRelationList<ZBox.App.SchemaMigration.SourceEnum> _EnumEntries;
public static event PropertyListChangedHandler<ZBox.App.SchemaMigration.SourceColumn> OnEnumEntries_PostSetter;

        /// <summary>
        /// Export Guid
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchExportGuidOrDefault();
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
            }
        }

        private Guid FetchExportGuidOrDefault()
        {
            var __result = Proxy.ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("52ba9fcd-dbeb-42da-9146-6f40976c1c83"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ExportGuid = (Guid)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'ZBox.App.SchemaMigration.SourceColumn.ExportGuid'");
                    }
                }
            return __result;
        }

        private bool _isExportGuidSet = false;
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, Guid> OnExportGuid_PostSetter;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public bool? IsNullable
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.IsNullable;
                if (OnIsNullable_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnIsNullable_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.IsNullable != value)
                {
                    var __oldValue = Proxy.IsNullable;
                    var __newValue = value;
                    if (OnIsNullable_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnIsNullable_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsNullable", __oldValue, __newValue);
                    Proxy.IsNullable = __newValue;
                    NotifyPropertyChanged("IsNullable", __oldValue, __newValue);
                    if (OnIsNullable_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnIsNullable_PostSetter(this, __e);
                    }
                }
            }
        }
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, bool?> OnIsNullable_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, bool?> OnIsNullable_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, bool?> OnIsNullable_PostSetter;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Name != value)
                {
                    var __oldValue = Proxy.Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    Proxy.Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
            }
        }
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnName_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, string> OnName_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for References
        // fkBackingName=this.Proxy.References; fkGuidBackingName=_fk_guid_References;
        // referencedInterface=ZBox.App.SchemaMigration.SourceColumn; moduleNamespace=ZBox.App.SchemaMigration;
        // inverse Navigator=Referers; is list;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ZBox.App.SchemaMigration.SourceColumn References
        {
            get
            {
                ZBox.App.SchemaMigration.SourceColumnNHibernateImpl __value = (ZBox.App.SchemaMigration.SourceColumnNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.References);

                if (OnReferences_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<ZBox.App.SchemaMigration.SourceColumn>(__value);
                    OnReferences_Getter(this, e);
                    __value = (ZBox.App.SchemaMigration.SourceColumnNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.References == null)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = (ZBox.App.SchemaMigration.SourceColumnNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.References);
                var __newValue = (ZBox.App.SchemaMigration.SourceColumnNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                    return;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("References", __oldValue, __newValue);

                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("Referers", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("Referers", null, null);
                }

                if (OnReferences_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<ZBox.App.SchemaMigration.SourceColumn>(__oldValue, __newValue);
                    OnReferences_PreSetter(this, e);
                    __newValue = (ZBox.App.SchemaMigration.SourceColumnNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.References = null;
                }
                else
                {
                    this.Proxy.References = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.Referers as IRelationListSync<ZBox.App.SchemaMigration.SourceColumn>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.Referers as IRelationListSync<ZBox.App.SchemaMigration.SourceColumn>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("References", __oldValue, __newValue);

                if (OnReferences_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<ZBox.App.SchemaMigration.SourceColumn>(__oldValue, __newValue);
                    OnReferences_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for References's id, used on dehydration only</summary>
        private int? _fk_References = null;

        /// <summary>Backing store for References's guid, used on import only</summary>
        private Guid? _fk_guid_References = null;

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for References
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceColumn> OnReferences_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceColumn> OnReferences_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceColumn> OnReferences_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // object list property

        // Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<ZBox.App.SchemaMigration.SourceColumn> Referers
        {
            get
            {
                if (_Referers == null)
                {
                    _Referers = new OneNRelationList<ZBox.App.SchemaMigration.SourceColumn>(
                        "References",
                        null,
                        this,
                        () => this.NotifyPropertyChanging("Referers", null, null),
                        () => { this.NotifyPropertyChanged("Referers", null, null); if(OnReferers_PostSetter != null && IsAttached) OnReferers_PostSetter(this); },
                        new ProjectedCollection<ZBox.App.SchemaMigration.SourceColumnNHibernateImpl.SourceColumnProxy, ZBox.App.SchemaMigration.SourceColumn>(
                            Proxy.Referers,
                            p => (ZBox.App.SchemaMigration.SourceColumn)OurContext.AttachAndWrap(p),
                            d => (ZBox.App.SchemaMigration.SourceColumnNHibernateImpl.SourceColumnProxy)((NHibernatePersistenceObject)d).NHibernateProxy));
                }
                return _Referers;
            }
        }
    
        private OneNRelationList<ZBox.App.SchemaMigration.SourceColumn> _Referers;
public static event PropertyListChangedHandler<ZBox.App.SchemaMigration.SourceColumn> OnReferers_PostSetter;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public int? Size
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Size;
                if (OnSize_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<int?>(__result);
                    OnSize_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Size != value)
                {
                    var __oldValue = Proxy.Size;
                    var __newValue = value;
                    if (OnSize_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<int?>(__oldValue, __newValue);
                        OnSize_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Size", __oldValue, __newValue);
                    Proxy.Size = __newValue;
                    NotifyPropertyChanged("Size", __oldValue, __newValue);
                    if (OnSize_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<int?>(__oldValue, __newValue);
                        OnSize_PostSetter(this, __e);
                    }
                }
            }
        }
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, int?> OnSize_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, int?> OnSize_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, int?> OnSize_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for SourceTable
        // fkBackingName=this.Proxy.SourceTable; fkGuidBackingName=_fk_guid_SourceTable;
        // referencedInterface=ZBox.App.SchemaMigration.SourceTable; moduleNamespace=ZBox.App.SchemaMigration;
        // inverse Navigator=SourceColumn; is list;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ZBox.App.SchemaMigration.SourceTable SourceTable
        {
            get
            {
                ZBox.App.SchemaMigration.SourceTableNHibernateImpl __value = (ZBox.App.SchemaMigration.SourceTableNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.SourceTable);

                if (OnSourceTable_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<ZBox.App.SchemaMigration.SourceTable>(__value);
                    OnSourceTable_Getter(this, e);
                    __value = (ZBox.App.SchemaMigration.SourceTableNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.SourceTable == null)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = (ZBox.App.SchemaMigration.SourceTableNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.SourceTable);
                var __newValue = (ZBox.App.SchemaMigration.SourceTableNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                    return;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("SourceTable", __oldValue, __newValue);

                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("SourceColumn", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("SourceColumn", null, null);
                }

                if (OnSourceTable_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<ZBox.App.SchemaMigration.SourceTable>(__oldValue, __newValue);
                    OnSourceTable_PreSetter(this, e);
                    __newValue = (ZBox.App.SchemaMigration.SourceTableNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.SourceTable = null;
                }
                else
                {
                    this.Proxy.SourceTable = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.SourceColumn as IRelationListSync<ZBox.App.SchemaMigration.SourceColumn>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.SourceColumn as IRelationListSync<ZBox.App.SchemaMigration.SourceColumn>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("SourceTable", __oldValue, __newValue);

                if (OnSourceTable_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<ZBox.App.SchemaMigration.SourceTable>(__oldValue, __newValue);
                    OnSourceTable_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for SourceTable's id, used on dehydration only</summary>
        private int? _fk_SourceTable = null;

        /// <summary>Backing store for SourceTable's guid, used on import only</summary>
        private Guid? _fk_guid_SourceTable = null;

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for SourceTable
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceTable> OnSourceTable_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceTable> OnSourceTable_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.SourceTable> OnSourceTable_PostSetter;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public ZBox.App.SchemaMigration.MappingStatus? Status
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Status;
                if (OnStatus_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<ZBox.App.SchemaMigration.MappingStatus?>(__result);
                    OnStatus_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Status != value)
                {
                    var __oldValue = Proxy.Status;
                    var __newValue = value;
                    if (OnStatus_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<ZBox.App.SchemaMigration.MappingStatus?>(__oldValue, __newValue);
                        OnStatus_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Status", __oldValue, __newValue);
                    Proxy.Status = __newValue;
                    NotifyPropertyChanged("Status", __oldValue, __newValue);
                    if (OnStatus_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<ZBox.App.SchemaMigration.MappingStatus?>(__oldValue, __newValue);
                        OnStatus_PostSetter(this, __e);
                    }
                }
            }
        }
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.MappingStatus?> OnStatus_Getter;
		public static event PropertyPreSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.MappingStatus?> OnStatus_PreSetter;
		public static event PropertyPostSetterHandler<ZBox.App.SchemaMigration.SourceColumn, ZBox.App.SchemaMigration.MappingStatus?> OnStatus_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnCreateProperty_SourceColumn")]
        public virtual void CreateProperty()
        {
            // base.CreateProperty();
            if (OnCreateProperty_SourceColumn != null)
            {
                OnCreateProperty_SourceColumn(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method SourceColumn.CreateProperty");
            }
        }
        public delegate void CreateProperty_Handler<T>(T obj);
        public static event CreateProperty_Handler<SourceColumn> OnCreateProperty_SourceColumn;
        // END Kistl.Generator.Templates.ObjectClasses.Method

        public override Type GetImplementedInterface()
        {
            return typeof(SourceColumn);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (SourceColumn)obj;
            var otherImpl = (SourceColumnNHibernateImpl)obj;
            var me = (SourceColumn)this;

            me.ChangedOn = other.ChangedOn;
            me.Comment = other.Comment;
            me.CreatedOn = other.CreatedOn;
            me.DbType = other.DbType;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.IsNullable = other.IsNullable;
            me.Name = other.Name;
            me.Size = other.Size;
            me.Status = other.Status;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_References = otherImpl._fk_References;
            this._fk_SourceTable = otherImpl._fk_SourceTable;
        }

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
            var nhCtx = (NHibernateContext)ctx;
        }

        public override void UpdateParent(string propertyName, int? id)
        {
            switch(propertyName)
            {
                case "ChangedBy":
                    {
                        var __oldValue = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                        var __newValue = (Kistl.App.Base.IdentityNHibernateImpl)(id == null ? null : OurContext.Find<Kistl.App.Base.Identity>(id.Value));
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        this.Proxy.ChangedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                        var __newValue = (Kistl.App.Base.IdentityNHibernateImpl)(id == null ? null : OurContext.Find<Kistl.App.Base.Identity>(id.Value));
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        this.Proxy.CreatedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                case "References":
                    {
                        var __oldValue = (ZBox.App.SchemaMigration.SourceColumnNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.References);
                        var __newValue = (ZBox.App.SchemaMigration.SourceColumnNHibernateImpl)(id == null ? null : OurContext.Find<ZBox.App.SchemaMigration.SourceColumn>(id.Value));
                        NotifyPropertyChanging("References", __oldValue, __newValue);
                        this.Proxy.References = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("References", __oldValue, __newValue);
                    }
                    break;
                case "SourceTable":
                    {
                        var __oldValue = (ZBox.App.SchemaMigration.SourceTableNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.SourceTable);
                        var __newValue = (ZBox.App.SchemaMigration.SourceTableNHibernateImpl)(id == null ? null : OurContext.Find<ZBox.App.SchemaMigration.SourceTable>(id.Value));
                        NotifyPropertyChanging("SourceTable", __oldValue, __newValue);
                        this.Proxy.SourceTable = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("SourceTable", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, id);
                    break;
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                this.Proxy.ChangedBy = ((Kistl.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.Identity>(_fk_ChangedBy.Value)).Proxy;
            else
                this.Proxy.ChangedBy = null;

            if (_fk_CreatedBy.HasValue)
                this.Proxy.CreatedBy = ((Kistl.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.Identity>(_fk_CreatedBy.Value)).Proxy;
            else
                this.Proxy.CreatedBy = null;

            if (_fk_guid_References.HasValue)
                this.Proxy.References = ((ZBox.App.SchemaMigration.SourceColumnNHibernateImpl)OurContext.FindPersistenceObject<ZBox.App.SchemaMigration.SourceColumn>(_fk_guid_References.Value)).Proxy;
            else
            if (_fk_References.HasValue)
                this.Proxy.References = ((ZBox.App.SchemaMigration.SourceColumnNHibernateImpl)OurContext.FindPersistenceObject<ZBox.App.SchemaMigration.SourceColumn>(_fk_References.Value)).Proxy;
            else
                this.Proxy.References = null;

            if (_fk_guid_SourceTable.HasValue)
                this.Proxy.SourceTable = ((ZBox.App.SchemaMigration.SourceTableNHibernateImpl)OurContext.FindPersistenceObject<ZBox.App.SchemaMigration.SourceTable>(_fk_guid_SourceTable.Value)).Proxy;
            else
            if (_fk_SourceTable.HasValue)
                this.Proxy.SourceTable = ((ZBox.App.SchemaMigration.SourceTableNHibernateImpl)OurContext.FindPersistenceObject<ZBox.App.SchemaMigration.SourceTable>(_fk_SourceTable.Value)).Proxy;
            else
                this.Proxy.SourceTable = null;
        }
        #region Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorNHibernateImpl<SourceColumnNHibernateImpl, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("4f2f1af0-f33b-4d98-89bb-2a386e11a29a"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<SourceColumnNHibernateImpl, DateTime>(
                        lazyCtx,
                        new Guid("ddd4df6a-e085-45fe-b900-f3995dcb1845"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<SourceColumnNHibernateImpl, string>(
                        lazyCtx,
                        new Guid("66bcca34-2297-4e06-84e8-ff19c5d4af35"),
                        "Comment",
                        null,
                        obj => obj.Comment,
                        (obj, val) => obj.Comment = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<SourceColumnNHibernateImpl, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("6c0d8f0c-2937-4d6a-972a-299c085e8b5d"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<SourceColumnNHibernateImpl, DateTime>(
                        lazyCtx,
                        new Guid("bb5f31d0-072d-45ec-a455-0234ccc31867"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<SourceColumnNHibernateImpl, ZBox.App.SchemaMigration.ColumnType>(
                        lazyCtx,
                        new Guid("78873431-d503-4192-b658-5c5bc6442180"),
                        "DbType",
                        null,
                        obj => obj.DbType,
                        (obj, val) => obj.DbType = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<SourceColumnNHibernateImpl, string>(
                        lazyCtx,
                        new Guid("6273444e-5309-4481-8d2a-99a7a8a1b059"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val),
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<SourceColumnNHibernateImpl, IList<Kistl.App.Base.Property>>(
                        lazyCtx,
                        new Guid("38dce431-bb65-44c5-b67a-1f28202e51d9"),
                        "DestinationProperty",
                        null,
                        obj => obj.DestinationProperty,
                        null), // lists are read-only properties
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<SourceColumnNHibernateImpl, ICollection<ZBox.App.SchemaMigration.SourceEnum>>(
                        lazyCtx,
                        new Guid("a040ea6b-c105-4815-815b-e36f0778e4cb"),
                        "EnumEntries",
                        null,
                        obj => obj.EnumEntries,
                        null), // lists are read-only properties
                    // else
                    new PropertyDescriptorNHibernateImpl<SourceColumnNHibernateImpl, Guid>(
                        lazyCtx,
                        new Guid("52ba9fcd-dbeb-42da-9146-6f40976c1c83"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<SourceColumnNHibernateImpl, bool?>(
                        lazyCtx,
                        new Guid("817ccb79-7051-4b09-8386-941a21575bfc"),
                        "IsNullable",
                        null,
                        obj => obj.IsNullable,
                        (obj, val) => obj.IsNullable = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<SourceColumnNHibernateImpl, string>(
                        lazyCtx,
                        new Guid("a27f7d36-fd56-4271-bac0-88e22bc65027"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<SourceColumnNHibernateImpl, ZBox.App.SchemaMigration.SourceColumn>(
                        lazyCtx,
                        new Guid("4d6faa25-d610-4e23-b12f-7ee4c78da70b"),
                        "References",
                        null,
                        obj => obj.References,
                        (obj, val) => obj.References = val),
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<SourceColumnNHibernateImpl, ICollection<ZBox.App.SchemaMigration.SourceColumn>>(
                        lazyCtx,
                        new Guid("71bed80f-57ec-4038-a9a4-9aabc0c2f60d"),
                        "Referers",
                        null,
                        obj => obj.Referers,
                        null), // lists are read-only properties
                    // else
                    new PropertyDescriptorNHibernateImpl<SourceColumnNHibernateImpl, int?>(
                        lazyCtx,
                        new Guid("5a1dc7f1-7743-4603-9b65-1b31ca17d55d"),
                        "Size",
                        null,
                        obj => obj.Size,
                        (obj, val) => obj.Size = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<SourceColumnNHibernateImpl, ZBox.App.SchemaMigration.SourceTable>(
                        lazyCtx,
                        new Guid("d1dca069-f6b5-4da1-beee-a51853c109ba"),
                        "SourceTable",
                        null,
                        obj => obj.SourceTable,
                        (obj, val) => obj.SourceTable = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<SourceColumnNHibernateImpl, ZBox.App.SchemaMigration.MappingStatus?>(
                        lazyCtx,
                        new Guid("bba3aa19-0097-4692-b649-d51fbc626182"),
                        "Status",
                        null,
                        obj => obj.Status,
                        (obj, val) => obj.Status = val),
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Kistl.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_SourceColumn")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_SourceColumn != null)
            {
                OnToString_SourceColumn(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<SourceColumn> OnToString_SourceColumn;

        [EventBasedMethod("OnPreSave_SourceColumn")]
        public override void NotifyPreSave()
        {
            FetchCreatedOnOrDefault();
            FetchChangedOnOrDefault();
            FetchExportGuidOrDefault();
            base.NotifyPreSave();
            if (OnPreSave_SourceColumn != null) OnPreSave_SourceColumn(this);
        }
        public static event ObjectEventHandler<SourceColumn> OnPreSave_SourceColumn;

        [EventBasedMethod("OnPostSave_SourceColumn")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_SourceColumn != null) OnPostSave_SourceColumn(this);
        }
        public static event ObjectEventHandler<SourceColumn> OnPostSave_SourceColumn;

        [EventBasedMethod("OnCreated_SourceColumn")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_SourceColumn != null) OnCreated_SourceColumn(this);
        }
        public static event ObjectEventHandler<SourceColumn> OnCreated_SourceColumn;

        [EventBasedMethod("OnDeleting_SourceColumn")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_SourceColumn != null) OnDeleting_SourceColumn(this);
        }
        public static event ObjectEventHandler<SourceColumn> OnDeleting_SourceColumn;

        #endregion // Kistl.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods
        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow FK_Column_references_PK_Column
            if (this.References != null && this.References.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.References);

            // Follow SourceColumn_belongs_to_SourceTable
            if (this.SourceTable != null && this.SourceTable.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.SourceTable);

            // Follow SourceColumn_was_ChangedBy
            if (this.ChangedBy != null && this.ChangedBy.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.ChangedBy);

            // Follow SourceColumn_was_CreatedBy
            if (this.CreatedBy != null && this.CreatedBy.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.CreatedBy);

            return result;
        }

        public override List<NHibernatePersistenceObject> GetChildrenToDelete()
        {
            var result = base.GetChildrenToDelete();

            // Follow SourceColumn_may_have_EnumEntries
            result.AddRange(Context.AttachedObjects
                .OfType<ZBox.App.SchemaMigration.SourceEnum>()
                .Where(child => child.SourceColumn == this
                    && child.ObjectState == DataObjectState.Deleted)
                .Cast<NHibernatePersistenceObject>());

            return result;
        }


        public class SourceColumnProxy
            : IProxyObject, ISortKey<int>
        {
            public SourceColumnProxy()
            {
                DestinationProperty = new Collection<ZBox.App.SchemaMigration.SourceColumn_created_Property_RelationEntryNHibernateImpl.SourceColumn_created_Property_RelationEntryProxy>();
                EnumEntries = new Collection<ZBox.App.SchemaMigration.SourceEnumNHibernateImpl.SourceEnumProxy>();
                Referers = new Collection<ZBox.App.SchemaMigration.SourceColumnNHibernateImpl.SourceColumnProxy>();
            }

            public virtual int ID { get; set; }

            public virtual Type ZBoxWrapper { get { return typeof(SourceColumnNHibernateImpl); } }
            public virtual Type ZBoxProxy { get { return typeof(SourceColumnProxy); } }

            public virtual Kistl.App.Base.IdentityNHibernateImpl.IdentityProxy ChangedBy { get; set; }

            public virtual DateTime ChangedOn { get; set; }

            public virtual string Comment { get; set; }

            public virtual Kistl.App.Base.IdentityNHibernateImpl.IdentityProxy CreatedBy { get; set; }

            public virtual DateTime CreatedOn { get; set; }

            public virtual ZBox.App.SchemaMigration.ColumnType DbType { get; set; }

            public virtual string Description { get; set; }

            public virtual ICollection<ZBox.App.SchemaMigration.SourceColumn_created_Property_RelationEntryNHibernateImpl.SourceColumn_created_Property_RelationEntryProxy> DestinationProperty { get; set; }

            public virtual ICollection<ZBox.App.SchemaMigration.SourceEnumNHibernateImpl.SourceEnumProxy> EnumEntries { get; set; }

            public virtual Guid ExportGuid { get; set; }

            public virtual bool? IsNullable { get; set; }

            public virtual string Name { get; set; }

            public virtual ZBox.App.SchemaMigration.SourceColumnNHibernateImpl.SourceColumnProxy References { get; set; }

            public virtual ICollection<ZBox.App.SchemaMigration.SourceColumnNHibernateImpl.SourceColumnProxy> Referers { get; set; }

            public virtual int? Size { get; set; }

            public virtual int? SourceColumn_pos { get; set; }

            public virtual ZBox.App.SchemaMigration.SourceTableNHibernateImpl.SourceTableProxy SourceTable { get; set; }

            public virtual ZBox.App.SchemaMigration.MappingStatus? Status { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }
        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            BinarySerializer.ToStream(this.Proxy.ChangedBy != null ? this.Proxy.ChangedBy.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                BinarySerializer.ToStream(this.Proxy.ChangedOn, binStream);
            }
            BinarySerializer.ToStream(this.Proxy.Comment, binStream);
            BinarySerializer.ToStream(this.Proxy.CreatedBy != null ? this.Proxy.CreatedBy.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                BinarySerializer.ToStream(this.Proxy.CreatedOn, binStream);
            }
            BinarySerializer.ToStream((int?)Proxy.DbType, binStream);
            BinarySerializer.ToStream(this.Proxy.Description, binStream);

			BinarySerializer.ToStream(eagerLoadLists, binStream);
			if (eagerLoadLists && auxObjects != null)
			{
				foreach(var obj in DestinationProperty)
				{
					auxObjects.Add(obj);
				}
				foreach(var relEntry in this.Proxy.DestinationProperty)
				{
					auxObjects.Add(OurContext.AttachAndWrap(relEntry));
				}
			}
            BinarySerializer.ToStream(this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.ToStream(this.Proxy.ExportGuid, binStream);
            }
            BinarySerializer.ToStream(this.Proxy.IsNullable, binStream);
            BinarySerializer.ToStream(this.Proxy.Name, binStream);
            BinarySerializer.ToStream(this.Proxy.References != null ? this.Proxy.References.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this.Proxy.Size, binStream);
            BinarySerializer.ToStream(this.Proxy.SourceTable != null ? this.Proxy.SourceTable.ID : (int?)null, binStream);
            BinarySerializer.ToStream((int?)Proxy.Status, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            BinarySerializer.FromStream(out this._fk_ChangedBy, binStream);
            BinarySerializer.FromStream(out this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                DateTime tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.ChangedOn = tmp;
            }
            {
                string tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.Comment = tmp;
            }
            BinarySerializer.FromStream(out this._fk_CreatedBy, binStream);
            BinarySerializer.FromStream(out this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                DateTime tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.CreatedOn = tmp;
            }
            {
                int? baseValue;
                BinarySerializer.FromStream(out baseValue, binStream);
                Proxy.DbType = (ZBox.App.SchemaMigration.ColumnType)baseValue;
            }
            {
                string tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.Description = tmp;
            }

			BinarySerializer.FromStream(out DestinationProperty_was_eagerLoaded, binStream);
            BinarySerializer.FromStream(out this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                Guid tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.ExportGuid = tmp;
            }
            {
                bool? tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.IsNullable = tmp;
            }
            {
                string tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.Name = tmp;
            }
            BinarySerializer.FromStream(out this._fk_References, binStream);
            {
                int? tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.Size = tmp;
            }
            BinarySerializer.FromStream(out this._fk_SourceTable, binStream);
            {
                int? baseValue;
                BinarySerializer.FromStream(out baseValue, binStream);
                Proxy.Status = (ZBox.App.SchemaMigration.MappingStatus?)baseValue;
            }
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            XmlStreamer.ToStream(this.Proxy.ChangedBy != null ? this.Proxy.ChangedBy.ID : (int?)null, xml, "ChangedBy", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._isChangedOnSet, xml, "IsChangedOnSet", "ZBox.App.SchemaMigration");
            if (this._isChangedOnSet) {
                XmlStreamer.ToStream(this.Proxy.ChangedOn, xml, "ChangedOn", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream(this.Proxy.Comment, xml, "Comment", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this.Proxy.CreatedBy != null ? this.Proxy.CreatedBy.ID : (int?)null, xml, "CreatedBy", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._isCreatedOnSet, xml, "IsCreatedOnSet", "ZBox.App.SchemaMigration");
            if (this._isCreatedOnSet) {
                XmlStreamer.ToStream(this.Proxy.CreatedOn, xml, "CreatedOn", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream((int?)Proxy.DbType, xml, "DbType", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this.Proxy.Description, xml, "Description", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this._isExportGuidSet, xml, "IsExportGuidSet", "ZBox.App.SchemaMigration");
            if (this._isExportGuidSet) {
                XmlStreamer.ToStream(this.Proxy.ExportGuid, xml, "ExportGuid", "ZBox.App.SchemaMigration");
            }
            XmlStreamer.ToStream(this.Proxy.IsNullable, xml, "IsNullable", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this.Proxy.Name, xml, "Name", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this.Proxy.References != null ? this.Proxy.References.ID : (int?)null, xml, "References", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this.Proxy.Size, xml, "Size", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream(this.Proxy.SourceTable != null ? this.Proxy.SourceTable.ID : (int?)null, xml, "SourceTable", "ZBox.App.SchemaMigration");
            XmlStreamer.ToStream((int?)Proxy.Status, xml, "Status", "ZBox.App.SchemaMigration");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            XmlStreamer.FromStream(ref this._fk_ChangedBy, xml, "ChangedBy", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._isChangedOnSet, xml, "IsChangedOnSet", "ZBox.App.SchemaMigration");
            if (this._isChangedOnSet) {
                // yuck
                DateTime tmp = this.Proxy.ChangedOn;
                XmlStreamer.FromStream(ref tmp, xml, "ChangedOn", "ZBox.App.SchemaMigration");
                this.Proxy.ChangedOn = tmp;
            }
            {
                // yuck
                string tmp = this.Proxy.Comment;
                XmlStreamer.FromStream(ref tmp, xml, "Comment", "ZBox.App.SchemaMigration");
                this.Proxy.Comment = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_CreatedBy, xml, "CreatedBy", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStream(ref this._isCreatedOnSet, xml, "IsCreatedOnSet", "ZBox.App.SchemaMigration");
            if (this._isCreatedOnSet) {
                // yuck
                DateTime tmp = this.Proxy.CreatedOn;
                XmlStreamer.FromStream(ref tmp, xml, "CreatedOn", "ZBox.App.SchemaMigration");
                this.Proxy.CreatedOn = tmp;
            }
            XmlStreamer.FromStreamConverter(v => Proxy.DbType = (ZBox.App.SchemaMigration.ColumnType)v, xml, "DbType", "ZBox.App.SchemaMigration");
            {
                // yuck
                string tmp = this.Proxy.Description;
                XmlStreamer.FromStream(ref tmp, xml, "Description", "ZBox.App.SchemaMigration");
                this.Proxy.Description = tmp;
            }
            XmlStreamer.FromStream(ref this._isExportGuidSet, xml, "IsExportGuidSet", "ZBox.App.SchemaMigration");
            if (this._isExportGuidSet) {
                // yuck
                Guid tmp = this.Proxy.ExportGuid;
                XmlStreamer.FromStream(ref tmp, xml, "ExportGuid", "ZBox.App.SchemaMigration");
                this.Proxy.ExportGuid = tmp;
            }
            {
                // yuck
                bool? tmp = this.Proxy.IsNullable;
                XmlStreamer.FromStream(ref tmp, xml, "IsNullable", "ZBox.App.SchemaMigration");
                this.Proxy.IsNullable = tmp;
            }
            {
                // yuck
                string tmp = this.Proxy.Name;
                XmlStreamer.FromStream(ref tmp, xml, "Name", "ZBox.App.SchemaMigration");
                this.Proxy.Name = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_References, xml, "References", "ZBox.App.SchemaMigration");
            {
                // yuck
                int? tmp = this.Proxy.Size;
                XmlStreamer.FromStream(ref tmp, xml, "Size", "ZBox.App.SchemaMigration");
                this.Proxy.Size = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_SourceTable, xml, "SourceTable", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStreamConverter(v => Proxy.Status = (ZBox.App.SchemaMigration.MappingStatus?)v, xml, "Status", "ZBox.App.SchemaMigration");
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            System.Diagnostics.Debug.Assert(this._isChangedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this.Proxy.ChangedOn, xml, "ChangedOn", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this.Proxy.Comment, xml, "Comment", "ZBox.App.SchemaMigration");
            System.Diagnostics.Debug.Assert(this._isCreatedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this.Proxy.CreatedOn, xml, "CreatedOn", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream((int?)Proxy.DbType, xml, "DbType", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this.Proxy.Description, xml, "Description", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this.Proxy.IsNullable, xml, "IsNullable", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this.Proxy.Name, xml, "Name", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this.Proxy.References != null ? this.Proxy.References.ExportGuid : (Guid?)null, xml, "References", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this.Proxy.Size, xml, "Size", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream(this.Proxy.SourceTable != null ? this.Proxy.SourceTable.ExportGuid : (Guid?)null, xml, "SourceTable", "ZBox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("ZBox.App.SchemaMigration")) XmlStreamer.ToStream((int?)Proxy.Status, xml, "Status", "ZBox.App.SchemaMigration");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // Import must have default value set
            {
                // yuck
                DateTime tmp = this.Proxy.ChangedOn;
                XmlStreamer.FromStream(ref tmp, xml, "ChangedOn", "ZBox.App.SchemaMigration");
                this.Proxy.ChangedOn = tmp;
                this._isChangedOnSet = true;
            }
            {
                // yuck
                string tmp = this.Proxy.Comment;
                XmlStreamer.FromStream(ref tmp, xml, "Comment", "ZBox.App.SchemaMigration");
                this.Proxy.Comment = tmp;
            }
            // Import must have default value set
            {
                // yuck
                DateTime tmp = this.Proxy.CreatedOn;
                XmlStreamer.FromStream(ref tmp, xml, "CreatedOn", "ZBox.App.SchemaMigration");
                this.Proxy.CreatedOn = tmp;
                this._isCreatedOnSet = true;
            }
            XmlStreamer.FromStreamConverter(v => Proxy.DbType = (ZBox.App.SchemaMigration.ColumnType)v, xml, "DbType", "ZBox.App.SchemaMigration");
            {
                // yuck
                string tmp = this.Proxy.Description;
                XmlStreamer.FromStream(ref tmp, xml, "Description", "ZBox.App.SchemaMigration");
                this.Proxy.Description = tmp;
            }
            // Import must have default value set
            {
                // yuck
                Guid tmp = this.Proxy.ExportGuid;
                XmlStreamer.FromStream(ref tmp, xml, "ExportGuid", "ZBox.App.SchemaMigration");
                this.Proxy.ExportGuid = tmp;
                this._isExportGuidSet = true;
            }
            {
                // yuck
                bool? tmp = this.Proxy.IsNullable;
                XmlStreamer.FromStream(ref tmp, xml, "IsNullable", "ZBox.App.SchemaMigration");
                this.Proxy.IsNullable = tmp;
            }
            {
                // yuck
                string tmp = this.Proxy.Name;
                XmlStreamer.FromStream(ref tmp, xml, "Name", "ZBox.App.SchemaMigration");
                this.Proxy.Name = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_guid_References, xml, "References", "ZBox.App.SchemaMigration");
            {
                // yuck
                int? tmp = this.Proxy.Size;
                XmlStreamer.FromStream(ref tmp, xml, "Size", "ZBox.App.SchemaMigration");
                this.Proxy.Size = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_guid_SourceTable, xml, "SourceTable", "ZBox.App.SchemaMigration");
            XmlStreamer.FromStreamConverter(v => Proxy.Status = (ZBox.App.SchemaMigration.MappingStatus?)v, xml, "Status", "ZBox.App.SchemaMigration");
        }

        #endregion

    }
}