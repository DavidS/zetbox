// <autogenerated/>

namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;
    using Kistl.DalProvider.Base.RelationWrappers;

    using Kistl.API.Utils;
    using Kistl.DalProvider.Base;
    using Kistl.DalProvider.NHibernate;

    /// <summary>
    /// Metadefinition Object for Properties. This class is abstract.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("Property")]
    public abstract class PropertyNHibernateImpl : Kistl.DalProvider.NHibernate.DataObjectNHibernateImpl, Kistl.API.IExportableInternal, Property
    {
        private static readonly Guid _objectClassID = new Guid("e5f93f63-9cb8-40a5-8118-d1d9e479370c");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        public PropertyNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public PropertyNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new PropertyProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public PropertyNHibernateImpl(Func<IFrozenContext> lazyCtx, PropertyProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
            _isExportGuidSet = Proxy.ID > 0;
            _isChangedOnSet = Proxy.ID > 0;
            _isCreatedOnSet = Proxy.ID > 0;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly PropertyProxy Proxy;

        /// <summary>
        /// A space separated list of category names containing this Property
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string CategoryTags
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.CategoryTags;
                if (OnCategoryTags_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnCategoryTags_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.CategoryTags != value)
                {
                    var __oldValue = Proxy.CategoryTags;
                    var __newValue = value;
                    if (OnCategoryTags_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnCategoryTags_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CategoryTags", __oldValue, __newValue);
                    Proxy.CategoryTags = __newValue;
                    NotifyPropertyChanged("CategoryTags", __oldValue, __newValue);

                    if (OnCategoryTags_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnCategoryTags_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("CategoryTags");
				}
            }
        }

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Property, string> OnCategoryTags_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, string> OnCategoryTags_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, string> OnCategoryTags_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Property> OnCategoryTags_IsValid;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=this.Proxy.ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity ChangedBy
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.IdentityNHibernateImpl __value = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);

                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.ChangedBy == null)
				{
					SetInitializedProperty("ChangedBy");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                var __newValue = (Kistl.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("ChangedBy");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.ChangedBy = null;
                }
                else
                {
                    this.Proxy.ChangedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for ChangedBy's id, used on dehydration only</summary>
        private int? _fk_ChangedBy = null;


        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Property> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime ChangedOn
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(DateTime);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchChangedOnOrDefault();
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (Proxy.ChangedOn != value)
                {
                    var __oldValue = Proxy.ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    Proxy.ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ChangedOn");
				}
            }
        }


        private DateTime FetchChangedOnOrDefault()
        {
            var __result = Proxy.ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("d828264c-7c90-4050-a03d-3ea1829ce9d9"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Kistl.App.Base.Property.ChangedOn'");
                    }
                }
            return __result;
        }

        private bool _isChangedOnSet = false;
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Property, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Property> OnChangedOn_IsValid;

        /// <summary>
        /// Provides a code template for a calculated property
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string CodeTemplate
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchCodeTemplateOrDefault();
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.CodeTemplate != value)
                {
                    var __oldValue = Proxy.CodeTemplate;
                    var __newValue = value;
                    NotifyPropertyChanging("CodeTemplate", __oldValue, __newValue);
                    Proxy.CodeTemplate = __newValue;
                    NotifyPropertyChanged("CodeTemplate", __oldValue, __newValue);
			        _CodeTemplate_IsDirty = false;

                }
				else 
				{
					SetInitializedProperty("CodeTemplate");
				}
            }
        }
		private bool _CodeTemplate_IsDirty = false;


        private string FetchCodeTemplateOrDefault()
        {
           var __result = Proxy.CodeTemplate;
            if (_CodeTemplate_IsDirty && OnCodeTemplate_Getter != null)
            {
                var __e = new PropertyGetterEventArgs<string>(__result);
                OnCodeTemplate_Getter(this, __e);
                _CodeTemplate_IsDirty = false;
                __result = Proxy.CodeTemplate = __e.Result;
            }
            return __result;
        }

        private bool _isCodeTemplateSet = false;
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Property, string> OnCodeTemplate_Getter;

        /// <summary>
        /// The list of constraints applying to this Property
        /// </summary>
        // object list property

        // Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Base.Constraint> Constraints
        {
            get
            {
                if (_Constraints == null)
                {
                    _Constraints = new OneNRelationList<Kistl.App.Base.Constraint>(
                        "ConstrainedProperty",
                        null,
                        this,
                        () => this.NotifyPropertyChanging("Constraints", null, null),
                        () => { this.NotifyPropertyChanged("Constraints", null, null); if(OnConstraints_PostSetter != null && IsAttached) OnConstraints_PostSetter(this); },
                        new ProjectedCollection<Kistl.App.Base.ConstraintNHibernateImpl.ConstraintProxy, Kistl.App.Base.Constraint>(
                            () => Proxy.Constraints,
                            p => (Kistl.App.Base.Constraint)OurContext.AttachAndWrap(p),
                            d => (Kistl.App.Base.ConstraintNHibernateImpl.ConstraintProxy)((NHibernatePersistenceObject)d).NHibernateProxy));
                }
                return _Constraints;
            }
        }
    
        private OneNRelationList<Kistl.App.Base.Constraint> _Constraints;
        private List<int> ConstraintsIds;
        private bool Constraints_was_eagerLoaded = false;
public static event PropertyListChangedHandler<Kistl.App.Base.Property> OnConstraints_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Property> OnConstraints_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=this.Proxy.CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity CreatedBy
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.IdentityNHibernateImpl __value = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);

                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.CreatedBy == null)
				{
					SetInitializedProperty("CreatedBy");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                var __newValue = (Kistl.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("CreatedBy");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.CreatedBy = null;
                }
                else
                {
                    this.Proxy.CreatedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for CreatedBy's id, used on dehydration only</summary>
        private int? _fk_CreatedBy = null;


        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Property> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime CreatedOn
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(DateTime);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchCreatedOnOrDefault();
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (Proxy.CreatedOn != value)
                {
                    var __oldValue = Proxy.CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    Proxy.CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("CreatedOn");
				}
            }
        }


        private DateTime FetchCreatedOnOrDefault()
        {
            var __result = Proxy.CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("767fbab2-f9b4-41a9-9218-f60e0624b64f"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Kistl.App.Base.Property.CreatedOn'");
                    }
                }
            return __result;
        }

        private bool _isCreatedOnSet = false;
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Property, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Property> OnCreatedOn_IsValid;

        /// <summary>
        /// Property can have a default value
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultValue
        // fkBackingName=this.Proxy.DefaultValue; fkGuidBackingName=_fk_guid_DefaultValue;
        // referencedInterface=Kistl.App.Base.DefaultPropertyValue; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=Property; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.DefaultPropertyValue DefaultValue
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.DefaultPropertyValueNHibernateImpl __value = (Kistl.App.Base.DefaultPropertyValueNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultValue);

                if (OnDefaultValue_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.DefaultPropertyValue>(__value);
                    OnDefaultValue_Getter(this, e);
                    __value = (Kistl.App.Base.DefaultPropertyValueNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.DefaultValue == null)
				{
					SetInitializedProperty("DefaultValue");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.Base.DefaultPropertyValueNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultValue);
                var __newValue = (Kistl.App.Base.DefaultPropertyValueNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("DefaultValue");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultValue", __oldValue, __newValue);

                if (OnDefaultValue_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.DefaultPropertyValue>(__oldValue, __newValue);
                    OnDefaultValue_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.DefaultPropertyValueNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.DefaultValue = null;
                }
                else
                {
                    this.Proxy.DefaultValue = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // unset old reference
                    __oldValue.Property = null;
                }

                if (__newValue != null)
                {
                    // set new reference
                    __newValue.Property = this;
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultValue", __oldValue, __newValue);

                if (OnDefaultValue_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.DefaultPropertyValue>(__oldValue, __newValue);
                    OnDefaultValue_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for DefaultValue's id, used on dehydration only</summary>
        private int? _fk_DefaultValue = null;

        /// <summary>Backing store for DefaultValue's guid, used on import only</summary>
        private Guid? _fk_guid_DefaultValue = null;

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultValue
		public static event PropertyGetterHandler<Kistl.App.Base.Property, Kistl.App.Base.DefaultPropertyValue> OnDefaultValue_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.DefaultPropertyValue> OnDefaultValue_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.DefaultPropertyValue> OnDefaultValue_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Property> OnDefaultValue_IsValid;

        /// <summary>
        /// Description of this Property
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Description
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Description != value)
                {
                    var __oldValue = Proxy.Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    Proxy.Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);

                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("Description");
				}
            }
        }

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Property, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, string> OnDescription_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Property> OnDescription_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchExportGuidOrDefault();
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }


        private Guid FetchExportGuidOrDefault()
        {
            var __result = Proxy.ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("ca0a099d-3f4c-4604-8303-d751e57041bb"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ExportGuid = (Guid)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Kistl.App.Base.Property.ExportGuid'");
                    }
                }
            return __result;
        }

        private bool _isExportGuidSet = false;
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Property, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Property> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for FilterConfiguration
        // fkBackingName=this.Proxy.FilterConfiguration; fkGuidBackingName=_fk_guid_FilterConfiguration;
        // referencedInterface=Kistl.App.GUI.PropertyFilterConfiguration; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=Property; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.PropertyFilterConfiguration FilterConfiguration
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.PropertyFilterConfigurationNHibernateImpl __value = (Kistl.App.GUI.PropertyFilterConfigurationNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.FilterConfiguration);

                if (OnFilterConfiguration_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.PropertyFilterConfiguration>(__value);
                    OnFilterConfiguration_Getter(this, e);
                    __value = (Kistl.App.GUI.PropertyFilterConfigurationNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.FilterConfiguration == null)
				{
					SetInitializedProperty("FilterConfiguration");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.GUI.PropertyFilterConfigurationNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.FilterConfiguration);
                var __newValue = (Kistl.App.GUI.PropertyFilterConfigurationNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("FilterConfiguration");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("FilterConfiguration", __oldValue, __newValue);

                if (OnFilterConfiguration_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.PropertyFilterConfiguration>(__oldValue, __newValue);
                    OnFilterConfiguration_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.PropertyFilterConfigurationNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.FilterConfiguration = null;
                }
                else
                {
                    this.Proxy.FilterConfiguration = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // unset old reference
                    __oldValue.Property = null;
                }

                if (__newValue != null)
                {
                    // set new reference
                    __newValue.Property = this;
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("FilterConfiguration", __oldValue, __newValue);

                if (OnFilterConfiguration_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.PropertyFilterConfiguration>(__oldValue, __newValue);
                    OnFilterConfiguration_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for FilterConfiguration's id, used on dehydration only</summary>
        private int? _fk_FilterConfiguration = null;

        /// <summary>Backing store for FilterConfiguration's guid, used on import only</summary>
        private Guid? _fk_guid_FilterConfiguration = null;

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for FilterConfiguration
		public static event PropertyGetterHandler<Kistl.App.Base.Property, Kistl.App.GUI.PropertyFilterConfiguration> OnFilterConfiguration_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, Kistl.App.GUI.PropertyFilterConfiguration> OnFilterConfiguration_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, Kistl.App.GUI.PropertyFilterConfiguration> OnFilterConfiguration_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Property> OnFilterConfiguration_IsValid;

        /// <summary>
        /// Label is displayed to User in UI
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Label
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Label;
                if (OnLabel_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnLabel_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Label != value)
                {
                    var __oldValue = Proxy.Label;
                    var __newValue = value;
                    if (OnLabel_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnLabel_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Label", __oldValue, __newValue);
                    Proxy.Label = __newValue;
                    NotifyPropertyChanged("Label", __oldValue, __newValue);

                    if (OnLabel_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnLabel_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("Label");
				}
            }
        }

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Property, string> OnLabel_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, string> OnLabel_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, string> OnLabel_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Property> OnLabel_IsValid;

        /// <summary>
        /// Zugehörig zum Modul
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=this.Proxy.Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Kistl.App.Base.Module; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Module Module
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.ModuleNHibernateImpl __value = (Kistl.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);

                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Module>(__value);
                    OnModule_Getter(this, e);
                    __value = (Kistl.App.Base.ModuleNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.Module == null)
				{
					SetInitializedProperty("Module");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);
                var __newValue = (Kistl.App.Base.ModuleNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("Module");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Module", __oldValue, __newValue);

                if (OnModule_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.ModuleNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.Module = null;
                }
                else
                {
                    this.Proxy.Module = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Module", __oldValue, __newValue);

                if (OnModule_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for Module's id, used on dehydration only</summary>
        private int? _fk_Module = null;

        /// <summary>Backing store for Module's guid, used on import only</summary>
        private Guid? _fk_guid_Module = null;

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.Module> OnModule_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Property> OnModule_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Name
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Name != value)
                {
                    var __oldValue = Proxy.Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    Proxy.Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("Name");
				}
            }
        }

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Property, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Property> OnName_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ObjectClass
        // fkBackingName=this.Proxy.ObjectClass; fkGuidBackingName=_fk_guid_ObjectClass;
        // referencedInterface=Kistl.App.Base.DataType; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=Properties; is list;
        // PositionStorage=Properties_pos;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.DataType ObjectClass
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.DataTypeNHibernateImpl __value = (Kistl.App.Base.DataTypeNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ObjectClass);

                if (OnObjectClass_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.DataType>(__value);
                    OnObjectClass_Getter(this, e);
                    __value = (Kistl.App.Base.DataTypeNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.ObjectClass == null)
				{
					SetInitializedProperty("ObjectClass");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.Base.DataTypeNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ObjectClass);
                var __newValue = (Kistl.App.Base.DataTypeNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("ObjectClass");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ObjectClass", __oldValue, __newValue);

                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("Properties", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("Properties", null, null);
                }

                if (OnObjectClass_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.DataType>(__oldValue, __newValue);
                    OnObjectClass_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.DataTypeNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.ObjectClass = null;
                }
                else
                {
                    this.Proxy.ObjectClass = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.Properties as IRelationListSync<Kistl.App.Base.Property>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.Properties as IRelationListSync<Kistl.App.Base.Property>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("ObjectClass", __oldValue, __newValue);

                if (OnObjectClass_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.DataType>(__oldValue, __newValue);
                    OnObjectClass_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for ObjectClass's id, used on dehydration only</summary>
        private int? _fk_ObjectClass = null;

        /// <summary>Backing store for ObjectClass's guid, used on import only</summary>
        private Guid? _fk_guid_ObjectClass = null;

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        public virtual int? Properties_pos
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(int?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Properties_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Properties_pos != value)
                {
                    var __oldValue = Proxy.Properties_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("Properties_pos", __oldValue, __newValue);
                    Proxy.Properties_pos = __newValue;
                    NotifyPropertyChanged("Properties_pos", __oldValue, __newValue);

                }
				else 
				{
					SetInitializedProperty("Properties_pos");
				}
            }
        }
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.NotifyingValueProperty
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ObjectClass
		public static event PropertyGetterHandler<Kistl.App.Base.Property, Kistl.App.Base.DataType> OnObjectClass_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.DataType> OnObjectClass_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, Kistl.App.Base.DataType> OnObjectClass_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Property> OnObjectClass_IsValid;

        /// <summary>
        /// Optional requested ControlKind
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedKind
        // fkBackingName=this.Proxy.RequestedKind; fkGuidBackingName=_fk_guid_RequestedKind;
        // referencedInterface=Kistl.App.GUI.ControlKind; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ControlKind RequestedKind
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.ControlKindNHibernateImpl __value = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.RequestedKind);

                if (OnRequestedKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.ControlKind>(__value);
                    OnRequestedKind_Getter(this, e);
                    __value = (Kistl.App.GUI.ControlKindNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.RequestedKind == null)
				{
					SetInitializedProperty("RequestedKind");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.RequestedKind);
                var __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("RequestedKind");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("RequestedKind", __oldValue, __newValue);

                if (OnRequestedKind_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedKind_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.RequestedKind = null;
                }
                else
                {
                    this.Proxy.RequestedKind = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("RequestedKind", __oldValue, __newValue);

                if (OnRequestedKind_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedKind_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for RequestedKind's id, used on dehydration only</summary>
        private int? _fk_RequestedKind = null;

        /// <summary>Backing store for RequestedKind's guid, used on import only</summary>
        private Guid? _fk_guid_RequestedKind = null;

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedKind
		public static event PropertyGetterHandler<Kistl.App.Base.Property, Kistl.App.GUI.ControlKind> OnRequestedKind_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, Kistl.App.GUI.ControlKind> OnRequestedKind_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, Kistl.App.GUI.ControlKind> OnRequestedKind_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Property> OnRequestedKind_IsValid;

        /// <summary>
        /// The ViewModel to use for values of this Property
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ValueModelDescriptor
        // fkBackingName=this.Proxy.ValueModelDescriptor; fkGuidBackingName=_fk_guid_ValueModelDescriptor;
        // referencedInterface=Kistl.App.GUI.ViewModelDescriptor; moduleNamespace=Kistl.App.GUI;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.GUI.ViewModelDescriptor ValueModelDescriptor
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.GUI.ViewModelDescriptorNHibernateImpl __value = (Kistl.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ValueModelDescriptor);

                if (OnValueModelDescriptor_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.GUI.ViewModelDescriptor>(__value);
                    OnValueModelDescriptor_Getter(this, e);
                    __value = (Kistl.App.GUI.ViewModelDescriptorNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.ValueModelDescriptor == null)
				{
					SetInitializedProperty("ValueModelDescriptor");
                    return;
				}

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ValueModelDescriptor);
                var __newValue = (Kistl.App.GUI.ViewModelDescriptorNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
				{
					SetInitializedProperty("ValueModelDescriptor");
                    return;
				}

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ValueModelDescriptor", __oldValue, __newValue);

                if (OnValueModelDescriptor_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
                    OnValueModelDescriptor_PreSetter(this, e);
                    __newValue = (Kistl.App.GUI.ViewModelDescriptorNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.ValueModelDescriptor = null;
                }
                else
                {
                    this.Proxy.ValueModelDescriptor = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ValueModelDescriptor", __oldValue, __newValue);

                if (OnValueModelDescriptor_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
                    OnValueModelDescriptor_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for ValueModelDescriptor's id, used on dehydration only</summary>
        private int? _fk_ValueModelDescriptor = null;

        /// <summary>Backing store for ValueModelDescriptor's guid, used on import only</summary>
        private Guid? _fk_guid_ValueModelDescriptor = null;

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ValueModelDescriptor
		public static event PropertyGetterHandler<Kistl.App.Base.Property, Kistl.App.GUI.ViewModelDescriptor> OnValueModelDescriptor_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Property, Kistl.App.GUI.ViewModelDescriptor> OnValueModelDescriptor_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Property, Kistl.App.GUI.ViewModelDescriptor> OnValueModelDescriptor_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Property> OnValueModelDescriptor_IsValid;

        /// <summary>
        /// The element type for multi-valued properties. The property type string in all other cases.
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetElementTypeString_Property")]
        public virtual string GetElementTypeString()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetElementTypeString_Property != null)
            {
                OnGetElementTypeString_Property(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Property.GetElementTypeString");
            }
            return e.Result;
        }
        public delegate void GetElementTypeString_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetElementTypeString_Handler<Property> OnGetElementTypeString_Property;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Property> OnGetElementTypeString_Property_CanExec;

        [EventBasedMethod("OnGetElementTypeString_Property_CanExec")]
        public virtual bool GetElementTypeStringCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetElementTypeString_Property_CanExec != null)
				{
					OnGetElementTypeString_Property_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Property> OnGetElementTypeString_Property_CanExecReason;

        [EventBasedMethod("OnGetElementTypeString_Property_CanExecReason")]
        public virtual string GetElementTypeStringCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetElementTypeString_Property_CanExecReason != null)
				{
					OnGetElementTypeString_Property_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetLabel_Property")]
        public virtual string GetLabel()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetLabel_Property != null)
            {
                OnGetLabel_Property(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Property.GetLabel");
            }
            return e.Result;
        }
        public delegate void GetLabel_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetLabel_Handler<Property> OnGetLabel_Property;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Property> OnGetLabel_Property_CanExec;

        [EventBasedMethod("OnGetLabel_Property_CanExec")]
        public virtual bool GetLabelCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetLabel_Property_CanExec != null)
				{
					OnGetLabel_Property_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Property> OnGetLabel_Property_CanExecReason;

        [EventBasedMethod("OnGetLabel_Property_CanExecReason")]
        public virtual string GetLabelCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetLabel_Property_CanExecReason != null)
				{
					OnGetLabel_Property_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetName_Property")]
        public virtual string GetName()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetName_Property != null)
            {
                OnGetName_Property(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Property.GetName");
            }
            return e.Result;
        }
        public delegate void GetName_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetName_Handler<Property> OnGetName_Property;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Property> OnGetName_Property_CanExec;

        [EventBasedMethod("OnGetName_Property_CanExec")]
        public virtual bool GetNameCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetName_Property_CanExec != null)
				{
					OnGetName_Property_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Property> OnGetName_Property_CanExecReason;

        [EventBasedMethod("OnGetName_Property_CanExecReason")]
        public virtual string GetNameCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetName_Property_CanExecReason != null)
				{
					OnGetName_Property_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the resulting Type of this Property Meta Object.
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetPropertyType_Property")]
        public virtual System.Type GetPropertyType()
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetPropertyType_Property != null)
            {
                OnGetPropertyType_Property(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Property.GetPropertyType");
            }
            return e.Result;
        }
        public delegate void GetPropertyType_Handler<T>(T obj, MethodReturnEventArgs<System.Type> ret);
        public static event GetPropertyType_Handler<Property> OnGetPropertyType_Property;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Property> OnGetPropertyType_Property_CanExec;

        [EventBasedMethod("OnGetPropertyType_Property_CanExec")]
        public virtual bool GetPropertyTypeCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetPropertyType_Property_CanExec != null)
				{
					OnGetPropertyType_Property_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Property> OnGetPropertyType_Property_CanExecReason;

        [EventBasedMethod("OnGetPropertyType_Property_CanExecReason")]
        public virtual string GetPropertyTypeCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetPropertyType_Property_CanExecReason != null)
				{
					OnGetPropertyType_Property_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the String representation of this Property Meta Object.
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetPropertyTypeString_Property")]
        public virtual string GetPropertyTypeString()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetPropertyTypeString_Property != null)
            {
                OnGetPropertyTypeString_Property(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Property.GetPropertyTypeString");
            }
            return e.Result;
        }
        public delegate void GetPropertyTypeString_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetPropertyTypeString_Handler<Property> OnGetPropertyTypeString_Property;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Property> OnGetPropertyTypeString_Property_CanExec;

        [EventBasedMethod("OnGetPropertyTypeString_Property_CanExec")]
        public virtual bool GetPropertyTypeStringCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetPropertyTypeString_Property_CanExec != null)
				{
					OnGetPropertyTypeString_Property_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Property> OnGetPropertyTypeString_Property_CanExecReason;

        [EventBasedMethod("OnGetPropertyTypeString_Property_CanExecReason")]
        public virtual string GetPropertyTypeStringCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetPropertyTypeString_Property_CanExecReason != null)
				{
					OnGetPropertyTypeString_Property_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(Property);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Property)obj;
            var otherImpl = (PropertyNHibernateImpl)obj;
            var me = (Property)this;

            me.CategoryTags = other.CategoryTags;
            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.Label = other.Label;
            me.Name = other.Name;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_DefaultValue = otherImpl._fk_DefaultValue;
            this._fk_FilterConfiguration = otherImpl._fk_FilterConfiguration;
            this._fk_Module = otherImpl._fk_Module;
            this.Properties_pos = otherImpl.Properties_pos;
            this._fk_ObjectClass = otherImpl._fk_ObjectClass;
            this._fk_RequestedKind = otherImpl._fk_RequestedKind;
            this._fk_ValueModelDescriptor = otherImpl._fk_ValueModelDescriptor;
        }

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
            var nhCtx = (NHibernateContext)ctx;
        }
        public override void SetNew()
        {
            base.SetNew();
            _CodeTemplate_IsDirty = true;
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "ChangedBy":
                    {
                        var __oldValue = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                        var __newValue = (Kistl.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        this.Proxy.ChangedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                        var __newValue = (Kistl.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        this.Proxy.CreatedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                case "Module":
                    {
                        var __oldValue = (Kistl.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);
                        var __newValue = (Kistl.App.Base.ModuleNHibernateImpl)parentObj;
                        NotifyPropertyChanging("Module", __oldValue, __newValue);
                        this.Proxy.Module = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("Module", __oldValue, __newValue);
                    }
                    break;
                case "ObjectClass":
                    {
                        var __oldValue = (Kistl.App.Base.DataTypeNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ObjectClass);
                        var __newValue = (Kistl.App.Base.DataTypeNHibernateImpl)parentObj;
                        NotifyPropertyChanging("ObjectClass", __oldValue, __newValue);
                        this.Proxy.ObjectClass = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("ObjectClass", __oldValue, __newValue);
                    }
                    break;
                case "RequestedKind":
                    {
                        var __oldValue = (Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.RequestedKind);
                        var __newValue = (Kistl.App.GUI.ControlKindNHibernateImpl)parentObj;
                        NotifyPropertyChanging("RequestedKind", __oldValue, __newValue);
                        this.Proxy.RequestedKind = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("RequestedKind", __oldValue, __newValue);
                    }
                    break;
                case "ValueModelDescriptor":
                    {
                        var __oldValue = (Kistl.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ValueModelDescriptor);
                        var __newValue = (Kistl.App.GUI.ViewModelDescriptorNHibernateImpl)parentObj;
                        NotifyPropertyChanging("ValueModelDescriptor", __oldValue, __newValue);
                        this.Proxy.ValueModelDescriptor = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("ValueModelDescriptor", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Kistl.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "CategoryTags":
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "DefaultValue":
                case "Description":
                case "ExportGuid":
                case "FilterConfiguration":
                case "Label":
                case "Module":
                case "Name":
                case "ObjectClass":
                case "RequestedKind":
                case "ValueModelDescriptor":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        public override void Recalculate(string property)
        {
            switch (property)
            {
                case "CodeTemplate":
                    _CodeTemplate_IsDirty = true;
                    NotifyPropertyChanging(property, null, null);
                    NotifyPropertyChanged(property, null, null);
                    return;
            }

            base.Recalculate(property);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.OnPropertyChange

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                this.ChangedBy = ((Kistl.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.Identity>(_fk_ChangedBy.Value));
            else
                this.ChangedBy = null;

            if (_fk_CreatedBy.HasValue)
                this.CreatedBy = ((Kistl.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.Identity>(_fk_CreatedBy.Value));
            else
                this.CreatedBy = null;

            if (_fk_guid_DefaultValue.HasValue)
                this.DefaultValue = ((Kistl.App.Base.DefaultPropertyValueNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.DefaultPropertyValue>(_fk_guid_DefaultValue.Value));
            else
            if (_fk_DefaultValue.HasValue)
                this.DefaultValue = ((Kistl.App.Base.DefaultPropertyValueNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.DefaultPropertyValue>(_fk_DefaultValue.Value));
            else
                this.DefaultValue = null;

            if (_fk_guid_FilterConfiguration.HasValue)
                this.FilterConfiguration = ((Kistl.App.GUI.PropertyFilterConfigurationNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.GUI.PropertyFilterConfiguration>(_fk_guid_FilterConfiguration.Value));
            else
            if (_fk_FilterConfiguration.HasValue)
                this.FilterConfiguration = ((Kistl.App.GUI.PropertyFilterConfigurationNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.GUI.PropertyFilterConfiguration>(_fk_FilterConfiguration.Value));
            else
                this.FilterConfiguration = null;

            if (_fk_guid_Module.HasValue)
                this.Module = ((Kistl.App.Base.ModuleNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.Module>(_fk_guid_Module.Value));
            else
            if (_fk_Module.HasValue)
                this.Module = ((Kistl.App.Base.ModuleNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.Module>(_fk_Module.Value));
            else
                this.Module = null;

            if (_fk_guid_ObjectClass.HasValue)
                this.ObjectClass = ((Kistl.App.Base.DataTypeNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.DataType>(_fk_guid_ObjectClass.Value));
            else
            if (_fk_ObjectClass.HasValue)
                this.ObjectClass = ((Kistl.App.Base.DataTypeNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.DataType>(_fk_ObjectClass.Value));
            else
                this.ObjectClass = null;

            if (_fk_guid_RequestedKind.HasValue)
                this.RequestedKind = ((Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_guid_RequestedKind.Value));
            else
            if (_fk_RequestedKind.HasValue)
                this.RequestedKind = ((Kistl.App.GUI.ControlKindNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.GUI.ControlKind>(_fk_RequestedKind.Value));
            else
                this.RequestedKind = null;

            if (_fk_guid_ValueModelDescriptor.HasValue)
                this.ValueModelDescriptor = ((Kistl.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.GUI.ViewModelDescriptor>(_fk_guid_ValueModelDescriptor.Value));
            else
            if (_fk_ValueModelDescriptor.HasValue)
                this.ValueModelDescriptor = ((Kistl.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.GUI.ViewModelDescriptor>(_fk_ValueModelDescriptor.Value));
            else
                this.ValueModelDescriptor = null;
        }
        #region Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorNHibernateImpl<Property, string>(
                        lazyCtx,
                        new Guid("13418a59-a804-4bc7-88ed-4d3509940301"),
                        "CategoryTags",
                        null,
                        obj => obj.CategoryTags,
                        (obj, val) => obj.CategoryTags = val,
						obj => OnCategoryTags_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Property, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("f96e3f68-a293-4ed9-ba3a-2b172847fb46"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Property, DateTime>(
                        lazyCtx,
                        new Guid("d828264c-7c90-4050-a03d-3ea1829ce9d9"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Property, string>(
                        lazyCtx,
                        new Guid("7b528b52-52bd-4af0-bcd1-d63cd73a65bd"),
                        "CodeTemplate",
                        null,
                        obj => obj.CodeTemplate,
                        null, // calculated property
						null), // no constraints on calculated properties
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<Property, ICollection<Kistl.App.Base.Constraint>>(
                        lazyCtx,
                        new Guid("fd8f14da-e647-48cb-8593-3a30984f5c96"),
                        "Constraints",
                        null,
                        obj => obj.Constraints,
                        null, // lists are read-only properties
                        obj => OnConstraints_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Property, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("6b965c5e-31b9-4fa9-a5f0-7ea6c8b8e976"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Property, DateTime>(
                        lazyCtx,
                        new Guid("767fbab2-f9b4-41a9-9218-f60e0624b64f"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Property, Kistl.App.Base.DefaultPropertyValue>(
                        lazyCtx,
                        new Guid("590d6a36-2e4b-41bd-a51e-298aba90ce72"),
                        "DefaultValue",
                        null,
                        obj => obj.DefaultValue,
                        (obj, val) => obj.DefaultValue = val,
						obj => OnDefaultValue_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Property, string>(
                        lazyCtx,
                        new Guid("5905ae85-6a44-4dbd-9752-49cac467d3cd"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val,
						obj => OnDescription_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Property, Guid>(
                        lazyCtx,
                        new Guid("ca0a099d-3f4c-4604-8303-d751e57041bb"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Property, Kistl.App.GUI.PropertyFilterConfiguration>(
                        lazyCtx,
                        new Guid("dbf93142-1769-4f53-bcbc-71325e1d5ce7"),
                        "FilterConfiguration",
                        null,
                        obj => obj.FilterConfiguration,
                        (obj, val) => obj.FilterConfiguration = val,
						obj => OnFilterConfiguration_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Property, string>(
                        lazyCtx,
                        new Guid("34fc8b17-e9c2-43c5-a6d6-908551a8818b"),
                        "Label",
                        null,
                        obj => obj.Label,
                        (obj, val) => obj.Label = val,
						obj => OnLabel_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Property, Kistl.App.Base.Module>(
                        lazyCtx,
                        new Guid("2105acf5-0b98-4d0b-9be4-049a502a4f03"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val,
						obj => OnModule_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Property, string>(
                        lazyCtx,
                        new Guid("8c474623-7e53-4ca6-a996-f3b5a8c72834"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Property, Kistl.App.Base.DataType>(
                        lazyCtx,
                        new Guid("bdaacacd-c8cb-45cf-a329-28f942337273"),
                        "ObjectClass",
                        null,
                        obj => obj.ObjectClass,
                        (obj, val) => obj.ObjectClass = val,
						obj => OnObjectClass_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Property, Kistl.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("3be58daf-9008-4cc3-a65d-8989909dcd80"),
                        "RequestedKind",
                        null,
                        obj => obj.RequestedKind,
                        (obj, val) => obj.RequestedKind = val,
						obj => OnRequestedKind_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Property, Kistl.App.GUI.ViewModelDescriptor>(
                        lazyCtx,
                        new Guid("84e0996a-081f-4a17-a34d-54cf23991301"),
                        "ValueModelDescriptor",
                        null,
                        obj => obj.ValueModelDescriptor,
                        (obj, val) => obj.ValueModelDescriptor = val,
						obj => OnValueModelDescriptor_IsValid), 
                    // position columns
                    // rel: ObjectClass has Properties (f7e487a4-6922-40bf-a404-24ce6accbb83)
                    // rel.B.Type == cls && rel.B.HasPersistentOrder
                    new PropertyDescriptorNHibernateImpl<PropertyNHibernateImpl, int?>(
                        lazyCtx,
                        null,
                        "Properties_pos",
                        null,
                        obj => obj.Properties_pos,
                        (obj, val) => obj.Properties_pos = val,
						null),
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Kistl.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Property")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Property != null)
            {
                OnToString_Property(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Property> OnToString_Property;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_Property")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.IsValid = b.IsValid;
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_Property != null)
            {
                OnObjectIsValid_Property(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<Property> OnObjectIsValid_Property;

        [EventBasedMethod("OnNotifyPreSave_Property")]
        public override void NotifyPreSave()
        {
            FetchChangedOnOrDefault();
            FetchCodeTemplateOrDefault();
            FetchCreatedOnOrDefault();
            FetchExportGuidOrDefault();
            base.NotifyPreSave();
            if (OnNotifyPreSave_Property != null) OnNotifyPreSave_Property(this);
        }
        public static event ObjectEventHandler<Property> OnNotifyPreSave_Property;

        [EventBasedMethod("OnNotifyPostSave_Property")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_Property != null) OnNotifyPostSave_Property(this);
        }
        public static event ObjectEventHandler<Property> OnNotifyPostSave_Property;

        [EventBasedMethod("OnNotifyCreated_Property")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("CategoryTags");
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("DefaultValue");
            SetNotInitializedProperty("Description");
            SetNotInitializedProperty("FilterConfiguration");
            SetNotInitializedProperty("Label");
            SetNotInitializedProperty("Module");
            SetNotInitializedProperty("Name");
            SetNotInitializedProperty("ObjectClass");
            SetNotInitializedProperty("RequestedKind");
            SetNotInitializedProperty("ValueModelDescriptor");
            _CodeTemplate_IsDirty = true;
            base.NotifyCreated();
            if (OnNotifyCreated_Property != null) OnNotifyCreated_Property(this);
        }
        public static event ObjectEventHandler<Property> OnNotifyCreated_Property;

        [EventBasedMethod("OnNotifyDeleting_Property")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_Property != null) OnNotifyDeleting_Property(this);

            if (FilterConfiguration != null) {
                ((NHibernatePersistenceObject)FilterConfiguration).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)FilterConfiguration);
            }
            if (RequestedKind != null) {
                ((NHibernatePersistenceObject)RequestedKind).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)RequestedKind);
            }
            if (ValueModelDescriptor != null) {
                ((NHibernatePersistenceObject)ValueModelDescriptor).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)ValueModelDescriptor);
            }
            // should fetch && remember parent for Visual_has_Property_RelationEntry
            foreach(NHibernatePersistenceObject x in Constraints) {
                x.ParentsToDelete.Add(this);
                ChildrenToDelete.Add(x);
            }
            if (ObjectClass != null) {
                ((NHibernatePersistenceObject)ObjectClass).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)ObjectClass);
            }
            if (DefaultValue != null) {
                ((NHibernatePersistenceObject)DefaultValue).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)DefaultValue);
            }
            if (ChangedBy != null) {
                ((NHibernatePersistenceObject)ChangedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)ChangedBy);
            }
            if (CreatedBy != null) {
                ((NHibernatePersistenceObject)CreatedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)CreatedBy);
            }
            if (Module != null) {
                ((NHibernatePersistenceObject)Module).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)Module);
            }

            Constraints.Clear();
            ChangedBy = null;
            CreatedBy = null;
            DefaultValue = null;
            FilterConfiguration = null;
            RequestedKind = null;
        }
        public static event ObjectEventHandler<Property> OnNotifyDeleting_Property;

        #endregion // Kistl.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        public class PropertyProxy
            : IProxyObject, ISortKey<int>
        {
            public PropertyProxy()
            {
                Constraints = new Collection<Kistl.App.Base.ConstraintNHibernateImpl.ConstraintProxy>();
            }

            public virtual int ID { get; set; }

            public virtual Type ZBoxWrapper { get { return typeof(PropertyNHibernateImpl); } }
            public virtual Type ZBoxProxy { get { return typeof(PropertyProxy); } }

            public virtual string CategoryTags { get; set; }

            public virtual Kistl.App.Base.IdentityNHibernateImpl.IdentityProxy ChangedBy { get; set; }

            public virtual DateTime ChangedOn { get; set; }

            public virtual string CodeTemplate { get; set; }

            public virtual ICollection<Kistl.App.Base.ConstraintNHibernateImpl.ConstraintProxy> Constraints { get; set; }

            public virtual Kistl.App.Base.IdentityNHibernateImpl.IdentityProxy CreatedBy { get; set; }

            public virtual DateTime CreatedOn { get; set; }

            public virtual Kistl.App.Base.DefaultPropertyValueNHibernateImpl.DefaultPropertyValueProxy DefaultValue { get; set; }

            public virtual string Description { get; set; }

            public virtual Guid ExportGuid { get; set; }

            public virtual Kistl.App.GUI.PropertyFilterConfigurationNHibernateImpl.PropertyFilterConfigurationProxy FilterConfiguration { get; set; }

            public virtual string Label { get; set; }

            public virtual Kistl.App.Base.ModuleNHibernateImpl.ModuleProxy Module { get; set; }

            public virtual string Name { get; set; }

            public virtual Kistl.App.Base.DataTypeNHibernateImpl.DataTypeProxy ObjectClass { get; set; }

            public virtual int? Properties_pos { get; set; }

            public virtual int? Property_pos { get; set; }

            public virtual Kistl.App.GUI.ControlKindNHibernateImpl.ControlKindProxy RequestedKind { get; set; }

            public virtual Kistl.App.GUI.ViewModelDescriptorNHibernateImpl.ViewModelDescriptorProxy ValueModelDescriptor { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }
        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this.Proxy.CategoryTags, binStream);
            BinarySerializer.ToStream(this.Proxy.ChangedBy != null ? OurContext.GetIdFromProxy(this.Proxy.ChangedBy) : (int?)null, binStream);
            BinarySerializer.ToStream(this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                BinarySerializer.ToStream(this.Proxy.ChangedOn, binStream);
            }
            BinarySerializer.ToStream(this.Proxy.CodeTemplate, binStream);

			BinarySerializer.ToStream(eagerLoadLists, binStream);
			if (eagerLoadLists && auxObjects != null)
			{
				BinarySerializer.ToStream(true, binStream);
				BinarySerializer.ToStream(Constraints.Count, binStream);
				foreach(var obj in Constraints)
				{
					auxObjects.Add(obj);
					BinarySerializer.ToStream(obj.ID, binStream);
				}
			}
			else
			{
				BinarySerializer.ToStream(false, binStream);
			}
            BinarySerializer.ToStream(this.Proxy.CreatedBy != null ? OurContext.GetIdFromProxy(this.Proxy.CreatedBy) : (int?)null, binStream);
            BinarySerializer.ToStream(this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                BinarySerializer.ToStream(this.Proxy.CreatedOn, binStream);
            }
            BinarySerializer.ToStream(this.Proxy.DefaultValue != null ? OurContext.GetIdFromProxy(this.Proxy.DefaultValue) : (int?)null, binStream);
            BinarySerializer.ToStream(this.Proxy.Description, binStream);
            BinarySerializer.ToStream(this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.ToStream(this.Proxy.ExportGuid, binStream);
            }
            BinarySerializer.ToStream(this.Proxy.FilterConfiguration != null ? OurContext.GetIdFromProxy(this.Proxy.FilterConfiguration) : (int?)null, binStream);
            BinarySerializer.ToStream(this.Proxy.Label, binStream);
            BinarySerializer.ToStream(this.Proxy.Module != null ? OurContext.GetIdFromProxy(this.Proxy.Module) : (int?)null, binStream);
            BinarySerializer.ToStream(this.Proxy.Name, binStream);
            BinarySerializer.ToStream(this.Proxy.ObjectClass != null ? OurContext.GetIdFromProxy(this.Proxy.ObjectClass) : (int?)null, binStream);
            BinarySerializer.ToStream(this.Proxy.Properties_pos, binStream);
            BinarySerializer.ToStream(this.Proxy.RequestedKind != null ? OurContext.GetIdFromProxy(this.Proxy.RequestedKind) : (int?)null, binStream);
            BinarySerializer.ToStream(this.Proxy.ValueModelDescriptor != null ? OurContext.GetIdFromProxy(this.Proxy.ValueModelDescriptor) : (int?)null, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            {
                string tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.CategoryTags = tmp;
            }
            BinarySerializer.FromStream(out this._fk_ChangedBy, binStream);
            BinarySerializer.FromStream(out this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                DateTime tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.ChangedOn = tmp;
            }
            {
                string tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.CodeTemplate = tmp;
            }

			BinarySerializer.FromStream(out Constraints_was_eagerLoaded, binStream);
			{
				bool containsList;
				BinarySerializer.FromStream(out containsList, binStream);
				if (containsList)
				{
					int numElements;
					BinarySerializer.FromStream(out numElements, binStream);
					ConstraintsIds = new List<int>(numElements);
					while (numElements-- > 0) 
					{
						int id;
						BinarySerializer.FromStream(out id, binStream);
						ConstraintsIds.Add(id);
					}
				}
			}
            BinarySerializer.FromStream(out this._fk_CreatedBy, binStream);
            BinarySerializer.FromStream(out this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                DateTime tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.CreatedOn = tmp;
            }
            BinarySerializer.FromStream(out this._fk_DefaultValue, binStream);
            {
                string tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.Description = tmp;
            }
            BinarySerializer.FromStream(out this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                Guid tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.ExportGuid = tmp;
            }
            BinarySerializer.FromStream(out this._fk_FilterConfiguration, binStream);
            {
                string tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.Label = tmp;
            }
            BinarySerializer.FromStream(out this._fk_Module, binStream);
            {
                string tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.Name = tmp;
            }
            BinarySerializer.FromStream(out this._fk_ObjectClass, binStream);
            {
                int? tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.Properties_pos = tmp;
            }
            BinarySerializer.FromStream(out this._fk_RequestedKind, binStream);
            BinarySerializer.FromStream(out this._fk_ValueModelDescriptor, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this.Proxy.CategoryTags, xml, "CategoryTags", "Kistl.App.Base");
            XmlStreamer.ToStream(this.Proxy.ChangedBy != null ? OurContext.GetIdFromProxy(this.Proxy.ChangedBy) : (int?)null, xml, "ChangedBy", "Kistl.App.Base");
            XmlStreamer.ToStream(this._isChangedOnSet, xml, "IsChangedOnSet", "Kistl.App.Base");
            if (this._isChangedOnSet) {
                XmlStreamer.ToStream(this.Proxy.ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(this.Proxy.CodeTemplate, xml, "CodeTemplate", "Kistl.App.Base");
            XmlStreamer.ToStream(this.Proxy.CreatedBy != null ? OurContext.GetIdFromProxy(this.Proxy.CreatedBy) : (int?)null, xml, "CreatedBy", "Kistl.App.Base");
            XmlStreamer.ToStream(this._isCreatedOnSet, xml, "IsCreatedOnSet", "Kistl.App.Base");
            if (this._isCreatedOnSet) {
                XmlStreamer.ToStream(this.Proxy.CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(this.Proxy.DefaultValue != null ? OurContext.GetIdFromProxy(this.Proxy.DefaultValue) : (int?)null, xml, "DefaultValue", "Kistl.App.Base");
            XmlStreamer.ToStream(this.Proxy.Description, xml, "Description", "Kistl.App.Base");
            XmlStreamer.ToStream(this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.Base");
            if (this._isExportGuidSet) {
                XmlStreamer.ToStream(this.Proxy.ExportGuid, xml, "ExportGuid", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(this.Proxy.FilterConfiguration != null ? OurContext.GetIdFromProxy(this.Proxy.FilterConfiguration) : (int?)null, xml, "FilterConfiguration", "Kistl.App.GUI");
            XmlStreamer.ToStream(this.Proxy.Label, xml, "Label", "Kistl.App.Base");
            XmlStreamer.ToStream(this.Proxy.Module != null ? OurContext.GetIdFromProxy(this.Proxy.Module) : (int?)null, xml, "Module", "Kistl.App.Base");
            XmlStreamer.ToStream(this.Proxy.Name, xml, "Name", "Kistl.App.Base");
            XmlStreamer.ToStream(this.Proxy.ObjectClass != null ? OurContext.GetIdFromProxy(this.Proxy.ObjectClass) : (int?)null, xml, "ObjectClass", "Kistl.App.Base");
            XmlStreamer.ToStream(this.Proxy.Properties_pos, xml, "Properties_pos", "Kistl.App.Base");
            XmlStreamer.ToStream(this.Proxy.RequestedKind != null ? OurContext.GetIdFromProxy(this.Proxy.RequestedKind) : (int?)null, xml, "RequestedKind", "Kistl.App.GUI");
            XmlStreamer.ToStream(this.Proxy.ValueModelDescriptor != null ? OurContext.GetIdFromProxy(this.Proxy.ValueModelDescriptor) : (int?)null, xml, "ValueModelDescriptor", "Kistl.App.GUI");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            {
                // yuck
                string tmp = this.Proxy.CategoryTags;
                XmlStreamer.FromStream(ref tmp, xml, "CategoryTags", "Kistl.App.Base");
                this.Proxy.CategoryTags = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_ChangedBy, xml, "ChangedBy", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._isChangedOnSet, xml, "IsChangedOnSet", "Kistl.App.Base");
            if (this._isChangedOnSet) {
                // yuck
                DateTime tmp = this.Proxy.ChangedOn;
                XmlStreamer.FromStream(ref tmp, xml, "ChangedOn", "Kistl.App.Base");
                this.Proxy.ChangedOn = tmp;
            }
            {
                // yuck
                string tmp = this.Proxy.CodeTemplate;
                XmlStreamer.FromStream(ref tmp, xml, "CodeTemplate", "Kistl.App.Base");
                this.Proxy.CodeTemplate = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_CreatedBy, xml, "CreatedBy", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._isCreatedOnSet, xml, "IsCreatedOnSet", "Kistl.App.Base");
            if (this._isCreatedOnSet) {
                // yuck
                DateTime tmp = this.Proxy.CreatedOn;
                XmlStreamer.FromStream(ref tmp, xml, "CreatedOn", "Kistl.App.Base");
                this.Proxy.CreatedOn = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_DefaultValue, xml, "DefaultValue", "Kistl.App.Base");
            {
                // yuck
                string tmp = this.Proxy.Description;
                XmlStreamer.FromStream(ref tmp, xml, "Description", "Kistl.App.Base");
                this.Proxy.Description = tmp;
            }
            XmlStreamer.FromStream(ref this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.Base");
            if (this._isExportGuidSet) {
                // yuck
                Guid tmp = this.Proxy.ExportGuid;
                XmlStreamer.FromStream(ref tmp, xml, "ExportGuid", "Kistl.App.Base");
                this.Proxy.ExportGuid = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_FilterConfiguration, xml, "FilterConfiguration", "Kistl.App.GUI");
            {
                // yuck
                string tmp = this.Proxy.Label;
                XmlStreamer.FromStream(ref tmp, xml, "Label", "Kistl.App.Base");
                this.Proxy.Label = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_Module, xml, "Module", "Kistl.App.Base");
            {
                // yuck
                string tmp = this.Proxy.Name;
                XmlStreamer.FromStream(ref tmp, xml, "Name", "Kistl.App.Base");
                this.Proxy.Name = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_ObjectClass, xml, "ObjectClass", "Kistl.App.Base");
            {
                // yuck
                int? tmp = this.Proxy.Properties_pos;
                XmlStreamer.FromStream(ref tmp, xml, "Properties_pos", "Kistl.App.Base");
                this.Proxy.Properties_pos = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_RequestedKind, xml, "RequestedKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_ValueModelDescriptor, xml, "ValueModelDescriptor", "Kistl.App.GUI");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this.Proxy.CategoryTags, xml, "CategoryTags", "Kistl.App.Base");
            System.Diagnostics.Debug.Assert(this._isChangedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this.Proxy.ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this.Proxy.CodeTemplate, xml, "CodeTemplate", "Kistl.App.Base");
            System.Diagnostics.Debug.Assert(this._isCreatedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this.Proxy.CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this.Proxy.DefaultValue != null ? this.Proxy.DefaultValue.ExportGuid : (Guid?)null, xml, "DefaultValue", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this.Proxy.Description, xml, "Description", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this.Proxy.FilterConfiguration != null ? this.Proxy.FilterConfiguration.ExportGuid : (Guid?)null, xml, "FilterConfiguration", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this.Proxy.Label, xml, "Label", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this.Proxy.Module != null ? this.Proxy.Module.ExportGuid : (Guid?)null, xml, "Module", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this.Proxy.Name, xml, "Name", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this.Proxy.ObjectClass != null ? this.Proxy.ObjectClass.ExportGuid : (Guid?)null, xml, "ObjectClass", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this.Proxy.Properties_pos, xml, "Properties_pos", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this.Proxy.RequestedKind != null ? this.Proxy.RequestedKind.ExportGuid : (Guid?)null, xml, "RequestedKind", "Kistl.App.GUI");
            if (modules.Contains("*") || modules.Contains("Kistl.App.GUI")) XmlStreamer.ToStream(this.Proxy.ValueModelDescriptor != null ? this.Proxy.ValueModelDescriptor.ExportGuid : (Guid?)null, xml, "ValueModelDescriptor", "Kistl.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                // yuck
                string tmp = this.Proxy.CategoryTags;
                XmlStreamer.FromStream(ref tmp, xml, "CategoryTags", "Kistl.App.Base");
                this.Proxy.CategoryTags = tmp;
            }
            // Import must have default value set
            {
                // yuck
                DateTime tmp = this.Proxy.ChangedOn;
                XmlStreamer.FromStream(ref tmp, xml, "ChangedOn", "Kistl.App.Base");
                this.Proxy.ChangedOn = tmp;
                this._isChangedOnSet = true;
            }
            {
                // yuck
                string tmp = this.Proxy.CodeTemplate;
                XmlStreamer.FromStream(ref tmp, xml, "CodeTemplate", "Kistl.App.Base");
                this.Proxy.CodeTemplate = tmp;
            }
            // Import must have default value set
            {
                // yuck
                DateTime tmp = this.Proxy.CreatedOn;
                XmlStreamer.FromStream(ref tmp, xml, "CreatedOn", "Kistl.App.Base");
                this.Proxy.CreatedOn = tmp;
                this._isCreatedOnSet = true;
            }
            XmlStreamer.FromStream(ref this._fk_guid_DefaultValue, xml, "DefaultValue", "Kistl.App.Base");
            {
                // yuck
                string tmp = this.Proxy.Description;
                XmlStreamer.FromStream(ref tmp, xml, "Description", "Kistl.App.Base");
                this.Proxy.Description = tmp;
            }
            // Import must have default value set
            {
                // yuck
                Guid tmp = this.Proxy.ExportGuid;
                XmlStreamer.FromStream(ref tmp, xml, "ExportGuid", "Kistl.App.Base");
                this.Proxy.ExportGuid = tmp;
                this._isExportGuidSet = true;
            }
            XmlStreamer.FromStream(ref this._fk_guid_FilterConfiguration, xml, "FilterConfiguration", "Kistl.App.GUI");
            {
                // yuck
                string tmp = this.Proxy.Label;
                XmlStreamer.FromStream(ref tmp, xml, "Label", "Kistl.App.Base");
                this.Proxy.Label = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_guid_Module, xml, "Module", "Kistl.App.Base");
            {
                // yuck
                string tmp = this.Proxy.Name;
                XmlStreamer.FromStream(ref tmp, xml, "Name", "Kistl.App.Base");
                this.Proxy.Name = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_guid_ObjectClass, xml, "ObjectClass", "Kistl.App.Base");
            {
                // yuck
                int? tmp = this.Proxy.Properties_pos;
                XmlStreamer.FromStream(ref tmp, xml, "Properties_pos", "Kistl.App.Base");
                this.Proxy.Properties_pos = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_guid_RequestedKind, xml, "RequestedKind", "Kistl.App.GUI");
            XmlStreamer.FromStream(ref this._fk_guid_ValueModelDescriptor, xml, "ValueModelDescriptor", "Kistl.App.GUI");
        }

        #endregion

    }
}