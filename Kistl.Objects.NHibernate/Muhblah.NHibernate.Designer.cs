// <autogenerated/>

namespace Kistl.App.Test
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;
    using Kistl.DalProvider.Base.RelationWrappers;

    using Kistl.API.Utils;
    using Kistl.DalProvider.Base;
    using Kistl.DalProvider.NHibernate;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("Muhblah")]
    public class MuhblahNHibernateImpl : Kistl.DalProvider.NHibernate.DataObjectNHibernateImpl, Muhblah
    {
        public MuhblahNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public MuhblahNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new MuhblahProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public MuhblahNHibernateImpl(Func<IFrozenContext> lazyCtx, MuhblahProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly MuhblahProxy Proxy;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public bool? TestBool
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.TestBool;
                if (OnTestBool_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnTestBool_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.TestBool != value)
                {
                    var __oldValue = Proxy.TestBool;
                    var __newValue = value;
                    if (OnTestBool_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnTestBool_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TestBool", __oldValue, __newValue);
                    Proxy.TestBool = __newValue;
                    NotifyPropertyChanged("TestBool", __oldValue, __newValue);
                    if (OnTestBool_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnTestBool_PostSetter(this, __e);
                    }
                }
            }
        }
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Test.Muhblah, bool?> OnTestBool_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Test.Muhblah, bool?> OnTestBool_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Test.Muhblah, bool?> OnTestBool_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // object list property

        // Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Kistl.App.Test.TestCustomObject> TestCustomObjects_List_Nav
        {
            get
            {
                if (_TestCustomObjects_List_Nav == null)
                {
                    _TestCustomObjects_List_Nav = new OneNRelationList<Kistl.App.Test.TestCustomObject>(
                        "MubBlah_Nav",
                        null,
                        this,
                        () => this.NotifyPropertyChanging("TestCustomObjects_List_Nav", null, null),
                        () => { this.NotifyPropertyChanged("TestCustomObjects_List_Nav", null, null); if(OnTestCustomObjects_List_Nav_PostSetter != null && IsAttached) OnTestCustomObjects_List_Nav_PostSetter(this); },
                        new ProjectedCollection<Kistl.App.Test.TestCustomObjectNHibernateImpl.TestCustomObjectProxy, Kistl.App.Test.TestCustomObject>(
                            Proxy.TestCustomObjects_List_Nav,
                            p => (Kistl.App.Test.TestCustomObject)OurContext.AttachAndWrap(p),
                            d => (Kistl.App.Test.TestCustomObjectNHibernateImpl.TestCustomObjectProxy)((NHibernatePersistenceObject)d).NHibernateProxy));
                }
                return _TestCustomObjects_List_Nav;
            }
        }
    
        private OneNRelationList<Kistl.App.Test.TestCustomObject> _TestCustomObjects_List_Nav;
public static event PropertyListChangedHandler<Kistl.App.Test.Muhblah> OnTestCustomObjects_List_Nav_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // collection entry list property
   		// Kistl.DalProvider.NHibernate.Generator.Templates.Properties.CollectionEntryListProperty
		public ICollection<Kistl.App.Test.TestCustomObject> TestCustomObjects_ManyList_Nav
		{
			get
			{
				if (_TestCustomObjects_ManyList_Nav == null)
				{
					_TestCustomObjects_ManyList_Nav 
						= new NHibernateBSideCollectionWrapper<Kistl.App.Test.Muhblah, Kistl.App.Test.TestCustomObject, Muhblah_has_TestCustomObject_RelationEntryNHibernateImpl>(
							this, 
							new ProjectedCollection<Muhblah_has_TestCustomObject_RelationEntryNHibernateImpl.Muhblah_has_TestCustomObject_RelationEntryProxy, Muhblah_has_TestCustomObject_RelationEntryNHibernateImpl>(
                                this.Proxy.TestCustomObjects_ManyList_Nav,
                                p => (Muhblah_has_TestCustomObject_RelationEntryNHibernateImpl)OurContext.AttachAndWrap(p),
                                ce => (Muhblah_has_TestCustomObject_RelationEntryNHibernateImpl.Muhblah_has_TestCustomObject_RelationEntryProxy)((NHibernatePersistenceObject)ce).NHibernateProxy),
                            entry => (IRelationListSync<Muhblah_has_TestCustomObject_RelationEntryNHibernateImpl>)entry.B.MuhBlah_ManyList_Nav);
                    if (TestCustomObjects_ManyList_Nav_was_eagerLoaded) { TestCustomObjects_ManyList_Nav_was_eagerLoaded = false; }
				}
				return (ICollection<Kistl.App.Test.TestCustomObject>)_TestCustomObjects_ManyList_Nav;
			}
		}

		private NHibernateBSideCollectionWrapper<Kistl.App.Test.Muhblah, Kistl.App.Test.TestCustomObject, Muhblah_has_TestCustomObject_RelationEntryNHibernateImpl> _TestCustomObjects_ManyList_Nav;
		// ignored, but required for Serialization
        private bool TestCustomObjects_ManyList_Nav_was_eagerLoaded = false;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for TestCustomObjects_Nav
        // fkBackingName=this.Proxy.TestCustomObjects_Nav; fkGuidBackingName=_fk_guid_TestCustomObjects_Nav;
        // referencedInterface=Kistl.App.Test.TestCustomObject; moduleNamespace=Kistl.App.Test;
        // inverse Navigator=MubBlah_List_Nav; is list;
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.TestCustomObject TestCustomObjects_Nav
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Test.TestCustomObjectNHibernateImpl __value = (Kistl.App.Test.TestCustomObjectNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.TestCustomObjects_Nav);

                if (OnTestCustomObjects_Nav_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Test.TestCustomObject>(__value);
                    OnTestCustomObjects_Nav_Getter(this, e);
                    __value = (Kistl.App.Test.TestCustomObjectNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.TestCustomObjects_Nav == null)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.Test.TestCustomObjectNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.TestCustomObjects_Nav);
                var __newValue = (Kistl.App.Test.TestCustomObjectNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                    return;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("TestCustomObjects_Nav", __oldValue, __newValue);

                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("MubBlah_List_Nav", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("MubBlah_List_Nav", null, null);
                }

                if (OnTestCustomObjects_Nav_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Test.TestCustomObject>(__oldValue, __newValue);
                    OnTestCustomObjects_Nav_PreSetter(this, e);
                    __newValue = (Kistl.App.Test.TestCustomObjectNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.TestCustomObjects_Nav = null;
                }
                else
                {
                    this.Proxy.TestCustomObjects_Nav = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.MubBlah_List_Nav as IRelationListSync<Kistl.App.Test.Muhblah>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.MubBlah_List_Nav as IRelationListSync<Kistl.App.Test.Muhblah>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("TestCustomObjects_Nav", __oldValue, __newValue);

                if (OnTestCustomObjects_Nav_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Test.TestCustomObject>(__oldValue, __newValue);
                    OnTestCustomObjects_Nav_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for TestCustomObjects_Nav's id, used on dehydration only</summary>
        private int? _fk_TestCustomObjects_Nav = null;


        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for TestCustomObjects_Nav
		public static event PropertyGetterHandler<Kistl.App.Test.Muhblah, Kistl.App.Test.TestCustomObject> OnTestCustomObjects_Nav_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Test.Muhblah, Kistl.App.Test.TestCustomObject> OnTestCustomObjects_Nav_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Test.Muhblah, Kistl.App.Test.TestCustomObject> OnTestCustomObjects_Nav_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for TestCustomObjects_One_Nav
        // fkBackingName=this.Proxy.TestCustomObjects_One_Nav; fkGuidBackingName=_fk_guid_TestCustomObjects_One_Nav;
        // referencedInterface=Kistl.App.Test.TestCustomObject; moduleNamespace=Kistl.App.Test;
        // inverse Navigator=MuhBlah_One_Nav; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Test.TestCustomObject TestCustomObjects_One_Nav
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Test.TestCustomObjectNHibernateImpl __value = (Kistl.App.Test.TestCustomObjectNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.TestCustomObjects_One_Nav);

                if (OnTestCustomObjects_One_Nav_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Test.TestCustomObject>(__value);
                    OnTestCustomObjects_One_Nav_Getter(this, e);
                    __value = (Kistl.App.Test.TestCustomObjectNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.TestCustomObjects_One_Nav == null)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.Test.TestCustomObjectNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.TestCustomObjects_One_Nav);
                var __newValue = (Kistl.App.Test.TestCustomObjectNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                    return;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("TestCustomObjects_One_Nav", __oldValue, __newValue);

                if (OnTestCustomObjects_One_Nav_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Test.TestCustomObject>(__oldValue, __newValue);
                    OnTestCustomObjects_One_Nav_PreSetter(this, e);
                    __newValue = (Kistl.App.Test.TestCustomObjectNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.TestCustomObjects_One_Nav = null;
                }
                else
                {
                    this.Proxy.TestCustomObjects_One_Nav = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // unset old reference
                    __oldValue.MuhBlah_One_Nav = null;
                }

                if (__newValue != null)
                {
                    // set new reference
                    __newValue.MuhBlah_One_Nav = this;
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("TestCustomObjects_One_Nav", __oldValue, __newValue);

                if (OnTestCustomObjects_One_Nav_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Test.TestCustomObject>(__oldValue, __newValue);
                    OnTestCustomObjects_One_Nav_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for TestCustomObjects_One_Nav's id, used on dehydration only</summary>
        private int? _fk_TestCustomObjects_One_Nav = null;


        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for TestCustomObjects_One_Nav
		public static event PropertyGetterHandler<Kistl.App.Test.Muhblah, Kistl.App.Test.TestCustomObject> OnTestCustomObjects_One_Nav_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Test.Muhblah, Kistl.App.Test.TestCustomObject> OnTestCustomObjects_One_Nav_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Test.Muhblah, Kistl.App.Test.TestCustomObject> OnTestCustomObjects_One_Nav_PostSetter;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime? TestDateTime
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(DateTime?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.TestDateTime;
                if (OnTestDateTime_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnTestDateTime_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.TestDateTime != value)
                {
                    var __oldValue = Proxy.TestDateTime;
                    var __newValue = value;
                    if (OnTestDateTime_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnTestDateTime_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TestDateTime", __oldValue, __newValue);
                    Proxy.TestDateTime = __newValue;
                    NotifyPropertyChanged("TestDateTime", __oldValue, __newValue);
                    if (OnTestDateTime_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnTestDateTime_PostSetter(this, __e);
                    }
                }
            }
        }
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Test.Muhblah, DateTime?> OnTestDateTime_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Test.Muhblah, DateTime?> OnTestDateTime_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Test.Muhblah, DateTime?> OnTestDateTime_PostSetter;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public Kistl.App.Test.TestEnum TestEnum
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Kistl.App.Test.TestEnum);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.TestEnum;
                if (OnTestEnum_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Kistl.App.Test.TestEnum>(__result);
                    OnTestEnum_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.TestEnum != value)
                {
                    var __oldValue = Proxy.TestEnum;
                    var __newValue = value;
                    if (OnTestEnum_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Kistl.App.Test.TestEnum>(__oldValue, __newValue);
                        OnTestEnum_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TestEnum", __oldValue, __newValue);
                    Proxy.TestEnum = __newValue;
                    NotifyPropertyChanged("TestEnum", __oldValue, __newValue);
                    if (OnTestEnum_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Kistl.App.Test.TestEnum>(__oldValue, __newValue);
                        OnTestEnum_PostSetter(this, __e);
                    }
                }
            }
        }
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Test.Muhblah, Kistl.App.Test.TestEnum> OnTestEnum_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Test.Muhblah, Kistl.App.Test.TestEnum> OnTestEnum_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Test.Muhblah, Kistl.App.Test.TestEnum> OnTestEnum_PostSetter;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string TestString
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.TestString;
                if (OnTestString_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnTestString_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.TestString != value)
                {
                    var __oldValue = Proxy.TestString;
                    var __newValue = value;
                    if (OnTestString_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnTestString_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TestString", __oldValue, __newValue);
                    Proxy.TestString = __newValue;
                    NotifyPropertyChanged("TestString", __oldValue, __newValue);
                    if (OnTestString_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnTestString_PostSetter(this, __e);
                    }
                }
            }
        }
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Test.Muhblah, string> OnTestString_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Test.Muhblah, string> OnTestString_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Test.Muhblah, string> OnTestString_PostSetter;

        public override Type GetImplementedInterface()
        {
            return typeof(Muhblah);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Muhblah)obj;
            var otherImpl = (MuhblahNHibernateImpl)obj;
            var me = (Muhblah)this;

            me.TestBool = other.TestBool;
            me.TestDateTime = other.TestDateTime;
            me.TestEnum = other.TestEnum;
            me.TestString = other.TestString;
            this._fk_TestCustomObjects_Nav = otherImpl._fk_TestCustomObjects_Nav;
            this._fk_TestCustomObjects_One_Nav = otherImpl._fk_TestCustomObjects_One_Nav;
        }

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
            var nhCtx = (NHibernateContext)ctx;
        }

        public override void UpdateParent(string propertyName, int? id)
        {
            switch(propertyName)
            {
                case "TestCustomObjects_Nav":
                    {
                        var __oldValue = (Kistl.App.Test.TestCustomObjectNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.TestCustomObjects_Nav);
                        var __newValue = (Kistl.App.Test.TestCustomObjectNHibernateImpl)(id == null ? null : OurContext.Find<Kistl.App.Test.TestCustomObject>(id.Value));
                        NotifyPropertyChanging("TestCustomObjects_Nav", __oldValue, __newValue);
                        this.Proxy.TestCustomObjects_Nav = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("TestCustomObjects_Nav", __oldValue, __newValue);
                    }
                    break;
                case "TestCustomObjects_One_Nav":
                    {
                        var __oldValue = (Kistl.App.Test.TestCustomObjectNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.TestCustomObjects_One_Nav);
                        var __newValue = (Kistl.App.Test.TestCustomObjectNHibernateImpl)(id == null ? null : OurContext.Find<Kistl.App.Test.TestCustomObject>(id.Value));
                        NotifyPropertyChanging("TestCustomObjects_One_Nav", __oldValue, __newValue);
                        this.Proxy.TestCustomObjects_One_Nav = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("TestCustomObjects_One_Nav", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, id);
                    break;
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_TestCustomObjects_Nav.HasValue)
                this.Proxy.TestCustomObjects_Nav = ((Kistl.App.Test.TestCustomObjectNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Test.TestCustomObject>(_fk_TestCustomObjects_Nav.Value)).Proxy;
            else
                this.Proxy.TestCustomObjects_Nav = null;

            if (_fk_TestCustomObjects_One_Nav.HasValue)
                this.Proxy.TestCustomObjects_One_Nav = ((Kistl.App.Test.TestCustomObjectNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Test.TestCustomObject>(_fk_TestCustomObjects_One_Nav.Value)).Proxy;
            else
                this.Proxy.TestCustomObjects_One_Nav = null;
        }
        #region Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorNHibernateImpl<MuhblahNHibernateImpl, bool?>(
                        lazyCtx,
                        new Guid("9206e71e-85ea-4d74-85ea-59ee2484ed2a"),
                        "TestBool",
                        null,
                        obj => obj.TestBool,
                        (obj, val) => obj.TestBool = val),
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<MuhblahNHibernateImpl, ICollection<Kistl.App.Test.TestCustomObject>>(
                        lazyCtx,
                        new Guid("1f944324-673f-4f14-94c8-dc570ea3022d"),
                        "TestCustomObjects_List_Nav",
                        null,
                        obj => obj.TestCustomObjects_List_Nav,
                        null), // lists are read-only properties
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<MuhblahNHibernateImpl, ICollection<Kistl.App.Test.TestCustomObject>>(
                        lazyCtx,
                        new Guid("a3ad7340-4dc1-488c-bc9a-29ac931b1f0d"),
                        "TestCustomObjects_ManyList_Nav",
                        null,
                        obj => obj.TestCustomObjects_ManyList_Nav,
                        null), // lists are read-only properties
                    // else
                    new PropertyDescriptorNHibernateImpl<MuhblahNHibernateImpl, Kistl.App.Test.TestCustomObject>(
                        lazyCtx,
                        new Guid("aabd7cb7-c45e-43c9-97fd-76e50c310ab3"),
                        "TestCustomObjects_Nav",
                        null,
                        obj => obj.TestCustomObjects_Nav,
                        (obj, val) => obj.TestCustomObjects_Nav = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<MuhblahNHibernateImpl, Kistl.App.Test.TestCustomObject>(
                        lazyCtx,
                        new Guid("42c6bc2f-0428-488a-b928-539c4c6e3e65"),
                        "TestCustomObjects_One_Nav",
                        null,
                        obj => obj.TestCustomObjects_One_Nav,
                        (obj, val) => obj.TestCustomObjects_One_Nav = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<MuhblahNHibernateImpl, DateTime?>(
                        lazyCtx,
                        new Guid("c5a66e0b-1fdb-45e4-b9e4-2ae4ee35a201"),
                        "TestDateTime",
                        null,
                        obj => obj.TestDateTime,
                        (obj, val) => obj.TestDateTime = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<MuhblahNHibernateImpl, Kistl.App.Test.TestEnum>(
                        lazyCtx,
                        new Guid("1a5484e4-4be0-4641-9c25-1aa30d1c0e7a"),
                        "TestEnum",
                        null,
                        obj => obj.TestEnum,
                        (obj, val) => obj.TestEnum = val),
                    // else
                    new PropertyDescriptorNHibernateImpl<MuhblahNHibernateImpl, string>(
                        lazyCtx,
                        new Guid("e9516350-fa66-426b-808a-bd8a5f432427"),
                        "TestString",
                        null,
                        obj => obj.TestString,
                        (obj, val) => obj.TestString = val),
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Kistl.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Muhblah")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Muhblah != null)
            {
                OnToString_Muhblah(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Muhblah> OnToString_Muhblah;

        [EventBasedMethod("OnPreSave_Muhblah")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnPreSave_Muhblah != null) OnPreSave_Muhblah(this);
        }
        public static event ObjectEventHandler<Muhblah> OnPreSave_Muhblah;

        [EventBasedMethod("OnPostSave_Muhblah")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnPostSave_Muhblah != null) OnPostSave_Muhblah(this);
        }
        public static event ObjectEventHandler<Muhblah> OnPostSave_Muhblah;

        [EventBasedMethod("OnCreated_Muhblah")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnCreated_Muhblah != null) OnCreated_Muhblah(this);
        }
        public static event ObjectEventHandler<Muhblah> OnCreated_Muhblah;

        [EventBasedMethod("OnDeleting_Muhblah")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnDeleting_Muhblah != null) OnDeleting_Muhblah(this);
        }
        public static event ObjectEventHandler<Muhblah> OnDeleting_Muhblah;

        #endregion // Kistl.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods
        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow MB_Lst_Role_hasOther_TCO_Role
            if (this.TestCustomObjects_Nav != null && this.TestCustomObjects_Nav.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.TestCustomObjects_Nav);

            // Follow MB_One_Role_loves_TCO_One_Role
            if (this.TestCustomObjects_One_Nav != null && this.TestCustomObjects_One_Nav.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.TestCustomObjects_One_Nav);

            return result;
        }

        public override List<NHibernatePersistenceObject> GetChildrenToDelete()
        {
            var result = base.GetChildrenToDelete();

            // Follow MB_Role_has_TCO_Lst_Role
            result.AddRange(Context.AttachedObjects
                .OfType<Kistl.App.Test.TestCustomObject>()
                .Where(child => child.MubBlah_Nav == this
                    && child.ObjectState == DataObjectState.Deleted)
                .Cast<NHibernatePersistenceObject>());

            return result;
        }


        public class MuhblahProxy
            : IProxyObject, ISortKey<int>
        {
            public MuhblahProxy()
            {
                TestCustomObjects_List_Nav = new Collection<Kistl.App.Test.TestCustomObjectNHibernateImpl.TestCustomObjectProxy>();
                TestCustomObjects_ManyList_Nav = new Collection<Kistl.App.Test.Muhblah_has_TestCustomObject_RelationEntryNHibernateImpl.Muhblah_has_TestCustomObject_RelationEntryProxy>();
            }

            public virtual int ID { get; set; }

            public virtual Type ZBoxWrapper { get { return typeof(MuhblahNHibernateImpl); } }
            public virtual Type ZBoxProxy { get { return typeof(MuhblahProxy); } }

            public virtual bool? TestBool { get; set; }

            public virtual ICollection<Kistl.App.Test.TestCustomObjectNHibernateImpl.TestCustomObjectProxy> TestCustomObjects_List_Nav { get; set; }

            public virtual ICollection<Kistl.App.Test.Muhblah_has_TestCustomObject_RelationEntryNHibernateImpl.Muhblah_has_TestCustomObject_RelationEntryProxy> TestCustomObjects_ManyList_Nav { get; set; }

            public virtual Kistl.App.Test.TestCustomObjectNHibernateImpl.TestCustomObjectProxy TestCustomObjects_Nav { get; set; }

            public virtual Kistl.App.Test.TestCustomObjectNHibernateImpl.TestCustomObjectProxy TestCustomObjects_One_Nav { get; set; }

            public virtual DateTime? TestDateTime { get; set; }

            public virtual Kistl.App.Test.TestEnum TestEnum { get; set; }

            public virtual string TestString { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }
        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this.Proxy.TestBool, binStream);
            BinarySerializer.ToStream(this.Proxy.TestCustomObjects_Nav != null ? this.Proxy.TestCustomObjects_Nav.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this.Proxy.TestCustomObjects_One_Nav != null ? this.Proxy.TestCustomObjects_One_Nav.ID : (int?)null, binStream);
            BinarySerializer.ToStream(this.Proxy.TestDateTime, binStream);
            BinarySerializer.ToStream((int?)Proxy.TestEnum, binStream);
            BinarySerializer.ToStream(this.Proxy.TestString, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            {
                bool? tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.TestBool = tmp;
            }
            BinarySerializer.FromStream(out this._fk_TestCustomObjects_Nav, binStream);
            BinarySerializer.FromStream(out this._fk_TestCustomObjects_One_Nav, binStream);
            {
                DateTime? tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.TestDateTime = tmp;
            }
            {
                int? baseValue;
                BinarySerializer.FromStream(out baseValue, binStream);
                Proxy.TestEnum = (Kistl.App.Test.TestEnum)baseValue;
            }
            {
                string tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.TestString = tmp;
            }
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this.Proxy.TestBool, xml, "TestBool", "Kistl.App.Test");
            XmlStreamer.ToStream(this.Proxy.TestCustomObjects_Nav != null ? this.Proxy.TestCustomObjects_Nav.ID : (int?)null, xml, "TestCustomObjects_Nav", "Kistl.App.Test");
            XmlStreamer.ToStream(this.Proxy.TestCustomObjects_One_Nav != null ? this.Proxy.TestCustomObjects_One_Nav.ID : (int?)null, xml, "TestCustomObjects_One_Nav", "Kistl.App.Test");
            XmlStreamer.ToStream(this.Proxy.TestDateTime, xml, "TestDateTime", "Kistl.App.Test");
            XmlStreamer.ToStream((int?)Proxy.TestEnum, xml, "TestEnum", "Kistl.App.Test");
            XmlStreamer.ToStream(this.Proxy.TestString, xml, "TestString", "Kistl.App.Test");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            {
                // yuck
                bool? tmp = this.Proxy.TestBool;
                XmlStreamer.FromStream(ref tmp, xml, "TestBool", "Kistl.App.Test");
                this.Proxy.TestBool = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_TestCustomObjects_Nav, xml, "TestCustomObjects_Nav", "Kistl.App.Test");
            XmlStreamer.FromStream(ref this._fk_TestCustomObjects_One_Nav, xml, "TestCustomObjects_One_Nav", "Kistl.App.Test");
            {
                // yuck
                DateTime? tmp = this.Proxy.TestDateTime;
                XmlStreamer.FromStream(ref tmp, xml, "TestDateTime", "Kistl.App.Test");
                this.Proxy.TestDateTime = tmp;
            }
            XmlStreamer.FromStreamConverter(v => Proxy.TestEnum = (Kistl.App.Test.TestEnum)v, xml, "TestEnum", "Kistl.App.Test");
            {
                // yuck
                string tmp = this.Proxy.TestString;
                XmlStreamer.FromStream(ref tmp, xml, "TestString", "Kistl.App.Test");
                this.Proxy.TestString = tmp;
            }
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

    }
}