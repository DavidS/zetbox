// <autogenerated/>

namespace Kistl.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Kistl.API;
    using Kistl.DalProvider.Base.RelationWrappers;

    using Kistl.API.Utils;
    using Kistl.DalProvider.Base;
    using Kistl.DalProvider.NHibernate;

    /// <summary>
    /// Provides the definition of a database sequence
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("Sequence")]
    public class SequenceNHibernateImpl : Kistl.DalProvider.NHibernate.DataObjectNHibernateImpl, Kistl.API.IExportableInternal, Sequence
    {
        private static readonly Guid _objectClassID = new Guid("8745716a-a9e7-4b2f-b7e8-948b992aaafb");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        public SequenceNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public SequenceNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new SequenceProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public SequenceNHibernateImpl(Func<IFrozenContext> lazyCtx, SequenceProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
            _isCreatedOnSet = Proxy.ID > 0;
            _isChangedOnSet = Proxy.ID > 0;
            _isExportGuidSet = Proxy.ID > 0;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly SequenceProxy Proxy;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=this.Proxy.ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity ChangedBy
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.IdentityNHibernateImpl __value = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);

                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.ChangedBy == null)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                var __newValue = (Kistl.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                    return;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.ChangedBy = null;
                }
                else
                {
                    this.Proxy.ChangedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for ChangedBy's id, used on dehydration only</summary>
        private int? _fk_ChangedBy = null;


        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Kistl.App.Base.Sequence, Kistl.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Sequence, Kistl.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Sequence, Kistl.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Sequence> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime ChangedOn
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(DateTime);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchChangedOnOrDefault();
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (Proxy.ChangedOn != value)
                {
                    var __oldValue = Proxy.ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    Proxy.ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ChangedOn");
				}
            }
        }


        private DateTime FetchChangedOnOrDefault()
        {
            var __result = Proxy.ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("848cbb55-071f-4fc7-a9ef-75d5335cf2d7"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Kistl.App.Base.Sequence.ChangedOn'");
                    }
                }
            return __result;
        }

        private bool _isChangedOnSet = false;
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Sequence, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Sequence, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Sequence, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Sequence> OnChangedOn_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=this.Proxy.CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Kistl.App.Base.Identity; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Identity CreatedBy
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.IdentityNHibernateImpl __value = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);

                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Kistl.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.CreatedBy == null)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                var __newValue = (Kistl.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                    return;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.CreatedBy = null;
                }
                else
                {
                    this.Proxy.CreatedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for CreatedBy's id, used on dehydration only</summary>
        private int? _fk_CreatedBy = null;


        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Kistl.App.Base.Sequence, Kistl.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Sequence, Kistl.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Sequence, Kistl.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Sequence> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime CreatedOn
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(DateTime);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchCreatedOnOrDefault();
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (Proxy.CreatedOn != value)
                {
                    var __oldValue = Proxy.CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    Proxy.CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("CreatedOn");
				}
            }
        }


        private DateTime FetchCreatedOnOrDefault()
        {
            var __result = Proxy.CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("542c6ac2-7e06-4b29-b2af-273863cd177b"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Kistl.App.Base.Sequence.CreatedOn'");
                    }
                }
            return __result;
        }

        private bool _isCreatedOnSet = false;
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Sequence, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Sequence, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Sequence, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Sequence> OnCreatedOn_IsValid;

        /// <summary>
        /// The current number of this Sequence. This is calculated from the Data and initialises this, if not available.
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public int? CurrentNumber
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(int?);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchCurrentNumberOrDefault();
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.CurrentNumber != value)
                {
                    var __oldValue = Proxy.CurrentNumber;
                    var __newValue = value;
                    NotifyPropertyChanging("CurrentNumber", __oldValue, __newValue);
                    Proxy.CurrentNumber = __newValue;
                    NotifyPropertyChanged("CurrentNumber", __oldValue, __newValue);
			        _CurrentNumber_IsDirty = false;

                }
				else 
				{
					SetInitializedProperty("CurrentNumber");
				}
            }
        }
		private bool _CurrentNumber_IsDirty = false;


        private int? FetchCurrentNumberOrDefault()
        {
           var __result = Proxy.CurrentNumber;
            if (_CurrentNumber_IsDirty && OnCurrentNumber_Getter != null)
            {
                var __e = new PropertyGetterEventArgs<int?>(__result);
                OnCurrentNumber_Getter(this, __e);
                _CurrentNumber_IsDirty = false;
                __result = Proxy.CurrentNumber = __e.Result;
            }
            return __result;
        }

        private bool _isCurrentNumberSet = false;
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Sequence, int?> OnCurrentNumber_Getter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Sequence> OnCurrentNumber_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Data
        // fkBackingName=this.Proxy.Data; fkGuidBackingName=_fk_guid_Data;
        // referencedInterface=Kistl.App.Base.SequenceData; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=Sequence; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.SequenceData Data
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.SequenceDataNHibernateImpl __value = (Kistl.App.Base.SequenceDataNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Data);

                if (OnData_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.SequenceData>(__value);
                    OnData_Getter(this, e);
                    __value = (Kistl.App.Base.SequenceDataNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.Data == null)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.Base.SequenceDataNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Data);
                var __newValue = (Kistl.App.Base.SequenceDataNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                    return;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Data", __oldValue, __newValue);

                if (OnData_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.SequenceData>(__oldValue, __newValue);
                    OnData_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.SequenceDataNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.Data = null;
                }
                else
                {
                    this.Proxy.Data = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // unset old reference
                    __oldValue.Sequence = null;
                }

                if (__newValue != null)
                {
                    // set new reference
                    __newValue.Sequence = this;
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("Data", __oldValue, __newValue);

                if (OnData_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.SequenceData>(__oldValue, __newValue);
                    OnData_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for Data's id, used on dehydration only</summary>
        private int? _fk_Data = null;


        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Data
		public static event PropertyGetterHandler<Kistl.App.Base.Sequence, Kistl.App.Base.SequenceData> OnData_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Sequence, Kistl.App.Base.SequenceData> OnData_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Sequence, Kistl.App.Base.SequenceData> OnData_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Sequence> OnData_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Description
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(string);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Description != value)
                {
                    var __oldValue = Proxy.Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    Proxy.Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);

                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("Description");
				}
            }
        }

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Sequence, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Sequence, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Sequence, string> OnDescription_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Sequence> OnDescription_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public Guid ExportGuid
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(Guid);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchExportGuidOrDefault();
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("ExportGuid");
				}
            }
        }


        private Guid FetchExportGuidOrDefault()
        {
            var __result = Proxy.ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Kistl.App.Base.Property>(new Guid("97795b28-a750-456b-880c-210b0564462e"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ExportGuid = (Guid)__tmp_value;
                    } else {
                        Kistl.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Kistl.App.Base.Sequence.ExportGuid'");
                    }
                }
            return __result;
        }

        private bool _isExportGuidSet = false;
        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Sequence, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Sequence, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Sequence, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Sequence> OnExportGuid_IsValid;

        /// <summary>
        /// Set to true if the sequence is guaranteed to be continous
        /// </summary>

        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public bool IsContinuous
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(bool);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.IsContinuous;
                if (OnIsContinuous_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsContinuous_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.IsContinuous != value)
                {
                    var __oldValue = Proxy.IsContinuous;
                    var __newValue = value;
                    if (OnIsContinuous_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsContinuous_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsContinuous", __oldValue, __newValue);
                    Proxy.IsContinuous = __newValue;
                    NotifyPropertyChanged("IsContinuous", __oldValue, __newValue);

                    if (OnIsContinuous_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsContinuous_PostSetter(this, __e);
                    }
                }
				else 
				{
					SetInitializedProperty("IsContinuous");
				}
            }
        }

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Kistl.App.Base.Sequence, bool> OnIsContinuous_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Sequence, bool> OnIsContinuous_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Sequence, bool> OnIsContinuous_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Sequence> OnIsContinuous_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=this.Proxy.Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Kistl.App.Base.Module; moduleNamespace=Kistl.App.Base;
        // inverse Navigator=none; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Kistl.App.Base.Module Module
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return null;
                Kistl.App.Base.ModuleNHibernateImpl __value = (Kistl.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);

                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Kistl.App.Base.Module>(__value);
                    OnModule_Getter(this, e);
                    __value = (Kistl.App.Base.ModuleNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (((IPersistenceObject)this).IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongKistlContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.Module == null)
                    return;

                // cache old value to remove inverse references later
                var __oldValue = (Kistl.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);
                var __newValue = (Kistl.App.Base.ModuleNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                    return;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Module", __oldValue, __newValue);

                if (OnModule_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Kistl.App.Base.ModuleNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.Module = null;
                }
                else
                {
                    this.Proxy.Module = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Module", __oldValue, __newValue);

                if (OnModule_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Kistl.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for Module's id, used on dehydration only</summary>
        private int? _fk_Module = null;

        /// <summary>Backing store for Module's guid, used on import only</summary>
        private Guid? _fk_guid_Module = null;

        // END Kistl.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Kistl.App.Base.Sequence, Kistl.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Kistl.App.Base.Sequence, Kistl.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Kistl.App.Base.Sequence, Kistl.App.Base.Module> OnModule_PostSetter;

        public static event PropertyIsValidHandler<Kistl.App.Base.Sequence> OnModule_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Kistl.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetName_Sequence")]
        public virtual string GetName()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetName_Sequence != null)
            {
                OnGetName_Sequence(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Sequence.GetName");
            }
            return e.Result;
        }
        public delegate void GetName_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetName_Handler<Sequence> OnGetName_Sequence;
        // BEGIN Kistl.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Sequence> OnGetName_Sequence_CanExec;

        [EventBasedMethod("OnGetName_Sequence_CanExec")]
        public virtual bool GetNameCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetName_Sequence_CanExec != null)
				{
					OnGetName_Sequence_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Sequence> OnGetName_Sequence_CanExecReason;

        [EventBasedMethod("OnGetName_Sequence_CanExecReason")]
        public virtual string GetNameCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetName_Sequence_CanExecReason != null)
				{
					OnGetName_Sequence_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Kistl.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(Sequence);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Sequence)obj;
            var otherImpl = (SequenceNHibernateImpl)obj;
            var me = (Sequence)this;

            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.IsContinuous = other.IsContinuous;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_Data = otherImpl._fk_Data;
            this._fk_Module = otherImpl._fk_Module;
        }

        public override void AttachToContext(IKistlContext ctx)
        {
            base.AttachToContext(ctx);
            var nhCtx = (NHibernateContext)ctx;
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "ChangedBy":
                    {
                        var __oldValue = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                        var __newValue = (Kistl.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        this.Proxy.ChangedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = (Kistl.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                        var __newValue = (Kistl.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        this.Proxy.CreatedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                case "Module":
                    {
                        var __oldValue = (Kistl.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);
                        var __newValue = (Kistl.App.Base.ModuleNHibernateImpl)parentObj;
                        NotifyPropertyChanging("Module", __oldValue, __newValue);
                        this.Proxy.Module = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("Module", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Kistl.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "Data":
                case "Description":
                case "ExportGuid":
                case "IsContinuous":
                case "Module":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        public override void Recalculate(string property)
        {
            switch (property)
            {
                case "CurrentNumber":
                    _CurrentNumber_IsDirty = true;
                    NotifyPropertyChanged(property, null, null);
                    return;
            }

            base.Recalculate(property);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.OnPropertyChange

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                this.ChangedBy = ((Kistl.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.Identity>(_fk_ChangedBy.Value));
            else
                this.ChangedBy = null;

            if (_fk_CreatedBy.HasValue)
                this.CreatedBy = ((Kistl.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.Identity>(_fk_CreatedBy.Value));
            else
                this.CreatedBy = null;

            if (_fk_Data.HasValue)
                this.Data = ((Kistl.App.Base.SequenceDataNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.SequenceData>(_fk_Data.Value));
            else
                this.Data = null;

            if (_fk_guid_Module.HasValue)
                this.Module = ((Kistl.App.Base.ModuleNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.Module>(_fk_guid_Module.Value));
            else
            if (_fk_Module.HasValue)
                this.Module = ((Kistl.App.Base.ModuleNHibernateImpl)OurContext.FindPersistenceObject<Kistl.App.Base.Module>(_fk_Module.Value));
            else
                this.Module = null;
        }
        #region Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorNHibernateImpl<Sequence, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("77650ba6-bbbf-468b-9f8d-78ecd3fb0082"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Sequence, DateTime>(
                        lazyCtx,
                        new Guid("848cbb55-071f-4fc7-a9ef-75d5335cf2d7"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Sequence, Kistl.App.Base.Identity>(
                        lazyCtx,
                        new Guid("25398df8-0005-4143-bc94-2c363d18ba40"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Sequence, DateTime>(
                        lazyCtx,
                        new Guid("542c6ac2-7e06-4b29-b2af-273863cd177b"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Sequence, int?>(
                        lazyCtx,
                        new Guid("62988bcd-bf1d-441f-95a1-3b9d58e08ad3"),
                        "CurrentNumber",
                        null,
                        obj => obj.CurrentNumber,
                        null, // calculated property
						obj => OnCurrentNumber_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Sequence, Kistl.App.Base.SequenceData>(
                        lazyCtx,
                        new Guid("70836ae1-4b54-45e2-a0c6-d1a39c480631"),
                        "Data",
                        null,
                        obj => obj.Data,
                        (obj, val) => obj.Data = val,
						obj => OnData_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Sequence, string>(
                        lazyCtx,
                        new Guid("1ddfb0a8-182c-417a-aa58-88a0d6ba091c"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val,
						obj => OnDescription_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Sequence, Guid>(
                        lazyCtx,
                        new Guid("97795b28-a750-456b-880c-210b0564462e"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Sequence, bool>(
                        lazyCtx,
                        new Guid("013ee98f-1e4e-4d80-a7c1-b75d10c61cff"),
                        "IsContinuous",
                        null,
                        obj => obj.IsContinuous,
                        (obj, val) => obj.IsContinuous = val,
						obj => OnIsContinuous_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Sequence, Kistl.App.Base.Module>(
                        lazyCtx,
                        new Guid("8ddc8653-3535-4f35-b9ab-6adb05894649"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val,
						obj => OnModule_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Kistl.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Kistl.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Sequence")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Sequence != null)
            {
                OnToString_Sequence(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Sequence> OnToString_Sequence;

		[System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_Sequence")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
			var b = base.ObjectIsValid();
            e.IsValid = b.IsValid;
			e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_Sequence != null)
            {
                OnObjectIsValid_Sequence(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<Sequence> OnObjectIsValid_Sequence;

        [EventBasedMethod("OnNotifyPreSave_Sequence")]
        public override void NotifyPreSave()
        {
            FetchCreatedOnOrDefault();
            FetchChangedOnOrDefault();
            FetchExportGuidOrDefault();
            FetchCurrentNumberOrDefault();
            base.NotifyPreSave();
            if (OnNotifyPreSave_Sequence != null) OnNotifyPreSave_Sequence(this);
        }
        public static event ObjectEventHandler<Sequence> OnNotifyPreSave_Sequence;

        [EventBasedMethod("OnNotifyPostSave_Sequence")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_Sequence != null) OnNotifyPostSave_Sequence(this);
        }
        public static event ObjectEventHandler<Sequence> OnNotifyPostSave_Sequence;

        [EventBasedMethod("OnNotifyCreated_Sequence")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("CurrentNumber");
            SetNotInitializedProperty("Data");
            SetNotInitializedProperty("Description");
            SetNotInitializedProperty("IsContinuous");
            SetNotInitializedProperty("Module");
            _CurrentNumber_IsDirty = true;
            base.NotifyCreated();
            if (OnNotifyCreated_Sequence != null) OnNotifyCreated_Sequence(this);
        }
        public static event ObjectEventHandler<Sequence> OnNotifyCreated_Sequence;

        [EventBasedMethod("OnNotifyDeleting_Sequence")]
        public override void NotifyDeleting()
        {
            ChangedBy = null;
            CreatedBy = null;
            Data = null;
            base.NotifyDeleting();
            if (OnNotifyDeleting_Sequence != null) OnNotifyDeleting_Sequence(this);
        }
        public static event ObjectEventHandler<Sequence> OnNotifyDeleting_Sequence;

        #endregion // Kistl.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods
        public override List<NHibernatePersistenceObject> GetParentsToDelete()
        {
            var result = base.GetParentsToDelete();

            // Follow Sequence_has_Module
            if (this.Module != null && this.Module.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.Module);

            // Follow Sequence_was_ChangedBy
            if (this.ChangedBy != null && this.ChangedBy.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.ChangedBy);

            // Follow Sequence_was_CreatedBy
            if (this.CreatedBy != null && this.CreatedBy.ObjectState == DataObjectState.Deleted)
                result.Add((NHibernatePersistenceObject)this.CreatedBy);

            return result;
        }

        public override List<NHibernatePersistenceObject> GetChildrenToDelete()
        {
            var result = base.GetChildrenToDelete();

            // Follow Sequence_has_Data
            result.AddRange(Context.AttachedObjects
                .OfType<Kistl.App.Base.SequenceData>()
                .Where(child => child.Sequence == this
                    && child.ObjectState == DataObjectState.Deleted)
                .Cast<NHibernatePersistenceObject>());

            return result;
        }


        public class SequenceProxy
            : IProxyObject, ISortKey<int>
        {
            public SequenceProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZBoxWrapper { get { return typeof(SequenceNHibernateImpl); } }
            public virtual Type ZBoxProxy { get { return typeof(SequenceProxy); } }

            public virtual Kistl.App.Base.IdentityNHibernateImpl.IdentityProxy ChangedBy { get; set; }

            public virtual DateTime ChangedOn { get; set; }

            public virtual Kistl.App.Base.IdentityNHibernateImpl.IdentityProxy CreatedBy { get; set; }

            public virtual DateTime CreatedOn { get; set; }

            public virtual int? CurrentNumber { get; set; }

            public virtual Kistl.App.Base.SequenceDataNHibernateImpl.SequenceDataProxy Data { get; set; }

            public virtual string Description { get; set; }

            public virtual Guid ExportGuid { get; set; }

            public virtual bool IsContinuous { get; set; }

            public virtual Kistl.App.Base.ModuleNHibernateImpl.ModuleProxy Module { get; set; }

        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }
        #region Serializer


        public override void ToStream(System.IO.BinaryWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            BinarySerializer.ToStream(this.Proxy.ChangedBy != null ? OurContext.GetIdFromProxy(this.Proxy.ChangedBy) : (int?)null, binStream);
            BinarySerializer.ToStream(this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                BinarySerializer.ToStream(this.Proxy.ChangedOn, binStream);
            }
            BinarySerializer.ToStream(this.Proxy.CreatedBy != null ? OurContext.GetIdFromProxy(this.Proxy.CreatedBy) : (int?)null, binStream);
            BinarySerializer.ToStream(this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                BinarySerializer.ToStream(this.Proxy.CreatedOn, binStream);
            }
            BinarySerializer.ToStream(this.Proxy.CurrentNumber, binStream);
            BinarySerializer.ToStream(this.Proxy.Data != null ? OurContext.GetIdFromProxy(this.Proxy.Data) : (int?)null, binStream);
            BinarySerializer.ToStream(this.Proxy.Description, binStream);
            BinarySerializer.ToStream(this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                BinarySerializer.ToStream(this.Proxy.ExportGuid, binStream);
            }
            BinarySerializer.ToStream(this.Proxy.IsContinuous, binStream);
            BinarySerializer.ToStream(this.Proxy.Module != null ? OurContext.GetIdFromProxy(this.Proxy.Module) : (int?)null, binStream);
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.IO.BinaryReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            BinarySerializer.FromStream(out this._fk_ChangedBy, binStream);
            BinarySerializer.FromStream(out this._isChangedOnSet, binStream);
            if (this._isChangedOnSet) {
                DateTime tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.ChangedOn = tmp;
            }
            BinarySerializer.FromStream(out this._fk_CreatedBy, binStream);
            BinarySerializer.FromStream(out this._isCreatedOnSet, binStream);
            if (this._isCreatedOnSet) {
                DateTime tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.CreatedOn = tmp;
            }
            {
                int? tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.CurrentNumber = tmp;
            }
            BinarySerializer.FromStream(out this._fk_Data, binStream);
            {
                string tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.Description = tmp;
            }
            BinarySerializer.FromStream(out this._isExportGuidSet, binStream);
            if (this._isExportGuidSet) {
                Guid tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.ExportGuid = tmp;
            }
            {
                bool tmp;
                BinarySerializer.FromStream(out tmp, binStream);
                this.Proxy.IsContinuous = tmp;
            }
            BinarySerializer.FromStream(out this._fk_Module, binStream);
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void ToStream(System.Xml.XmlWriter xml)
        {
            base.ToStream(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            XmlStreamer.ToStream(this.Proxy.ChangedBy != null ? OurContext.GetIdFromProxy(this.Proxy.ChangedBy) : (int?)null, xml, "ChangedBy", "Kistl.App.Base");
            XmlStreamer.ToStream(this._isChangedOnSet, xml, "IsChangedOnSet", "Kistl.App.Base");
            if (this._isChangedOnSet) {
                XmlStreamer.ToStream(this.Proxy.ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(this.Proxy.CreatedBy != null ? OurContext.GetIdFromProxy(this.Proxy.CreatedBy) : (int?)null, xml, "CreatedBy", "Kistl.App.Base");
            XmlStreamer.ToStream(this._isCreatedOnSet, xml, "IsCreatedOnSet", "Kistl.App.Base");
            if (this._isCreatedOnSet) {
                XmlStreamer.ToStream(this.Proxy.CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(this.Proxy.CurrentNumber, xml, "CurrentNumber", "Kistl.App.Base");
            XmlStreamer.ToStream(this.Proxy.Data != null ? OurContext.GetIdFromProxy(this.Proxy.Data) : (int?)null, xml, "Data", "Kistl.App.Base");
            XmlStreamer.ToStream(this.Proxy.Description, xml, "Description", "Kistl.App.Base");
            XmlStreamer.ToStream(this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.Base");
            if (this._isExportGuidSet) {
                XmlStreamer.ToStream(this.Proxy.ExportGuid, xml, "ExportGuid", "Kistl.App.Base");
            }
            XmlStreamer.ToStream(this.Proxy.IsContinuous, xml, "IsContinuous", "Kistl.App.Base");
            XmlStreamer.ToStream(this.Proxy.Module != null ? OurContext.GetIdFromProxy(this.Proxy.Module) : (int?)null, xml, "Module", "Kistl.App.Base");
        }

        public override IEnumerable<IPersistenceObject> FromStream(System.Xml.XmlReader xml)
        {
            var baseResult = base.FromStream(xml);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Kistl.API.AccessRights.None) {
            XmlStreamer.FromStream(ref this._fk_ChangedBy, xml, "ChangedBy", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._isChangedOnSet, xml, "IsChangedOnSet", "Kistl.App.Base");
            if (this._isChangedOnSet) {
                // yuck
                DateTime tmp = this.Proxy.ChangedOn;
                XmlStreamer.FromStream(ref tmp, xml, "ChangedOn", "Kistl.App.Base");
                this.Proxy.ChangedOn = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_CreatedBy, xml, "CreatedBy", "Kistl.App.Base");
            XmlStreamer.FromStream(ref this._isCreatedOnSet, xml, "IsCreatedOnSet", "Kistl.App.Base");
            if (this._isCreatedOnSet) {
                // yuck
                DateTime tmp = this.Proxy.CreatedOn;
                XmlStreamer.FromStream(ref tmp, xml, "CreatedOn", "Kistl.App.Base");
                this.Proxy.CreatedOn = tmp;
            }
            {
                // yuck
                int? tmp = this.Proxy.CurrentNumber;
                XmlStreamer.FromStream(ref tmp, xml, "CurrentNumber", "Kistl.App.Base");
                this.Proxy.CurrentNumber = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_Data, xml, "Data", "Kistl.App.Base");
            {
                // yuck
                string tmp = this.Proxy.Description;
                XmlStreamer.FromStream(ref tmp, xml, "Description", "Kistl.App.Base");
                this.Proxy.Description = tmp;
            }
            XmlStreamer.FromStream(ref this._isExportGuidSet, xml, "IsExportGuidSet", "Kistl.App.Base");
            if (this._isExportGuidSet) {
                // yuck
                Guid tmp = this.Proxy.ExportGuid;
                XmlStreamer.FromStream(ref tmp, xml, "ExportGuid", "Kistl.App.Base");
                this.Proxy.ExportGuid = tmp;
            }
            {
                // yuck
                bool tmp = this.Proxy.IsContinuous;
                XmlStreamer.FromStream(ref tmp, xml, "IsContinuous", "Kistl.App.Base");
                this.Proxy.IsContinuous = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_Module, xml, "Module", "Kistl.App.Base");
            } // if (CurrentAccessRights != Kistl.API.AccessRights.None)
			return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            System.Diagnostics.Debug.Assert(this._isChangedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this.Proxy.ChangedOn, xml, "ChangedOn", "Kistl.App.Base");
            System.Diagnostics.Debug.Assert(this._isCreatedOnSet, "Exported objects need to have all default values evaluated");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this.Proxy.CreatedOn, xml, "CreatedOn", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this.Proxy.CurrentNumber, xml, "CurrentNumber", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this.Proxy.Description, xml, "Description", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this.Proxy.IsContinuous, xml, "IsContinuous", "Kistl.App.Base");
            if (modules.Contains("*") || modules.Contains("Kistl.App.Base")) XmlStreamer.ToStream(this.Proxy.Module != null ? this.Proxy.Module.ExportGuid : (Guid?)null, xml, "Module", "Kistl.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            // Import must have default value set
            {
                // yuck
                DateTime tmp = this.Proxy.ChangedOn;
                XmlStreamer.FromStream(ref tmp, xml, "ChangedOn", "Kistl.App.Base");
                this.Proxy.ChangedOn = tmp;
                this._isChangedOnSet = true;
            }
            // Import must have default value set
            {
                // yuck
                DateTime tmp = this.Proxy.CreatedOn;
                XmlStreamer.FromStream(ref tmp, xml, "CreatedOn", "Kistl.App.Base");
                this.Proxy.CreatedOn = tmp;
                this._isCreatedOnSet = true;
            }
            {
                // yuck
                int? tmp = this.Proxy.CurrentNumber;
                XmlStreamer.FromStream(ref tmp, xml, "CurrentNumber", "Kistl.App.Base");
                this.Proxy.CurrentNumber = tmp;
            }
            {
                // yuck
                string tmp = this.Proxy.Description;
                XmlStreamer.FromStream(ref tmp, xml, "Description", "Kistl.App.Base");
                this.Proxy.Description = tmp;
            }
            // Import must have default value set
            {
                // yuck
                Guid tmp = this.Proxy.ExportGuid;
                XmlStreamer.FromStream(ref tmp, xml, "ExportGuid", "Kistl.App.Base");
                this.Proxy.ExportGuid = tmp;
                this._isExportGuidSet = true;
            }
            {
                // yuck
                bool tmp = this.Proxy.IsContinuous;
                XmlStreamer.FromStream(ref tmp, xml, "IsContinuous", "Kistl.App.Base");
                this.Proxy.IsContinuous = tmp;
            }
            XmlStreamer.FromStream(ref this._fk_guid_Module, xml, "Module", "Kistl.App.Base");
        }

        #endregion

    }
}