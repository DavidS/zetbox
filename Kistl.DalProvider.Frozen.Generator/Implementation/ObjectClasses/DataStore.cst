<%@ CodeTemplate Language="C#" 
	Name="Implementation.ObjectClasses.DataStore"
	ClassName="Kistl.DalProvider.Frozen.Generator.Implementation.ObjectClasses.DataStore" 
	Inherits="Kistl.Server.Generators.KistlCodeTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Kistl.API" %>
<%@ Import Namespace="Kistl.App.Base" %>
<%@ Import Namespace="Kistl.App.Extensions" %>
<%@ Import Namespace="Kistl.Server.Generators.Extensions" %>
<%@ Parameter Name="ctx" Type="Kistl.API.IKistlContext" %>
<%@ Parameter Name="cls" Type="ObjectClass" %>
<%
	IEnumerable<IDataObject> instanceList = null;
	
	InterfaceType t;
	try
	{
		t = cls.GetDescribedInterfaceType();
		if(FreezingGenerator.FrozenInstances.ContainsKey(t.Type))
		{
			instanceList = FreezingGenerator.FrozenInstances[t.Type].OrderBy(o => o.ID);
		}
		else
		{
			instanceList = new List<IDataObject>();
		}
	}
	catch(TypeLoadException ex)
	{
		// presumably the type was new and thus unknown, ignore the error for now.
		Logging.Log.Warn(String.Format("TypeLoadException for [{0}]", cls.Name), ex);
		instanceList = new List<IDataObject>();
	}
%>

		private readonly static log4net.ILog Log = log4net.LogManager.GetLogger("Kistl.Provider.Frozen");

		internal <%= cls.BaseObjectClass == null ? String.Empty : "new " %>static Dictionary<int, <%= Template.GetClassName(cls) %>> DataStore = new Dictionary<int, <%= Template.GetClassName(cls) %>>(<%= instanceList.Count() %>);
		internal <%= cls.BaseObjectClass == null ? String.Empty : "new " %>static void CreateInstances()
		{
			using (Log.DebugTraceMethodCall())
			{
<%

	string classname = Template.GetClassName(cls);
	foreach(var obj in instanceList) 
	{
		// store inherited objects also in base class' DataStore to short-circuit polymorphic queries.
		var baseCls = cls.BaseObjectClass;
		var parents = new List<ObjectClass>();
		while (baseCls != null)
		{
			parents.Add(baseCls);
			baseCls = baseCls.BaseObjectClass;
		}
		// to get "right" type order, the root class has to be the "left-most", i.e. first, assigned one
		parents.Reverse();
		foreach(var parent in parents)
		{
%>
			<%= parent.Module.Namespace %>.<%= Template.GetClassName(parent) %>.DataStore[<%= obj.ID %>] = 
<%
		}
%>
			DataStore[<%= obj.ID %>] = new <%= classname %>(<%= obj.ID %>);

<%
	}
%>
			}
		}

		private static void __FillInstance(
			<%= classname %> item
<%
		var properties = cls.GetObjectHierarchie()
			.SelectMany(baseCls => baseCls
				.Properties
				.Cast<Property>()
				.Where(p => !(p is CalculatedObjectReferenceProperty))
				.OrderBy(p => p.Name))
			.ToList();
			
		foreach(var prop in properties)
		{
%>
			, <%= prop.InterfaceTypeAsCSharp() %> <%= prop.Name %>
<%
		}
%>
		)
		{
<%
		foreach(var prop in properties)
		{
%>
			item.<%= prop.Name %> = <%= prop.Name %>;
<%
		}
%>
		}

		public <%= cls.BaseObjectClass == null ? String.Empty : "new " %>static void FillDataStore() {
			using (Log.DebugTraceMethodCall())
			{
<%
	foreach(var obj in instanceList) 
	{
%>
			{
				var item = DataStore[<%= obj.ID %>];
				<%= classname %>.__FillInstance(
					item
<%
		foreach(var prop in properties)
		{
			string value = GetPropertyValueAsCSharp(obj, prop);
%>
					, <%= String.IsNullOrEmpty(value) ? "null" : value %>
<%
		}
%>
				);
				item.Seal();
			}
<%
	}
%>
			}
		}