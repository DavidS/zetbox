// <autogenerated/>

namespace Zetbox.App.Test
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Zetbox.API.Server;
    using Zetbox.DalProvider.Ef;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="PropertyTestBaseEfImpl")]
    [System.Diagnostics.DebuggerDisplay("PropertyTestBase")]
    public abstract class PropertyTestBaseEfImpl : BaseServerDataObject_EntityFramework, PropertyTestBase
    {
        private static readonly Guid _objectClassID = new Guid("895d54f8-dc2a-4d53-a719-4d69dbb361d4");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public PropertyTestBaseEfImpl()
            : base(null)
        {
        }

        public PropertyTestBaseEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        public override Type GetImplementedInterface()
        {
            return typeof(PropertyTestBase);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (PropertyTestBase)obj;
            var otherImpl = (PropertyTestBaseEfImpl)obj;
            var me = (PropertyTestBase)this;

        }
        public override void SetNew()
        {
            base.SetNew();
        }
        #region Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        #endregion // Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_PropertyTestBase")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_PropertyTestBase != null)
            {
                OnToString_PropertyTestBase(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<PropertyTestBase> OnToString_PropertyTestBase;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_PropertyTestBase")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.IsValid = b.IsValid;
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_PropertyTestBase != null)
            {
                OnObjectIsValid_PropertyTestBase(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<PropertyTestBase> OnObjectIsValid_PropertyTestBase;

        [EventBasedMethod("OnNotifyPreSave_PropertyTestBase")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_PropertyTestBase != null) OnNotifyPreSave_PropertyTestBase(this);
        }
        public static event ObjectEventHandler<PropertyTestBase> OnNotifyPreSave_PropertyTestBase;

        [EventBasedMethod("OnNotifyPostSave_PropertyTestBase")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_PropertyTestBase != null) OnNotifyPostSave_PropertyTestBase(this);
        }
        public static event ObjectEventHandler<PropertyTestBase> OnNotifyPostSave_PropertyTestBase;

        [EventBasedMethod("OnNotifyCreated_PropertyTestBase")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnNotifyCreated_PropertyTestBase != null) OnNotifyCreated_PropertyTestBase(this);
        }
        public static event ObjectEventHandler<PropertyTestBase> OnNotifyCreated_PropertyTestBase;

        [EventBasedMethod("OnNotifyDeleting_PropertyTestBase")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_PropertyTestBase != null) OnNotifyDeleting_PropertyTestBase(this);
        }
        public static event ObjectEventHandler<PropertyTestBase> OnNotifyDeleting_PropertyTestBase;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
				else 
				{
					SetInitializedProperty("ID");
				}
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

    }
}