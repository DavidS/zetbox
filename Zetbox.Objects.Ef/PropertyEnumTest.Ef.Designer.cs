// <autogenerated/>

namespace Zetbox.App.Test
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Zetbox.API.Server;
    using Zetbox.DalProvider.Ef;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="PropertyEnumTestEfImpl")]
    [System.Diagnostics.DebuggerDisplay("PropertyEnumTest")]
    public class PropertyEnumTestEfImpl : Zetbox.App.Test.PropertyTestBaseEfImpl, PropertyEnumTest
    {
        private static readonly Guid _objectClassID = new Guid("253dfd7e-18f7-423e-bae1-ad8776b76f30");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public PropertyEnumTestEfImpl()
            : base(null)
        {
        }

        public PropertyEnumTestEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
   		// Zetbox.DalProvider.Ef.Generator.Templates.Properties.EnumerationPropertyTemplate
        // implement the user-visible interface
        public Zetbox.App.Test.TestEnum? Nullable
        {
            get
            {
				var __value = _Nullable;
				if(OnNullable_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Zetbox.App.Test.TestEnum?>(__value);
					OnNullable_Getter(this, e);
					__value = e.Result;
				}
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Nullable != value)
                {
					var __oldValue = _Nullable;
					var __newValue = value;
                    if(OnNullable_PreSetter != null)
                    {
						var e = new PropertyPreSetterEventArgs<Zetbox.App.Test.TestEnum?>(__oldValue, __newValue);
						OnNullable_PreSetter(this, e);
						__newValue = e.Result;
                    }
					
                    NotifyPropertyChanging("Nullable", __oldValue, __newValue);
                    _Nullable = value;
                    NotifyPropertyChanged("Nullable", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;
					
                    if(OnNullable_PostSetter != null)
                    {
						var e = new PropertyPostSetterEventArgs<Zetbox.App.Test.TestEnum?>(__oldValue, __newValue);
						OnNullable_PostSetter(this, e);
                    }
					
                }
            }
        }

        private Zetbox.App.Test.TestEnum? _Nullable_store;
        private Zetbox.App.Test.TestEnum? _Nullable {
            get { return _Nullable_store; }
            set {
                ReportEfPropertyChanging("NullableImpl");
                _Nullable_store = value;
                ReportEfPropertyChanged("NullableImpl");
            }
        }
					
        
        /// <summary>EF sees only this property, for Nullable</summary>
        [XmlIgnore()]
        [EdmScalarProperty()]
        public int? NullableImpl
        {
            get
            {
                return (int?)this.Nullable;
            }
            set
            {
                this.Nullable = (Zetbox.App.Test.TestEnum?)value;
            }
        }
        
		public static event PropertyGetterHandler<Zetbox.App.Test.PropertyEnumTest, Zetbox.App.Test.TestEnum?> OnNullable_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.PropertyEnumTest, Zetbox.App.Test.TestEnum?> OnNullable_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.PropertyEnumTest, Zetbox.App.Test.TestEnum?> OnNullable_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.PropertyEnumTest> OnNullable_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
   		// Zetbox.DalProvider.Ef.Generator.Templates.Properties.EnumerationPropertyTemplate
        // implement the user-visible interface
        public Zetbox.App.Test.TestEnum? NullableWithDefault
        {
            get
            {
				var __value = _NullableWithDefault;
				if(OnNullableWithDefault_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Zetbox.App.Test.TestEnum?>(__value);
					OnNullableWithDefault_Getter(this, e);
					__value = e.Result;
				}
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_NullableWithDefault != value)
                {
					var __oldValue = _NullableWithDefault;
					var __newValue = value;
                    if(OnNullableWithDefault_PreSetter != null)
                    {
						var e = new PropertyPreSetterEventArgs<Zetbox.App.Test.TestEnum?>(__oldValue, __newValue);
						OnNullableWithDefault_PreSetter(this, e);
						__newValue = e.Result;
                    }
					
                    NotifyPropertyChanging("NullableWithDefault", __oldValue, __newValue);
                    _NullableWithDefault = value;
                    NotifyPropertyChanged("NullableWithDefault", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;
					
                    if(OnNullableWithDefault_PostSetter != null)
                    {
						var e = new PropertyPostSetterEventArgs<Zetbox.App.Test.TestEnum?>(__oldValue, __newValue);
						OnNullableWithDefault_PostSetter(this, e);
                    }
					
                }
            }
        }

        private Zetbox.App.Test.TestEnum? _NullableWithDefault_store;
        private Zetbox.App.Test.TestEnum? _NullableWithDefault {
            get { return _NullableWithDefault_store; }
            set {
                ReportEfPropertyChanging("NullableWithDefaultImpl");
                _NullableWithDefault_store = value;
                ReportEfPropertyChanged("NullableWithDefaultImpl");
            }
        }
					
        
        /// <summary>EF sees only this property, for NullableWithDefault</summary>
        [XmlIgnore()]
        [EdmScalarProperty()]
        public int? NullableWithDefaultImpl
        {
            get
            {
                return (int?)this.NullableWithDefault;
            }
            set
            {
                this.NullableWithDefault = (Zetbox.App.Test.TestEnum?)value;
            }
        }
        
		public static event PropertyGetterHandler<Zetbox.App.Test.PropertyEnumTest, Zetbox.App.Test.TestEnum?> OnNullableWithDefault_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.PropertyEnumTest, Zetbox.App.Test.TestEnum?> OnNullableWithDefault_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.PropertyEnumTest, Zetbox.App.Test.TestEnum?> OnNullableWithDefault_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.PropertyEnumTest> OnNullableWithDefault_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
   		// Zetbox.DalProvider.Ef.Generator.Templates.Properties.EnumerationPropertyTemplate
        // implement the user-visible interface
        public Zetbox.App.Test.TestEnum Standard
        {
            get
            {
				var __value = _Standard;
				if(OnStandard_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Zetbox.App.Test.TestEnum>(__value);
					OnStandard_Getter(this, e);
					__value = e.Result;
				}
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Standard != value)
                {
					var __oldValue = _Standard;
					var __newValue = value;
                    if(OnStandard_PreSetter != null)
                    {
						var e = new PropertyPreSetterEventArgs<Zetbox.App.Test.TestEnum>(__oldValue, __newValue);
						OnStandard_PreSetter(this, e);
						__newValue = e.Result;
                    }
					
                    NotifyPropertyChanging("Standard", __oldValue, __newValue);
                    _Standard = value;
                    NotifyPropertyChanged("Standard", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;
					
                    if(OnStandard_PostSetter != null)
                    {
						var e = new PropertyPostSetterEventArgs<Zetbox.App.Test.TestEnum>(__oldValue, __newValue);
						OnStandard_PostSetter(this, e);
                    }
					
                }
            }
        }

        private Zetbox.App.Test.TestEnum _Standard_store;
        private Zetbox.App.Test.TestEnum _Standard {
            get { return _Standard_store; }
            set {
                ReportEfPropertyChanging("StandardImpl");
                _Standard_store = value;
                ReportEfPropertyChanged("StandardImpl");
            }
        }
					
        
        /// <summary>EF sees only this property, for Standard</summary>
        [XmlIgnore()]
        [EdmScalarProperty()]
        public int StandardImpl
        {
            get
            {
                return (int)this.Standard;
            }
            set
            {
                this.Standard = (Zetbox.App.Test.TestEnum)value;
            }
        }
        
		public static event PropertyGetterHandler<Zetbox.App.Test.PropertyEnumTest, Zetbox.App.Test.TestEnum> OnStandard_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.PropertyEnumTest, Zetbox.App.Test.TestEnum> OnStandard_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.PropertyEnumTest, Zetbox.App.Test.TestEnum> OnStandard_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.PropertyEnumTest> OnStandard_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
   		// Zetbox.DalProvider.Ef.Generator.Templates.Properties.EnumerationPropertyTemplate
        // implement the user-visible interface
        public Zetbox.App.Test.TestEnum StandardWithDefault
        {
            get
            {
				var __value = _StandardWithDefault;
				if(OnStandardWithDefault_Getter != null)
				{
					var e = new PropertyGetterEventArgs<Zetbox.App.Test.TestEnum>(__value);
					OnStandardWithDefault_Getter(this, e);
					__value = e.Result;
				}
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_StandardWithDefault != value)
                {
					var __oldValue = _StandardWithDefault;
					var __newValue = value;
                    if(OnStandardWithDefault_PreSetter != null)
                    {
						var e = new PropertyPreSetterEventArgs<Zetbox.App.Test.TestEnum>(__oldValue, __newValue);
						OnStandardWithDefault_PreSetter(this, e);
						__newValue = e.Result;
                    }
					
                    NotifyPropertyChanging("StandardWithDefault", __oldValue, __newValue);
                    _StandardWithDefault = value;
                    NotifyPropertyChanged("StandardWithDefault", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;
					
                    if(OnStandardWithDefault_PostSetter != null)
                    {
						var e = new PropertyPostSetterEventArgs<Zetbox.App.Test.TestEnum>(__oldValue, __newValue);
						OnStandardWithDefault_PostSetter(this, e);
                    }
					
                }
            }
        }

        private Zetbox.App.Test.TestEnum _StandardWithDefault_store;
        private Zetbox.App.Test.TestEnum _StandardWithDefault {
            get { return _StandardWithDefault_store; }
            set {
                ReportEfPropertyChanging("StandardWithDefaultImpl");
                _StandardWithDefault_store = value;
                ReportEfPropertyChanged("StandardWithDefaultImpl");
            }
        }
					
        
        /// <summary>EF sees only this property, for StandardWithDefault</summary>
        [XmlIgnore()]
        [EdmScalarProperty()]
        public int StandardWithDefaultImpl
        {
            get
            {
                return (int)this.StandardWithDefault;
            }
            set
            {
                this.StandardWithDefault = (Zetbox.App.Test.TestEnum)value;
            }
        }
        
		public static event PropertyGetterHandler<Zetbox.App.Test.PropertyEnumTest, Zetbox.App.Test.TestEnum> OnStandardWithDefault_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.PropertyEnumTest, Zetbox.App.Test.TestEnum> OnStandardWithDefault_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.PropertyEnumTest, Zetbox.App.Test.TestEnum> OnStandardWithDefault_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.PropertyEnumTest> OnStandardWithDefault_IsValid;

        public override Type GetImplementedInterface()
        {
            return typeof(PropertyEnumTest);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (PropertyEnumTest)obj;
            var otherImpl = (PropertyEnumTestEfImpl)obj;
            var me = (PropertyEnumTest)this;

            me.Nullable = other.Nullable;
            me.NullableWithDefault = other.NullableWithDefault;
            me.Standard = other.Standard;
            me.StandardWithDefault = other.StandardWithDefault;
        }
        public override void SetNew()
        {
            base.SetNew();
        }
        #region Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "Nullable":
                case "NullableWithDefault":
                case "Standard":
                case "StandardWithDefault":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
        #endregion // Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorEfImpl<PropertyEnumTest, Zetbox.App.Test.TestEnum?>(
                        lazyCtx,
                        new Guid("32836d4c-d488-4013-a74f-ac3c154658b8"),
                        "Nullable",
                        null,
                        obj => obj.Nullable,
                        (obj, val) => obj.Nullable = val,
						obj => OnNullable_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<PropertyEnumTest, Zetbox.App.Test.TestEnum?>(
                        lazyCtx,
                        new Guid("813bed50-e879-4a9d-8baa-677a503a1d42"),
                        "NullableWithDefault",
                        null,
                        obj => obj.NullableWithDefault,
                        (obj, val) => obj.NullableWithDefault = val,
						obj => OnNullableWithDefault_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<PropertyEnumTest, Zetbox.App.Test.TestEnum>(
                        lazyCtx,
                        new Guid("3db32732-17d8-4851-84dd-3e03cff00a95"),
                        "Standard",
                        null,
                        obj => obj.Standard,
                        (obj, val) => obj.Standard = val,
						obj => OnStandard_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<PropertyEnumTest, Zetbox.App.Test.TestEnum>(
                        lazyCtx,
                        new Guid("b2af71e1-a115-42c9-98ac-6e277afa8c24"),
                        "StandardWithDefault",
                        null,
                        obj => obj.StandardWithDefault,
                        (obj, val) => obj.StandardWithDefault = val,
						obj => OnStandardWithDefault_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_PropertyEnumTest")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_PropertyEnumTest != null)
            {
                OnToString_PropertyEnumTest(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<PropertyEnumTest> OnToString_PropertyEnumTest;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_PropertyEnumTest")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.IsValid = b.IsValid;
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_PropertyEnumTest != null)
            {
                OnObjectIsValid_PropertyEnumTest(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<PropertyEnumTest> OnObjectIsValid_PropertyEnumTest;

        [EventBasedMethod("OnNotifyPreSave_PropertyEnumTest")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_PropertyEnumTest != null) OnNotifyPreSave_PropertyEnumTest(this);
        }
        public static event ObjectEventHandler<PropertyEnumTest> OnNotifyPreSave_PropertyEnumTest;

        [EventBasedMethod("OnNotifyPostSave_PropertyEnumTest")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_PropertyEnumTest != null) OnNotifyPostSave_PropertyEnumTest(this);
        }
        public static event ObjectEventHandler<PropertyEnumTest> OnNotifyPostSave_PropertyEnumTest;

        [EventBasedMethod("OnNotifyCreated_PropertyEnumTest")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("Nullable");
            SetNotInitializedProperty("Standard");
            base.NotifyCreated();
            if (OnNotifyCreated_PropertyEnumTest != null) OnNotifyCreated_PropertyEnumTest(this);
        }
        public static event ObjectEventHandler<PropertyEnumTest> OnNotifyCreated_PropertyEnumTest;

        [EventBasedMethod("OnNotifyDeleting_PropertyEnumTest")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_PropertyEnumTest != null) OnNotifyDeleting_PropertyEnumTest(this);
        }
        public static event ObjectEventHandler<PropertyEnumTest> OnNotifyDeleting_PropertyEnumTest;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write((int?)this._Nullable);
            binStream.Write((int?)this._NullableWithDefault);
            binStream.Write((int?)this._Standard);
            binStream.Write((int?)this._StandardWithDefault);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._Nullable = (Zetbox.App.Test.TestEnum?)binStream.ReadNullableInt32();
            this._NullableWithDefault = (Zetbox.App.Test.TestEnum?)binStream.ReadNullableInt32();
            this._Standard = (Zetbox.App.Test.TestEnum)binStream.ReadNullableInt32();
            this._StandardWithDefault = (Zetbox.App.Test.TestEnum)binStream.ReadNullableInt32();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

    }
}