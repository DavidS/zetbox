<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
ï»¿<%@ CodeTemplate Language="C#" 
    Name="Properties.ProxyProperty"
    ClassName="Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty" 
    Inherits="Zetbox.Generator.MemberTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="serializationList" Type="Zetbox.Generator.Templates.Serialization.SerializationMembersList" %>
<%@ Parameter Name="moduleNamespace" Type="string" %>
<%@ Parameter Name="propertyType" Type="string" %>
<%@ Parameter Name="propertyName" Type="string" %>
<%@ Parameter Name="overrideParent" Type="bool" %>
<%@ Parameter Name="useEvents" Type="bool" %>
<%@ Parameter Name="hasDefaultValue" Type="bool" %>
<%@ Parameter Name="interfaceName" Type="string" %>
<%@ Parameter Name="className" Type="string" %>
<%@ Parameter Name="isNullable" Type="bool" %>
<%@ Parameter Name="isSetFlagName" Type="string" %>
<%@ Parameter Name="propertyGuid" Type="Guid" %>
<%@ Parameter Name="backingStoreType" Type="string" %>
<%@ Parameter Name="backingStoreName" Type="string" %>
<%@ Parameter Name="isCalculated" Type="bool" %>

        // BEGIN <%= this.GetType() %>
        <%= GetModifiers() %> <%= propertyType %> <%= propertyName %>
        {
            get
            {
                if (!CurrentAccessRights.HasReadRights()) return default(<%= propertyType %>);
                // create local variable to create single point of return
                // for the benefit of down-stream templates
<% if (hasDefaultValue || isCalculated) { %>
                var __result = Fetch<%= propertyName %>OrDefault();
<% } else { %>
                var __result = Proxy.<%= propertyName %>;
<% } %>
<% ApplyOnGetTemplate(); %>
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
<% if (!isCalculated) ApplyOnAllSetTemplate(); %>
                if (Proxy.<%= propertyName %> != value)
                {
                    var __oldValue = Proxy.<%= propertyName %>;
                    var __newValue = value;
<% if(!isCalculated) ApplyPreSetTemplate(); %>
                    NotifyPropertyChanging("<%= propertyName %>", __oldValue, __newValue);
                    Proxy.<%= propertyName %> = __newValue;
                    NotifyPropertyChanged("<%= propertyName %>", __oldValue, __newValue);
<% if (isCalculated) { %>
			        _<%= propertyName %>_IsDirty = false;
<% } %>

<% if(!isCalculated) ApplyPostSetTemplate(); %>
                }
				else 
				{
					SetInitializedProperty("<%= propertyName %>");
				}
            }
        }
<% if (isCalculated) {  
%>
		private bool _<%= propertyName %>_IsDirty = false;
<% } %>

<% ApplyTailTemplate(); %>
<% AddSerialization(serializationList, propertyName, "Proxy." + propertyName); %>
        // END <%= this.GetType() %>
