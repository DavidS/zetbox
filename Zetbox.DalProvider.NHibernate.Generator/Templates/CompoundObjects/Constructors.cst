<%@ CodeTemplate Language="C#" 
    Name="CompoundObjects.Constructors"
    ClassName="Zetbox.DalProvider.NHibernate.Generator.Templates.CompoundObjects.Constructors" 
    Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="compoundObjectProperties" Type="IEnumerable<CompoundObjectProperty>" %>
<%@ Parameter Name="interfaceName" Type="string" %>
<%@ Parameter Name="className" Type="string" %>
<%@ Parameter Name="baseClassName" Type="string" %>
        // used by NHibernate
        public <%= className %>()
            : this(null, null, null, null)
        {
        }

        // used by CreateUnattachedInstance
        public <%= className %>(Func<IFrozenContext> lazyCtx)
            : this(null, null, lazyCtx, null)
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public <%= className %>(IPersistenceObject parent, string property, Func<IFrozenContext> lazyCtx, <%= interfaceName %>Proxy proxy)
<% if (String.IsNullOrEmpty(baseClassName)) { %>
            : base(lazyCtx) // do not pass proxy to base data object
<% } else { %>
            : base(lazyCtx, proxy) // pass proxy to base nhibernate object
<% } %>
        {
            this.Proxy = proxy;
            AttachToObject(parent, property);
<% ApplyCompoundObjectPropertyInitialisers(); %>
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
<% if (String.IsNullOrEmpty(baseClassName)) { %>
        internal readonly <%= interfaceName %>Proxy Proxy;
<% } else { %>
        internal new readonly <%= interfaceName %>Proxy Proxy;
<% } %>
