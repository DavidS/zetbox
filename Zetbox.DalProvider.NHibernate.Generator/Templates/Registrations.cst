<%@ CodeTemplate Language="C#" 
    Name="Registrations"
    ClassName="Zetbox.DalProvider.NHibernate.Generator.Templates.Registrations" 
    Inherits="Zetbox.Generator.Templates.Registrations" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>

<% base.Generate(); %>

            builder
                .Register<ISessionFactory>(
                    c => {
                        var zetboxConfig = c.Resolve<ZetboxConfig>();
                        var result = new Configuration();
                        var connectionString = zetboxConfig.Server.GetConnectionString(Zetbox.API.Helper.ZetboxConnectionStringKey);
                        result.Properties["dialect"] = connectionString.DatabaseProvider;
                        result.Properties["connection.connection_string"] = connectionString.ConnectionString;
                        result.Properties["max_fetch_depth"] = "1"; // keep SQL statements small

                        return result
                            .AddAssembly(typeof(NHibernateModule).Assembly)
                            .BuildSessionFactory();
                    })
                .SingleInstance();

            builder
                .Register<ISession>(
                    (c, p) => {
                        var result = c.Resolve<ISessionFactory>().OpenSession(c.Resolve<IInterceptor>());
                        Logging.Log.DebugFormat("Created ISession: {0}", result.GetHashCode());
                        return result;
                    })
                .OnRelease(s => Logging.Log.DebugFormat("Disposed ISession: {0}", s.GetHashCode()))
                // TODO: reconsider this configuration
                //       using IPD makes it safer, but requires passing the session manually
                //       on the other hand, the session should never escape the data context
                .InstancePerDependency();
