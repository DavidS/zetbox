<%@ CodeTemplate Language="C#" 
    Name="ObjectClasses.ProxyClass"
    ClassName="Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.ProxyClass" 
    Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="className" Type="string" %>
<%@ Parameter Name="nameAndInitialiserList" Type="IEnumerable<KeyValuePair<string, string>>" %>
<%@ Parameter Name="typeAndNameList" Type="IEnumerable<KeyValuePair<string, string>>" %>

        public class <%= className %>Proxy
            : IProxyObject, ISortKey<int>
        {
            public <%= className %>Proxy()
            {
<% foreach(var p in nameAndInitialiserList) { %>
                <%= p.Key %> = <%= p.Value %>;
<% } %>
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(<%= className %><%= ImplementationSuffix %>); } }
            public virtual Type ZetboxProxy { get { return typeof(<%= className %>Proxy); } }

<% foreach(var p in typeAndNameList) { %>
            public virtual <%= p.Key %> <%= p.Value %> { get; set; }

<% } %>
        }

        // make proxy available for the provider
        public override IProxyObject NHibernateProxy { get { return Proxy; } }