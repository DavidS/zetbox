<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
ï»¿<%@ CodeTemplate Language="C#" 
    Name="TypeChecker"
    ClassName="Zetbox.DalProvider.NHibernate.Generator.Templates.TypeChecker" 
    Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="shortName" Type="string" %>

    internal sealed class <%= shortName %>ImplementationTypeChecker
        : Zetbox.API.BaseTypeChecker, I<%= shortName %>ImplementationTypeChecker
    {
        public <%= shortName %>ImplementationTypeChecker(Func<IEnumerable<IImplementationTypeChecker>> implTypeCheckersFactory)
            : base(implTypeCheckersFactory)
        {
        }

        public bool IsImplementationType(Type type)
        {
            if (type == null) { throw new ArgumentNullException("type"); }

			var myAssembly = typeof(<%= shortName %>ImplementationTypeChecker).Assembly;

            // Allow all top-level types from the generated assembly
            if (type.Assembly == myAssembly && type.DeclaringType == null)
                return true;

            // Allow all generic types which have only implementation types as arguments
            if (type.IsGenericType)
                return type.GetGenericArguments().All(t => IsImplementationType(t));

            return false;
		}
	}
