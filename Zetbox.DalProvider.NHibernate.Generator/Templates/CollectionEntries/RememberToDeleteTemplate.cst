<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#" 
    Name="CollectionEntries.RememberToDeleteTemplate"
    ClassName="Zetbox.DalProvider.NHibernate.Generator.Templates.CollectionEntries.RememberToDeleteTemplate" 
    Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="aName" Type="string" %>
<%@ Parameter Name="bName" Type="string" %>

        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
<% if (!string.IsNullOrEmpty(aName)) { %>

            // Follow <%= aName %>
            if (this.<%= aName %> != null && this.<%= aName %>.ObjectState == DataObjectState.Deleted)
            {
                ParentsToDelete.Add((NHibernatePersistenceObject)this.<%= aName %>);
                ((NHibernatePersistenceObject)this.<%= aName %>).ChildrenToDelete.Add(this);
            }
<% } %>
<% if (!string.IsNullOrEmpty(bName)) { %>

            // Follow <%= bName %>
            if (this.<%= bName %> != null && this.<%= bName %>.ObjectState == DataObjectState.Deleted)
            {
                ParentsToDelete.Add((NHibernatePersistenceObject)this.<%= bName %>);
                ((NHibernatePersistenceObject)this.<%= bName %>).ChildrenToDelete.Add(this);
            }
<% } %>
<% if (!string.IsNullOrEmpty(aName)) { %>

            // reset pointers on being deleted
            // this must happen after registering them above in ParentsToDelete/ChildrenToDelete to avoid interference from a second notification round
            this.<%= aName %> = null;
<% } %>
<% if (!string.IsNullOrEmpty(bName)) { %>
            this.<%= bName %> = null;
<% } %>
        }
