<%@ CodeTemplate Language="C#"
    Name="ObjectClasses.InvokeServerMethod"
    ClassName="Zetbox.DalProvider.Client.Generator.Templates.ObjectClasses.InvokeServerMethod"
    Inherits="Zetbox.Generator.Templates.ObjectClasses.Method" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
        // BEGIN <%= this.GetType() %>

        <%= GetModifiers() %> <%= GetReturnType() %> <%= m.Name %>(<%= GetParameterDefinitions() %>)
<%
    var returnParam = m.Parameter.SingleOrDefault(parameter => parameter.IsReturnParameter);

    string argumentDefs = m.GetArguments();
    if (!String.IsNullOrEmpty(argumentDefs))
    {
        // add leading comma for later usage
        argumentDefs = ", " + argumentDefs;
    }

    string argumentTypes = m.GetArgumentTypes();
    // add leading comma for later usage
    argumentTypes = "new Type[] {" + argumentTypes + "}";


    if (returnParam == null)
    {
%>
        {
            Context.ClientInternals().InvokeServerMethod(this, "<%= m.Name %>", typeof(<%= GetReturnType() %>), <%= argumentTypes%><%= argumentDefs %>);
        }
<%
    }
    else
    {
%>
        {
            return (<%= GetReturnType() %>)Context.ClientInternals().InvokeServerMethod(this, "<%= m.Name %>", typeof(<%= GetReturnType() %>), <%= argumentTypes %><%= argumentDefs %>);
        }
<%
    }

if(index == 0) {
	// Only for first overload
	Zetbox.Generator.Templates.ObjectClasses.MethodCanExec.Call(Host, ctx, dt, m, eventName);
}
%>
        // END <%= this.GetType() %>
